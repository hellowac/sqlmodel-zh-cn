{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SQLModel","text":"<p> SQLModel, SQL databases in Python, designed for simplicity, compatibility, and robustness. </p> <p> <p>\u6587\u6863\uff1ahttps://sqlmodel.tiangolo.com</p> <p>\u6e90\u4ee3\u7801\uff1ahttps://github.com/fastapi/sqlmodel</p> <p>SQLModel \u662f\u4e00\u4e2a\u7528\u4e8e\u4ece Python \u4ee3\u7801\u4e2d\u901a\u8fc7 Python \u5bf9\u8c61\u4e0e SQL \u6570\u636e\u5e93 \u4ea4\u4e92\u7684\u5e93\u3002\u5b83\u65e8\u5728\u76f4\u89c2\u3001\u6613\u7528\u3001\u9ad8\u5ea6\u517c\u5bb9\u4e14\u5065\u58ee\u3002</p> <p>SQLModel \u57fa\u4e8e Python \u7c7b\u578b\u6ce8\u89e3\uff0c\u7531 Pydantic \u548c SQLAlchemy \u63d0\u4f9b\u652f\u6301\u3002</p> <p>\u5176\u4e3b\u8981\u529f\u80fd\u5305\u62ec\uff1a</p> <ul> <li>\u76f4\u89c2\u6613\u5199\uff1a\u63d0\u4f9b\u6781\u4f73\u7684\u7f16\u8f91\u5668\u652f\u6301\uff0c\u4ee3\u7801\u8865\u5168\u65e0\u5904\u4e0d\u5728\u3002\u51cf\u5c11\u8c03\u8bd5\u65f6\u95f4\uff0c\u6613\u4e8e\u4f7f\u7528\u548c\u5b66\u4e60\uff0c\u65e0\u9700\u9891\u7e41\u67e5\u9605\u6587\u6863\u3002</li> <li>\u6613\u4e8e\u4f7f\u7528\uff1a\u5177\u5907\u5408\u7406\u7684\u9ed8\u8ba4\u914d\u7f6e\uff0c\u7b80\u5316\u4ee3\u7801\u7f16\u5199\u3002</li> <li>\u517c\u5bb9\u6027\u5f3a\uff1a\u4e0e FastAPI\u3001Pydantic \u548c SQLAlchemy \u5b8c\u5168\u517c\u5bb9\u3002</li> <li>\u53ef\u6269\u5c55\u6027\u5f3a\uff1a\u5e95\u5c42\u62e5\u6709 SQLAlchemy \u548c Pydantic \u7684\u5f3a\u5927\u529f\u80fd\u3002</li> <li>\u7b80\u6d01\u4ee3\u7801\uff1a\u6700\u5c0f\u5316\u4ee3\u7801\u91cd\u590d\u3002\u4e00\u4e2a\u7c7b\u578b\u6ce8\u89e3\u53ef\u4ee5\u5b8c\u6210\u5f88\u591a\u5de5\u4f5c\uff0c\u65e0\u9700\u5728 SQLAlchemy \u548c Pydantic \u4e2d\u91cd\u590d\u5b9a\u4e49\u6a21\u578b\u3002</li> </ul>"},{"location":"#_1","title":"\u8d5e\u52a9\u5546","text":""},{"location":"#fastapi-sql","title":"\u5728 FastAPI \u4e2d\u4f7f\u7528 SQL \u6570\u636e\u5e93","text":"<p>SQLModel \u65e8\u5728\u7b80\u5316\u5728 FastAPI \u5e94\u7528\u4e2d\u4e0e SQL \u6570\u636e\u5e93\u7684\u4ea4\u4e92\uff0c\u5b83\u7531\u540c\u4e00\u4f4d \u4f5c\u8005 \u521b\u5efa\u3002\ud83d\ude01</p> <p>\u5b83\u7ed3\u5408\u4e86 SQLAlchemy \u548c Pydantic\uff0c\u5c3d\u53ef\u80fd\u7b80\u5316\u4ee3\u7801\u7f16\u5199\uff0c\u51cf\u5c11 \u4ee3\u7801\u91cd\u590d\u5230\u6700\u4f4e\u9650\u5ea6\uff0c\u540c\u65f6\u63d0\u4f9b \u6700\u4f73\u7684\u5f00\u53d1\u8005\u4f53\u9a8c\u3002</p> <p>\u5b9e\u9645\u4e0a\uff0cSQLModel \u662f\u5efa\u7acb\u5728 Pydantic \u548c SQLAlchemy \u4e4b\u4e0a\u7684\u4e00\u5c42\u8f7b\u91cf\u5c01\u88c5\uff0c\u7ecf\u8fc7\u7cbe\u5fc3\u8bbe\u8ba1\uff0c\u786e\u4fdd\u4e0e\u4e24\u8005\u517c\u5bb9\u3002</p>"},{"location":"#_2","title":"\u73af\u5883\u8981\u6c42","text":"<p>\u9700\u8981\u4e00\u4e2a\u8fd1\u671f\u4e14\u4ecd\u53d7\u652f\u6301\u7684 Python \u7248\u672c\u3002</p> <p>\u7531\u4e8e SQLModel \u57fa\u4e8e Pydantic \u548c SQLAlchemy\uff0c\u56e0\u6b64\u9700\u8981\u8fd9\u4e24\u4e2a\u4f9d\u8d56\u3002\u5728\u5b89\u88c5 SQLModel \u65f6\u4f1a\u81ea\u52a8\u5b89\u88c5\u5b83\u4eec\u3002</p>"},{"location":"#_3","title":"\u5b89\u88c5","text":"<p>\u8bf7\u786e\u4fdd\u521b\u5efa\u5e76\u6fc0\u6d3b\u4e00\u4e2a \u865a\u62df\u73af\u5883\uff0c\u7136\u540e\u5b89\u88c5 SQLModel\uff0c\u4f8b\u5982\uff1a</p> <pre><code>$ pip install sqlmodel\n---&gt; 100%\nSuccessfully installed sqlmodel\n</code></pre>"},{"location":"#_4","title":"\u793a\u4f8b","text":"<p>\u6709\u5173\u6570\u636e\u5e93\u3001SQL \u548c\u5176\u4ed6\u76f8\u5173\u5185\u5bb9\u7684\u4ecb\u7ecd\uff0c\u8bf7\u53c2\u9605 SQLModel \u6587\u6863\u3002</p> <p>\u4ee5\u4e0b\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\u3002\u2728</p>"},{"location":"#sql","title":"\u4e00\u4e2a SQL \u8868","text":"<p>\u5047\u8bbe\u60a8\u6709\u4e00\u4e2a\u540d\u4e3a <code>hero</code> \u7684 SQL \u8868\uff0c\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\uff1a</p> <ul> <li><code>id</code></li> <li><code>name</code></li> <li><code>secret_name</code></li> <li><code>age</code></li> </ul> <p>\u5e76\u5e0c\u671b\u5305\u542b\u5982\u4e0b\u6570\u636e\uff1a</p> id name secret_name age 1 Deadpond Dive Wilson null 2 Spider-Boy Pedro Parqueador null 3 Rusty-Man Tommy Sharp 48"},{"location":"#sqlmodel","title":"\u521b\u5efa\u4e00\u4e2a SQLModel \u6a21\u578b","text":"<p>\u60a8\u53ef\u4ee5\u50cf\u8fd9\u6837\u521b\u5efa\u4e00\u4e2a SQLModel \u6a21\u578b\uff1a</p> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, SQLModel\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n</code></pre> <p>\u8fd9\u4e2a\u7c7b <code>Hero</code> \u662f\u4e00\u4e2a SQLModel \u6a21\u578b\uff0c\u7b49\u540c\u4e8e Python \u4ee3\u7801\u4e2d\u7684 SQL \u8868\u3002</p> <p>\u6bcf\u4e2a\u7c7b\u5c5e\u6027\u5bf9\u5e94\u4e00\u4e2a \u8868\u5217\u3002</p>"},{"location":"#_5","title":"\u521b\u5efa\u6570\u636e\u884c","text":"<p>\u7136\u540e\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u6a21\u578b\u7684 \u5b9e\u4f8b \u6765\u521b\u5efa\u8868\u7684 \u6bcf\u4e00\u884c\uff1a</p> <pre><code>hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\nhero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\nhero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n</code></pre> <p>\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u5e38\u89c4 Python \u4ee3\u7801\u4e2d\u7684 \u7c7b \u548c \u5b9e\u4f8b \u6765\u8868\u793a \u8868 \u548c \u884c\uff0c\u5e76\u4e0e SQL \u6570\u636e\u5e93 \u4ea4\u4e92\u3002</p>"},{"location":"#_6","title":"\u7f16\u8f91\u5668\u652f\u6301","text":"<p>\u6240\u6709\u8bbe\u8ba1\u65e8\u5728\u4e3a\u60a8\u63d0\u4f9b\u6700\u4f73\u7684\u5f00\u53d1\u8005\u4f53\u9a8c\u4ee5\u53ca\u7f16\u8f91\u5668\u652f\u6301\u3002</p> <p>\u5305\u62ec \u81ea\u52a8\u8865\u5168\uff1a</p> <p></p> <p>\u4ee5\u53ca \u5185\u8054\u9519\u8bef\u63d0\u793a\uff1a</p> <p></p>"},{"location":"#_7","title":"\u5199\u5165\u6570\u636e\u5e93","text":"<p>\u901a\u8fc7\u5feb\u901f\u6d4f\u89c8 \u6559\u7a0b\uff0c\u60a8\u53ef\u4ee5\u4e86\u89e3\u66f4\u591a\u5173\u4e8e SQLModel \u7684\u5185\u5bb9\uff0c\u4f46\u5982\u679c\u60a8\u60f3\u5feb\u901f\u5c1d\u8bd5\u5982\u4f55\u5c06\u8fd9\u4e9b\u7ec4\u5408\u5728\u4e00\u8d77\u5e76\u4fdd\u5b58\u5230\u6570\u636e\u5e93\u4e2d\uff0c\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a</p> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nhero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\nhero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\nhero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n\nengine = create_engine(\"sqlite:///database.db\")\n\n\nSQLModel.metadata.create_all(engine)\n\nwith Session(engine) as session:\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n    session.commit()\n</code></pre> <p>\u6b64\u4ee3\u7801\u4f1a\u4fdd\u5b58\u4e00\u4e2a\u5305\u542b 3 \u4f4d\u82f1\u96c4\u7684 SQLite \u6570\u636e\u5e93\u3002</p>"},{"location":"#_8","title":"\u4ece\u6570\u636e\u5e93\u4e2d\u67e5\u8be2","text":"<p>\u63a5\u4e0b\u6765\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u7f16\u5199\u67e5\u8be2\u4ece\u540c\u4e00\u6570\u636e\u5e93\u4e2d\u8fdb\u884c\u67e5\u8be2\uff0c\u4f8b\u5982\uff1a</p> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nengine = create_engine(\"sqlite:///database.db\")\n\nwith Session(engine) as session:\n    statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n    hero = session.exec(statement).first()\n    print(hero)\n</code></pre>"},{"location":"#_9","title":"\u5168\u9762\u652f\u6301\u7f16\u8f91\u5668\u529f\u80fd","text":"<p>SQLModel \u7ecf\u8fc7\u7cbe\u5fc3\u8bbe\u8ba1\uff0c\u53ef\u4e3a\u60a8\u63d0\u4f9b\u6700\u4f73\u7684\u5f00\u53d1\u8005\u4f53\u9a8c\u548c\u7f16\u8f91\u5668\u652f\u6301\uff0c\u5373\u4f7f\u662f\u5728\u4ece\u6570\u636e\u5e93\u9009\u62e9\u6570\u636e\u4e4b\u540e\uff1a</p> <p></p>"},{"location":"#sqlalchemy-pydantic","title":"SQLAlchemy \u548c Pydantic","text":"<p>\u7c7b <code>Hero</code> \u662f\u4e00\u4e2a SQLModel \u6a21\u578b\u3002</p> <p>\u4f46\u540c\u65f6\uff0c\u2728 \u5b83\u4e5f\u662f\u4e00\u4e2a SQLAlchemy \u6a21\u578b \u2728\u3002\u56e0\u6b64\uff0c\u60a8\u53ef\u4ee5\u5c06\u5176\u4e0e\u5176\u4ed6 SQLAlchemy \u6a21\u578b\u7ed3\u5408\u4f7f\u7528\uff0c\u6216\u8005\u8f7b\u677e\u5730\u5c06\u57fa\u4e8e SQLAlchemy \u7684\u5e94\u7528\u8fc1\u79fb\u5230 SQLModel\u3002</p> <p>\u4e0e\u6b64\u540c\u65f6\uff0c\u2728 \u5b83\u4e5f\u662f\u4e00\u4e2a Pydantic \u6a21\u578b \u2728\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u7ee7\u627f\u6765\u5b9a\u4e49\u6240\u6709\u7684 \u6570\u636e\u6a21\u578b\uff0c\u4ece\u800c\u907f\u514d\u4ee3\u7801\u91cd\u590d\u3002\u8fd9\u4f7f\u5f97\u5b83\u5728 FastAPI \u4e2d\u975e\u5e38\u6613\u4e8e\u4f7f\u7528\u3002</p>"},{"location":"#_10","title":"\u8bb8\u53ef\u8bc1","text":"<p>\u6b64\u9879\u76ee\u6839\u636e MIT \u8bb8\u53ef\u8bc1 \u6388\u6743\u3002</p>"},{"location":"alternatives/","title":"\u66ff\u4ee3\u65b9\u6848\u3001\u7075\u611f\u548c\u6bd4\u8f83","text":"<p>\u5373\u5c06\u63a8\u51fa...</p>"},{"location":"contributing/","title":"\u8d21\u732e","text":"<p>\u9996\u5148\uff0c\u4f60\u53ef\u80fd\u60f3\u67e5\u770b\u4e00\u4e9b\u57fa\u672c\u7684\u65b9\u5f0f\u6765 \u5e2e\u52a9 SQLModel \u5e76\u83b7\u53d6\u5e2e\u52a9\u3002</p>"},{"location":"contributing/#_2","title":"\u5f00\u53d1","text":"<p>\u5982\u679c\u4f60\u5df2\u7ecf\u514b\u9686\u4e86 sqlmodel \u4ed3\u5e93\uff0c\u5e76\u4e14\u60f3\u6df1\u5165\u7814\u7a76\u4ee3\u7801\uff0c\u4ee5\u4e0b\u662f\u4e00\u4e9b\u8bbe\u7f6e\u73af\u5883\u7684\u6307\u5357\u3002</p>"},{"location":"contributing/#_3","title":"\u865a\u62df\u73af\u5883","text":"<p>\u6309\u7167\u8bf4\u660e\u521b\u5efa\u5e76\u6fc0\u6d3b\u4e00\u4e2a \u865a\u62df\u73af\u5883\uff0c\u7528\u4e8e <code>sqlmodel</code> \u7684\u5185\u90e8\u4ee3\u7801\u3002</p>"},{"location":"contributing/#pip","title":"\u4f7f\u7528 <code>pip</code> \u5b89\u88c5\u4f9d\u8d56","text":"<p>\u6fc0\u6d3b\u73af\u5883\u540e\uff0c\u5b89\u88c5\u6240\u9700\u7684\u5305\uff1a</p> <pre><code>$ pip install -r requirements.txt\n\n---&gt; 100%\n</code></pre> <p>\u8fd9\u5c06\u5b89\u88c5\u6240\u6709\u4f9d\u8d56\u9879\u5e76\u5728\u672c\u5730\u73af\u5883\u4e2d\u5b89\u88c5\u4f60\u7684 SQLModel \u672c\u5730\u7248\u672c\u3002</p>"},{"location":"contributing/#sqlmodel","title":"\u4f7f\u7528\u672c\u5730 SQLModel","text":"<p>\u5982\u679c\u4f60\u521b\u5efa\u4e00\u4e2a Python \u6587\u4ef6\uff0c\u5bfc\u5165\u5e76\u4f7f\u7528 SQLModel\uff0c\u7136\u540e\u7528\u4f60\u672c\u5730\u73af\u5883\u4e2d\u7684 Python \u8fd0\u884c\u5b83\uff0c\u5b83\u5c06\u4f7f\u7528\u4f60\u514b\u9686\u7684\u672c\u5730 SQLModel \u6e90\u4ee3\u7801\u3002</p> <p>\u5f53\u4f60\u66f4\u65b0\u672c\u5730 SQLModel \u6e90\u4ee3\u7801\u65f6\uff0c\u518d\u6b21\u8fd0\u884c Python \u6587\u4ef6\u65f6\uff0c\u5b83\u5c06\u4f7f\u7528\u4f60\u521a\u521a\u7f16\u8f91\u7684\u6700\u65b0\u7248\u672c\u7684 SQLModel\u3002</p> <p>\u8fd9\u6837\uff0c\u4f60\u4e0d\u5fc5\u201c\u5b89\u88c5\u201d\u672c\u5730\u7248\u672c\u5c31\u80fd\u6d4b\u8bd5\u6bcf\u6b21\u66f4\u6539\u3002</p> <p>\u201c\u6280\u672f\u7ec6\u8282\u201d</p> <p>\u53ea\u6709\u5728\u4f7f\u7528\u8fd9\u4e2a\u5305\u542b\u7684 <code>requirements.txt</code> \u6587\u4ef6\u5b89\u88c5\u65f6\u624d\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u8fd0\u884c <code>pip install sqlmodel</code>\u3002</p> <p>\u8fd9\u662f\u56e0\u4e3a\u5728 <code>requirements.txt</code> \u6587\u4ef6\u4e2d\uff0c\u672c\u5730\u7248\u672c\u7684 SQLModel \u88ab\u6807\u8bb0\u4e3a\u201c\u53ef\u7f16\u8f91\u201d\u6a21\u5f0f\uff0c\u4f7f\u7528\u4e86 <code>-e</code> \u9009\u9879\u3002</p>"},{"location":"contributing/#_4","title":"\u683c\u5f0f\u5316","text":"<p>\u4f60\u53ef\u4ee5\u8fd0\u884c\u4e00\u4e2a\u811a\u672c\uff0c\u683c\u5f0f\u5316\u5e76\u6e05\u7406\u4f60\u7684\u6240\u6709\u4ee3\u7801\uff1a</p> <pre><code>$ bash scripts/format.sh\n</code></pre> <p>\u5b83\u8fd8\u4f1a\u81ea\u52a8\u5bf9\u6240\u6709\u5bfc\u5165\u8fdb\u884c\u6392\u5e8f\u3002</p>"},{"location":"contributing/#_5","title":"\u6d4b\u8bd5","text":"<p>\u4f60\u53ef\u4ee5\u8fd0\u884c\u4e00\u4e2a\u811a\u672c\uff0c\u5728\u672c\u5730\u6d4b\u8bd5\u6240\u6709\u4ee3\u7801\u5e76\u751f\u6210 HTML \u683c\u5f0f\u7684\u8986\u76d6\u7387\u62a5\u544a\uff1a</p> <pre><code>$ bash scripts/test-cov-html.sh\n</code></pre> <p>\u6b64\u547d\u4ee4\u4f1a\u751f\u6210\u4e00\u4e2a <code>./htmlcov/</code> \u76ee\u5f55\uff0c\u5982\u679c\u4f60\u5728\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00 <code>./htmlcov/index.html</code> \u6587\u4ef6\uff0c\u4f60\u53ef\u4ee5\u4e92\u52a8\u5730\u67e5\u770b\u88ab\u6d4b\u8bd5\u8986\u76d6\u7684\u4ee3\u7801\u533a\u57df\uff0c\u5e76\u6ce8\u610f\u662f\u5426\u6709\u4efb\u4f55\u533a\u57df\u6ca1\u6709\u88ab\u8986\u76d6\u3002</p>"},{"location":"contributing/#_6","title":"\u6587\u6863","text":"<p>\u9996\u5148\uff0c\u786e\u4fdd\u4f60\u6309\u7167\u4e0a\u9762\u7684\u63cf\u8ff0\u8bbe\u7f6e\u597d\u73af\u5883\uff0c\u8fd9\u5c06\u5b89\u88c5\u6240\u6709\u7684\u4f9d\u8d56\u3002</p>"},{"location":"contributing/#_7","title":"\u6587\u6863\u5b9e\u65f6\u66f4\u65b0","text":"<p>\u5728\u672c\u5730\u5f00\u53d1\u671f\u95f4\uff0c\u6709\u4e00\u4e2a\u811a\u672c\u53ef\u4ee5\u6784\u5efa\u7f51\u7ad9\u5e76\u68c0\u67e5\u4efb\u4f55\u53d8\u5316\uff0c\u652f\u6301\u5b9e\u65f6\u91cd\u8f7d\uff1a</p> <pre><code>$ python ./scripts/docs.py live\n\n&lt;span style=\"color: green;\"&gt;[INFO]&lt;/span&gt; Serving on http://127.0.0.1:8008\n&lt;span style=\"color: green;\"&gt;[INFO]&lt;/span&gt; Start watching changes\n&lt;span style=\"color: green;\"&gt;[INFO]&lt;/span&gt; Start detecting changes\n</code></pre> <p>\u5b83\u4f1a\u5728 <code>http://127.0.0.1:8008</code> \u4e0a\u63d0\u4f9b\u6587\u6863\u670d\u52a1\u3002</p> <p>\u8fd9\u6837\uff0c\u4f60\u53ef\u4ee5\u7f16\u8f91\u6587\u6863/\u6e90\u6587\u4ef6\u5e76\u5b9e\u65f6\u67e5\u770b\u53d8\u5316\u3002</p> <p>Tip</p> <p>\u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u624b\u52a8\u6267\u884c\u811a\u672c\u4e2d\u7684\u76f8\u540c\u6b65\u9aa4\u3002</p> <p>\u8fdb\u5165 <code>docs/</code> \u76ee\u5f55\uff1a</p> <pre><code>$ cd docs/\n</code></pre> <p>\u7136\u540e\u5728\u8be5\u76ee\u5f55\u4e0b\u8fd0\u884c <code>mkdocs</code>\uff1a</p> <pre><code>$ mkdocs serve --dev-addr 8008\n</code></pre>"},{"location":"contributing/#typer-cli","title":"Typer CLI\uff08\u53ef\u9009\uff09","text":"<p>\u6b64\u5904\u7684\u8bf4\u660e\u5c55\u793a\u4e86\u5982\u4f55\u76f4\u63a5\u4f7f\u7528 <code>python</code> \u7a0b\u5e8f\u8fd0\u884c <code>./scripts/docs.py</code> \u811a\u672c\u3002</p> <p>\u4f46\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 Typer CLI\uff0c\u5e76\u5728\u7ec8\u7aef\u4e2d\u4e3a\u547d\u4ee4\u63d0\u4f9b\u81ea\u52a8\u8865\u5168\u529f\u80fd\uff0c\u524d\u63d0\u662f\u5df2\u5b89\u88c5\u8865\u5168\u529f\u80fd\u3002</p> <p>\u5982\u679c\u4f60\u5b89\u88c5\u4e86 Typer CLI\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u5b89\u88c5\u8865\u5168\u529f\u80fd\uff1a</p> <pre><code>$ typer --install-completion\n\nzsh completion installed in /home/user/.bashrc.\nCompletion will take effect once you restart the terminal.\n</code></pre>"},{"location":"contributing/#_8","title":"\u6587\u6863\u7ed3\u6784","text":"<p>\u6587\u6863\u4f7f\u7528\u4e86 MkDocs\u3002</p> <p>\u5e76\u4e14\u5728 <code>./scripts/docs.py</code> \u4e2d\u6709\u4e00\u4e9b\u989d\u5916\u7684\u5de5\u5177/\u811a\u672c\u3002</p> <p>Tip</p> <p>\u4f60\u4e0d\u9700\u8981\u67e5\u770b <code>./scripts/docs.py</code> \u4e2d\u7684\u4ee3\u7801\uff0c\u53ea\u9700\u5728\u547d\u4ee4\u884c\u4e2d\u4f7f\u7528\u5b83\u3002</p> <p>\u6240\u6709\u6587\u6863\u90fd\u5b58\u50a8\u5728 <code>./docs</code> \u76ee\u5f55\u4e0b\uff0c\u5e76\u4f7f\u7528 Markdown \u683c\u5f0f\u3002</p> <p>\u8bb8\u591a\u6559\u7a0b\u4e2d\u6709\u4ee3\u7801\u5757\u3002</p> <p>\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u4ee3\u7801\u5757\u662f\u5b8c\u6574\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u76f4\u63a5\u8fd0\u884c\u3002</p> <p>\u5b9e\u9645\u4e0a\uff0c\u8fd9\u4e9b\u4ee3\u7801\u5757\u5e76\u4e0d\u662f\u5199\u5728 Markdown \u6587\u4ef6\u4e2d\uff0c\u800c\u662f\u5b58\u50a8\u5728 <code>./docs_src/</code> \u76ee\u5f55\u4e2d\u7684 Python \u6587\u4ef6\u3002</p> <p>\u8fd9\u4e9b Python \u6587\u4ef6\u5728\u751f\u6210\u7f51\u7ad9\u65f6\u4f1a\u88ab\u5305\u542b/\u6ce8\u5165\u5230\u6587\u6863\u4e2d\u3002</p>"},{"location":"contributing/#_9","title":"\u6d4b\u8bd5\u6587\u6863","text":"<p>\u5927\u591a\u6570\u6d4b\u8bd5\u5b9e\u9645\u4e0a\u662f\u9488\u5bf9\u6587\u6863\u4e2d\u7684\u793a\u4f8b\u6e90\u6587\u4ef6\u8fdb\u884c\u7684\u3002</p> <p>\u8fd9\u6709\u52a9\u4e8e\u786e\u4fdd\uff1a</p> <ul> <li>\u6587\u6863\u662f\u6700\u65b0\u7684\u3002</li> <li>\u6587\u6863\u4e2d\u7684\u793a\u4f8b\u4ee3\u7801\u53ef\u4ee5\u76f4\u63a5\u8fd0\u884c\u3002</li> <li>\u5927\u591a\u6570\u529f\u80fd\u90fd\u88ab\u6587\u6863\u8986\u76d6\uff0c\u901a\u8fc7\u6d4b\u8bd5\u8986\u76d6\u7387\u5f97\u4ee5\u786e\u4fdd\u3002</li> </ul>"},{"location":"databases/","title":"\u6570\u636e\u5e93\u7b80\u4ecb","text":"<p>Info</p> <p>\u4f60\u662f\u7ecf\u9a8c\u4e30\u5bcc\u7684\u5f00\u53d1\u8005\uff0c\u5bf9\u6570\u636e\u5e93\u5df2\u7ecf\u4e86\u5982\u6307\u638c\u5417\uff1f\ud83e\udd13</p> <p>\u90a3\u4e48\u4f60\u53ef\u4ee5\u76f4\u63a5\u8df3\u5230\u63a5\u4e0b\u6765\u7684\u90e8\u5206\u3002</p> <p>\u5982\u679c\u4f60\u5bf9\u6570\u636e\u5e93\u5e76\u4e0d\u662f\u5b8c\u5168\u4e86\u89e3\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u5feb\u901f\u6982\u8ff0\u3002</p> <p>\u4e4b\u540e\u4f60\u968f\u65f6\u53ef\u4ee5\u81ea\u884c\u6df1\u5165\u5b66\u4e60\u66f4\u591a\u5185\u5bb9\u3002</p> <p>\u4f46\u8fd9\u90e8\u5206\u5185\u5bb9\u8db3\u4ee5\u5e2e\u52a9\u4f60\u5f00\u59cb\u4f7f\u7528\u6570\u636e\u5e93\uff0c\u5e76\u901a\u8fc7 SQLModel \u63d0\u9ad8\u751f\u4ea7\u529b\u3002\ud83d\ude80</p>"},{"location":"databases/#_2","title":"\u4ec0\u4e48\u662f\u6570\u636e\u5e93","text":"<p>\u90a3\u4e48\uff0c\u4ec0\u4e48\u662f\u6570\u636e\u5e93\uff1f</p> <p>\u6570\u636e\u5e93 \u662f\u4e00\u79cd\u4ee5\u7ed3\u6784\u5316\u548c\u9ad8\u6548\u65b9\u5f0f\u5b58\u50a8\u548c\u7ba1\u7406\u6570\u636e\u7684\u7cfb\u7edf\u3002</p> <p>Tip</p> <p>\"\u6570\u636e\u5e93\" \u901a\u5e38\u4f1a\u7f29\u5199\u4e3a \"DB\"\u3002</p> <p>\u5173\u4e8e\u6570\u636e\u5e93\u7684\u4fe1\u606f\u975e\u5e38\u4e30\u5bcc\uff0c\u53ef\u80fd\u4f1a\u53d8\u5f97\u975e\u5e38\u6280\u672f\u6027\u548c\u5b66\u672f\u5316\u3002\u8fd9\u91cc\u6211\u4f1a\u4e3a\u4f60\u5feb\u901f\u6982\u8ff0\u4e00\u4e9b\u6838\u5fc3\u6982\u5ff5\u3002</p> <p>\u6211\u8fd8\u4f1a\u7b80\u5355\u4ecb\u7ecd\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\u5e93\uff0c\u5305\u62ec SQLModel \u672a\u6db5\u76d6\u7684\u6570\u636e\u5e93\u7c7b\u578b\uff08\u5982 \"NoSQL\" \u6570\u636e\u5e93\uff09\u3002</p>"},{"location":"databases/#_3","title":"\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528\u6570\u636e\u5e93","text":"<p>\u521a\u5f00\u59cb\u7f16\u7a0b\u65f6\uff0c\u53ef\u80fd \u4e0d\u592a\u660e\u663e \u4e3a\u4ec0\u4e48\u5728\u7a0b\u5e8f\u4ee3\u7801\u4e4b\u5916\u53e6\u8bbe\u4e00\u4e2a\u6570\u636e\u5e93\u662f\u4e2a \u597d\u4e3b\u610f\u3002\u6211\u4eec\u5148\u4ece\u8fd9\u4e2a\u95ee\u9898\u8bf4\u8d77\u3002</p> <p>Tip</p> <p>\u5982\u679c\u4f60\u5df2\u7ecf\u660e\u767d\u8fd9\u4e2a\u95ee\u9898\uff0c\u76f4\u63a5\u8df3\u5230\u4e0b\u9762\u7684\u4e0b\u4e00\u8282\u5427\u3002\ud83d\udc47</p> <p>\u5728\u4f60\u7684\u4ee3\u7801\u4e2d\u5df2\u7ecf\u6709 \u53d8\u91cf\u3001\u5b57\u5178\u3001\u5217\u8868**\u7b49\uff0c\u8fd9\u4e9b\u90fd\u80fd\u4ee5\u67d0\u79cd\u65b9\u5f0f\u5b58\u50a8 **\u6570\u636e\u3002\u90a3\u4e3a\u4ec0\u4e48\u8fd8\u9700\u8981\u5355\u72ec\u7684\u6570\u636e\u5e93\u5462\uff1f</p> <p>\u5982\u679c\u4ed4\u7ec6\u89c2\u5bdf\uff0c\u4f60\u4f1a\u53d1\u73b0\u4ee3\u7801\u662f \u9759\u6001\u7684\uff0c\u4e00\u65e6\u8fd0\u884c\u540e\uff0c\u7a0b\u5e8f\u7684\u72b6\u6001\u5e76\u4e0d\u4f1a\u771f\u6b63\u968f\u7740\u65f6\u95f4\u53d1\u751f\u53d8\u5316\u3002\u5f53\u7136\uff0c\u4f60\u4f1a\u9891\u7e41\u66f4\u6539\u4ee3\u7801\u4ee5\u589e\u52a0\u529f\u80fd\u7b49\uff0c\u4f46\u4e00\u65e6\u542f\u52a8 Python \u8fd0\u884c\u4ee3\u7801\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u4fdd\u6301\u542f\u52a8\u65f6\u7684\u72b6\u6001\u3002\u5373\u4fbf\u4ee3\u7801\u6539\u4e86\uff0c\u7a0b\u5e8f\u4e5f\u53ea\u6709\u5728 \u91cd\u65b0\u8fd0\u884c \u540e\u624d\u4f1a\u53d1\u751f\u53d8\u5316\u3002</p> <p>\u800c\u4e14\uff0c\u5373\u4f7f\u4f60\u5728\u7a0b\u5e8f\u8fd0\u884c\u4e2d\u66f4\u6539\u4e86\u53d8\u91cf\uff0c\u4e00\u65e6\u7a0b\u5e8f\u7ed3\u675f\uff0c\u8fd9\u4e9b\u5b58\u50a8\u5728 \u5185\u5b58 \u4e2d\u7684\u6570\u636e\u5c31\u4f1a \u6d88\u5931\u3002\ud83d\udd25</p> <p>\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4f60\u7684\u7a0b\u5e8f\u76ee\u6807\u662f\u5904\u7406\u7a0b\u5e8f \u5916\u90e8 \u7684\u67d0\u4e9b\u6570\u636e\uff1a</p> <ul> <li>\u5b83\u53ef\u80fd\u53ea\u662f\u5c06 \u6587\u4ef6 \u4ece\u4e00\u4e2a\u5730\u65b9\u79fb\u5230\u53e6\u4e00\u4e2a\u5730\u65b9\u3002</li> <li>\u6216\u8005\u4ece\u7528\u6237\u7684 \u7ec8\u7aef \u83b7\u53d6\u6570\u636e\u5e76\u4ee5\u4e0d\u540c\u65b9\u5f0f\u663e\u793a\u3002</li> <li>\u53c8\u6216\u8005\u662f\u4e00\u4e2a Web API\uff0c\u83b7\u53d6\u6570\u636e\u5e76\u4ee5\u67d0\u79cd\u65b9\u5f0f\u5904\u7406\u3002</li> </ul> <p>\u5728\u5f88\u591a\u60c5\u51b5\u4e0b\uff0c\u6570\u636e \u6765\u6e90\u4e8e\u7a0b\u5e8f\u5916\u90e8 \u6216 \u6700\u7ec8\u4f1a\u6d41\u5411\u7a0b\u5e8f\u5916\u90e8\uff08\u4f8b\u5982\uff0c\u663e\u793a\u5728\u5c4f\u5e55\u4e0a\u3001\u5199\u5165\u6587\u4ef6\u7b49\uff09\u3002</p> <p>\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u4f60\u9700\u8981\u7a0b\u5e8f\u80fd\u591f \u521b\u5efa \u5e76\u5b58\u50a8\u6570\u636e\u3001\u8bfb\u53d6 \u6570\u636e\u3001\u66f4\u65b0 \u6570\u636e\u3001\u5220\u9664 \u6570\u636e\u7b49\u3002</p> <p>\u4f60\u5f53\u7136\u53ef\u4ee5\u901a\u8fc7\u4ee3\u7801\u8bfb\u53d6\u548c\u5199\u5165\u6587\u4ef6\u6765\u5b9e\u73b0\uff0c\u8fd9\u79cd\u65b9\u6cd5\u5728\u7b80\u5355\u573a\u666f\u4e2d\u662f\u53ef\u884c\u7684\u3002\u4f46\u5bf9\u4e8e\u7a0d\u5fae\u590d\u6742\u4e00\u70b9\u7684\u7cfb\u7edf\uff0c\u8fd9\u79cd\u7b56\u7565\u6548\u7387\u5e76\u4e0d\u9ad8\u3002\u4f60\u8fd8\u9700\u8981\u5e94\u5bf9\u8bb8\u591a \u9677\u9631\uff0c\u5982\u6570\u636e\u540c\u6b65\u3001\u6570\u636e\u5b89\u5168\u5b58\u50a8\u7b49\u95ee\u9898\u3002</p> <p>\u6570\u636e\u5e93\u4e13\u4e3a \u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898 \u800c\u8bbe\u8ba1\uff0c\u4f7f\u5f97\u5904\u7406\u6570\u636e\u7684\u8fc7\u7a0b\u66f4\u52a0\u9ad8\u6548\uff0c\u5e76\u4e14\u4e0e\u4ee3\u7801\u76f8\u5bf9\u72ec\u7acb\u3002\u2728</p>"},{"location":"databases/#_4","title":"\u5982\u4f55\u4e0e\u6570\u636e\u5e93\u4ea4\u4e92","text":"<p>\u6570\u636e\u5e93\u6709\u8bb8\u591a\u7c7b\u578b\u3002</p>"},{"location":"databases/#_5","title":"\u5355\u6587\u4ef6\u6570\u636e\u5e93","text":"<p>\u6570\u636e\u5e93\u53ef\u4ee5\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u6587\u4ef6\uff0c\u540d\u4e3a <code>heroes.db</code>\uff0c\u901a\u8fc7\u4ee3\u7801\u4ee5\u975e\u5e38\u9ad8\u6548\u7684\u65b9\u5f0f\u8fdb\u884c\u7ba1\u7406\u3002\u4e00\u4e2a\u4f8b\u5b50\u662f SQLite\uff0c\u7a0d\u540e\u4f1a\u8be6\u7ec6\u4ecb\u7ecd\u3002</p> <p></p>"},{"location":"databases/#_6","title":"\u670d\u52a1\u5668\u6570\u636e\u5e93","text":"<p>\u6570\u636e\u5e93\u4e5f\u53ef\u4ee5\u662f\u8fd0\u884c\u5728\u670d\u52a1\u5668\u4e0a\u7684\u7cfb\u7edf\uff0c\u4f5c\u4e3a\u5e94\u7528\u7a0b\u5e8f\u5904\u7406\u591a\u4e2a\u6587\u4ef6\uff0c\u5e76\u4ee5\u4f18\u5316\u7684\u683c\u5f0f\u5b58\u50a8\u6570\u636e\u3002</p> <p>\u5c31\u50cf Web \u670d\u52a1\u5668\uff0c\u4f46\u5b83\u4f7f\u7528\u81ea\u5b9a\u4e49\u4e14\u9ad8\u6548\u7684\u65b9\u5f0f\u8fdb\u884c\u901a\u4fe1\u3002\u8fd9\u662f\u6700\u5e38\u89c1\u7684\u6570\u636e\u5e93\u4ea4\u4e92\u65b9\u5f0f\u3002</p> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u7684\u4ee3\u7801\u5c06\u4e0e\u8be5\u670d\u52a1\u5668\u5e94\u7528\u7a0b\u5e8f\u8fdb\u884c\u901a\u4fe1\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u8bfb\u53d6\u6216\u4fee\u6539\u6587\u4ef6\u3002</p> <p>\u6570\u636e\u5e93\u53ef\u80fd\u4f4d\u4e8e\u4e0d\u540c\u7684\u670d\u52a1\u5668/\u673a\u5668\u4e0a\uff1a</p> <p></p> <p>\u6216\u8005\u6570\u636e\u5e93\u4e5f\u53ef\u80fd\u4f4d\u4e8e\u540c\u4e00\u670d\u52a1\u5668/\u673a\u5668\u4e0a\uff1a</p> <p></p> <p>\u8fd9\u4e9b\u7c7b\u578b\u7684\u6570\u636e\u5e93\u6700\u91cd\u8981\u7684\u65b9\u9762\u662f\uff0c**\u60a8\u7684\u4ee3\u7801\u4e0d\u4f1a\u76f4\u63a5\u8bfb\u53d6\u6216\u4fee\u6539**\u5305\u542b\u6570\u636e\u7684\u6587\u4ef6\u3002</p> <p>\u76f8\u53cd\uff0c\u60a8\u7684\u4ee3\u7801\u4e0e\u6570\u636e\u5e93\u5e94\u7528\u7a0b\u5e8f\u901a\u4fe1\uff0c\u7531\u8be5\u6570\u636e\u5e93\u5e94\u7528\u7a0b\u5e8f\u5b9e\u9645\u8bfb\u53d6\u548c\u4fee\u6539\u5176\u6570\u636e\u6587\u4ef6\u3002\u8fd9\u662f\u56e0\u4e3a\u8be5\u6570\u636e\u5e93\u5e94\u7528\u7a0b\u5e8f\u901a\u5e38**\u6bd4\u60a8\u7684\u4ee3\u7801\u66f4\u9ad8\u6548**\u3002</p> <p>\u4e00\u4e9b\u50cf PostgreSQL\u3001MySQL \u6216 MongoDB \u8fd9\u6837\u7684\u6570\u636e\u5e93\u5c31\u662f\u6309\u8fd9\u79cd\u65b9\u5f0f\u5de5\u4f5c\u7684\u4f8b\u5b50\u3002</p>"},{"location":"databases/#_7","title":"\u5206\u5e03\u5f0f\u670d\u52a1\u5668","text":"<p>\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6570\u636e\u5e93\u751a\u81f3\u53ef\u4ee5\u662f\u8fd0\u884c\u5728\u4e0d\u540c\u673a\u5668\u4e0a\u7684\u4e00\u7ec4\u670d\u52a1\u5668\u5e94\u7528\u7a0b\u5e8f\uff0c\u5b83\u4eec\u534f\u540c\u5de5\u4f5c\u5e76\u76f8\u4e92\u901a\u4fe1\uff0c\u4ee5\u63d0\u9ad8\u6548\u7387\u5e76\u5904\u7406\u66f4\u591a\u6570\u636e\u3002</p> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u7684\u4ee3\u7801\u5c06\u4e0e\u8fd0\u884c\u5728\u4e0d\u540c\u673a\u5668\u4e0a\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u670d\u52a1\u5668\u5e94\u7528\u7a0b\u5e8f\u8fdb\u884c\u901a\u4fe1\u3002</p> <p></p> <p>\u5927\u591a\u6570\u4f5c\u4e3a\u670d\u52a1\u5668\u5e94\u7528\u7a0b\u5e8f\u7684\u6570\u636e\u5e93\u4e5f\u4ee5\u67d0\u79cd\u65b9\u5f0f\u652f\u6301\u591a\u4e2a\u670d\u52a1\u5668\u3002</p> <p>\u62e5\u6709\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e5f\u4f1a\u5e26\u6765\u989d\u5916\u7684\u6311\u6218\uff0c\u56e0\u6b64\u60a8\u5f88\u53ef\u80fd\u9996\u5148\u4f1a\u4e0e\u5355\u4e2a\u670d\u52a1\u5668\u5e94\u7528\u7a0b\u5e8f\u6216\u57fa\u4e8e\u5355\u4e00\u6587\u4ef6\u7684\u6570\u636e\u5e93\u4ea4\u4e92\u3002</p>"},{"location":"databases/#sql","title":"SQL \u6570\u636e\u5e93","text":"<p>\u6211\u4eec\u5df2\u7ecf\u8ba8\u8bba\u4e86\u4e0e\u6570\u636e\u5e93\u4ea4\u4e92\u7684\u4e0d\u540c\u65b9\u5f0f\u4ee5\u53ca\u5b83\u4eec\u5982\u4f55\u5904\u7406\u6587\u4ef6\u7b49\u5185\u5bb9\u3002\u8fd9\u4e9b\u5185\u5bb9\u9002\u7528\u4e8e\u5927\u591a\u6570\u6216\u6240\u6709\u6570\u636e\u5e93\u3002</p> <p>\u4f46\u8fd8\u6709\u53e6\u4e00\u79cd\u975e\u5e38\u91cd\u8981\u7684\u6570\u636e\u5e93\u5206\u7c7b\u65b9\u5f0f\u3002\u5982\u4f60\u6240\u60f3\uff0c\u6570\u636e\u5e93\u6709\u8bb8\u591a\u7c7b\u578b\uff0c\u6bcf\u4e2a\u7ec4\u522b\u4e2d\u6709\u5f88\u591a\u4e0d\u540c\u7684\u6570\u636e\u5e93\u3002\u4f46\u901a\u5e38\u5b83\u4eec\u53ef\u4ee5\u5206\u4e3a\u4e24\u4e2a\u5927\u7c7b\uff1a\u201cSQL \u6570\u636e\u5e93\u201d\u548c\u201c\u975e SQL \u6570\u636e\u5e93\u201d\u3002</p> <p>\u7a0d\u540e\u6211\u4eec\u5c06\u89e3\u91ca\u4e3a\u4ec0\u4e48\u4f1a\u6709\u201cSQL\u201d\u8fd9\u4e2a\u540d\u5b57\uff0c\u4f46\u9996\u5148\uff0c\u6211\u4eec\u6765\u4e86\u89e3\u4e00\u4e0b\u8fd9\u662f\u4ec0\u4e48\u3002</p>"},{"location":"databases/#sqlmodel-sql","title":"SQLModel \u7528\u4e8e SQL \u6570\u636e\u5e93","text":"<p>SQLModel \u662f\u4e00\u4e2a\u5e2e\u52a9\u4f60\u4e0e SQL \u6570\u636e\u5e93 \u4ea4\u4e92\u7684\u5de5\u5177\u3002</p> <p>\u5b83\u5bf9 \u975e SQL \u6570\u636e\u5e93 \u7684\u5e2e\u52a9\u4e0d\u5927\u3002\u4e0d\u8fc7\uff0c\u6211\u8fd8\u662f\u4f1a\u5728\u8fd9\u91cc\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b\u5b83\u4eec\u3002</p>"},{"location":"databases/#sql_1","title":"SQL \u6570\u636e\u5e93\u7684\u53d1\u660e","text":"<p>\u5f88\u4e45\u4ee5\u524d\uff0c\u4e00\u4e9b\u806a\u660e\u7684\u4eba\u610f\u8bc6\u5230\uff0c\u5b58\u50a8\u6570\u636e\u7684\u4e00\u79cd\u5f88\u597d\u7684\u65b9\u5f0f\u662f\u5c06\u6570\u636e\u653e\u5165\u4e0d\u540c\u7684\u8868\u4e2d\u3002</p> <p>\u201c\u8868\u201d\u5728\u8fd9\u91cc\u6307\u7684\u662f\u50cf\u7535\u5b50\u8868\u683c\u4e00\u6837\u7684\u7f51\u683c\u7ed3\u6784\uff0c\u5305\u542b\u4e0d\u540c\u7684\u5217\u548c\u884c\u3002</p> <p>\u6bcf\u4e00\u884c\u4ee3\u8868\u4e00\u4e2a\u7279\u5b9a\u7684\u9879\u6216 \u8bb0\u5f55\u3002\u6bcf\u4e00\u5217\u4ee3\u8868\u8be5\u8bb0\u5f55\u7684\u4e00\u4e2a\u7279\u5b9a\u5c5e\u6027\u6216\u5b57\u6bb5\u3002</p>"},{"location":"databases/#_8","title":"\u4e00\u4e2a\u5927\u8868\u683c\u7684\u793a\u4f8b","text":"<p>\u5047\u8bbe\u6211\u4eec\u9700\u8981\u5b58\u50a8\u4e00\u4e9b\u5173\u4e8e\u82f1\u96c4\u7684\u6570\u636e\u3002</p> <p>\u5982\u679c\u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u5355\u4e00\u7684\u8868\u683c\u6765\u5b58\u50a8\u6211\u4eec\u7684\u82f1\u96c4\uff0c\u53ef\u80fd\u4f1a\u50cf\u8fd9\u6837\uff1a</p> idnamesecret_nameageteamheadquarters 1DeadpondDive WilsonnullZ-FactorSister Margaret's Bar 2Spider-BoyPedro ParqueadornullPreventersSharp Tower 3Rusty-ManTommy Sharp48PreventersSharp Tower <p>\u8fd9\u53ef\u80fd\u662f\u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u5355\u4e00\u8868\u683c\u65f6\u7684\u6837\u5b50\uff0c\u4f8b\u5982\u4e00\u4e2a\u5355\u72ec\u7684\u7535\u5b50\u8868\u683c\u3002</p> <p>\u4f46\u662f\u8fd9\u6837\u6709\u4e00\u4e9b\u95ee\u9898\u3002\u6211\u4eec\u6765\u770b\u770b\u5176\u4e2d\u7684\u4e00\u4e9b\u95ee\u9898\u3002</p>"},{"location":"databases/#_9","title":"\u5355\u4e00\u8868\u683c\u7684\u95ee\u9898","text":"<p>\u5047\u8bbe\u4ed6\u4eec\u51b3\u5b9a\u5c06\u201cSharp Tower\u201d\u66f4\u540d\u4e3a\u201cPreventers Tower\u201d\u3002</p> <p>\u73b0\u5728\uff0c\u6211\u4eec\u9700\u8981\u5728\u4e24\u4e2a\u5730\u65b9\u66f4\u65b0\u8fd9\u4e2a\u540d\u79f0\u3002</p> <p>\u5982\u679c\u6211\u4eec\u7684\u4ee3\u7801\u5f00\u59cb\u5728\u4e00\u4e2a\u5730\u65b9\u66f4\u65b0\u8fd9\u4e2a\u540d\u79f0\uff0c\u7a81\u7136\u53d1\u751f\u505c\u7535\uff0c\u8ba1\u7b97\u673a\u5173\u673a\u4e86\u5462\uff1f</p> <p>\u6211\u4eec\u53ef\u80fd\u4f1a\u5f97\u5230\u4e0d\u4e00\u81f4\u7684\u4fe1\u606f\uff0c\u4e00\u5904\u663e\u793a\u201cPreventers Tower\u201d\uff0c\u53e6\u4e00\u5904\u5374\u663e\u793a\u201cSharp Tower\u201d\uff1a</p> idnamesecret_nameageteamheadquarters 1DeadpondDive WilsonnullZ-ForceSister Margaret's Bar 2Spider-BoyPedro ParqueadornullPreventersPreventers Tower \u2705 3Rusty-ManTommy Sharp48PreventersSharp Tower \ud83d\udea8 <p>\u73b0\u5728\uff0c\u5047\u8bbe\u6211\u4eec\u9700\u8981\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u82f1\u96c4\u53eb\u201cMahjong\u201d\uff0c\u5e76\u4e14\u5979\u5c5e\u4e8e\u201cZ-Force\u201d\u56e2\u961f\u3002</p> <p>\u6211\u4eec\u53ef\u80fd\u4f1a\u5fd8\u8bb0\u56e2\u961f\u7684\u540d\u79f0\uff0c\u7ed3\u679c\u628a\u201cMahjong\u201d\u6dfb\u52a0\u5230\u4e00\u4e2a\u65e0\u6548\u7684\u56e2\u961f\u540d\u79f0\u4e2d\uff0c\u4f8b\u5982\u201cY-Force\u201d\u3002</p> idnamesecret_nameageteamheadquarters 1DeadpondDive WilsonnullZ-ForceSister Margaret's Bar 2Spider-BoyPedro ParqueadornullPreventersPreventers Tower 3Rusty-ManTommy Sharp48PreventersSharp Tower 4MahjongNeena Thurgirl31Y-Force \ud83d\udea8Sister Margaret's Bar <p>\u5982\u679c\u4e00\u4e2a\u82f1\u96c4\u5c5e\u4e8e\u4e24\u4e2a\u56e2\u961f\u5462\uff1f\u6211\u4eec\u5c31\u6ca1\u6709\u7b80\u5355\u7684\u65b9\u6cd5\u5c06\u8fd9\u4e2a\u4fe1\u606f\u653e\u5165\u4e00\u4e2a\u5927\u7684\u8868\u683c\u4e2d\u4e86\u3002</p>"},{"location":"databases/#_10","title":"\u591a\u4e2a\u8868\u683c","text":"<p>\u4f46\u8fd9\u4e9b\u95ee\u9898\u548c\u5176\u4ed6\u4e00\u4e9b\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7\u5c06\u6570\u636e\u5b58\u50a8\u5728\u591a\u4e2a\u8868\u683c\u4e2d\u6765\u66f4\u597d\u5730\u89e3\u51b3\u3002</p> <p>\u56e0\u6b64\uff0c\u9664\u4e86\u5c06\u6240\u6709\u6570\u636e\u5b58\u50a8\u5728\u4e00\u4e2a\u8868\u683c\u4e2d\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u4e3a\u82f1\u96c4\u548c\u56e2\u961f\u5206\u522b\u521b\u5efa\u4e00\u4e2a\u8868\u683c\uff0c\u5e76\u4e14\u6709\u4e00\u79cd\u65b9\u6cd5\u5c06\u5b83\u4eec\u8fde\u63a5\u8d77\u6765\u3002</p> <p>\u56e2\u961f\u7684\u8868\u683c\u53ef\u4ee5\u50cf\u8fd9\u6837\uff1a</p> idnameheadquarters 1PreventersSharp Tower 2Z-ForceSister Margaret's Bar <p>\u73b0\u5728\uff0c\u82f1\u96c4\u7684\u8868\u683c\u51e0\u4e4e\u770b\u8d77\u6765\u4e0e\u4e4b\u524d\u76f8\u540c\u3002\u4f46\u662f\u8bf7\u8bb0\u4f4f\uff0c\u6211\u4eec\u4e4b\u524d\u63d0\u5230\u8fc7\uff0c\u9700\u8981\u4e00\u79cd\u65b9\u6cd5\u5c06\u4e24\u4e2a\u8868\u683c\u8fde\u63a5\u8d77\u6765\uff1f</p> <p>\u82f1\u96c4\u7684\u8868\u683c\u73b0\u5728\u5c06\u6709\u4e00\u4e2a\u989d\u5916\u7684\u5217 <code>team_id</code>\u3002\u8be5\u5217\u663e\u793a\u6bcf\u4e00\u884c\uff08\u6bcf\u4e2a\u82f1\u96c4\uff09\u4e0e\u4ed6\u4eec\u6240\u5c5e\u56e2\u961f\u4e4b\u95f4\u7684\u5173\u7cfb\u3002</p> idnamesecret_nameageteam_id \u2728 1DeadpondDive Wilsonnull2 \u2728 2Spider-BoyPedro Parqueadornull1 \u2728 3Rusty-ManTommy Sharp481 \u2728"},{"location":"databases/#-","title":"\u6807\u8bc6 - \u4e3b\u952e","text":"<p>\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6bcf\u4e00\u884c\u90fd\u6709\u4e00\u4e2a <code>id</code>\u3002\u6bcf\u4e2a ID \u5728\u8868\u4e2d\u90fd\u662f\u552f\u4e00\u7684\uff0c\u7528\u6765\u6807\u8bc6\u8be5\u7279\u5b9a\u884c\u3002</p> <p>\u8fd9\u4e9b SQL \u6570\u636e\u5e93\u8981\u6c42\u6709\u4e00\u79cd\u72ec\u7279\u7684\u65b9\u5f0f\u6765\u6807\u8bc6\u8868\u4e2d\u7684\u6bcf\u4e00\u884c\u3002\u5b83\u53ef\u4ee5\u662f\u552f\u4e00\u7684\u5217\u7ec4\u5408\uff0c\u4f46\u901a\u5e38\u5b83\u53ea\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u5217\u3002\u8fd9\u88ab\u79f0\u4e3a\u8868\u7684 \"\u4e3b\u952e\"\u3002</p> <p>\u4e3b\u952e \u901a\u5e38\u662f\u5355\u5217\uff0c\u901a\u5e38\u53ea\u662f\u6570\u636e\u5e93\u81ea\u52a8\u751f\u6210\u7684\u6574\u6570\uff0c\u5e76\u4e14\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u5217\u7684\u540d\u79f0\u5c31\u662f <code>id</code>\u3002</p> <p>\u8fd9\u4e2a \u4e3b\u952e\uff0c\u5728\u672c\u4f8b\u4e2d\u5c31\u662f <code>id</code> \u5217\uff0c\u5fc5\u987b\u5728\u6bcf\u4e2a\u8868\u4e2d\u662f\u552f\u4e00\u7684\u3002\u4f46\u662f\u4e24\u4e2a\u4e0d\u540c\u7684\u8868\u683c\u53ef\u4ee5\u6709\u76f8\u540c\u7684 ID\u3002\u4f8b\u5982\uff0c\u4e0a\u9762\u4e24\u4e2a\u8868\u683c\u90fd\u4f7f\u7528 ID <code>2</code>\uff0c\u4e00\u4e2a\u7528\u4e8e\u201cZ-Force\u201d\u56e2\u961f\uff0c\u53e6\u4e00\u4e2a\u7528\u4e8e\u201cSpider-Boy\u201d\u82f1\u96c4\uff0c\u4f46\u53ea\u8981\u6bcf\u4e2a\u8868\u4e2d\u53ea\u6709\u4e00\u4e2a\uff0c\u5c31\u6ca1\u6709\u95ee\u9898\u3002</p>"},{"location":"databases/#-_1","title":"\u5173\u7cfb - \u5916\u952e","text":"<p>\u6bcf\u4e2a\u8868\u683c\u4e2d\u7684\u884c\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684 \u4e3b\u952e\uff08\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\u662f\u5355\u5217 <code>id</code>\uff09\u3002</p> <p>\u4f8b\u5982\uff0c\u56e2\u961f\u8868\u683c\u4e2d\u7684 ID <code>1</code> \u4ee3\u8868\u56e2\u961f <code>Preventers</code>\uff0c\u800c ID <code>2</code> \u4ee3\u8868\u56e2\u961f <code>Z-Force</code>\u3002</p> <p>\u7531\u4e8e\u8fd9\u4e9b \u4e3b\u952e ID \u53ef\u4ee5\u552f\u4e00\u6807\u8bc6\u56e2\u961f\u8868\u683c\u4e2d\u7684\u6bcf\u4e00\u884c\uff0c\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5728\u82f1\u96c4\u7684\u8868\u683c\u4e2d\u5f15\u7528\u8fd9\u4e9b ID\u3002</p> <p></p> <p>\u56e0\u6b64\uff0c\u5728\u82f1\u96c4\u7684\u8868\u683c\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 <code>team_id</code> \u5217\u6765\u5b9a\u4e49\u4e0e\u56e2\u961f\u5916\u90e8\u8868\u683c\u7684\u5173\u7cfb\u3002\u82f1\u96c4\u8868\u683c\u4e2d\u7684\u6bcf\u4e2a <code>team_id</code> \u5217\u503c\u90fd\u5c06\u4e0e\u56e2\u961f\u8868\u683c\u4e2d\u4e00\u884c\u7684 <code>id</code> \u5217\u503c\u76f8\u540c\u3002</p> <p>\u5728\u82f1\u96c4\u8868\u683c\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a \u4e3b\u952e\uff0c\u5373 <code>id</code>\u3002\u4f46\u6211\u4eec\u8fd8\u6709\u4e00\u4e2a\u989d\u5916\u7684\u5217 <code>team_id</code>\uff0c\u5b83\u5f15\u7528\u4e86\u5916\u90e8\u8868\u683c\u4e2d\u7684 \u952e\u3002\u8fd9\u4e5f\u6709\u4e00\u4e2a\u6280\u672f\u672f\u8bed\uff0c<code>team_id</code> \u88ab\u79f0\u4e3a \"\u5916\u952e\"\u3002</p>"},{"location":"databases/#_11","title":"\u5173\u7cfb\u548c\u5173\u7cfb\u578b\u6570\u636e\u5e93","text":"<p>\u8fd9\u4e9b\u8868\u683c\u7684\u6280\u672f\u6027\u548c\u5b66\u672f\u6027\u672f\u8bed\u662f \"\u5173\u7cfb\"\u3002</p> <p>\u4f60\u5728\u8c08\u8bba\u8fd9\u4e9b\u6570\u636e\u5e93\u65f6\uff0c\u53ef\u80fd\u4f1a\u7ecf\u5e38\u542c\u5230\u8fd9\u4e2a\u672f\u8bed\u3002</p> <p>\u8fd9\u4e2a\u672f\u8bed\u7684\u610f\u4e49\u5e76\u4e0d\u662f\u4f60\u5728\u82f1\u8bed\u4e2d\u4f7f\u7528\u7684\u201c\u4e0e\u67d0\u4e8b\u76f8\u5173\u201d\u7684\u610f\u601d\uff0c\u5c3d\u7ba1\u8fd9\u4e9b\u8868\u683c\u4e4b\u95f4\u5b9e\u9645\u4e0a\u662f\u201c\u76f8\u5173\u201d\u7684\u3002</p> <p>\u6280\u672f\u672f\u8bed \u5173\u7cfb \u53ea\u662f\u6307\u6bcf\u4e00\u4e2a\u8868\u683c\u3002</p> <p>\u6b63\u56e0\u4e3a\u8fd9\u4e2a\u6280\u672f\u672f\u8bed\uff0c\u8fd9\u4e9b SQL \u6570\u636e\u5e93 \u4e5f\u88ab\u79f0\u4e3a \u5173\u7cfb\u578b\u6570\u636e\u5e93\uff08\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u662f\u6280\u672f\u4e0a\u6b63\u786e\u7684\u672f\u8bed\uff09\u3002\u4f46\u5b83\u4ecd\u7136\u53ea\u662f\u6307\u7531\u591a\u4e2a\u8868\u683c\u7ec4\u6210\u7684\u6570\u636e\u5e93\u3002</p>"},{"location":"databases/#sql-","title":"SQL - \u8bed\u8a00","text":"<p>\u5728\u53d1\u5c55\u51fa\u5982\u4f55\u5c06\u6570\u636e\u5b58\u50a8\u5728\u591a\u4e2a\u8868\u683c\u4e2d\u7684\u8fd9\u4e9b\u601d\u60f3\u540e\uff0c\u4ed6\u4eec\u8fd8\u521b\u5efa\u4e86\u4e00\u79cd \u8bed\u8a00\uff0c\u53ef\u4ee5\u7528\u6765\u4e0e\u8fd9\u4e9b\u6570\u636e\u5e93\u8fdb\u884c\u4ea4\u4e92\u3002</p> <p>\u8fd9\u79cd\u8bed\u8a00\u53eb\u505a SQL\uff0c\u5b83\u7684\u540d\u5b57\u6765\u81ea\u4e8e Structured Query Language\uff08\u7ed3\u6784\u5316\u67e5\u8be2\u8bed\u8a00\uff09\u3002</p> <p>\u7136\u800c\uff0c\u8fd9\u79cd\u8bed\u8a00\u4e0d\u4ec5\u4ec5\u7528\u4e8e \u67e5\u8be2 \u6570\u636e\u3002\u5b83\u4e5f\u7528\u4e8e\u521b\u5efa\u8bb0\u5f55/\u884c\u3001\u66f4\u65b0\u5b83\u4eec\u3001\u5220\u9664\u5b83\u4eec\uff0c\u4ee5\u53ca\u64cd\u4f5c\u6570\u636e\u5e93\u3001\u521b\u5efa\u8868\u683c\u7b49\u3002</p> <p>\u6240\u6709\u8fd9\u4e9b\u5904\u7406\u591a\u4e2a\u8868\u683c\u7684\u6570\u636e\u5e93\u90fd\u652f\u6301\u8fd9\u79cd\u8bed\u8a00\uff0c\u8fd9\u4e5f\u662f\u5b83\u4eec\u88ab\u79f0\u4e3a SQL \u6570\u636e\u5e93 \u7684\u539f\u56e0\u3002\u5c3d\u7ba1\uff0c\u6bcf\u4e2a\u6570\u636e\u5e93\u5728\u652f\u6301\u7684 SQL \u8bed\u8a00\u4e0a\u6709\u4e9b\u5c0f\u7684\u53d8\u5316\uff08\u65b9\u8a00\uff09\u3002</p> <p>\u5047\u8bbe\u5b58\u50a8\u82f1\u96c4\u6570\u636e\u7684\u8868\u683c\u53eb\u505a <code>hero</code> \u8868\u683c\u3002\u4e00\u4e2a\u67e5\u8be2\u6240\u6709\u6570\u636e\u7684 SQL \u67e5\u8be2\u53ef\u80fd\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>SELECT *\nFROM hero;\n</code></pre> <p>\u8fd9\u4e2a SQL \u67e5\u8be2\u5c06\u8fd4\u56de\u5982\u4e0b\u8868\u683c\uff1a</p> idnamesecret_nameageteam_id 1DeadpondDive Wilsonnull2 2Spider-BoyPedro Parqueadornull1 3Rusty-ManTommy Sharp481"},{"location":"databases/#sqlmodel-for-sql","title":"SQLModel for SQL","text":"<p>SQLModel \u662f\u4e00\u4e2a\u5e93\uff0c\u5e2e\u52a9\u4f60\u4f7f\u7528\u5e38\u89c4 Python \u5bf9\u8c61\u7f16\u5199 Python \u4ee3\u7801\uff0c\u7136\u540e\u5b83\u5c06\u8fd9\u4e9b\u4ee3\u7801\u8f6c\u6362\u4e3a\u53d1\u9001\u5230 SQL \u6570\u636e\u5e93 \u7684 SQL \u8bed\u53e5\u3002</p> <p>\u63a5\u4e0b\u6765\uff0c\u5b83\u63a5\u6536\u6570\u636e\u5e76\u5c06\u5176\u8f6c\u5316\u4e3a Python \u5bf9\u8c61\uff0c\u65b9\u4fbf\u4f60\u7ee7\u7eed\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528\u3002</p> <p>\u5728\u63a5\u4e0b\u6765\u7684\u90e8\u5206\uff0c\u6211\u5c06\u544a\u8bc9\u4f60\u66f4\u591a\u5173\u4e8e SQL\u3001SQLModel\u3001\u5982\u4f55\u4f7f\u7528\u5b83\u4eec\u4ee5\u53ca\u5b83\u4eec\u4e4b\u95f4\u7684\u5173\u7cfb\u3002</p> <p>\u6280\u672f\u7ec6\u8282</p> <p>SQLModel \u662f\u57fa\u4e8e SQLAlchemy \u6784\u5efa\u7684\u3002\u5b83\u5b9e\u9645\u4e0a\u5c31\u662f SQLAlchemy \u548c Pydantic \u7684\u7ed3\u5408\uff0c\u5916\u52a0\u4e00\u4e9b\u65b9\u4fbf\u7684\u529f\u80fd\u3002</p>"},{"location":"databases/#nosql","title":"NoSQL \u6570\u636e\u5e93","text":"<p>\u867d\u7136 SQL \u6570\u636e\u5e93\u662f\u6700\u53e4\u8001\u4e14\u6700\u5e38\u7528\u7684\u6570\u636e\u5e93\u7c7b\u578b\uff0c\u4f46\u8fd8\u6709\u53e6\u4e00\u7c7b\uff08\u975e\u5e38\u6709\u8da3\u7684\uff09\u7c7b\u578b\uff0c\u5373 NoSQL \u6570\u636e\u5e93\u3002</p> <p>NoSQL \u6570\u636e\u5e93 \u5305\u62ec\u8bb8\u591a\u4e0d\u540c\u7684\u5b50\u7c7b\u578b\uff0c\u5305\u62ec\u952e\u503c\u5b58\u50a8\u3001\u6587\u6863\u5b58\u50a8\u3001\u56fe\u6570\u636e\u5e93\u7b49\u3002</p> <p>SQLModel \u53ea\u80fd\u5e2e\u52a9\u4f60\u5904\u7406 SQL \u6570\u636e\u5e93\u3002\u6240\u4ee5\uff0c\u6587\u6863\u7684\u5176\u4f59\u90e8\u5206\u5c06\u96c6\u4e2d\u8ba8\u8bba SQL \u6570\u636e\u5e93\u3002</p>"},{"location":"db-to-code/","title":"\u6570\u636e\u5e93\u4e0e\u4ee3\u7801\uff08ORM\uff09","text":"<p>\u5728\u8fd9\u91cc\uff0c\u6211\u5c06\u544a\u8bc9\u4f60 SQLModel \u5982\u4f55\u4e0e\u6570\u636e\u5e93\u4ea4\u4e92\uff0c\u4e3a\u4ec0\u4e48\u4f60\u4f1a\u60f3\u4f7f\u7528\u5b83\uff08\u6216\u8005\u7c7b\u4f3c\u7684\u5de5\u5177\uff09\uff0c\u4ee5\u53ca\u5b83\u5982\u4f55\u4e0e SQL \u76f8\u5173\u8054\u3002</p>"},{"location":"db-to-code/#sql","title":"\u4ee3\u7801\u4e2d\u7684 SQL \u5185\u8054","text":"<p>\u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u7b80\u5355\u7684 SQL \u67e5\u8be2\u793a\u4f8b\uff0c\u7528\u4e8e\u83b7\u53d6 <code>hero</code> \u8868\u4e2d\u7684\u6240\u6709\u6570\u636e\uff1a</p> <pre><code>SELECT *\nFROM hero;\n</code></pre> <p>\u8fd9\u4e2a SQL \u67e5\u8be2\u5c06\u8fd4\u56de\u5982\u4e0b\u8868\u683c\uff1a</p> idnamesecret_nameageteam_id 1DeadpondDive Wilsonnull2 2Spider-BoyPedro Parqueadornull1 3Rusty-ManTommy Sharp481 <p>\u8fd9\u4e2a SQL \u8bed\u8a00\u6709\u4e00\u4e2a\u5c0f \u8b66\u544a\u3002\u5b83\u5e76\u4e0d\u662f\u4e3a\u4e86\u4e0e\u50cf Python \u8fd9\u6837\u7684\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u666e\u901a\u4ee3\u7801\u6df7\u5408\u4f7f\u7528\u800c\u8bbe\u8ba1\u7684\u3002\ud83d\udea8</p> <p>\u6240\u4ee5\uff0c\u5982\u679c\u4f60\u5728\u4f7f\u7528 Python\uff0c\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u5c06 SQL \u4ee3\u7801\u653e\u5728\u5b57\u7b26\u4e32\u4e2d\uff0c\u5e76\u5c06\u8be5\u5b57\u7b26\u4e32\u76f4\u63a5\u53d1\u9001\u5230\u6570\u636e\u5e93\u3002</p> <pre><code>statement = \"SELECT * FROM hero;\"\n\nresults = database.execute(statement)\n</code></pre> <p>\u4f46\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u5c06\u6ca1\u6709\u7f16\u8f91\u5668\u652f\u6301\u3001\u5185\u8054\u9519\u8bef\u63d0\u793a\u3001\u81ea\u52a8\u8865\u5168\u7b49\u529f\u80fd\u3002\u56e0\u4e3a\u5bf9\u7f16\u8f91\u5668\u6765\u8bf4\uff0cSQL \u8bed\u53e5\u53ea\u662f\u4e00\u4e2a\u6587\u672c\u5b57\u7b26\u4e32\u3002\u5982\u679c\u53d1\u751f\u9519\u8bef\uff0c\u7f16\u8f91\u5668\u5c06\u65e0\u6cd5\u63d0\u4f9b\u5e2e\u52a9\u3002\ud83d\ude14</p> <p>\u66f4\u91cd\u8981\u7684\u662f\uff0c\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4f60\u5c06\u53d1\u9001\u5e26\u6709\u4fee\u6539\u548c\u53c2\u6570\u7684 SQL \u5b57\u7b26\u4e32\u3002\u4f8b\u5982\uff0c\u8981\u83b7\u53d6\u67d0\u4e2a \u7279\u5b9a\u9879\u76ee ID \u7684\u6570\u636e\uff0c\u6216\u67d0\u4e2a \u65e5\u671f\u8303\u56f4 \u7684\u6570\u636e\u7b49\u3002</p> <p>\u800c\u4e14\uff0c\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4f60\u7684\u4ee3\u7801\u7528\u6765\u67e5\u8be2\u6216\u4fee\u6539\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u7684\u53c2\u6570\uff0c\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u662f\u6765\u81ea\u5916\u90e8\u7528\u6237\u3002</p> <p>\u4f8b\u5982\uff0c\u770b\u770b\u8fd9\u4e2a SQL \u67e5\u8be2\uff1a</p> <pre><code>SELECT *\nFROM hero\nWHERE id = 2;\n</code></pre> <p>\u5b83\u4f7f\u7528\u4e86\u53c2\u6570 <code>2</code>\u3002\u8fd9\u4e2a\u6570\u5b57 <code>2</code> \u53ef\u80fd\u662f\u67d0\u79cd\u65b9\u5f0f\u901a\u8fc7\u7528\u6237\u8f93\u5165\u5f97\u5230\u7684\u3002</p> <p>\u7528\u6237\u53ef\u80fd\u4ee5\u67d0\u79cd\u65b9\u5f0f\u544a\u8bc9\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\uff1a</p> <p>\u563f\uff0c\u6211\u60f3\u83b7\u53d6 ID \u4e3a\uff1a</p> <pre><code>2\n</code></pre> <p>\u67e5\u8be2\u7ed3\u679c\u5c06\u662f\u8fd9\u4e2a\u8868\u683c\uff08\u53ea\u6709\u4e00\u884c\u6570\u636e\uff09\uff1a</p> idnamesecret_nameageteam_id 2Spider-BoyPedro Parqueadornull1"},{"location":"db-to-code/#sql_1","title":"SQL \u6ce8\u5165","text":"<p>\u5047\u8bbe\u4f60\u7684\u4ee3\u7801\u5c06\u5916\u90e8\u7528\u6237\u63d0\u4f9b\u7684\u5185\u5bb9\u76f4\u63a5\u653e\u5165 SQL \u5b57\u7b26\u4e32\u4e2d\uff0c\u7136\u540e\u53d1\u9001\u7ed9\u6570\u636e\u5e93\u3002\u4ee3\u7801\u53ef\u80fd\u662f\u8fd9\u6837\u7684\uff1a</p> <pre><code># \u6c38\u8fdc\u4e0d\u8981\u8fd9\u6837\u505a\uff01\ud83d\udea8 \u7ee7\u7eed\u9605\u8bfb\u3002\n\nuser_id = input(\"\u8bf7\u8f93\u5165\u7528\u6237 ID: \")\n\nstatement = f\"SELECT * FROM hero WHERE id = {user_id};\"\n\nresults = database.execute(statement)\n</code></pre> <p>\u5982\u679c\u5916\u90e8\u7528\u6237\u5b9e\u9645\u4e0a\u662f\u653b\u51fb\u8005\uff0c\u4ed6\u4eec\u53ef\u80fd\u4f1a\u53d1\u9001\u4e00\u4e2a\u6076\u610f\u7684 SQL \u5b57\u7b26\u4e32\uff0c\u505a\u4e00\u4e9b\u53ef\u6015\u7684\u4e8b\u60c5\uff0c\u6bd4\u5982\u5220\u9664\u6240\u6709\u8bb0\u5f55\u3002\u8fd9\u5c31\u53eb\u505a \"SQL \u6ce8\u5165\"\u3002</p> <p>\u4f8b\u5982\uff0c\u5047\u8bbe\u8fd9\u4e2a\u65b0\u653b\u51fb\u8005\u7528\u6237\u8bf4\uff1a</p> <p>\u563f\uff0c\u6211\u60f3\u83b7\u53d6 ID \u4e3a\uff1a</p> <pre><code>2; DROP TABLE hero\n</code></pre> <p>\u7136\u540e\uff0c\u4e0a\u9762\u90a3\u4e2a\u5c06\u7528\u6237\u8f93\u5165\u653e\u5165 SQL \u7684\u4ee3\u7801\u5b9e\u9645\u4e0a\u4f1a\u5c06\u4ee5\u4e0b\u5185\u5bb9\u53d1\u9001\u5230\u6570\u636e\u5e93\uff1a</p> <pre><code>SELECT * FROM hero WHERE id = 2; DROP TABLE hero;\n</code></pre> <p>\u770b\u770b\u5728\u672b\u5c3e\u6dfb\u52a0\u7684\u90e8\u5206\u3002\u90a3\u662f\u53e6\u4e00\u4e2a\u5b8c\u6574\u7684 SQL \u8bed\u53e5\uff1a</p> <pre><code>DROP TABLE hero;\n</code></pre> <p>\u8fd9\u5c31\u662f\u4f60\u544a\u8bc9\u6570\u636e\u5e93\u5728 SQL \u4e2d\u5220\u9664\u6574\u4e2a <code>hero</code> \u8868\u7684\u65b9\u5f0f\u3002</p> <p>\u4e0d\uff01\uff01\uff01 \u6211\u4eec\u5931\u53bb\u4e86\u6240\u6709 <code>hero</code> \u8868\u4e2d\u7684\u6570\u636e\uff01\ud83d\udca5\ud83d\ude31</p>"},{"location":"db-to-code/#sql_2","title":"SQL \u6570\u636e\u6e05\u7406","text":"<p>\u786e\u4fdd\u5916\u90e8\u7528\u6237\u53d1\u9001\u7684\u5185\u5bb9\u5728 SQL \u5b57\u7b26\u4e32\u4e2d\u4f7f\u7528\u65f6\u662f\u5b89\u5168\u7684\u8fc7\u7a0b\u79f0\u4e3a \u6570\u636e\u6e05\u7406\u3002</p> <p>SQLModel\uff08\u5f97\u76ca\u4e8e SQLAlchemy\uff09\u9ed8\u8ba4\u63d0\u4f9b\u4e86\u8fd9\u4e2a\u529f\u80fd\u3002\u8bb8\u591a\u5176\u4ed6\u7c7b\u4f3c\u7684\u5de5\u5177\u4e5f\u4f1a\u63d0\u4f9b\u8be5\u529f\u80fd\u4ee5\u53ca\u8bb8\u591a\u5176\u4ed6\u7279\u6027\u3002</p> <p>\u73b0\u5728\u4f60\u51c6\u5907\u597d\u6b23\u8d4f\u6765\u81ea xkcd\u7684\u7b11\u8bdd\uff1a</p> <p></p>"},{"location":"db-to-code/#sqlmodel-sql","title":"\u4f7f\u7528 SQLModel \u8fdb\u884c SQL \u64cd\u4f5c","text":"<p>\u4f7f\u7528 SQLModel\uff0c\u4f60\u4e0d\u518d\u76f4\u63a5\u7f16\u5199 SQL \u8bed\u53e5\uff0c\u800c\u662f\u4f7f\u7528 Python \u7c7b\u548c\u5bf9\u8c61\u4e0e\u6570\u636e\u5e93\u4ea4\u4e92\u3002</p> <p>\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u4ee3\u7801\u5411\u6570\u636e\u5e93\u8bf7\u6c42 ID \u4e3a <code>2</code> \u7684\u82f1\u96c4\uff1a</p> <pre><code>user_id = input(\"\u8bf7\u8f93\u5165\u7528\u6237 ID: \")\n\nsession.exec(\n    select(Hero).where(Hero.id == user_id)\n).all()\n</code></pre> <p>\u5982\u679c\u7528\u6237\u63d0\u4f9b\u4e86\u8fd9\u4e2a ID\uff1a</p> <pre><code>2\n</code></pre> <p>...\u7ed3\u679c\u5c06\u662f\u4ee5\u4e0b\u8868\u683c\uff08\u4ec5\u4e00\u884c\uff09\uff1a</p> idnamesecret_nameageteam_id 2Spider-BoyPedro Parqueadornull1"},{"location":"db-to-code/#sql_3","title":"\u9632\u6b62 SQL \u6ce8\u5165","text":"<p>\u5982\u679c\u7528\u6237\u662f\u653b\u51fb\u8005\uff0c\u5e76\u8bd5\u56fe\u5c06\u4ee5\u4e0b\u5185\u5bb9\u4f5c\u4e3a\u201cID\u201d\u53d1\u9001\uff1a</p> <pre><code>2; DROP TABLE hero\n</code></pre> <p>\u90a3\u4e48 SQLModel \u4f1a\u5c06\u5176\u8f6c\u6362\u4e3a\u5b57\u9762\u5b57\u7b26\u4e32 <code>\"2; DROP TABLE hero\"</code>\u3002</p> <p>\u7136\u540e\uff0c\u5b83\u4f1a\u544a\u8bc9 SQL \u6570\u636e\u5e93\u5c1d\u8bd5\u67e5\u627e\u5177\u6709\u8be5\u786e\u5207 ID \u7684\u8bb0\u5f55\uff0c\u800c\u4e0d\u662f\u6ce8\u5165\u653b\u51fb\u3002</p> <p>\u6700\u7ec8 SQL \u8bed\u53e5\u4e2d\u7684\u5dee\u5f02\u662f\u5fae\u5999\u7684\uff0c\u4f46\u5b83\u5b8c\u5168\u6539\u53d8\u4e86\u542b\u4e49\uff1a</p> <pre><code>SELECT * FROM hero WHERE id = \"2; DROP TABLE hero;\";\n</code></pre> <p>Tip</p> <p>\u6ce8\u610f\u53cc\u5f15\u53f7 (<code>\"</code>) \u5c06\u5176\u53d8\u4e3a\u5b57\u7b26\u4e32\uff0c\u800c\u4e0d\u662f\u66f4\u591a\u7684\u539f\u59cb SQL\u3002</p> <p>\u6570\u636e\u5e93\u5c06\u4e0d\u4f1a\u627e\u5230\u4efb\u4f55\u5177\u6709\u8be5 ID \u7684\u8bb0\u5f55\uff1a</p> <pre><code>\"2; DROP TABLE hero;\"\n</code></pre> <p>\u7136\u540e\uff0c\u6570\u636e\u5e93\u4f1a\u8fd4\u56de\u4e00\u4e2a\u7a7a\u8868\u683c\u4f5c\u4e3a\u7ed3\u679c\uff0c\u56e0\u4e3a\u5b83\u6ca1\u6709\u627e\u5230\u4efb\u4f55\u5177\u6709\u8be5 ID \u7684\u8bb0\u5f55\u3002</p> <p>\u63a5\u7740\u4f60\u7684\u4ee3\u7801\u5c06\u7ee7\u7eed\u6267\u884c\uff0c\u5e76\u5e73\u9759\u5730\u544a\u8bc9\u7528\u6237\u6ca1\u6709\u627e\u5230\u4efb\u4f55\u5185\u5bb9\u3002</p> <p>\u4f46\u6211\u4eec\u4ece\u672a\u5220\u9664\u8fc7 <code>hero</code> \u8868\u3002\ud83c\udf89</p> <p>Info</p> <p>\u5f53\u7136\uff0c\u4e5f\u6709\u5176\u4ed6\u65b9\u6cd5\u53ef\u4ee5\u8fdb\u884c SQL \u6570\u636e\u6e05\u7406\uff0c\u800c\u65e0\u9700\u4f7f\u7528\u50cf SQLModel \u8fd9\u6837\u7684\u5de5\u5177\uff0c\u4f46\u8fd9\u4ecd\u7136\u662f\u4f60\u9ed8\u8ba4\u5f97\u5230\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u7279\u6027\u3002</p>"},{"location":"db-to-code/#_1","title":"\u7f16\u8f91\u5668\u652f\u6301","text":"<p>\u518d\u770b\u4e00\u4e0b\u4e0a\u9762\u7684 Python \u4ee3\u7801\u7247\u6bb5\u3002</p> <p>\u56e0\u4e3a\u6211\u4eec\u4f7f\u7528\u7684\u662f \u6807\u51c6 Python \u7c7b\u548c\u5bf9\u8c61\uff0c\u6240\u4ee5\u4f60\u7684\u7f16\u8f91\u5668\u5c06\u80fd\u591f\u4e3a\u4f60\u63d0\u4f9b\u81ea\u52a8\u8865\u5168\u3001\u5185\u8054\u9519\u8bef\u7b49\u529f\u80fd\u3002</p> <p>\u4f8b\u5982\uff0c\u5047\u8bbe\u4f60\u60f3\u8981\u67e5\u8be2\u6570\u636e\u5e93\uff0c\u67e5\u627e\u4e00\u4e2a\u57fa\u4e8e\u79d8\u5bc6\u8eab\u4efd\u7684\u82f1\u96c4\u3002</p> <p>\u4e5f\u8bb8\u4f60\u4e0d\u8bb0\u5f97\u4f60\u662f\u5982\u4f55\u547d\u540d\u8be5\u5217\u7684\u3002\u53ef\u80fd\u662f\uff1a</p> <ul> <li><code>secret_identity</code>?</li> </ul> <p>...\u8fd8\u662f\uff1a</p> <ul> <li><code>secretidentity</code>?</li> </ul> <p>...\u6216\u8005\uff1a</p> <ul> <li><code>private_name</code>?</li> <li><code>secret_name</code>?</li> <li><code>secretname</code>?</li> </ul> <p>\u5982\u679c\u4f60\u5728\u4ee3\u7801\u4e2d\u7684 SQL \u5b57\u7b26\u4e32\u91cc\u952e\u5165\u8fd9\u4e9b\uff0c\u7f16\u8f91\u5668 \u65e0\u6cd5\u5e2e\u52a9\u4f60\uff1a</p> <pre><code>statement = \"SELECT * FROM hero WHERE secret_identity = 'Dive Wilson';\"\n\nresults = database.execute(statement)\n</code></pre> <p>...\u7f16\u8f91\u5668\u4f1a\u628a\u5b83\u770b\u4f5c\u4e00\u4e2a \u957f\u5b57\u7b26\u4e32\uff0c\u5176\u4e2d\u6709\u4e00\u4e9b\u6587\u672c\uff0c\u5e76\u4e14 \u65e0\u6cd5\u81ea\u52a8\u8865\u5168 \u6216\u68c0\u6d4b <code>secret_identity</code> \u4e2d\u7684\u9519\u8bef\u3002</p> <p>\u4f46\u5982\u679c\u4f60\u4f7f\u7528\u5e38\u89c1\u7684 Python \u7c7b\u548c\u5bf9\u8c61\uff0c\u7f16\u8f91\u5668\u5c06\u80fd\u591f\u5e2e\u52a9\u4f60\uff1a</p> <pre><code>database.execute(\n    select(Hero).where(Hero.secret_name == \"Dive Wilson\")\n).all()\n</code></pre> <p></p>"},{"location":"db-to-code/#orm-sql","title":"ORM \u548c SQL","text":"<p>\u50cf SQLModel\uff08\u5f53\u7136\u8fd8\u6709 SQLAlchemy\uff09\u8fd9\u6837\u7684\u5e93\uff0c\u5b83\u4eec\u901a\u8fc7\u7c7b\u548c\u5bf9\u8c61\u5728 SQL \u548c\u4ee3\u7801\u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362\uff0c\u79f0\u4e3a ORM\u3002</p> <p>ORM \u4ee3\u8868 \u5bf9\u8c61\u5173\u7cfb\u6620\u5c04\u5668\uff08Object-Relational Mapper\uff09\u3002</p> <p>\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u5e38\u89c1\u7684\u672f\u8bed\uff0c\u4f46\u5b83\u4e5f\u6e90\u81ea\u76f8\u5f53\u6280\u672f\u6027\u548c \u5b66\u672f\u6027 \u7684\u6982\u5ff5 \ud83d\udc69\u200d\ud83c\udf93\uff1a</p> <ul> <li>\u5bf9\u8c61\uff1a\u6307\u7684\u662f\u4f7f\u7528\u7c7b\u548c\u5b9e\u4f8b\u7684\u4ee3\u7801\uff0c\u901a\u5e38\u79f0\u4e3a\u201c\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u201d\uff0c\u8fd9\u5c31\u662f\u201c\u5bf9\u8c61\u201d\u90e8\u5206\u7684\u6765\u6e90\u3002</li> </ul> <p>\u4f8b\u5982\uff0c\u8fd9\u4e2a\u7c7b\u5c31\u662f\u5c5e\u4e8e\u90a3\u79cd \u9762\u5411\u5bf9\u8c61\u7f16\u7a0b \u7684\u4e00\u90e8\u5206\uff1a</p> <pre><code>class Hero(SQLModel):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n</code></pre> <ul> <li>\u5173\u7cfb\uff1a\u6307\u7684\u662f SQL \u6570\u636e\u5e93\u3002\u8bb0\u4f4f\u5b83\u4eec\u4e5f\u88ab\u79f0\u4e3a \u5173\u7cfb\u578b\u6570\u636e\u5e93\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u8868\u4e5f\u88ab\u79f0\u4e3a\u201c\u5173\u7cfb\u201d\uff1f\u8fd9\u5c31\u662f\u201c\u5173\u7cfb\u201d\u90e8\u5206\u7684\u6765\u6e90\u3002</li> </ul> <p>\u4f8b\u5982\uff0c\u8fd9\u4e2a \u5173\u7cfb \u6216\u8868\uff1a</p> idnamesecret_nameageteam_id 1DeadpondDive Wilsonnull2 2Spider-BoyPedro Parqueadornull1 3Rusty-ManTommy Sharp481 <ul> <li>\u6620\u5c04\u5668\uff1a\u8fd9\u4e2a\u8bcd\u6765\u6e90\u4e8e\u6570\u5b66\uff0c\u5f53\u6709\u67d0\u4e9b\u4e1c\u897f\u80fd\u591f\u4ece\u4e00\u4e2a\u96c6\u5408\u8f6c\u6362\u5230\u53e6\u4e00\u4e2a\u96c6\u5408\u65f6\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a\u201c\u6620\u5c04\u51fd\u6570\u201d\u3002\u8fd9\u5c31\u662f \u6620\u5c04\u5668 \u7684\u6765\u6e90\u3002</li> </ul> <p></p> <p>\u6211\u4eec\u4e5f\u53ef\u4ee5\u5199\u4e00\u4e2a \u6620\u5c04\u51fd\u6570\uff0c\u5c06 \u5c0f\u5199\u5b57\u6bcd\u7684\u96c6\u5408 \u8f6c\u6362\u4e3a \u5927\u5199\u5b57\u6bcd\u7684\u96c6\u5408\uff0c\u50cf\u8fd9\u6837\uff1a</p> <pre><code>def map_lower_to_upper(value: str):\n    return value.upper()\n</code></pre> <p>\u8fd9\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u60f3\u6cd5\uff0c\u4f46\u5374\u6709\u4e00\u4e2a\u975e\u5e38\u5b66\u672f\u548c\u6570\u5b66\u7684\u540d\u79f0\u3002\ud83d\ude05</p> <p>\u56e0\u6b64\uff0cORM \u662f\u4e00\u4e2a\u5c06 SQL \u548c\u4ee3\u7801\u4e4b\u95f4\u76f8\u4e92\u8f6c\u6362\u7684\u5e93\uff0c\u4e14\u5168\u90e8\u4f7f\u7528\u7c7b\u548c\u5bf9\u8c61\u3002</p> <p>\u9664\u4e86 SQLModel\uff0c\u8fd8\u6709\u8bb8\u591a\u5176\u4ed6 ORM \u53ef\u7528\uff0c\u4f60\u53ef\u4ee5\u5728 \u66ff\u4ee3\u65b9\u6848\u3001\u7075\u611f\u548c\u6bd4\u8f83 \u4e2d\u4e86\u89e3\u66f4\u591a\u3002</p>"},{"location":"db-to-code/#sql_4","title":"SQL \u8868\u540d","text":"<p>\u6280\u672f\u80cc\u666f</p> <p>\u8fd9\u662f SQL \u7eaf\u7cb9\u4e3b\u4e49\u8005\u7684\u80cc\u666f\u77e5\u8bc6\u3002\u4f60\u53ef\u4ee5\u8df3\u8fc7\u8fd9\u4e00\u90e8\u5206\u3002\ud83d\ude09</p> <p>\u5728\u4f7f\u7528\u7eaf SQL \u65f6\uff0c\u901a\u5e38\u4f1a\u5c06\u8868\u547d\u540d\u4e3a\u590d\u6570\u5f62\u5f0f\u3002\u56e0\u6b64\uff0c\u8868\u4f1a\u547d\u540d\u4e3a <code>heroes</code> \u800c\u4e0d\u662f <code>hero</code>\uff0c\u56e0\u4e3a\u5b83\u53ef\u80fd\u5305\u542b\u591a\u884c\uff0c\u6bcf\u884c\u4ee3\u8868\u4e00\u4e2a\u82f1\u96c4\u3002</p> <p>\u7136\u800c\uff0cSQLModel \u548c\u8bb8\u591a\u5176\u4ed6\u7c7b\u4f3c\u5de5\u5177\u53ef\u4ee5\u6839\u636e\u4f60\u7684\u4ee3\u7801\u81ea\u52a8\u751f\u6210\u8868\u540d\uff0c\u6b63\u5982\u4f60\u5728\u672c\u6559\u7a0b\u7a0d\u540e\u4f1a\u770b\u5230\u7684\u90a3\u6837\u3002</p> <p>\u4f46\u662f\uff0c\u8fd9\u4e2a\u540d\u79f0\u662f\u4ece\u7c7b\u540d\u6d3e\u751f\u51fa\u6765\u7684\u3002\u901a\u5e38\u7684\u505a\u6cd5\u662f\u4e3a\u7c7b\u4f7f\u7528 \u5355\u6570 \u540d\u79f0\uff08\u4f8b\u5982 <code>class Hero</code>\uff0c\u800c\u4e0d\u662f <code>class Heroes</code>\uff09\u3002\u4e3a\u7c7b\u4f7f\u7528\u5355\u6570\u540d\u79f0\uff08\u5982 <code>class Hero</code>\uff09\u8fd8\u80fd\u8ba9\u4f60\u7684\u4ee3\u7801\u66f4\u52a0\u76f4\u89c2\u3002</p> <p>\u4f60\u4f1a\u770b\u5230 \u4f60\u81ea\u5df1\u7684\u4ee3\u7801 \u6bd4\u5185\u90e8\u8868\u540d\u8981\u591a\u5f97\u591a\uff0c\u56e0\u6b64\u4fdd\u6301\u7c7b/\u4ee3\u7801\u547d\u540d\u89c4\u8303\u6bd4 SQL \u547d\u540d\u89c4\u8303\u53ef\u80fd\u66f4\u5408\u9002\u3002</p> <p>\u6240\u4ee5\uff0c\u4e3a\u4e86\u4fdd\u6301\u4e00\u81f4\u6027\uff0c\u6211\u5c06\u7ee7\u7eed\u4f7f\u7528 SQLModel \u751f\u6210\u7684\u76f8\u540c\u8868\u540d\u3002</p> <p>Tip</p> <p>\u4f60\u4e5f\u53ef\u4ee5\u8986\u76d6\u8868\u540d\u3002\u4f60\u53ef\u4ee5\u5728\u9ad8\u7ea7\u7528\u6237\u6307\u5357\u4e2d\u4e86\u89e3\u66f4\u591a\u5185\u5bb9\u3002</p>"},{"location":"environment-variables/","title":"\u73af\u5883\u53d8\u91cf","text":"<p>\u5728\u6211\u4eec\u8fdb\u5165\u4ee3\u7801\u4e4b\u524d\uff0c\u5148\u4e86\u89e3\u4e00\u4e9b \u57fa\u7840\u77e5\u8bc6\uff0c\u5e2e\u52a9\u6211\u4eec\u7406\u89e3\u5982\u4f55\u4f7f\u7528 Python\uff08\u4ee5\u53ca\u4e00\u822c\u7684\u7f16\u7a0b\uff09\u3002\u8ba9\u6211\u4eec\u5148\u770b\u4e00\u4e0b \u73af\u5883\u53d8\u91cf\u3002</p> <p>Tip</p> <p>\u5982\u679c\u4f60\u5df2\u7ecf\u77e5\u9053\u4ec0\u4e48\u662f\u201c\u73af\u5883\u53d8\u91cf\u201d\u4ee5\u53ca\u5982\u4f55\u4f7f\u7528\u5b83\u4eec\uff0c\u53ef\u4ee5\u8df3\u8fc7\u8fd9\u4e00\u90e8\u5206\u3002</p> <p>\u73af\u5883\u53d8\u91cf\uff08\u4e5f\u79f0\u4e3a\u201cenv var\u201d\uff09\u662f\u4e00\u4e2a\u5b58\u5728\u4e8e \u64cd\u4f5c\u7cfb\u7edf \u4e2d\u7684\u53d8\u91cf\uff0c\u4e0d\u5728 Python \u4ee3\u7801\u5185\uff0c\u4f46\u53ef\u4ee5\u88ab Python \u4ee3\u7801\uff08\u6216\u8005\u5176\u4ed6\u7a0b\u5e8f\uff09\u8bfb\u53d6\u3002</p> <p>\u73af\u5883\u53d8\u91cf\u5bf9\u4e8e\u5904\u7406\u5e94\u7528\u7a0b\u5e8f\u7684 \u8bbe\u7f6e\u3001\u4f5c\u4e3a Python \u7684 \u5b89\u88c5 \u4e00\u90e8\u5206\u7b49\u975e\u5e38\u6709\u7528\u3002</p>"},{"location":"environment-variables/#_2","title":"\u521b\u5efa\u548c\u4f7f\u7528\u73af\u5883\u53d8\u91cf","text":"<p>\u4f60\u53ef\u4ee5\u5728 \u7ec8\u7aef\uff08Shell\uff09 \u4e2d \u521b\u5efa \u548c\u4f7f\u7528\u73af\u5883\u53d8\u91cf\uff0c\u65e0\u9700 Python\uff1a</p> Linux, macOS, Windows BashWindows PowerShell <pre><code>// \u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a MY_NAME \u7684\u73af\u5883\u53d8\u91cf\n$ export MY_NAME=\"Wade Wilson\"\n\n// \u7136\u540e\u4f60\u53ef\u4ee5\u5728\u5176\u4ed6\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u5b83\uff0c\u6bd4\u5982\uff1a\n$ echo \"Hello $MY_NAME\"\n\nHello Wade Wilson\n</code></pre> <pre><code>// \u521b\u5efa\u4e00\u4e2a\u73af\u5883\u53d8\u91cf MY_NAME\n$ $Env:MY_NAME = \"Wade Wilson\"\n\n// \u5728\u5176\u4ed6\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u5b83\uff0c\u6bd4\u5982\uff1a\n$ echo \"Hello $Env:MY_NAME\"\n\nHello Wade Wilson\n</code></pre>"},{"location":"environment-variables/#python","title":"\u5728 Python \u4e2d\u8bfb\u53d6\u73af\u5883\u53d8\u91cf","text":"<p>\u4f60\u4e5f\u53ef\u4ee5\u5728 Python \u5916\u90e8 \u521b\u5efa\u73af\u5883\u53d8\u91cf\uff08\u901a\u8fc7\u7ec8\u7aef\u6216\u5176\u4ed6\u65b9\u6cd5\uff09\uff0c\u7136\u540e \u5728 Python \u4e2d\u8bfb\u53d6\u5b83\u4eec\u3002</p> <p>\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u6709\u4e00\u4e2a\u6587\u4ef6 <code>main.py</code>\uff0c\u5176\u4e2d\u5305\u542b\uff1a</p> <pre><code>import os\n\nname = os.getenv(\"MY_NAME\", \"World\")\nprint(f\"Hello {name} from Python\")\n</code></pre> <p>Tip</p> <p><code>os.getenv()</code> \u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u9ed8\u8ba4\u503c\u3002\u5982\u679c\u6ca1\u6709\u63d0\u4f9b\uff0c\u9ed8\u8ba4\u4e3a <code>None</code>\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u63d0\u4f9b <code>\"World\"</code> \u4f5c\u4e3a\u9ed8\u8ba4\u503c\u3002</p> <p>\u7136\u540e\u4f60\u53ef\u4ee5\u8c03\u7528\u8fd9\u4e2a Python \u7a0b\u5e8f\uff1a</p> Linux, macOS, Windows BashWindows PowerShell <pre><code>// \u8fd9\u91cc\u6211\u4eec\u8fd8\u6ca1\u6709\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\n$ python main.py\n\n// \u56e0\u4e3a\u6211\u4eec\u6ca1\u6709\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\uff0c\u6240\u4ee5\u5f97\u5230\u9ed8\u8ba4\u503c\n\nHello World from Python\n\n// \u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u5148\u521b\u5efa\u73af\u5883\u53d8\u91cf\n$ export MY_NAME=\"Wade Wilson\"\n\n// \u7136\u540e\u518d\u6b21\u8c03\u7528\u7a0b\u5e8f\n$ python main.py\n\n// \u73b0\u5728\u5b83\u53ef\u4ee5\u8bfb\u53d6\u73af\u5883\u53d8\u91cf\n\nHello Wade Wilson from Python\n</code></pre> <pre><code>// \u8fd9\u91cc\u6211\u4eec\u8fd8\u6ca1\u6709\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\n$ python main.py\n\n// \u56e0\u4e3a\u6211\u4eec\u6ca1\u6709\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\uff0c\u6240\u4ee5\u5f97\u5230\u9ed8\u8ba4\u503c\n\nHello World from Python\n\n// \u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u5148\u521b\u5efa\u73af\u5883\u53d8\u91cf\n$ $Env:MY_NAME = \"Wade Wilson\"\n\n// \u7136\u540e\u518d\u6b21\u8c03\u7528\u7a0b\u5e8f\n$ python main.py\n\n// \u73b0\u5728\u5b83\u53ef\u4ee5\u8bfb\u53d6\u73af\u5883\u53d8\u91cf\n\nHello Wade Wilson from Python\n</code></pre> <p>\u7531\u4e8e\u73af\u5883\u53d8\u91cf\u53ef\u4ee5\u5728\u4ee3\u7801\u4e4b\u5916\u8bbe\u7f6e\uff0c\u4f46\u53ef\u4ee5\u88ab\u4ee3\u7801\u8bfb\u53d6\uff0c\u800c\u4e14\u4e0d\u9700\u8981\u548c\u5176\u4ed6\u6587\u4ef6\u4e00\u8d77\u5b58\u50a8\uff08\u63d0\u4ea4\u5230 <code>git</code>\uff09\uff0c\u56e0\u6b64\u901a\u5e38\u7528\u5b83\u4eec\u6765\u914d\u7f6e\u6216\u5b58\u50a8 \u8bbe\u7f6e\u3002</p> <p>\u4f60\u8fd8\u53ef\u4ee5\u4e3a \u7279\u5b9a\u7684\u7a0b\u5e8f\u8c03\u7528 \u521b\u5efa\u73af\u5883\u53d8\u91cf\uff0c\u5b83\u4ec5\u5bf9\u8be5\u7a0b\u5e8f\u6709\u6548\uff0c\u5e76\u4e14\u53ea\u5728\u7a0b\u5e8f\u8fd0\u884c\u671f\u95f4\u5b58\u5728\u3002</p> <p>\u4e3a\u6b64\uff0c\u53ef\u4ee5\u5728\u7a0b\u5e8f\u672c\u8eab\u4e4b\u524d\u7684\u540c\u4e00\u884c\u521b\u5efa\u73af\u5883\u53d8\u91cf\uff1a</p> <pre><code>// \u5728\u8fd9\u4e00\u884c\u4e2d\u4e3a\u8be5\u7a0b\u5e8f\u8c03\u7528\u521b\u5efa\u73af\u5883\u53d8\u91cf MY_NAME\n$ MY_NAME=\"Wade Wilson\" python main.py\n\n// \u73b0\u5728\u5b83\u53ef\u4ee5\u8bfb\u53d6\u73af\u5883\u53d8\u91cf\n\nHello Wade Wilson from Python\n\n// \u7a0b\u5e8f\u8c03\u7528\u540e\u73af\u5883\u53d8\u91cf\u4e0d\u518d\u5b58\u5728\n$ python main.py\n\nHello World from Python\n</code></pre> <p>Tip</p> <p>\u4f60\u53ef\u4ee5\u5728 \u300aThe Twelve-Factor App: Config\u300b \u4e2d\u9605\u8bfb\u66f4\u591a\u76f8\u5173\u5185\u5bb9\u3002</p>"},{"location":"environment-variables/#_3","title":"\u7c7b\u578b\u4e0e\u9a8c\u8bc1","text":"<p>\u8fd9\u4e9b\u73af\u5883\u53d8\u91cf\u53ea\u80fd\u5904\u7406 \u6587\u672c\u5b57\u7b26\u4e32\uff0c\u56e0\u4e3a\u5b83\u4eec\u5728 Python \u4e4b\u5916\uff0c\u5fc5\u987b\u4e0e\u5176\u4ed6\u7a0b\u5e8f\u548c\u6574\u4e2a\u7cfb\u7edf\u517c\u5bb9\uff08\u751a\u81f3\u4e0e\u4e0d\u540c\u64cd\u4f5c\u7cfb\u7edf\u5982 Linux\u3001Windows\u3001macOS \u517c\u5bb9\uff09\u3002</p> <p>\u8fd9\u610f\u5473\u7740 \u4ece\u73af\u5883\u53d8\u91cf\u8bfb\u53d6\u7684\u4efb\u4f55\u503c \u90fd\u5c06\u662f\u4e00\u4e2a <code>str</code> \u7c7b\u578b\uff0c\u4efb\u4f55\u8f6c\u6362\u4e3a\u5176\u4ed6\u7c7b\u578b\u6216\u9a8c\u8bc1\u90fd\u5fc5\u987b\u5728\u4ee3\u7801\u4e2d\u8fdb\u884c\u3002</p>"},{"location":"environment-variables/#path","title":"<code>PATH</code> \u73af\u5883\u53d8\u91cf","text":"<p>\u6709\u4e00\u4e2a \u7279\u6b8a\u7684 \u73af\u5883\u53d8\u91cf\u53eb\u505a <code>PATH</code>\uff0c\u64cd\u4f5c\u7cfb\u7edf\uff08Linux\u3001macOS\u3001Windows\uff09\u4f7f\u7528\u5b83\u6765\u67e5\u627e\u7a0b\u5e8f\u5e76\u6267\u884c\u3002</p> <p><code>PATH</code> \u53d8\u91cf\u7684\u503c\u662f\u4e00\u4e2a\u957f\u5b57\u7b26\u4e32\uff0c\u7531\u591a\u4e2a\u76ee\u5f55\u7ec4\u6210\uff0cLinux \u548c macOS \u7528\u5192\u53f7 <code>:</code> \u5206\u9694\uff0cWindows \u7528\u5206\u53f7 <code>;</code> \u5206\u9694\u3002</p> <p>\u4f8b\u5982\uff0c<code>PATH</code> \u73af\u5883\u53d8\u91cf\u53ef\u80fd\u662f\u8fd9\u6837\u7684\uff1a</p> Linux, macOSWindows <pre><code>/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\n</code></pre> <p>\u8fd9\u610f\u5473\u7740\u7cfb\u7edf\u5e94\u8be5\u5728\u4ee5\u4e0b\u76ee\u5f55\u4e2d\u67e5\u627e\u7a0b\u5e8f\uff1a</p> <ul> <li><code>/usr/local/bin</code></li> <li><code>/usr/bin</code></li> <li><code>/bin</code></li> <li><code>/usr/sbin</code></li> <li><code>/sbin</code></li> </ul> <pre><code>C:\\Program Files\\Python312\\Scripts;C:\\Program Files\\Python312;C:\\Windows\\System32\n</code></pre> <p>\u8fd9\u610f\u5473\u7740\u7cfb\u7edf\u5e94\u8be5\u5728\u4ee5\u4e0b\u76ee\u5f55\u4e2d\u67e5\u627e\u7a0b\u5e8f\uff1a</p> <ul> <li><code>C:\\Program Files\\Python312\\Scripts</code></li> <li><code>C:\\Program Files\\Python312</code></li> <li><code>C:\\Windows\\System32</code></li> </ul> <p>\u5f53\u4f60\u5728\u7ec8\u7aef\u4e2d\u8f93\u5165 \u547d\u4ee4 \u65f6\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a \u5728 <code>PATH</code> \u73af\u5883\u53d8\u91cf\u4e2d\u5217\u51fa\u7684\u6bcf\u4e2a\u76ee\u5f55\u4e2d\u67e5\u627e \u7a0b\u5e8f\u3002</p> <p>\u4f8b\u5982\uff0c\u5f53\u4f60\u5728\u7ec8\u7aef\u4e2d\u8f93\u5165 <code>python</code> \u65f6\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u9996\u5148\u5728 <code>PATH</code> \u4e2d\u7684 \u7b2c\u4e00\u4e2a\u76ee\u5f55 \u67e5\u627e\u540d\u4e3a <code>python</code> \u7684\u7a0b\u5e8f\u3002</p> <p>\u5982\u679c\u627e\u5230\uff0c\u5b83\u5c31\u4f1a \u4f7f\u7528 \u8be5\u7a0b\u5e8f\u3002\u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u5b83\u4f1a\u7ee7\u7eed\u5728 \u5176\u4ed6\u76ee\u5f55 \u4e2d\u67e5\u627e\u3002</p>"},{"location":"environment-variables/#python-path","title":"\u5b89\u88c5 Python \u548c\u66f4\u65b0 <code>PATH</code>","text":"<p>\u5f53\u4f60\u5b89\u88c5 Python \u65f6\uff0c\u53ef\u80fd\u4f1a\u88ab\u95ee\u5230\u662f\u5426\u8981\u66f4\u65b0 <code>PATH</code> \u73af\u5883\u53d8\u91cf\u3002</p> Linux, macOSWindows <p>\u5047\u8bbe\u4f60\u5b89\u88c5\u4e86 Python\uff0c\u5b89\u88c5\u76ee\u5f55\u662f <code>/opt/custompython/bin</code>\u3002</p> <p>\u5982\u679c\u4f60\u9009\u62e9\u66f4\u65b0 <code>PATH</code> \u73af\u5883\u53d8\u91cf\uff0c\u5b89\u88c5\u7a0b\u5e8f\u5c06\u4f1a\u628a <code>/opt/custompython/bin</code> \u6dfb\u52a0\u5230 <code>PATH</code> \u73af\u5883\u53d8\u91cf\u4e2d\u3002</p> <p>\u5b83\u53ef\u80fd\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a</p> <pre><code>/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/custompython/bin\n</code></pre> <p>\u8fd9\u6837\uff0c\u5f53\u4f60\u5728\u7ec8\u7aef\u4e2d\u8f93\u5165 <code>python</code> \u65f6\uff0c\u7cfb\u7edf\u5c31\u4f1a\u5728 <code>/opt/custompython/bin</code>\uff08\u6700\u540e\u4e00\u4e2a\u76ee\u5f55\uff09\u4e2d\u627e\u5230 Python \u7a0b\u5e8f\uff0c\u5e76\u4f7f\u7528\u8fd9\u4e2a\u7248\u672c\u3002</p> <p>\u5047\u8bbe\u4f60\u5b89\u88c5\u4e86 Python\uff0c\u5b89\u88c5\u76ee\u5f55\u662f <code>C:\\opt\\custompython\\bin</code>\u3002</p> <p>\u5982\u679c\u4f60\u9009\u62e9\u66f4\u65b0 <code>PATH</code> \u73af\u5883\u53d8\u91cf\uff0c\u5b89\u88c5\u7a0b\u5e8f\u5c06\u4f1a\u628a <code>C:\\opt\\custompython\\bin</code> \u6dfb\u52a0\u5230 <code>PATH</code> \u73af\u5883\u53d8\u91cf\u4e2d\u3002</p> <pre><code>C:\\Program Files\\Python312\\Scripts;C:\\Program Files\\Python312;C:\\Windows\\System32;C:\\opt\\custompython\\bin\n</code></pre> <p>\u8fd9\u6837\uff0c\u5f53\u4f60\u5728\u7ec8\u7aef\u4e2d\u8f93\u5165 <code>python</code> \u65f6\uff0c\u7cfb\u7edf\u5c31\u4f1a\u5728 <code>C:\\opt\\custompython\\bin</code>\uff08\u6700\u540e\u4e00\u4e2a\u76ee\u5f55\uff09\u4e2d\u627e\u5230 Python \u7a0b\u5e8f\uff0c\u5e76\u4f7f\u7528\u8fd9\u4e2a\u7248\u672c\u3002</p> <p>\u8fd9\u6837\uff0c\u5f53\u4f60\u5728\u7ec8\u7aef\u4e2d\u8f93\u5165 <code>python</code> \u65f6\uff0c\u7cfb\u7edf\u5c31\u4f1a\u5728 <code>/opt/custompython/bin</code>\uff08\u6700\u540e\u4e00\u4e2a\u76ee\u5f55\uff09\u4e2d\u627e\u5230 Python \u7a0b\u5e8f\uff0c\u5e76\u4f7f\u7528\u5b83\u3002</p> <p>\u56e0\u6b64\uff0c\u5982\u679c\u4f60\u8f93\u5165\uff1a</p> <pre><code>$ python\n</code></pre> Linux, macOSWindows <p>\u7cfb\u7edf\u5c06\u4f1a \u627e\u5230 <code>/opt/custompython/bin</code> \u4e2d\u7684 <code>python</code> \u7a0b\u5e8f\u5e76\u6267\u884c\u5b83\u3002</p> <p>\u8fd9\u5927\u81f4\u76f8\u5f53\u4e8e\u8f93\u5165\uff1a</p> <pre><code>$ /opt/custompython/bin/python\n</code></pre> <p>\u7cfb\u7edf\u5c06\u4f1a \u627e\u5230 <code>C:\\opt\\custompython\\bin\\python</code> \u4e2d\u7684 <code>python</code> \u7a0b\u5e8f\u5e76\u6267\u884c\u5b83\u3002</p> <p>\u8fd9\u5927\u81f4\u76f8\u5f53\u4e8e\u8f93\u5165\uff1a</p> <pre><code>$ C:\\opt\\custompython\\bin\\python\n</code></pre> <p>\u8fd9\u4e9b\u4fe1\u606f\u5c06\u5728\u5b66\u4e60 \u865a\u62df\u73af\u5883 \u65f6\u6d3e\u4e0a\u7528\u573a\u3002</p>"},{"location":"environment-variables/#_4","title":"\u7ed3\u8bba","text":"<p>\u901a\u8fc7\u8fd9\u4e9b\u5185\u5bb9\uff0c\u4f60\u5e94\u8be5\u5bf9 \u73af\u5883\u53d8\u91cf \u6709\u4e86\u57fa\u672c\u7684\u7406\u89e3\uff0c\u5e76\u77e5\u9053\u5982\u4f55\u5728 Python \u4e2d\u4f7f\u7528\u5b83\u4eec\u3002</p> <p>\u4f60\u4e5f\u53ef\u4ee5\u5728 \u7ef4\u57fa\u767e\u79d1 \u4e0a\u9605\u8bfb\u66f4\u591a\u6709\u5173\u73af\u5883\u53d8\u91cf\u7684\u4fe1\u606f\u3002</p> <p>\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u73af\u5883\u53d8\u91cf\u7684\u7528\u9014\u53ef\u80fd\u4e0d\u4f1a\u7acb\u5373\u663e\u73b0\u51fa\u6765\uff0c\u4f46\u5b83\u4eec\u4f1a\u5728\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u5728\u8bb8\u591a\u4e0d\u540c\u7684\u573a\u666f\u4e2d\uff0c\u56e0\u6b64\u4e86\u89e3\u5b83\u4eec\u662f\u5f88\u6709\u7528\u7684\u3002</p> <p>\u4f8b\u5982\uff0c\u4f60\u5c06\u5728\u4e0b\u4e00\u8282 \u865a\u62df\u73af\u5883 \u4e2d\u9700\u8981\u7528\u5230\u8fd9\u4e9b\u4fe1\u606f\u3002</p>"},{"location":"features/","title":"\u7279\u6027","text":""},{"location":"features/#fastapi","title":"\u4e3a FastAPI \u800c\u8bbe\u8ba1","text":"<p>SQLModel \u7531 FastAPI \u7684\u4f5c\u8005 \u521b\u5efa\u3002</p> <p></p> <p>\u5b83\u9075\u5faa\u76f8\u540c\u7684\u8bbe\u8ba1\u7406\u5ff5\uff0c\u65e8\u5728\u6210\u4e3a\u5728 FastAPI \u5e94\u7528\u4e2d\u4e0e SQL \u6570\u636e\u5e93\u4ea4\u4e92\u7684\u6700\u76f4\u89c2\u65b9\u5f0f\u3002</p> <p>\u5c3d\u7ba1\u5982\u6b64\uff0cSQLModel \u5b8c\u5168 \u72ec\u7acb \u4e8e FastAPI\uff0c\u53ef\u4ee5\u7528\u4e8e\u4efb\u4f55\u5176\u4ed6\u7c7b\u578b\u7684\u5e94\u7528\u4e2d\uff0c\u4f9d\u7136\u80fd\u591f\u4ece\u5176\u7279\u6027\u4e2d\u83b7\u76ca\u3002</p>"},{"location":"features/#python","title":"\u7eaf\u73b0\u4ee3 Python","text":"<p>SQLModel \u5b8c\u5168\u57fa\u4e8e\u6807\u51c6\u7684 \u73b0\u4ee3 Python \u7c7b\u578b\u6ce8\u89e3\u3002\u65e0\u9700\u5b66\u4e60\u65b0\u7684\u8bed\u6cd5\uff0c\u4ec5\u9700\u4f7f\u7528\u6807\u51c6\u7684\u73b0\u4ee3 Python\u3002</p> <p>\u5982\u679c\u60a8\u9700\u8981\u5feb\u901f\u56de\u987e\u5982\u4f55\u4f7f\u7528 Python \u7c7b\u578b\u6ce8\u89e3\uff08\u5373\u4f7f\u60a8\u4e0d\u4f7f\u7528 SQLModel \u6216 FastAPI\uff09\uff0c\u53ef\u4ee5\u67e5\u770b FastAPI \u7684\u6559\u7a0b\u90e8\u5206\uff1aPython \u7c7b\u578b\u7b80\u4ecb\u3002</p> <p>\u60a8\u8fd8\u53ef\u4ee5\u5728\u6559\u7a0b - \u7528\u6237\u6307\u5357\uff1a\u7b2c\u4e00\u6b65\u90e8\u5206\u627e\u5230\u4e00\u4e2a 20 \u79d2\u7684\u5feb\u901f\u56de\u987e\u3002</p>"},{"location":"features/#_2","title":"\u7f16\u8f91\u5668\u652f\u6301","text":"<p>SQLModel \u8bbe\u8ba1\u6613\u4e8e\u4f7f\u7528\u4e14\u76f4\u89c2\uff0c\u4ee5\u786e\u4fdd\u6700\u4f73\u7684\u5f00\u53d1\u4f53\u9a8c\uff0c\u540c\u65f6\u5b9e\u73b0\u5168\u9762\u7684\u81ea\u52a8\u8865\u5168\u529f\u80fd\u3002</p> <p>\u4f8b\u5982\uff0c\u5728 Visual Studio Code \u4e2d\uff1a</p> <p></p> <p>\u6216\u8005\u5728 PyCharm \u4e2d\uff1a</p> <p></p> <p>\u60a8\u53ef\u4ee5\u5728\u7f16\u5199**\u6700\u5c11**\u4ee3\u7801\u65f6\uff0c\u83b7\u5f97\u5168\u9762\u7684\u81ea\u52a8\u8865\u5168\u529f\u80fd\u3002</p> <p>\u60a8\u65e0\u9700\u731c\u6d4b\u6a21\u578b\u4e2d\u4e0d\u540c\u5c5e\u6027\u7684\u7c7b\u578b\u6216\u5b83\u4eec\u662f\u5426\u53ef\u80fd\u4e3a <code>None</code>\uff0c\u56e0\u4e3a SQLModel \u57fa\u4e8e \u6807\u51c6 Python \u7c7b\u578b\u6ce8\u89e3\uff0c\u7f16\u8f91\u5668\u80fd\u591f\u4e3a\u60a8\u63d0\u4f9b\u5168\u65b9\u4f4d\u7684\u5e2e\u52a9\u3002</p> <p>SQLModel \u91c7\u7528 PEP 681 \u6765\u652f\u6301 Python \u7c7b\u578b\u6ce8\u89e3\uff0c\u4ece\u800c\u786e\u4fdd\u6700\u4f73\u7684\u5f00\u53d1\u8005\u4f53\u9a8c\uff0c\u56e0\u6b64\u5373\u4f7f\u5728\u521b\u5efa\u65b0\u7684\u6a21\u578b\u5b9e\u4f8b\u65f6\uff0c\u60a8\u4e5f\u80fd\u83b7\u5f97\u5185\u8054\u9519\u8bef\u63d0\u793a\u548c\u81ea\u52a8\u8865\u5168\u529f\u80fd\u3002</p> <p></p>"},{"location":"features/#_3","title":"\u7b80\u6d01","text":"<p>SQLModel \u4e3a\u6240\u6709\u529f\u80fd\u63d0\u4f9b\u4e86**\u5408\u7406\u7684\u9ed8\u8ba4\u503c**\uff0c\u5e76\u5728\u4efb\u4f55\u5730\u65b9\u652f\u6301**\u53ef\u9009\u914d\u7f6e**\u3002</p> <p>\u4f46\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u529f\u80fd\u90fd**\u201c\u5f00\u7bb1\u5373\u7528\u201d**\u3002</p> <p>\u60a8\u53ef\u4ee5\u4ece\u6570\u636e\u7684\u6700\u7b80\u5355\uff08\u4e5f\u662f\u6700\u76f4\u89c2\uff09\u7684\u7c7b\u578b\u6ce8\u89e3\u5f00\u59cb\u3002</p> <p>\u4e4b\u540e\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 SQLAlchemy \u548c Pydantic \u7684\u5168\u90e8\u529f\u80fd\u5bf9\u5176\u8fdb\u884c\u7cbe\u7ec6\u5316\u914d\u7f6e\u3002</p>"},{"location":"features/#pydantic","title":"\u57fa\u4e8e Pydantic","text":"<p>SQLModel \u57fa\u4e8e Pydantic\uff0c\u5e76\u4fdd\u6301\u4e86\u76f8\u540c\u7684\u8bbe\u8ba1\u3001\u8bed\u6cd5\u548c\u7406\u5ff5\u3002</p> <p>\u672c\u8d28\u4e0a\uff0c\u2728 \u4e00\u4e2a SQLModel \u6a21\u578b\u4e5f\u662f\u4e00\u4e2a Pydantic \u6a21\u578b \u2728\u3002</p> <p>\u4e3a\u6b64\u8fdb\u884c\u4e86\u5927\u91cf\u7684\u7814\u7a76\u548c\u52aa\u529b\u3002</p> <p>\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u4f7f\u7528 Pydantic \u7684\u6240\u6709\u529f\u80fd\uff0c\u5305\u62ec\u81ea\u52a8\u7684\u6570\u636e**\u9a8c\u8bc1**\u3001\u5e8f\u5217\u5316**\u548c**\u6587\u6863\u5316\u3002\u60a8\u53ef\u4ee5\u50cf\u4f7f\u7528 Pydantic \u4e00\u6837\u4f7f\u7528 SQLModel\u3002</p> <p>\u60a8\u751a\u81f3\u53ef\u4ee5\u521b\u5efa**\u4e0d\u4ee3\u8868 SQL \u8868**\u7684 SQLModel \u6a21\u578b\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u4eec\u548c Pydantic \u6a21\u578b\u5b8c\u5168\u76f8\u540c\u3002</p> <p>\u8fd9\u7279\u522b\u6709\u7528\uff0c\u56e0\u4e3a\u60a8\u73b0\u5728\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u4ece\u975e SQL \u6a21\u578b\u7ee7\u627f\u7684 SQL \u6570\u636e\u5e93\u6a21\u578b\u3002\u8fd9\u6837\u53ef\u4ee5\u6781\u5927\u5730**\u51cf\u5c11\u4ee3\u7801\u91cd\u590d**\uff0c\u4f7f\u4ee3\u7801\u66f4\u52a0\u4e00\u81f4\uff0c\u63d0\u5347\u7f16\u8f91\u5668\u652f\u6301\u7b49\u3002</p> <p>\u8fd9\u4f7f\u5f97 SQLModel \u6210\u4e3a\u5728 FastAPI \u5e94\u7528\u4e2d\u5904\u7406 SQL \u6570\u636e\u5e93\u7684\u5b8c\u7f8e\u7ec4\u5408\u3002\ud83d\ude80</p> <p>\u60a8\u5c06\u5728\u6559\u7a0b\u7684\u540e\u7eed\u90e8\u5206\u5b66\u4e60\u66f4\u591a\u5173\u4e8e\u4e0d\u540c\u6a21\u578b\u7ec4\u5408\u7684\u5185\u5bb9\u3002</p>"},{"location":"features/#sqlalchemy","title":"\u57fa\u4e8e SQLAlchemy","text":"<p>SQLModel \u540c\u6837\u57fa\u4e8e SQLAlchemy\uff0c\u6240\u6709\u529f\u80fd\u7684\u5e95\u5c42\u5b9e\u73b0\u90fd\u4f9d\u8d56\u5b83\u3002</p> <p>\u672c\u8d28\u4e0a\uff0c\u2728 \u4e00\u4e2a SQLModel \u6a21\u578b\u4e5f\u662f\u4e00\u4e2a SQLAlchemy \u6a21\u578b\u3002\u2728</p> <p>\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u4ed8\u51fa\u4e86**\u5927\u91cf**\u7684\u7814\u7a76\u4e0e\u52aa\u529b\u3002\u5c24\u5176\u662f\u5728\u8ba9\u4e00\u4e2a\u6a21\u578b\u540c\u65f6\u6210\u4e3a **SQLAlchemy \u6a21\u578b\u548c Pydantic \u6a21\u578b**\u65b9\u9762\u8fdb\u884c\u4e86\u5927\u91cf\u5c1d\u8bd5\u548c\u5b9e\u9a8c\u3002</p> <p>\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u83b7\u5f97 SQLAlchemy \u7684\u6240\u6709\u529f\u80fd\u3001\u7a33\u5065\u6027\u4ee5\u53ca\u5176\u4f5c\u4e3a Python \u4e2d\u6700\u5e7f\u6cdb\u4f7f\u7528\u7684\u6570\u636e\u5e93\u5e93 \u6240\u5e26\u6765\u7684\u53ef\u9760\u6027\u3002</p> <p>SQLModel \u63d0\u4f9b\u4e86\u81ea\u5df1\u7684\u5de5\u5177\u6765 \u63d0\u5347\u5f00\u53d1\u8005\u4f53\u9a8c\uff0c\u4f46\u5e95\u5c42\u5b8c\u5168\u4f9d\u8d56 SQLAlchemy\u3002</p> <p>\u60a8\u751a\u81f3\u53ef\u4ee5\u5c06 SQLModel \u6a21\u578b\u4e0e SQLAlchemy \u6a21\u578b**\u7ed3\u5408\u4f7f\u7528**\u3002</p> <p>SQLModel \u7684\u8bbe\u8ba1\u521d\u8877\u662f\u6ee1\u8db3**\u6700\u5e38\u89c1\u7684\u4f7f\u7528\u573a\u666f**\uff0c\u5e76\u5c3d\u53ef\u80fd\u7b80\u5316\u548c\u65b9\u4fbf\u8fd9\u4e9b\u573a\u666f\u4e0b\u7684\u5f00\u53d1\uff0c\u63d0\u4f9b\u6700\u4f73\u7684\u5f00\u53d1\u8005\u4f53\u9a8c\u3002</p> <p>\u4f46\u5bf9\u4e8e\u4e00\u4e9b\u66f4\u590d\u6742\u3001\u66f4\u7279\u6b8a\u7684\u4f7f\u7528\u573a\u666f\uff0c\u60a8\u4ecd\u7136\u53ef\u4ee5\u76f4\u63a5\u5728 SQLModel \u4e2d\u96c6\u6210 SQLAlchemy\uff0c\u5e76\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528\u5b83\u7684\u6240\u6709\u529f\u80fd\u3002</p>"},{"location":"features/#_4","title":"\u7ecf\u8fc7\u6d4b\u8bd5","text":"<ul> <li>100% \u6d4b\u8bd5\u8986\u76d6\u7387\uff08\u76ee\u524d\u4e3a 97%\uff0c\u5c06\u5728\u672a\u6765\u51e0\u5929/\u51e0\u5468\u5185\u8fbe\u5230 100%\uff09\u3002</li> <li>100% \u7c7b\u578b\u6ce8\u89e3\u7684\u4ee3\u7801\u5e93\u3002</li> </ul>"},{"location":"help/","title":"\u5e2e\u52a9 SQLModel - \u83b7\u53d6\u5e2e\u52a9","text":"<p>\u4f60\u559c\u6b22 SQLModel \u5417\uff1f</p> <p>\u4f60\u60f3\u5e2e\u52a9 SQLModel\u3001\u5176\u4ed6\u7528\u6237\u4ee5\u53ca\u4f5c\u8005\u5417\uff1f</p> <p>\u6216\u8005\u4f60\u60f3\u83b7\u5f97\u5173\u4e8e SQLModel \u7684\u5e2e\u52a9\u5417\uff1f</p> <p>\u6709\u4e00\u4e9b\u975e\u5e38\u7b80\u5355\u7684\u65b9\u6cd5\u53ef\u4ee5\u63d0\u4f9b\u5e2e\u52a9\uff08\u5176\u4e2d\u4e00\u4e9b\u53ea\u9700\u8981\u4e00\u4e24\u6b21\u70b9\u51fb\uff09\u3002</p> <p>\u540c\u6837\uff0c\u4e5f\u6709\u591a\u79cd\u65b9\u5f0f\u53ef\u4ee5\u83b7\u5f97\u5e2e\u52a9\u3002</p>"},{"location":"help/#fastapi","title":"\u8ba2\u9605 FastAPI \u548c\u670b\u53cb\u7684\u65b0\u95fb\u901a\u8baf","text":"<p>\u4f60\u53ef\u4ee5\u8ba2\u9605\u4e0d\u9891\u7e41\u7684 FastAPI \u548c\u670b\u53cb \u65b0\u95fb\u901a\u8baf\uff0c\u4ee5\u4fbf\u4fdd\u6301\u6700\u65b0\u4fe1\u606f\uff1a</p> <ul> <li>\u5173\u4e8e FastAPI \u548c\u670b\u53cb\u7684\u65b0\u95fb\uff0c\u5305\u62ec SQLModel \ud83d\ude80</li> <li>\u6307\u5357 \ud83d\udcdd</li> <li>\u65b0\u7279\u6027 \u2728</li> <li>\u91cd\u5927\u53d8\u66f4 \ud83d\udea8</li> <li>\u63d0\u793a\u548c\u6280\u5de7 \u2705</li> </ul>"},{"location":"help/#github-sqlmodel","title":"\u5728 GitHub \u4e0a\u4e3a SQLModel \u70b9\u8d5e","text":"<p>\u4f60\u53ef\u4ee5\u5728 GitHub \u4e0a\u4e3a SQLModel \u70b9\u8d5e\uff08\u70b9\u51fb\u53f3\u4e0a\u89d2\u7684\u661f\u5f62\u6309\u94ae\uff09\uff1a https://github.com/fastapi/sqlmodel\u3002\u2b50\ufe0f</p> <p>\u901a\u8fc7\u6dfb\u52a0\u4e00\u4e2a\u661f\u6807\uff0c\u5176\u4ed6\u7528\u6237\u53ef\u4ee5\u66f4\u5bb9\u6613\u5730\u627e\u5230\u5b83\uff0c\u5e76\u770b\u5230\u5b83\u5df2\u7ecf\u5bf9\u5176\u4ed6\u4eba\u6709\u5e2e\u52a9\u3002</p>"},{"location":"help/#github","title":"\u5173\u6ce8 GitHub \u4ed3\u5e93\u7684\u53d1\u5e03\u66f4\u65b0","text":"<p>\u4f60\u53ef\u4ee5\u5728 GitHub \u4e0a\u201c\u5173\u6ce8\u201dSQLModel\uff08\u70b9\u51fb\u53f3\u4e0a\u89d2\u7684\u201c\u5173\u6ce8\u201d\u6309\u94ae\uff09\uff1a https://github.com/fastapi/sqlmodel\u3002\ud83d\udc40</p> <p>\u5728\u8fd9\u91cc\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u53ea\u5173\u6ce8\u201c\u53d1\u5e03\u201d\u90e8\u5206\u3002</p> <p>\u901a\u8fc7\u8fd9\u6837\u505a\uff0c\u4f60\u5c06\u6536\u5230\u901a\u77e5\uff08\u901a\u8fc7\u7535\u5b50\u90ae\u4ef6\uff09\uff0c\u5f53 SQLModel \u6709\u65b0\u7684\u53d1\u5e03\u7248\u672c\u65f6\uff08\u5305\u62ec\u9519\u8bef\u4fee\u590d\u548c\u65b0\u7279\u6027\uff09\u3002</p>"},{"location":"help/#_1","title":"\u4e0e\u4f5c\u8005\u8054\u7cfb","text":"<p>\u4f60\u53ef\u4ee5\u4e0e \u6211\uff08Sebasti\u00e1n Ram\u00edrez / <code>tiangolo</code>\uff09 \u8054\u7cfb\u3002</p> <p>\u4f60\u53ef\u4ee5\uff1a</p> <ul> <li>\u5728 GitHub \u4e0a\u5173\u6ce8\u6211\u3002<ul> <li>\u67e5\u770b\u6211\u521b\u5efa\u7684\u5176\u4ed6\u5f00\u6e90\u9879\u76ee\uff0c\u8fd9\u4e9b\u9879\u76ee\u53ef\u80fd\u5bf9\u4f60\u6709\u5e2e\u52a9\u3002</li> <li>\u5173\u6ce8\u6211\uff0c\u67e5\u770b\u6211\u53d1\u5e03\u7684\u65b0\u5f00\u6e90\u9879\u76ee\u3002</li> </ul> </li> <li>\u5728 Twitter \u4e0a\u5173\u6ce8\u6211\u3002<ul> <li>\u544a\u8bc9\u6211\u4f60\u662f\u5982\u4f55\u4f7f\u7528 SQLModel \u7684\uff08\u6211\u5f88\u559c\u6b22\u542c\u5230\u8fd9\u4e9b\uff09\u3002</li> <li>\u4e86\u89e3\u6211\u53d1\u5e03\u7684\u516c\u544a\u6216\u65b0\u5de5\u5177\u3002</li> </ul> </li> <li>\u5728 LinkedIn \u4e0a\u4e0e\u6211\u8054\u7cfb\u3002<ul> <li>\u4e86\u89e3\u6211\u53d1\u5e03\u7684\u516c\u544a\u6216\u65b0\u5de5\u5177\uff08\u5c3d\u7ba1\u6211\u66f4\u5e38\u4f7f\u7528 Twitter \ud83e\udd37\u200d\u2642\uff09\u3002</li> </ul> </li> <li>\u9605\u8bfb\u6211\u5199\u7684\u6587\u7ae0\uff08\u6216\u5173\u6ce8\u6211\uff09\u5728 Dev.to \u6216 Medium\u3002<ul> <li>\u9605\u8bfb\u6211\u5199\u7684\u5176\u4ed6\u6587\u7ae0\u548c\u5173\u4e8e\u6211\u521b\u5efa\u7684\u5de5\u5177\u3002</li> <li>\u5173\u6ce8\u6211\uff0c\u9605\u8bfb\u6211\u53d1\u5e03\u7684\u65b0\u5185\u5bb9\u3002</li> </ul> </li> </ul>"},{"location":"help/#twitter-sqlmodel","title":"\u5728 Twitter \u4e0a\u53d1\u5e03\u5173\u4e8e SQLModel \u7684\u63a8\u6587","text":"<p>\u53d1\u5e03\u5173\u4e8e SQLModel \u7684\u63a8\u6587\uff0c\u8ba9\u6211\u548c\u5176\u4ed6\u4eba\u77e5\u9053\u4f60\u559c\u6b22\u5b83\u7684\u539f\u56e0\u3002 \ud83c\udf89</p> <p>\u6211\u559c\u6b22\u542c\u5230 SQLModel \u662f\u5982\u4f55\u88ab\u4f7f\u7528\u7684\uff0c\u54ea\u4e9b\u65b9\u9762\u4f60\u89c9\u5f97\u5f88\u68d2\uff0c\u5728\u54ea\u4e2a\u9879\u76ee/\u516c\u53f8\u4f7f\u7528\u5b83\uff0c\u7b49\u7b49\u3002</p>"},{"location":"help/#github_1","title":"\u5728 GitHub \u4e0a\u5e2e\u52a9\u5176\u4ed6\u4eba\u89e3\u7b54\u95ee\u9898","text":"<p>\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u5e2e\u52a9\u5176\u4ed6\u4eba\u5728\u4ee5\u4e0b\u5e73\u53f0\u89e3\u51b3\u95ee\u9898\uff1a</p> <ul> <li>GitHub Discussions</li> <li>GitHub Issues</li> </ul> <p>\u5728\u5f88\u591a\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u80fd\u5df2\u7ecf\u77e5\u9053\u8fd9\u4e9b\u95ee\u9898\u7684\u7b54\u6848\u3002 \ud83e\udd13</p> <p>\u53ea\u8981\u8bb0\u4f4f\uff0c\u6700\u91cd\u8981\u7684\u4e00\u70b9\u662f\uff1a\u5c3d\u91cf\u4fdd\u6301\u53cb\u5584\u3002\u4eba\u4eec\u5e26\u7740\u4ed6\u4eec\u7684\u56f0\u60d1\u548c\u4e0d\u6ee1\u63d0\u95ee\uff0c\u5f88\u591a\u65f6\u5019\u95ee\u9898\u63d0\u5f97\u4e0d\u591f\u6e05\u6670\uff0c\u4f46\u5c3d\u53ef\u80fd\u53cb\u597d\u5730\u56de\u5e94\u4ed6\u4eec\u3002\ud83e\udd17</p> <p>\u6211\u4eec\u7684\u76ee\u6807\u662f\u8ba9 SQLModel \u793e\u533a\u53d8\u5f97\u53cb\u597d\u548c\u6b22\u8fce\u3002\u540c\u65f6\uff0c\u4e0d\u63a5\u53d7\u4efb\u4f55\u9488\u5bf9\u4ed6\u4eba\u7684\u6076\u610f\u6216\u4e0d\u5c0a\u91cd\u7684\u884c\u4e3a\u3002\u6211\u4eec\u5fc5\u987b\u5f7c\u6b64\u7167\u987e\u3002</p> <p>\u4ee5\u4e0b\u662f\u5982\u4f55\u5e2e\u52a9\u4ed6\u4eba\u89e3\u51b3\u95ee\u9898\uff08\u5728\u8ba8\u8bba\u6216\u95ee\u9898\u4e2d\uff09\uff1a</p>"},{"location":"help/#_2","title":"\u7406\u89e3\u95ee\u9898","text":"<ul> <li>\u786e\u8ba4\u4f60\u662f\u5426\u80fd\u7406\u89e3\u63d0\u95ee\u8005\u7684 \u76ee\u7684 \u548c\u4f7f\u7528\u573a\u666f\u3002</li> <li>\u7136\u540e\u786e\u8ba4\u95ee\u9898\uff08\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u662f\u95ee\u9898\uff09\u662f\u5426 \u6e05\u6670\u3002</li> <li>\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u63d0\u95ee\u7684\u95ee\u9898\u57fa\u4e8e\u7528\u6237\u8bbe\u60f3\u7684\u67d0\u79cd\u89e3\u51b3\u65b9\u6848\uff0c\u4f46\u53ef\u80fd\u6709\u4e00\u4e2a \u66f4\u597d\u7684 \u89e3\u51b3\u65b9\u6848\u3002\u5982\u679c\u4f60\u80fd\u66f4\u597d\u5730\u7406\u89e3\u95ee\u9898\u548c\u4f7f\u7528\u573a\u666f\uff0c\u53ef\u80fd\u80fd\u63d0\u51fa\u4e00\u4e2a\u66f4\u5408\u9002\u7684 \u66ff\u4ee3\u89e3\u51b3\u65b9\u6848\u3002</li> <li>\u5982\u679c\u4f60\u65e0\u6cd5\u7406\u89e3\u95ee\u9898\uff0c\u53ef\u4ee5\u8981\u6c42\u63d0\u4f9b\u66f4\u591a\u7684 \u7ec6\u8282\u3002</li> </ul>"},{"location":"help/#_3","title":"\u590d\u73b0\u95ee\u9898","text":"<p>\u5bf9\u4e8e\u5927\u591a\u6570\u95ee\u9898\u548c\u95ee\u9898\u6765\u8bf4\uff0c\u90fd\u6d89\u53ca\u5230\u63d0\u95ee\u8005\u7684 \u539f\u59cb\u4ee3\u7801\u3002</p> <p>\u5f88\u591a\u65f6\u5019\uff0c\u4ed6\u4eec\u53ea\u4f1a\u590d\u5236\u4ee3\u7801\u7684\u7247\u6bb5\uff0c\u4f46\u90a3\u6837\u4e0d\u8db3\u4ee5 \u590d\u73b0\u95ee\u9898\u3002</p> <ul> <li>\u4f60\u53ef\u4ee5\u8981\u6c42\u4ed6\u4eec\u63d0\u4f9b\u4e00\u4e2a \u6700\u5c0f\u53ef\u590d\u73b0\u793a\u4f8b\uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5 \u590d\u5236\u7c98\u8d34 \u5e76\u5728\u672c\u5730\u8fd0\u884c\uff0c\u67e5\u770b\u4ed6\u4eec\u9047\u5230\u7684\u9519\u8bef\u6216\u884c\u4e3a\uff0c\u6216\u8005\u66f4\u597d\u5730\u7406\u89e3\u4ed6\u4eec\u7684\u4f7f\u7528\u573a\u666f\u3002</li> <li>\u5982\u679c\u4f60\u6709\u65f6\u95f4\u548c\u8010\u5fc3\uff0c\u53ef\u4ee5\u6839\u636e\u95ee\u9898\u7684\u63cf\u8ff0\u81ea\u5df1\u5c1d\u8bd5 \u521b\u5efa\u793a\u4f8b\u3002\u4f46\u8981\u8bb0\u4f4f\uff0c\u8fd9\u53ef\u80fd\u4f1a\u82b1\u8d39\u5f88\u591a\u65f6\u95f4\uff0c\u6700\u597d\u5148\u8bf7\u4ed6\u4eec\u6f84\u6e05\u95ee\u9898\u3002</li> </ul>"},{"location":"help/#_4","title":"\u63d0\u4f9b\u89e3\u51b3\u65b9\u6848","text":"<ul> <li> <p>\u5728\u7406\u89e3\u4e86\u95ee\u9898\u4e4b\u540e\uff0c\u4f60\u53ef\u4ee5\u7ed9\u51fa\u4e00\u4e2a\u53ef\u80fd\u7684 \u7b54\u6848\u3002</p> </li> <li> <p>\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u66f4\u597d\u7684\u662f\u7406\u89e3\u4ed6\u4eec\u7684 \u6839\u672c\u95ee\u9898\u6216\u4f7f\u7528\u573a\u666f\uff0c\u56e0\u4e3a\u53ef\u80fd\u6709\u6bd4\u4ed6\u4eec\u5c1d\u8bd5\u7684\u65b9\u5f0f\u66f4\u597d\u7684\u89e3\u51b3\u65b9\u6848\u3002</p> </li> </ul>"},{"location":"help/#_5","title":"\u8bf7\u6c42\u5173\u95ed","text":"<p>\u5982\u679c\u4ed6\u4eec\u56de\u590d\uff0c\u5f88\u53ef\u80fd\u4f60\u5df2\u7ecf\u89e3\u51b3\u4e86\u4ed6\u4eec\u7684\u95ee\u9898\uff0c\u606d\u559c\u4f60\uff0c\u4f60\u662f\u4e2a\u82f1\u96c4\uff01\ud83e\uddb8</p> <ul> <li> <p>\u73b0\u5728\uff0c\u5982\u679c\u8fd9\u89e3\u51b3\u4e86\u4ed6\u4eec\u7684\u95ee\u9898\uff0c\u4f60\u53ef\u4ee5\u8981\u6c42\u4ed6\u4eec\uff1a</p> <ul> <li>\u5728 GitHub Discussions \u4e2d\uff1a\u6807\u8bb0\u8bc4\u8bba\u4e3a \u7b54\u6848\u3002</li> <li>\u5728 GitHub Issues \u4e2d\uff1a\u5173\u95ed \u8be5\u95ee\u9898\u3002</li> </ul> </li> </ul>"},{"location":"help/#github_2","title":"\u5173\u6ce8 GitHub \u4ed3\u5e93","text":"<p>\u4f60\u53ef\u4ee5\u5728 GitHub \u4e0a\u201c\u5173\u6ce8\u201dSQLModel\uff08\u70b9\u51fb\u53f3\u4e0a\u89d2\u7684\u201c\u5173\u6ce8\u201d\u6309\u94ae\uff09\uff1a https://github.com/fastapi/sqlmodel\u3002\ud83d\udc40</p> <p>\u5982\u679c\u4f60\u9009\u62e9\u201cWatching\u201d\uff08\u800c\u975e\u201c\u4ec5\u53d1\u5e03\u201d\uff09\uff0c\u4f60\u5c06\u6536\u5230\u901a\u77e5\uff0c\u5f53\u6709\u4eba\u521b\u5efa\u65b0\u95ee\u9898\u6216\u63d0\u95ee\u65f6\u3002\u4f60\u8fd8\u53ef\u4ee5\u9009\u62e9\u53ea\u63a5\u6536\u65b0\u95ee\u9898\u3001\u8ba8\u8bba\u6216 PR \u7b49\u7684\u901a\u77e5\u3002</p> <p>\u7136\u540e\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u5e2e\u52a9\u4ed6\u4eec\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u3002</p>"},{"location":"help/#_6","title":"\u63d0\u95ee","text":"<p>\u4f60\u53ef\u4ee5\u5728 GitHub \u4ed3\u5e93\u4e2d \u521b\u5efa\u4e00\u4e2a\u65b0\u95ee\u9898\uff0c\u4f8b\u5982\uff1a</p> <ul> <li>\u63d0\u95ee \u95ee\u9898 \u6216\u8be2\u95ee\u5173\u4e8e \u95ee\u9898 \u7684\u5185\u5bb9\u3002</li> <li>\u63d0\u8bae\u4e00\u4e2a\u65b0\u7684 \u529f\u80fd\u3002</li> </ul> <p>\u6ce8\u610f\uff1a\u5982\u679c\u4f60\u8fd9\u4e48\u505a\uff0c\u6211\u4f1a\u8981\u6c42\u4f60\u4e5f\u5e2e\u52a9\u5176\u4ed6\u4eba\u3002\ud83d\ude09</p>"},{"location":"help/#pull","title":"\u5ba1\u67e5 Pull \u8bf7\u6c42","text":"<p>\u4f60\u53ef\u4ee5\u5e2e\u52a9\u6211\u5ba1\u67e5\u5176\u4ed6\u4eba\u7684 Pull \u8bf7\u6c42\u3002</p> <p>\u540c\u6837\uff0c\u8bf7\u5c3d\u91cf\u4fdd\u6301\u53cb\u597d\u3002\ud83e\udd17</p> <p>\u4ee5\u4e0b\u662f\u5ba1\u67e5 Pull \u8bf7\u6c42\u65f6\u9700\u8981\u6ce8\u610f\u7684\u4e8b\u9879\uff1a</p>"},{"location":"help/#_7","title":"\u7406\u89e3\u95ee\u9898","text":"<ul> <li> <p>\u9996\u5148\uff0c\u786e\u4fdd\u4f60 \u7406\u89e3 \u8fd9\u4e2a Pull \u8bf7\u6c42\u8bd5\u56fe\u89e3\u51b3\u7684\u95ee\u9898\u3002\u53ef\u80fd\u4f1a\u5728 GitHub Discussions \u6216 Issue \u4e2d\u6709\u66f4\u8be6\u7ec6\u7684\u8ba8\u8bba\u3002</p> </li> <li> <p>\u4e5f\u6709\u53ef\u80fd\u8fd9\u4e2a Pull \u8bf7\u6c42\u5b9e\u9645\u4e0a\u4e0d\u9700\u8981\uff0c\u56e0\u4e3a\u95ee\u9898\u53ef\u4ee5\u7528 \u4e0d\u540c\u7684\u65b9\u5f0f \u89e3\u51b3\u3002\u7136\u540e\u4f60\u53ef\u4ee5\u63d0\u51fa\u5efa\u8bae\u6216\u8be2\u95ee\u5173\u4e8e\u5176\u4ed6\u89e3\u51b3\u65b9\u6848\u7684\u610f\u89c1\u3002</p> </li> </ul>"},{"location":"help/#_8","title":"\u4e0d\u8981\u8fc7\u4e8e\u5173\u6ce8\u6837\u5f0f","text":"<ul> <li> <p>\u4e0d\u7528\u592a\u62c5\u5fc3\u50cf\u63d0\u4ea4\u4fe1\u606f\u6837\u5f0f\u8fd9\u6837\u7684\u7ec6\u8282\uff0c\u6211\u4f1a\u5728\u5408\u5e76\u65f6\u624b\u52a8\u8c03\u6574\u63d0\u4ea4\u8bb0\u5f55\u3002</p> </li> <li> <p>\u540c\u6837\uff0c\u4e0d\u7528\u62c5\u5fc3\u6837\u5f0f\u89c4\u5219\uff0c\u5df2\u7ecf\u6709\u81ea\u52a8\u5316\u5de5\u5177\u5728\u68c0\u67e5\u8fd9\u4e9b\u95ee\u9898\u3002</p> </li> </ul> <p>\u5982\u679c\u6709\u5176\u4ed6\u6837\u5f0f\u6216\u4e00\u81f4\u6027\u65b9\u9762\u7684\u9700\u6c42\uff0c\u6211\u4f1a\u76f4\u63a5\u63d0\u51fa\uff0c\u6216\u8005\u5728\u73b0\u6709\u63d0\u4ea4\u4e0a\u6dfb\u52a0\u4fee\u6539\u3002</p>"},{"location":"help/#_9","title":"\u68c0\u67e5\u4ee3\u7801","text":"<ul> <li> <p>\u68c0\u67e5\u5e76\u9605\u8bfb\u4ee3\u7801\uff0c\u770b\u770b\u662f\u5426\u5408\u9002\uff0c\u672c\u5730\u8fd0\u884c \u770b\u662f\u5426\u771f\u6b63\u89e3\u51b3\u4e86\u95ee\u9898\u3002</p> </li> <li> <p>\u7136\u540e \u8bc4\u8bba \u8bf4\u660e\u4f60\u5df2\u7ecf\u8fd9\u6837\u505a\u4e86\uff0c\u8fd9\u6837\u6211\u4f1a\u77e5\u9053\u4f60\u786e\u5b9e\u68c0\u67e5\u8fc7\u3002</p> </li> </ul> <p>Info</p> <p>\u4e0d\u5e78\u7684\u662f\uff0c\u6211\u4e0d\u80fd\u4ec5\u51ed\u51e0\u4e2a\u6279\u51c6\u5c31\u8f7b\u6613\u4fe1\u4efb PR\u3002</p> <p>\u6709\u65f6\u4f1a\u53d1\u751f PR \u5df2\u7ecf\u83b7\u5f97 3\u30015 \u4e2a\u6216\u66f4\u591a\u7684\u6279\u51c6\uff0c\u53ef\u80fd\u56e0\u4e3a\u63cf\u8ff0\u5438\u5f15\u4eba\uff0c\u4f46\u5f53\u6211\u68c0\u67e5 PR \u65f6\uff0c\u5b9e\u9645\u4e0a\u5b83\u4eec\u662f\u574f\u7684\u3001\u5b58\u5728\u6f0f\u6d1e\uff0c\u6216\u8005\u6ca1\u6709\u89e3\u51b3\u5b83\u4eec\u58f0\u79f0\u8981\u89e3\u51b3\u7684\u95ee\u9898\u3002\ud83d\ude05</p> <p>\u56e0\u6b64\uff0c\u771f\u7684\u5f88\u91cd\u8981\u7684\u662f\uff0c\u4f60\u8981\u5b9e\u9645\u9605\u8bfb\u5e76\u8fd0\u884c\u4ee3\u7801\uff0c\u5e76\u5728\u8bc4\u8bba\u4e2d\u544a\u8bc9\u6211\u4f60\u5df2\u7ecf\u68c0\u67e5\u8fc7\u3002\ud83e\udd13</p> <ul> <li>\u5982\u679c PR \u53ef\u4ee5\u7b80\u5316\uff0c\u4f60\u53ef\u4ee5\u63d0\u51fa\u8bf7\u6c42\uff0c\u4f46\u4e0d\u5fc5\u8fc7\u4e8e\u6311\u5254\uff0c\u53ef\u80fd\u4f1a\u6709\u8bb8\u591a\u4e3b\u89c2\u7684\u89c2\u70b9\uff08\u800c\u6211\u4e5f\u4f1a\u6709\u81ea\u5df1\u7684\u89c2\u70b9 \ud83d\ude48\uff09\uff0c\u6240\u4ee5\u6700\u597d\u80fd\u5173\u6ce8\u6838\u5fc3\u5185\u5bb9\u3002</li> </ul>"},{"location":"help/#_10","title":"\u6d4b\u8bd5","text":"<ul> <li> <p>\u5e2e\u6211\u68c0\u67e5 PR \u662f\u5426\u5305\u542b \u6d4b\u8bd5\u3002</p> </li> <li> <p>\u68c0\u67e5\u6d4b\u8bd5\u662f\u5426\u5728 PR \u4e4b\u524d \u5931\u8d25\u3002\ud83d\udea8</p> </li> <li> <p>\u7136\u540e\u68c0\u67e5\u6d4b\u8bd5\u662f\u5426\u5728 PR \u540e \u901a\u8fc7\u3002\u2705</p> </li> <li> <p>\u8bb8\u591a PR \u6ca1\u6709\u6d4b\u8bd5\uff0c\u4f60\u53ef\u4ee5 \u63d0\u9192 \u4ed6\u4eec\u6dfb\u52a0\u6d4b\u8bd5\uff0c\u6216\u8005\u4f60\u751a\u81f3\u53ef\u4ee5 \u81ea\u5df1\u5efa\u8bae \u4e00\u4e9b\u6d4b\u8bd5\u3002\u8fd9\u662f\u8017\u65f6\u6700\u591a\u7684\u4efb\u52a1\u4e4b\u4e00\uff0c\u4f60\u53ef\u4ee5\u63d0\u4f9b\u5f88\u591a\u5e2e\u52a9\u3002</p> </li> <li> <p>\u7136\u540e\u4e5f\u8bc4\u8bba\u4f60\u5c1d\u8bd5\u7684\u5185\u5bb9\uff0c\u8fd9\u6837\u6211\u5c31\u77e5\u9053\u4f60\u68c0\u67e5\u8fc7\u4e86\u3002\ud83e\udd13</p> </li> </ul>"},{"location":"help/#pull_1","title":"\u521b\u5efa Pull \u8bf7\u6c42","text":"<p>\u4f60\u53ef\u4ee5\u901a\u8fc7 Pull \u8bf7\u6c42 \u8d21\u732e \u6e90\u4ee3\u7801\uff0c\u4f8b\u5982\uff1a</p> <ul> <li>\u4fee\u590d\u6587\u6863\u4e2d\u53d1\u73b0\u7684\u62fc\u5199\u9519\u8bef\u3002</li> <li>\u63d0\u8bae\u65b0\u7684\u6587\u6863\u90e8\u5206\u3002</li> <li>\u4fee\u590d\u73b0\u6709\u7684\u7f3a\u9677/\u9519\u8bef\u3002<ul> <li>\u786e\u4fdd\u6dfb\u52a0\u6d4b\u8bd5\u3002</li> </ul> </li> <li>\u6dfb\u52a0\u65b0\u529f\u80fd\u3002<ul> <li>\u786e\u4fdd\u6dfb\u52a0\u6d4b\u8bd5\u3002</li> <li>\u786e\u4fdd\u6dfb\u52a0\u76f8\u5173\u6587\u6863\u3002</li> </ul> </li> </ul>"},{"location":"help/#sqlmodel","title":"\u5e2e\u52a9\u7ef4\u62a4 SQLModel","text":"<p>\u5e2e\u6211\u7ef4\u62a4 SQLModel\uff01\ud83e\udd13</p> <p>\u6709\u5f88\u591a\u5de5\u4f5c\u8981\u505a\uff0c\u800c\u4e14\u5bf9\u4e8e\u5927\u591a\u6570\u5de5\u4f5c\uff0c\u4f60 \u53ef\u4ee5\u505a\u3002</p> <p>\u4f60\u73b0\u5728\u53ef\u4ee5\u505a\u7684\u4e3b\u8981\u4efb\u52a1\u662f\uff1a</p> <ul> <li>\u5e2e\u52a9\u4ed6\u4eba\u5728 GitHub \u4e0a\u89e3\u7b54\u95ee\u9898\uff08\u89c1\u4e0a\u9762\u7684\u90e8\u5206\uff09\u3002</li> <li>\u5ba1\u67e5 Pull \u8bf7\u6c42\uff08\u89c1\u4e0a\u9762\u7684\u90e8\u5206\uff09\u3002</li> </ul> <p>\u8fd9\u4e24\u9879\u4efb\u52a1\u662f \u6700\u8017\u65f6\u7684\u3002\u8fd9\u4e5f\u662f\u7ef4\u62a4 SQLModel \u7684\u4e3b\u8981\u5de5\u4f5c\u3002</p> <p>\u5982\u679c\u4f60\u80fd\u5e2e\u6211\u505a\u8fd9\u4e9b\uff0c\u4f60\u5c31\u5728\u5e2e\u52a9\u6211\u7ef4\u62a4 SQLModel\uff0c\u5e76\u786e\u4fdd\u5b83\u7ee7\u7eed \u5feb\u901f\u800c\u6709\u6548\u5730\u53d1\u5c55\u3002\ud83d\ude80</p>"},{"location":"help/#_11","title":"\u52a0\u5165\u804a\u5929","text":"<p>\u52a0\u5165 \ud83d\udc65 FastAPI \u548c\u670b\u53cb Discord \u804a\u5929\u670d\u52a1\u5668 \ud83d\udc65\uff0c\u548c\u793e\u533a\u4e2d\u7684\u5176\u4ed6\u4eba\u4e00\u8d77\u804a\u5929\u3002\u5728\u5176\u4e2d\u6709\u4e00\u4e2a <code>#sqlmodel</code> \u9891\u9053\u3002</p> <p>Tip</p> <p>\u5982\u679c\u6709\u95ee\u9898\uff0c\u8bf7\u5728 GitHub Discussions \u63d0\u95ee\uff0c\u90a3\u91cc\u7684\u56de\u590d\u51e0\u7387\u66f4\u9ad8\u3002</p> <p>\u4ec5\u5728\u804a\u5929\u4e2d\u8fdb\u884c\u5176\u4ed6\u4e00\u822c\u6027\u5bf9\u8bdd\u3002</p>"},{"location":"help/#_12","title":"\u4e0d\u8981\u5728\u804a\u5929\u4e2d\u63d0\u95ee","text":"<p>\u8bf7\u8bb0\u4f4f\uff0c\u7531\u4e8e\u804a\u5929\u5141\u8bb8\u66f4\u591a\u201c\u81ea\u7531\u5bf9\u8bdd\u201d\uff0c\u5f88\u5bb9\u6613\u63d0\u95ee\u8fc7\u4e8e\u5e7f\u6cdb\u7684\u95ee\u9898\uff0c\u8fd9\u4e9b\u95ee\u9898\u53ef\u80fd\u4e0d\u5bb9\u6613\u56de\u7b54\uff0c\u6240\u4ee5\u4f60\u53ef\u80fd\u4e0d\u4f1a\u5f97\u5230\u7b54\u6848\u3002</p> <p>\u5728 GitHub \u4e2d\uff0c\u6a21\u677f\u4f1a\u5f15\u5bfc\u4f60\u5199\u51fa\u6b63\u786e\u7684\u95ee\u9898\uff0c\u8fd9\u6837\u4f60\u53ef\u4ee5\u66f4\u5bb9\u6613\u83b7\u5f97\u597d\u7684\u7b54\u6848\uff0c\u6216\u8005\u751a\u81f3\u5728\u63d0\u95ee\u4e4b\u524d\u5c31\u89e3\u51b3\u95ee\u9898\u3002\u800c\u5728\u804a\u5929\u4e2d\uff0c\u6211\u65e0\u6cd5\u4fdd\u8bc1\u6211\u4e00\u5b9a\u4f1a\u7b54\u590d\u6bcf\u4e00\u4e2a\u95ee\u9898\uff0c\u5373\u4f7f\u6709\u65f6\u4f1a\u82b1\u4e00\u4e9b\u65f6\u95f4\u3002\ud83d\ude05</p> <p>\u5728 GitHub \u4e2d\uff0c\u6240\u6709\u5bf9\u8bdd\u90fd\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u88ab\u641c\u7d22\uff0c\u800c\u804a\u5929\u4e2d\u7684\u5bf9\u8bdd\u4e0d\u6613\u641c\u7d22\uff0c\u6240\u4ee5\u95ee\u9898\u548c\u7b54\u6848\u53ef\u80fd\u4f1a\u5728\u5bf9\u8bdd\u4e2d\u4e22\u5931\u3002</p> <p>\u53e6\u4e00\u65b9\u9762\uff0c\u804a\u5929\u4e2d\u6709\u6210\u5343\u4e0a\u4e07\u7684\u7528\u6237\uff0c\u6240\u4ee5\u51e0\u4e4e\u6bcf\u6b21\u4f60\u90fd\u80fd\u627e\u5230\u4eba\u4ea4\u6d41\u3002\ud83d\ude04</p>"},{"location":"help/#_13","title":"\u652f\u6301\u4f5c\u8005","text":"<p>\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7 GitHub Sponsors \u7ecf\u6d4e\u652f\u6301\u4f5c\u8005\uff08\u6211\uff09\u3002</p> <p>\u5728\u8fd9\u91cc\uff0c\u4f60\u53ef\u4ee5\u8bf7\u6211\u559d\u676f\u5496\u5561 \u2615\ufe0f \u4ee5\u8868\u8fbe\u611f\u8c22\u3002\ud83d\ude04</p>"},{"location":"help/#sqlmodel_1","title":"\u652f\u6301 SQLModel \u6240\u4f9d\u8d56\u7684\u5de5\u5177","text":"<p>\u6b63\u5982\u4f60\u5728\u6587\u6863\u4e2d\u770b\u5230\u7684\uff0cSQLModel \u5efa\u7acb\u5728 Pydantic \u548c SQLAlchemy \u8fd9\u4e9b\u5de8\u4eba\u7684\u80a9\u8180\u4e0a\u3002</p> <p>\u4f60\u4e5f\u53ef\u4ee5\u652f\u6301\uff1a</p> <ul> <li>Samuel Colvin (Pydantic)</li> <li>SQLAlchemy</li> </ul> <p>\u611f\u8c22\uff01\ud83d\ude80</p>"},{"location":"install/","title":"\u5b89\u88c5 SQLModel","text":"<p>\u521b\u5efa\u4e00\u4e2a\u9879\u76ee\u76ee\u5f55\uff0c\u521b\u5efa\u4e00\u4e2a \u865a\u62df\u73af\u5883\uff0c\u6fc0\u6d3b\u5b83\uff0c\u7136\u540e\u5b89\u88c5 SQLModel\uff0c\u4f8b\u5982\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\uff1a</p> <pre><code>$ pip install sqlmodel\n---&gt; 100%\nSuccessfully installed sqlmodel pydantic sqlalchemy\n</code></pre> <p>\u7531\u4e8e SQLModel \u662f\u5efa\u7acb\u5728 SQLAlchemy \u548c Pydantic \u4e4b\u4e0a\u7684\uff0c\u5f53\u4f60\u5b89\u88c5 <code>sqlmodel</code> \u65f6\uff0c\u5b83\u4eec\u4e5f\u4f1a\u88ab\u81ea\u52a8\u5b89\u88c5\u3002</p>"},{"location":"install/#sqlite","title":"\u5b89\u88c5 SQLite \u6570\u636e\u5e93\u6d4f\u89c8\u5668","text":"<p>\u8bb0\u5f97 SQLite \u662f\u4e00\u4e2a\u5355\u6587\u4ef6\u6570\u636e\u5e93 \u5417\uff1f</p> <p>\u5728\u672c\u6559\u7a0b\u7684\u5927\u591a\u6570\u793a\u4f8b\u4e2d\uff0c\u6211\u5c06\u4f7f\u7528 SQLite\u3002</p> <p>Python \u96c6\u6210\u4e86\u5bf9 SQLite \u7684\u652f\u6301\uff0c\u5b83\u662f\u4e00\u4e2a\u5355\u4e00\u7684\u6587\u4ef6\uff0c\u53ef\u4ee5\u76f4\u63a5\u4ece Python \u4e2d\u8bfb\u53d6\u548c\u5904\u7406\u3002\u800c\u4e14\u5b83\u4e0d\u9700\u8981 \u5916\u90e8\u6570\u636e\u5e93\u670d\u52a1\u5668\uff0c\u6240\u4ee5\u5b83\u975e\u5e38\u9002\u5408\u7528\u4e8e\u5b66\u4e60\u3002</p> <p>\u4e8b\u5b9e\u4e0a\uff0cSQLite \u5b8c\u5168\u53ef\u4ee5\u5904\u7406\u76f8\u5f53\u5927\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u67d0\u4e9b\u65f6\u5019\uff0c\u4f60\u53ef\u80fd\u4f1a\u60f3\u8fc1\u79fb\u5230\u57fa\u4e8e\u670d\u52a1\u5668\u7684\u6570\u636e\u5e93\uff0c\u6bd4\u5982 PostgreSQL\uff08\u5b83\u4e5f\u662f\u514d\u8d39\u7684\uff09\u3002\u4f46\u73b0\u5728\u6211\u4eec\u4f1a\u7ee7\u7eed\u4f7f\u7528 SQLite\u3002</p> <p>\u5728\u6559\u7a0b\u4e2d\uff0c\u6211\u4f1a\u5c55\u793a SQL \u7247\u6bb5\u548c Python \u793a\u4f8b\u3002\u6211\u5e0c\u671b\uff08\u5e76\u4e14\u9884\u671f \ud83e\uddd0\uff09\u4f60\u80fd\u591f\u5b9e\u9645\u8fd0\u884c\u5b83\u4eec\uff0c\u5e76\u9a8c\u8bc1\u6570\u636e\u5e93\u662f\u5426\u6309\u9884\u671f\u5de5\u4f5c\u5e76\u663e\u793a\u76f8\u540c\u7684\u6570\u636e\u3002</p> <p>\u4e3a\u4e86\u80fd\u591f\u72ec\u7acb\u4e8e Python \u4ee3\u7801\uff08\u5e76\u4e14\u53ef\u80fd\u540c\u65f6\uff09\u81ea\u5df1\u6d4f\u89c8 SQLite \u6587\u4ef6\uff0c\u6211\u63a8\u8350\u4f60\u4f7f\u7528 DB Browser for SQLite\u3002</p> <p>\u5b83\u662f\u4e00\u4e2a\u5f88\u68d2\u4e14\u7b80\u5355\u7684\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u901a\u8fc7\u53cb\u597d\u7684\u7528\u6237\u754c\u9762\u4e0e SQLite \u6570\u636e\u5e93\uff08SQLite \u6587\u4ef6\uff09\u8fdb\u884c\u4ea4\u4e92\u3002</p> <p></p> <p>\u7ee7\u7eed\u524d\u5f80\u5e76 \u5b89\u88c5 DB Browser for SQLite\uff0c\u5b83\u662f\u514d\u8d39\u7684\u3002</p>"},{"location":"install/#_1","title":"\u4e0b\u4e00\u6b65","text":"<p>\u597d\u4e86\uff0c\u5f00\u59cb\u5427\uff01\u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u5f00\u59cb \u6559\u7a0b - \u7528\u6237\u6307\u5357\u3002 \ud83d\ude80</p>"},{"location":"management-tasks/","title":"\u4ed3\u5e93\u7ba1\u7406\u4efb\u52a1","text":"<p>\u4ee5\u4e0b\u662f\u56e2\u961f\u6210\u5458\u53ef\u4ee5\u6267\u884c\u7684\u7ba1\u7406 SQLModel \u4ed3\u5e93\u7684\u4efb\u52a1\u3010\u53c2\u89c1\u56e2\u961f\u6210\u5458\u8bf4\u660e](./management.md#team){.internal-link target=_blank}\u3002</p> <p>Tip</p> <p>\u672c\u8282\u5185\u5bb9\u4ec5\u5bf9\u5c11\u6570\u5177\u6709\u7ba1\u7406\u4ed3\u5e93\u6743\u9650\u7684\u56e2\u961f\u6210\u5458\u6709\u7528\uff0c\u5176\u4ed6\u4eba\u53ef\u4ee5\u8df3\u8fc7\u3002\ud83d\ude09</p> <p>...\u6240\u4ee5\uff0c\u4f60\u662f SQLModel \u7684 \u56e2\u961f\u6210\u5458\uff1f\u54c7\uff0c\u592a\u9177\u4e86\uff01 \ud83d\ude0e</p> <p>\u4f60\u53ef\u4ee5\u50cf\u5916\u90e8\u8d21\u732e\u8005\u4e00\u6837\uff0c\u901a\u8fc7 \u5e2e\u52a9 SQLModel - \u83b7\u53d6\u5e2e\u52a9 \u6765\u534f\u52a9\u4e00\u5207\u3002\u6b64\u5916\uff0c\u8fd8\u6709\u4e00\u4e9b\u4efb\u52a1\u53ea\u6709\u4f60\uff08\u4f5c\u4e3a\u56e2\u961f\u6210\u5458\uff09\u53ef\u4ee5\u6267\u884c\u3002</p> <p>\u4ee5\u4e0b\u662f\u4f60\u53ef\u4ee5\u6267\u884c\u4efb\u52a1\u7684\u4e00\u822c\u8bf4\u660e\u3002</p> <p>\u975e\u5e38\u611f\u8c22\u4f60\u7684\u5e2e\u52a9\u3002\ud83d\ude47</p>"},{"location":"management-tasks/#_2","title":"\u505a\u4e2a\u53cb\u5584\u7684\u4eba","text":"<p>\u9996\u5148\uff0c\u8981\u53cb\u5584\u3002\ud83d\ude0a</p> <p>\u5982\u679c\u4f60\u5df2\u7ecf\u88ab\u52a0\u5165\u56e2\u961f\uff0c\u90a3\u4f60\u5927\u6982\u662f\u4e2a\u8d85\u7ea7\u53cb\u5584\u7684\u4eba\uff0c\u4f46\u8fd8\u662f\u503c\u5f97\u63d0\u4e00\u4e0b\u3002\ud83e\udd13</p>"},{"location":"management-tasks/#_3","title":"\u5f53\u4e8b\u60c5\u53d8\u5f97\u56f0\u96be\u65f6","text":"<p>\u5f53\u4e00\u5207\u987a\u5229\u65f6\uff0c\u4e8b\u60c5\u5c31\u5bb9\u6613\u591a\u4e86\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u592a\u591a\u8bf4\u660e\u3002\u4f46\u5f53\u4e8b\u60c5\u53d8\u5f97\u56f0\u96be\u65f6\uff0c\u4ee5\u4e0b\u662f\u4e00\u4e9b\u6307\u5bfc\u539f\u5219\u3002</p> <p>\u5c3d\u91cf\u627e\u51fa\u79ef\u6781\u7684\u4e00\u9762\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5982\u679c\u522b\u4eba\u6ca1\u6709\u8868\u73b0\u5f97\u4e0d\u53cb\u597d\uff0c\u5c3d\u91cf\u611f\u8c22\u4ed6\u4eec\u7684\u52aa\u529b\u548c\u5174\u8da3\uff0c\u5373\u4f7f\u4f60\u4e0d\u540c\u610f\u8ba8\u8bba\u7684\u4e3b\u9898\uff08\u4f8b\u5982\u8ba8\u8bba\u6216 PR\uff09\uff0c\u4e5f\u8981\u611f\u8c22\u4ed6\u4eec\u5bf9\u9879\u76ee\u7684\u5174\u8da3\uff0c\u6216\u8005\u611f\u8c22\u4ed6\u4eec\u82b1\u65f6\u95f4\u5c1d\u8bd5\u505a\u67d0\u4e8b\u3002</p> <p>\u7528\u6587\u5b57\u8868\u8fbe\u60c5\u611f\u662f\u5f88\u56f0\u96be\u7684\uff0c\u522b\u5fd8\u4e86\u4f7f\u7528\u8868\u60c5\u7b26\u53f7\u6765\u5e2e\u52a9\u8868\u8fbe\u3002\ud83d\ude05</p> <p>\u5728\u8ba8\u8bba\u548c PR \u4e2d\uff0c\u5f88\u591a\u65f6\u5019\u4eba\u4eec\u4f1a\u5e26\u7740\u60c5\u7eea\u53d1\u8a00\uff0c\u6709\u65f6\u4e0d\u52a0\u8fc7\u6ee4\u5730\u8868\u8fbe\u6cae\u4e27\uff0c\u5938\u5f20\u62b1\u6028\u3001\u53d1\u6cc4\u3001\u4e0d\u5408\u9002\u7684\u8981\u6c42\u7b49\u7b49\u3002\u8fd9\u4e9b\u90fd\u4e0d\u592a\u53cb\u597d\uff0c\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u65f6\uff0c\u6211\u4eec\u4f1a\u4f18\u5148\u8003\u8651\u89e3\u51b3\u4ed6\u4eec\u7684\u95ee\u9898\u3002\u4f46\u4ecd\u7136\u8981\u6df1\u547c\u5438\uff0c\u5c3d\u91cf\u6e29\u548c\u5730\u56de\u5e94\u3002</p> <p>\u5c3d\u91cf\u907f\u514d\u4f7f\u7528\u5c16\u523b\u7684\u8bbd\u523a\u6216\u53ef\u80fd\u5e26\u6709\u6d88\u6781\u653b\u51fb\u6027\u7684\u8bc4\u8bba\u3002\u5982\u679c\u6709\u4ec0\u4e48\u4e0d\u5bf9\uff0c\u6700\u597d\u76f4\u63a5\u6307\u51fa\u6765\uff08\u5c3d\u91cf\u6e29\u548c\uff09\uff0c\u800c\u4e0d\u662f\u8bbd\u523a\u3002</p> <p>\u5c3d\u91cf\u5177\u4f53\u548c\u5ba2\u89c2\uff0c\u907f\u514d\u6cdb\u6cdb\u800c\u8c08\u3002</p> <p>\u5bf9\u4e8e\u66f4\u68d8\u624b\u7684\u5bf9\u8bdd\uff0c\u4f8b\u5982\u62d2\u7edd PR\uff0c\u4f60\u53ef\u4ee5\u8ba9\u6211\uff08@tiangolo\uff09\u76f4\u63a5\u5904\u7406\u3002</p>"},{"location":"management-tasks/#pr","title":"\u7f16\u8f91 PR \u6807\u9898","text":"<ul> <li>\u7f16\u8f91 PR \u6807\u9898\u65f6\uff0c\u4ee5\u6765\u81ea gitmoji \u7684\u8868\u60c5\u7b26\u53f7\u5f00\u5934\u3002<ul> <li>\u4f7f\u7528\u8868\u60c5\u7b26\u53f7\u5b57\u7b26\uff0c\u800c\u4e0d\u662f GitHub \u4ee3\u7801\u3002\u6240\u4ee5\u4f7f\u7528 <code>\ud83d\udc1b</code> \u800c\u4e0d\u662f <code>:bug:</code>\u3002\u8fd9\u6837\u5728 GitHub \u4ee5\u5916\u7684\u5730\u65b9\uff0c\u4f8b\u5982\u53d1\u5e03\u8bf4\u660e\u4e2d\uff0c\u4e5f\u80fd\u6b63\u786e\u663e\u793a\u3002</li> </ul> </li> <li>\u6807\u9898\u4ee5\u52a8\u8bcd\u5f00\u5934\u3002\u4f8b\u5982 <code>Add</code>\uff08\u6dfb\u52a0\uff09\uff0c<code>Refactor</code>\uff08\u91cd\u6784\uff09\uff0c<code>Fix</code>\uff08\u4fee\u590d\uff09\u7b49\u3002\u8fd9\u6837\u6807\u9898\u4f1a\u8868\u8fbe PR \u505a\u4e86\u4ec0\u4e48\u64cd\u4f5c\u3002\u4f8b\u5982 <code>Add support for teleporting</code>\uff08\u6dfb\u52a0\u5bf9\u4f20\u9001\u7684\u652f\u6301\uff09\uff0c\u800c\u4e0d\u662f <code>Teleporting wasn't working, so this PR fixes it</code>\uff08\u4f20\u9001\u65e0\u6cd5\u4f7f\u7528\uff0c\u6240\u4ee5\u8fd9\u4e2a PR \u4fee\u590d\u4e86\u5b83\uff09\u3002</li> <li>\u7f16\u8f91 PR \u6807\u9898\u65f6\uff0c\u4f7f\u7528\u201c\u547d\u4ee4\u5f0f\u201d\u8bed\u6c14\uff0c\u50cf\u662f\u7ed9\u51fa\u547d\u4ee4\u3002\u56e0\u6b64\uff0c\u4f7f\u7528 <code>Add support for teleporting</code> \u800c\u4e0d\u662f <code>Adding support for teleporting</code>\u3002</li> <li>\u5c3d\u91cf\u8ba9\u6807\u9898\u5177\u4f53\u63cf\u8ff0\u5b83\u5b9e\u73b0\u7684\u529f\u80fd\u3002\u5982\u679c\u662f\u65b0\u529f\u80fd\uff0c\u5c1d\u8bd5\u63cf\u8ff0\u5b83\uff0c\u4f8b\u5982 <code>Add support for teleporting</code>\uff08\u6dfb\u52a0\u5bf9\u4f20\u9001\u7684\u652f\u6301\uff09\uff0c\u800c\u4e0d\u662f <code>Create TeleportAdapter class</code>\uff08\u521b\u5efa TeleportAdapter \u7c7b\uff09\u3002</li> <li>\u6807\u9898\u4e0d\u8981\u4ee5\u53e5\u53f7\uff08<code>.</code>\uff09\u7ed3\u5c3e\u3002</li> </ul> <p>\u4e00\u65e6 PR \u88ab\u5408\u5e76\uff0cGitHub Action\uff08latest-changes\uff09\u4f1a\u4f7f\u7528 PR \u6807\u9898\u81ea\u52a8\u66f4\u65b0\u6700\u65b0\u7684\u53d8\u66f4\u3002</p> <p>\u56e0\u6b64\uff0c\u62e5\u6709\u4e00\u4e2a\u6f02\u4eae\u7684 PR \u6807\u9898\u4e0d\u4ec5\u5728 GitHub \u4e2d\u770b\u8d77\u6765\u5f88\u68d2\uff0c\u800c\u4e14\u5728\u53d1\u5e03\u8bf4\u660e\u4e2d\u4e5f\u4f1a\u5f88\u6f02\u4eae\u3002 \ud83d\udcdd</p>"},{"location":"management-tasks/#pr_1","title":"\u4e3a PR \u6dfb\u52a0\u6807\u7b7e","text":"<p>\u76f8\u540c\u7684 GitHub Action latest-changes \u4f1a\u4f7f\u7528 PR \u4e2d\u7684\u4e00\u4e2a\u6807\u7b7e\u6765\u51b3\u5b9a\u5c06\u8be5 PR \u653e\u5165\u53d1\u5e03\u8bf4\u660e\u4e2d\u7684\u54ea\u4e2a\u90e8\u5206\u3002</p> <p>\u786e\u4fdd\u4f7f\u7528\u6765\u81ea latest-changes \u6807\u7b7e\u5217\u8868 \u4e2d\u7684\u652f\u6301\u6807\u7b7e\uff1a</p> <ul> <li><code>breaking</code>\uff1a\u91cd\u5927\u66f4\u6539<ul> <li>\u5982\u679c\u7528\u6237\u66f4\u65b0\u7248\u672c\u540e\u4ee3\u7801\u4f1a\u51fa\u9519\uff0c\u9700\u8981\u4fee\u6539\u4ee3\u7801\u624d\u80fd\u7ee7\u7eed\u4f7f\u7528\u7684\u60c5\u51b5\u3002\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u7684\u5f88\u5c11\uff0c\u6240\u4ee5\u8fd9\u4e2a\u6807\u7b7e\u4e0d\u5e38\u7528\u3002</li> </ul> </li> <li><code>security</code>\uff1a\u5b89\u5168\u4fee\u590d<ul> <li>\u8fd9\u662f\u9488\u5bf9\u5b89\u5168\u4fee\u590d\u7684\u6807\u7b7e\uff0c\u4f8b\u5982\u6f0f\u6d1e\u4fee\u590d\u3002\u51e0\u4e4e\u4e0d\u4f1a\u4f7f\u7528\u3002</li> </ul> </li> <li><code>feature</code>\uff1a\u65b0\u529f\u80fd<ul> <li>\u65b0\u589e\u7684\u529f\u80fd\uff0c\u652f\u6301\u4ee5\u524d\u6ca1\u6709\u7684\u5185\u5bb9\u3002</li> </ul> </li> <li><code>bug</code>\uff1a\u4fee\u590d<ul> <li>\u4ee5\u524d\u652f\u6301\u7684\u529f\u80fd\u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c\uff0c\u901a\u8fc7\u6b64 PR \u4fee\u590d\u4e86\u5b83\u3002\u6709\u8bb8\u591a PR \u58f0\u79f0\u662f bug \u4fee\u590d\uff0c\u56e0\u4e3a\u7528\u6237\u4ee5\u4e0d\u652f\u6301\u7684\u65b9\u5f0f\u4f7f\u7528\u5b83\uff0c\u5e76\u8ba4\u4e3a\u8fd9\u5e94\u8be5\u662f\u9ed8\u8ba4\u652f\u6301\u7684\u3002\u4f46\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u786e\u5b9e\u5b58\u5728 bug\u3002</li> </ul> </li> <li><code>refactor</code>\uff1a\u91cd\u6784<ul> <li>\u901a\u5e38\u662f\u5bf9\u5185\u90e8\u4ee3\u7801\u7684\u4fee\u6539\uff0c\u4e0d\u4f1a\u6539\u53d8\u884c\u4e3a\u3002\u901a\u5e38\u662f\u4e3a\u4e86\u63d0\u9ad8\u53ef\u7ef4\u62a4\u6027\u6216\u4e3a\u672a\u6765\u7684\u529f\u80fd\u94fa\u8def\u7b49\u3002</li> </ul> </li> <li><code>upgrade</code>\uff1a\u5347\u7ea7<ul> <li>\u8fd9\u662f\u9488\u5bf9\u9879\u76ee\u7684\u76f4\u63a5\u4f9d\u8d56\u9879\u7684\u5347\u7ea7\uff0c\u6216\u989d\u5916\u7684\u53ef\u9009\u4f9d\u8d56\u9879\uff0c\u901a\u5e38\u4f4d\u4e8e <code>pyproject.toml</code> \u4e2d\u3002\u56e0\u6b64\uff0c\u6700\u7ec8\u7528\u6237\u66f4\u65b0\u540e\u4f1a\u6536\u5230\u8fd9\u4e9b\u5347\u7ea7\uff0c\u4f46\u4e0d\u5305\u62ec\u5f00\u53d1\u3001\u6d4b\u8bd5\u3001\u6587\u6863\u7b49\u65b9\u9762\u7684\u5185\u90e8\u4f9d\u8d56\u9879\u3002\u8fd9\u4e9b\u5185\u90e8\u4f9d\u8d56\u9879\u901a\u5e38\u5728 <code>requirements.txt</code> \u6587\u4ef6\u6216 GitHub Actions \u7248\u672c\u4e2d\uff0c\u5e94\u8be5\u6807\u8bb0\u4e3a <code>internal</code>\uff0c\u800c\u4e0d\u662f <code>upgrade</code>\u3002</li> </ul> </li> <li><code>docs</code>\uff1a\u6587\u6863<ul> <li>\u6587\u6863\u7684\u66f4\u6539\uff0c\u5305\u62ec\u66f4\u65b0\u6587\u6863\u3001\u4fee\u590d\u9519\u522b\u5b57\u3002\u4f46\u4e0d\u5305\u62ec\u7ffb\u8bd1\u7684\u66f4\u6539\u3002</li> <li>\u901a\u5e38\u53ef\u4ee5\u901a\u8fc7\u8bbf\u95ee PR \u4e2d\u7684 \"Files changed\" \u6807\u7b7e\uff0c\u68c0\u67e5\u662f\u5426\u66f4\u65b0\u7684\u6587\u4ef6\u4ee5 <code>docs/en/docs</code> \u5f00\u5934\u6765\u5feb\u901f\u8bc6\u522b\u3002\u6587\u6863\u7684\u539f\u59cb\u7248\u672c\u59cb\u7ec8\u662f\u82f1\u6587\u7684\uff0c\u4f4d\u4e8e <code>docs/en/docs</code> \u4e2d\u3002</li> </ul> </li> <li><code>internal</code>\uff1a\u5185\u90e8<ul> <li>\u7528\u4e8e\u53ea\u5f71\u54cd\u4ed3\u5e93\u7ba1\u7406\u7684\u66f4\u6539\u3002\u4f8b\u5982\uff0c\u5347\u7ea7\u5185\u90e8\u4f9d\u8d56\u9879\u3001\u66f4\u6539 GitHub Actions \u6216\u811a\u672c\u7b49\u3002</li> </ul> </li> </ul> <p>Tip</p> <p>\u50cf Dependabot \u7b49\u5de5\u5177\u4f1a\u6dfb\u52a0\u4e00\u4e9b\u6807\u7b7e\uff0c\u6bd4\u5982 <code>dependencies</code>\uff0c\u4f46\u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e9b\u6807\u7b7e\u4e0d\u4f1a\u88ab <code>latest-changes</code> GitHub Action \u4f7f\u7528\uff0c\u56e0\u6b64\u4e0d\u4f1a\u51fa\u73b0\u5728\u53d1\u5e03\u8bf4\u660e\u4e2d\u3002\u8bf7\u786e\u4fdd\u6dfb\u52a0\u4e0a\u8ff0\u6807\u7b7e\u4e4b\u4e00\u3002</p>"},{"location":"management-tasks/#pr_2","title":"\u5ba1\u6838 PR","text":"<p>\u5982\u679c PR \u6ca1\u6709\u89e3\u91ca\u5b83\u505a\u4e86\u4ec0\u4e48\u6216\u8005\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u505a\uff0c\u8bf7\u8981\u6c42\u63d0\u4f9b\u66f4\u591a\u4fe1\u606f\u3002</p> <p>PR \u5e94\u8be5\u6709\u4e00\u4e2a\u7279\u5b9a\u7684\u7528\u4f8b\uff0c\u89e3\u91ca\u5b83\u89e3\u51b3\u4e86\u4ec0\u4e48\u95ee\u9898\u3002</p> <ul> <li>\u5982\u679c PR \u662f\u65b0\u529f\u80fd\uff0c\u5b83\u5e94\u8be5\u6709\u6587\u6863\u3002<ul> <li>\u9664\u975e\u8fd9\u662f\u6211\u4eec\u60f3\u8981\u907f\u514d\u7684\u529f\u80fd\uff0c\u6bd4\u5982\u652f\u6301\u67d0\u4e2a\u4e0d\u5e38\u89c1\u7684\u7528\u4f8b\uff0c\u4e0d\u5e0c\u671b\u7528\u6237\u4f7f\u7528\u7684\u529f\u80fd\u3002</li> </ul> </li> <li>\u6587\u6863\u5e94\u8be5\u5305\u542b\u6e90\u4ee3\u7801\u793a\u4f8b\u6587\u4ef6\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u5728 Markdown \u4e2d\u5199 Python \u4ee3\u7801\u3002</li> <li>\u5982\u679c\u6e90\u4ee3\u7801\u793a\u4f8b\u6587\u4ef6\u5bf9\u4e8e Python 3.8\u30013.9 \u548c 3.10 \u6709\u4e0d\u540c\u7684\u8bed\u6cd5\uff0c\u5e94\u8be5\u63d0\u4f9b\u4e0d\u540c\u7248\u672c\u7684\u6587\u4ef6\uff0c\u5e76\u5728\u6587\u6863\u4e2d\u4f7f\u7528\u6807\u7b7e\u9875\u5c55\u793a\u5b83\u4eec\u3002</li> <li>\u5e94\u8be5\u6709\u6d4b\u8bd5\u8986\u76d6\u6e90\u4ee3\u7801\u793a\u4f8b\u3002</li> <li>\u5728 PR \u88ab\u5e94\u7528\u4e4b\u524d\uff0c\u65b0\u6d4b\u8bd5\u5e94\u8be5\u662f\u5931\u8d25\u7684\u3002</li> <li>\u5e94\u7528 PR \u540e\uff0c\u65b0\u6d4b\u8bd5\u5e94\u8be5\u901a\u8fc7\u3002</li> <li>\u8986\u76d6\u7387\u5e94\u8be5\u4fdd\u6301\u5728 100%\u3002</li> <li>\u5982\u679c\u4f60\u8ba4\u4e3a PR \u6ca1\u95ee\u9898\uff0c\u6216\u8005\u6211\u4eec\u8ba8\u8bba\u540e\u8ba4\u4e3a\u5e94\u8be5\u63a5\u53d7\u5b83\uff0c\u53ef\u4ee5\u5728 PR \u4e0a\u6dfb\u52a0\u63d0\u4ea4\u6765\u8c03\u6574\u5b83\uff0c\u589e\u52a0\u6587\u6863\u3001\u6d4b\u8bd5\u3001\u683c\u5f0f\u3001\u91cd\u6784\u3001\u5220\u9664\u591a\u4f59\u6587\u4ef6\u7b49\u3002</li> <li>\u6b22\u8fce\u5728 PR \u4e2d\u8bc4\u8bba\uff0c\u8981\u6c42\u63d0\u4f9b\u66f4\u591a\u4fe1\u606f\u3001\u5efa\u8bae\u66f4\u6539\u7b49\u3002</li> <li>\u4e00\u65e6\u4f60\u8ba4\u4e3a PR \u51c6\u5907\u597d\u4e86\uff0c\u5c06\u5b83\u79fb\u52a8\u5230 GitHub \u5185\u90e8\u9879\u76ee\u4e2d\u8ba9\u6211\u6765\u5ba1\u6838\u3002</li> </ul>"},{"location":"management-tasks/#dependabot-prs","title":"Dependabot PRs","text":"<p>Dependabot \u4f1a\u521b\u5efa PR \u6765\u66f4\u65b0\u591a\u4e2a\u4f9d\u8d56\u9879\uff0c\u8fd9\u4e9b PR \u770b\u8d77\u6765\u76f8\u4f3c\uff0c\u4f46\u6709\u4e9b\u8981\u6bd4\u5176\u4ed6\u7684\u66f4\u5fae\u5999\u3002</p> <ul> <li>\u5982\u679c PR \u662f\u9488\u5bf9\u76f4\u63a5\u4f9d\u8d56\u9879\u7684\uff0c\u5373 Dependabot \u6b63\u5728\u4fee\u6539 <code>pyproject.toml</code>\uff0c\u4e0d\u8981\u5408\u5e76\u5b83\u3002 \ud83d\ude31 \u8ba9\u6211\u5148\u68c0\u67e5\u4e00\u4e0b\u3002\u5f88\u53ef\u80fd\u9700\u8981\u8fdb\u884c\u4e00\u4e9b\u989d\u5916\u7684\u8c03\u6574\u6216\u66f4\u65b0\u3002</li> <li>\u5982\u679c PR \u66f4\u65b0\u4e86\u67d0\u4e2a\u5185\u90e8\u4f9d\u8d56\u9879\uff0c\u4f8b\u5982\u4fee\u6539\u4e86 <code>requirements.txt</code> \u6587\u4ef6\u6216 GitHub Action \u7248\u672c\uff0c\u5982\u679c\u6d4b\u8bd5\u901a\u8fc7\uff0c\u53d1\u5e03\u8bf4\u660e\uff08PR \u4e2d\u7684\u6458\u8981\uff09\u6ca1\u6709\u660e\u663e\u7684\u6f5c\u5728\u7834\u574f\u6027\u66f4\u6539\uff0c\u4f60\u53ef\u4ee5\u5408\u5e76\u5b83\u3002 \ud83d\ude0e</li> </ul>"},{"location":"management-tasks/#github-discussions","title":"\u6807\u8bb0 GitHub Discussions \u7b54\u590d","text":"<p>\u5f53 GitHub Discussions \u4e2d\u7684\u95ee\u9898\u5f97\u5230\u56de\u7b54\u65f6\uff0c\u8bf7\u70b9\u51fb \"Mark as answer\" \u6765\u6807\u8bb0\u7b54\u6848\u3002</p> <p>\u8bb8\u591a\u5f53\u524d\u7684\u8ba8\u8bba\u95ee\u9898\u662f\u4ece\u65e7\u7684 Issues \u4e2d\u8fc1\u79fb\u8fc7\u6765\u7684\uff0c\u5f88\u591a\u90fd\u6709 <code>answered</code> \u6807\u7b7e\uff0c\u8868\u793a\u5728 Issues \u4e2d\u5df2\u7ecf\u5f97\u5230\u4e86\u56de\u7b54\uff0c\u4f46\u73b0\u5728\u5728 GitHub Discussions \u4e2d\uff0c\u8fd8\u4e0d\u6e05\u695a\u54ea\u4e9b\u662f\u5b9e\u9645\u7684\u56de\u7b54\u3002</p> <p>\u4f60\u53ef\u4ee5\u901a\u8fc7 \u8fc7\u6ee4\u672a\u56de\u7b54\u7684\u95ee\u9898\u3002</p>"},{"location":"management/","title":"\u4ed3\u5e93\u7ba1\u7406","text":"<p>\u8fd9\u662f\u5173\u4e8e\u5982\u4f55\u7ba1\u7406\u548c\u7ef4\u62a4 SQLModel \u4ed3\u5e93\u7684\u7b80\u77ed\u63cf\u8ff0\u3002</p>"},{"location":"management/#_2","title":"\u6240\u6709\u8005","text":"<p>\u6211\uff0c@tiangolo\uff0c\u662f SQLModel \u4ed3\u5e93\u7684\u521b\u5efa\u8005\u548c\u6240\u6709\u8005\u3002\ud83e\udd13</p> <p>\u6211\u901a\u5e38\u4f1a\u5728\u5408\u5e76 PR \u4e4b\u524d\u8fdb\u884c\u6700\u7ec8\u5ba1\u6838\u3002\u6211\u505a\u51fa\u9879\u76ee\u7684\u6700\u7ec8\u51b3\u5b9a\uff0c\u6211\u662f BDFL\u3002\ud83d\ude05</p>"},{"location":"management/#_3","title":"\u56e2\u961f","text":"<p>\u6709\u4e00\u652f\u56e2\u961f\u5e2e\u52a9\u7ba1\u7406\u548c\u7ef4\u62a4\u8be5\u9879\u76ee\u3002\ud83d\ude0e</p> <p>\u4ed6\u4eec\u6709\u4e0d\u540c\u7ea7\u522b\u7684\u6743\u9650\u548c \u5177\u4f53\u7684\u6307\u4ee4\u3002</p> <p>\u4ed6\u4eec\u53ef\u4ee5\u6267\u884c\u7684\u4e00\u4e9b\u4efb\u52a1\u5305\u62ec\uff1a</p> <ul> <li>\u4e3a PR \u6dfb\u52a0\u6807\u7b7e\u3002</li> <li>\u7f16\u8f91 PR \u6807\u9898\u3002</li> <li>\u5728 PR \u4e0a\u6dfb\u52a0\u63d0\u4ea4\u8fdb\u884c\u8c03\u6574\u3002</li> <li>\u5728 GitHub Discussions \u4e2d\u6807\u8bb0\u95ee\u9898\u7684\u7b54\u6848\u7b49\u3002</li> <li>\u5408\u5e76\u67d0\u4e9b\u7279\u5b9a\u7c7b\u578b\u7684 PR\u3002</li> </ul> <p>\u52a0\u5165\u56e2\u961f\u9700\u8981\u9080\u8bf7\uff0c\u6211\u53ef\u4ee5\u66f4\u65b0\u6216\u79fb\u9664\u6743\u9650\u3001\u6307\u4ee4\u6216\u6210\u5458\u8d44\u683c\u3002</p>"},{"location":"management/#_4","title":"\u56e2\u961f\u6210\u5458","text":"<p>\u4ee5\u4e0b\u662f\u5f53\u524d\u7684\u56e2\u961f\u6210\u5458\u540d\u5355\u3002\ud83d\ude0e</p> @tiangolo @estebanx64 @alejsdev <p>\u9664\u4e86\u4ed6\u4eec\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a\u5e9e\u5927\u7684\u793e\u533a\uff0c\u5927\u5bb6\u76f8\u4e92\u5e2e\u52a9\uff0c\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u53c2\u4e0e\u9879\u76ee\u3002</p>"},{"location":"management/#_5","title":"\u5916\u90e8\u8d21\u732e","text":"<p>\u975e\u5e38\u6b22\u8fce\u5e76\u611f\u6fc0\u5916\u90e8\u8d21\u732e\uff0c\u5305\u62ec\u56de\u7b54\u95ee\u9898\u3001\u63d0\u4ea4 PR \u7b49\u3002\ud83d\ude47\u200d\u2642\ufe0f</p> <p>\u6709\u8bb8\u591a\u65b9\u5f0f\u53ef\u4ee5 \u5e2e\u52a9\u7ef4\u62a4 SQLModel\u3002</p>"},{"location":"release-notes/","title":"\u53d1\u5e03\u8bf4\u660e","text":""},{"location":"release-notes/#_2","title":"\u6700\u65b0\u66f4\u6539","text":""},{"location":"release-notes/#_3","title":"\u91cd\u6784","text":"<ul> <li>\ud83d\udea8 \u4fee\u590d\u65b0 Pydantic \u7684\u7c7b\u578b\u3002PR #1131 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> </ul>"},{"location":"release-notes/#_4","title":"\u6587\u6863","text":"<ul> <li>\u270f\ufe0f \u4fee\u590d v0.0.22 \u7248\u672c\u8bf4\u660e\u4e2d\u7684\u9519\u522b\u5b57\u3002PR #1195 \u7531 @PipeKnight \u63d0\u4ea4\u3002</li> <li>\ud83d\udcdd \u66f4\u65b0 <code>docs/advanced/uuid.md</code> \u7684\u5305\u542b\u5185\u5bb9\u3002PR #1151 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> <li>\ud83d\udcdd \u66f4\u65b0 <code>docs/tutorial/create-db-and-table.md</code> \u7684\u5305\u542b\u5185\u5bb9\u3002PR #1149 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> <li>\ud83d\udcdd \u4fee\u590d\u6587\u6863\u4e2d\u7684\u5185\u90e8\u94fe\u63a5\u3002PR #1148 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> <li>\u270f\ufe0f \u4fee\u590d\u6587\u6863\u4e2d\u7684\u9519\u522b\u5b57\u3002PR #1106 \u7531 @Solipsistmonkey \u63d0\u4ea4\u3002</li> <li>\ud83d\udcdd \u5220\u9664 <code>indexes.md</code> \u4e2d\u7684\u9ad8\u4eae\u90e8\u5206\u3002PR #1100 \u7531 @alejsdev \u63d0\u4ea4\u3002</li> </ul>"},{"location":"release-notes/#_5","title":"\u5185\u90e8","text":"<ul> <li>\u2b06\ufe0f \u5347\u7ea7 markdown-include-variants \u5230\u7248\u672c 0.0.3\u3002PR #1152 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> <li>\ud83d\udc77 \u66f4\u65b0 issue \u7ba1\u7406\u5de5\u4f5c\u6d41\u3002PR #1137 \u7531 @alejsdev \u63d0\u4ea4\u3002</li> <li>\ud83d\udc77 \u4fee\u590d smokeshow\uff0cCI \u4e0a\u68c0\u67e5\u6587\u4ef6\u3002PR #1136 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> <li>\ud83d\udc77 \u5728 CI \u4e2d\u4f7f\u7528 uv\u3002PR #1135 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> <li>\u2795 \u6dfb\u52a0\u6587\u6863\u4f9d\u8d56 markdown-include-variants\u3002PR #1129 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> <li>\ud83d\udd28 \u66f4\u65b0\u811a\u672c\u4ee5\u6807\u51c6\u5316\u683c\u5f0f\u3002PR #1130 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> <li>\ud83d\udc77 \u66f4\u65b0 <code>labeler.yml</code>\u3002PR #1128 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> <li>\ud83d\udc77 \u66f4\u65b0\u5de5\u4f5c\u6d41 deploy-docs-notify URL\u3002PR #1126 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> <li>\ud83d\udc77 \u5347\u7ea7 Cloudflare GitHub Action\u3002PR #1124 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> <li>\u2b06 [pre-commit.ci] pre-commit \u81ea\u52a8\u66f4\u65b0\u3002PR #1097 \u7531 @pre-commit-ci[bot] \u63d0\u4ea4\u3002</li> <li>\u2b06 \u5c06 tiangolo/issue-manager \u4ece 0.5.0 \u5347\u7ea7\u5230 0.5.1\u3002PR #1107 \u7531 @dependabot[bot] \u63d0\u4ea4\u3002</li> <li>\ud83d\udc77 \u66f4\u65b0 <code>issue-manager.yml</code>\u3002PR #1103 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> <li>\ud83d\udc77 \u4fee\u590d CI \u4e2d\u7684\u8986\u76d6\u5904\u7406\uff0c\u6bcf\u4e2a\u77e9\u9635\u8fd0\u884c\u4e00\u4e2a\u540d\u79f0\u3002PR #1104 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> <li>\ud83d\udc9a \u5728\u4f7f\u7528 <code>upload-artifact</code> GH Action \u65f6\u5c06 <code>include-hidden-files</code> \u8bbe\u7f6e\u4e3a <code>True</code>\u3002PR #1098 \u7531 @svlandeg \u63d0\u4ea4\u3002</li> <li>\u2b06 [pre-commit.ci] pre-commit \u81ea\u52a8\u66f4\u65b0\u3002PR #1088 \u7531 @pre-commit-ci[bot] \u63d0\u4ea4\u3002</li> </ul>"},{"location":"release-notes/#0022","title":"0.0.22","text":""},{"location":"release-notes/#_6","title":"\u4fee\u590d","text":"<ul> <li>\ud83d\udc1b \u4fee\u590d\u5bf9 <code>Optional[Annotated[x, f()]]</code> \u7c7b\u578b\u7684\u652f\u6301\uff0c\u4f8b\u5982 <code>id: Optional[pydantic.UUID4]</code>\u3002PR #1093 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> </ul>"},{"location":"release-notes/#_7","title":"\u6587\u6863","text":"<ul> <li>\u270f\ufe0f \u4fee\u590d <code>docs/virtual-environments.md</code> \u4e2d\u7684\u9519\u522b\u5b57\u3002PR #1085 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> <li>\ud83d\udcdd \u6dfb\u52a0\u865a\u62df\u73af\u5883\u548c\u73af\u5883\u53d8\u91cf\u7684\u6587\u6863\uff0c\u66f4\u65b0\u8d21\u732e\u6307\u5357\u3002PR #1082 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> <li>\ud83d\udcdd \u6dfb\u52a0\u6709\u5173\u4ed3\u5e93\u7ba1\u7406\u548c\u56e2\u961f\u7684\u6587\u6863\u3002PR #1059 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> <li>\u270f\ufe0f \u4fee\u590d <code>cascade_delete</code> \u6587\u6863\u4e2d\u7684\u9519\u522b\u5b57\u3002PR #1030 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> </ul>"},{"location":"release-notes/#_8","title":"\u5185\u90e8","text":"<ul> <li>\u2705 \u91cd\u6784 <code>test_enums</code>\uff0c\u4f7f\u5176\u72ec\u7acb\u4e8e\u4e4b\u524d\u7684\u5bfc\u5165\u3002PR #1095 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> <li>\ud83d\udc77 \u66f4\u65b0 <code>latest-changes</code> GitHub Action\u3002PR #1087 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> <li>\u2b06 [pre-commit.ci] pre-commit \u81ea\u52a8\u66f4\u65b0\u3002PR #1028 \u7531 @pre-commit-ci[bot] \u63d0\u4ea4\u3002</li> <li>\u2b06 \u5c06 ruff \u4ece 0.4.7 \u5347\u7ea7\u5230 0.6.2\u3002PR #1081 \u7531 @dependabot[bot] \u63d0\u4ea4\u3002</li> <li>\ud83d\udd27 \u66f4\u65b0 lint \u811a\u672c\u3002PR #1084 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> <li>\ud83d\udc77 \u66f4\u65b0\u8986\u76d6\u7387\u7684 Python \u7248\u672c\u3002PR #1083 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> <li>\ud83d\udd27 \u66f4\u65b0\u8986\u76d6\u7387\u914d\u7f6e\u6587\u4ef6\u3002PR #1077 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> <li>\ud83d\udd27 \u5728 <code>pyproject.toml</code> \u4e2d\u6dfb\u52a0 URLs\uff0c\u4ee5\u4fbf\u5728 PyPI \u4e0a\u663e\u793a\u3002PR #1074 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> <li>\ud83d\udc77 \u4e0d\u540c\u6b65\u6807\u7b7e\uff0c\u4ee5\u907f\u514d\u8986\u76d6\u624b\u52a8\u6dfb\u52a0\u7684\u6807\u7b7e\u3002PR #1073 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> <li>\ud83d\udc77 \u66f4\u65b0 GitHub Action labeler \u7684\u914d\u7f6e\uff0c\u53ea\u6dfb\u52a0\u4e00\u4e2a\u6807\u7b7e\u3002PR #1072 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> <li>\ud83d\udc77 \u66f4\u65b0 labeler GitHub Actions \u7684\u6743\u9650\u548c\u4f9d\u8d56\u3002PR #1071 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> <li>\ud83d\udc77 \u6dfb\u52a0 GitHub Action label-checker\u3002PR #1069 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> <li>\ud83d\udc77 \u6dfb\u52a0 GitHub Action labeler\u3002PR #1068 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> <li>\ud83d\udc77 \u66f4\u65b0 GitHub Action add-to-project\u3002PR #1067 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> <li>\ud83d\udc77 \u6dfb\u52a0 GitHub Action add-to-project\u3002PR #1066 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> <li>\ud83d\udcdd \u66f4\u65b0\u6ce8\u91ca\u4e2d\u7684\u8b66\u544a\u3002PR #1065 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> <li>\ud83d\udcdd \u66f4\u65b0\u94fe\u63a5\uff0c\u5c06 <code>github.com/tiangolo/sqlmodel</code> \u4fee\u6539\u4e3a <code>github.com/fastapi/sqlmodel</code>\u3002PR #1064 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> <li>\ud83d\udd27 \u66f4\u65b0\u6210\u5458\u3002PR #1063 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> <li>\ud83d\udc84 \u6dfb\u52a0\u6df1\u8272\u6a21\u5f0f\u5fbd\u6807\u3002PR #1061 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> <li>\ud83d\udd28 \u66f4\u65b0 docs.py \u811a\u672c\uff0c\u4ee5\u6761\u4ef6\u6027\u542f\u7528\u810f\u91cd\u8f7d\u3002PR #1060 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> <li>\ud83d\udd27 \u66f4\u65b0 MkDocs \u9884\u89c8\u3002PR #1058 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> <li>\ud83d\udc84 \u66f4\u65b0 Termynal \u884c\u9ad8\u3002PR #1057 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> <li>\ud83d\udc77 \u5347\u7ea7\u6784\u5efa\u6587\u6863\u914d\u7f6e\u3002PR #1047 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> <li>\ud83d\udc77 \u6dfb\u52a0 alls-green \u6d4b\u8bd5\u91cd\u5206\u914d\u3002PR #1055 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> <li>\ud83d\udc77 \u66f4\u65b0 docs-previews\uff0c\u4ee5\u5904\u7406\u65e0\u6587\u6863\u66f4\u6539\u3002PR #1056 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> <li>\ud83d\udc77\ud83c\udffb \u5728\u8bc4\u8bba\u4e2d\u663e\u793a\u6587\u6863\u90e8\u7f72\u72b6\u6001\u548c\u9884\u89c8 URL\u3002PR #1054 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> <li>\ud83d\udd27 \u542f\u7528\u81ea\u52a8\u6df1\u8272\u6a21\u5f0f\u3002PR #1046 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> <li>\ud83d\udc77 \u66f4\u65b0 issue-manager\u3002PR #1045 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> <li>\ud83d\udc77 \u66f4\u65b0 issue-manager.yml GitHub Action \u6743\u9650\u3002PR #1040 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> <li>\u267b\ufe0f \u91cd\u6784 Deploy Docs GitHub Action \u4e3a\u811a\u672c\uff0c\u5e76\u66f4\u65b0\u4ee4\u724c\u4ee5\u4e3a\u7ec4\u7ec7\u505a\u51c6\u5907\u3002PR #1039 \u7531 @tiangolo \u63d0\u4ea4\u3002</li> </ul>"},{"location":"release-notes/#0021","title":"0.0.21","text":""},{"location":"release-notes/#features","title":"Features","text":"<ul> <li>\u2728 Add support for cascade delete relationships: <code>cascade_delete</code>, <code>ondelete</code>, and <code>passive_deletes</code>. Initial PR #983 by @estebanx64.</li> <li>New docs at: Cascade Delete Relationships.</li> </ul>"},{"location":"release-notes/#docs","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update docs . PR #1003 by @alejsdev.</li> </ul>"},{"location":"release-notes/#internal","title":"Internal","text":"<ul> <li>\u2b06 Bump actions/cache from 3 to 4. PR #783 by @dependabot[bot].</li> <li>\u2b06 Bump cairosvg from 2.7.0 to 2.7.1. PR #919 by @dependabot[bot].</li> <li>\u2b06 Bump jinja2 from 3.1.3 to 3.1.4. PR #974 by @dependabot[bot].</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.8.11 to 1.9.0. PR #987 by @dependabot[bot].</li> <li>\u2b06 Bump mkdocstrings[python] from 0.23.0 to 0.25.1. PR #927 by @dependabot[bot].</li> <li>\u2b06 Bump dorny/paths-filter from 2 to 3. PR #972 by @dependabot[bot].</li> </ul>"},{"location":"release-notes/#0020","title":"0.0.20","text":""},{"location":"release-notes/#features_1","title":"Features","text":"<ul> <li>\u2728 Add official UUID support, docs and tests, internally using new SQLAlchemy 2.0 types. Initial PR #992 by @estebanx64.</li> <li>New docs in the Advanced User Guide: UUID (Universally Unique Identifiers).</li> </ul>"},{"location":"release-notes/#docs_1","title":"Docs","text":"<ul> <li>\u270f\ufe0f Fix internal link in <code>docs/tutorial/create-db-and-table.md</code>. PR #911 by @tfpgh.</li> <li>\u270f\ufe0f Add missing step in <code>create-db-and-table-with-db-browser.md</code>. PR #976 by @alejsdev.</li> <li>\u270f\ufe0f Fix typo in <code>docs/tutorial</code>. PR #943 by @luco17.</li> <li>\u270f\ufe0f Fix typo in <code>sqlmodel/_compat.py</code>. PR #950 by @Highfire1.</li> <li>\u270f\ufe0f Update pip installation command in tutorial. PR #975 by @alejsdev.</li> <li>\u270f\ufe0f Fix typo in <code>docs/tutorial/relationship-attributes/index.md</code>. PR #880 by @UncleGoogle.</li> </ul>"},{"location":"release-notes/#internal_1","title":"Internal","text":"<ul> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #979 by @pre-commit-ci[bot].</li> <li>\ud83d\udd28 Update docs Termynal scripts to not include line nums for local dev. PR #1018 by @tiangolo.</li> </ul>"},{"location":"release-notes/#0019","title":"0.0.19","text":""},{"location":"release-notes/#fixes","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix pydantic <code>EmailStr</code> support and <code>max_length</code> in several String subclasses. PR #966 by @estebanx64.</li> <li>\ud83d\udc1b Fix set varchar limit when <code>max_length</code> is set on Pydantic models using Pydantic v2. PR #963 by @estebanx64.</li> </ul>"},{"location":"release-notes/#refactors","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Refactor generate select template to isolate templated code to the minimum. PR #967 by @tiangolo.</li> </ul>"},{"location":"release-notes/#upgrades","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Update minimum SQLAlchemy version to 2.0.14 as that one includes <code>TryCast</code> used internally. PR #964 by @tiangolo.</li> </ul>"},{"location":"release-notes/#docs_2","title":"Docs","text":"<ul> <li>\u270f\ufe0f Fix broken link to <code>@dataclass_transform</code> (now PEP 681) in <code>docs/features.md</code>. PR #753 by @soof-golan.</li> </ul>"},{"location":"release-notes/#internal_2","title":"Internal","text":"<ul> <li>\u2b06\ufe0f Upgrade Ruff and Black. PR #968 by @tiangolo.</li> <li>\u2b06 Bump tiangolo/issue-manager from 0.4.1 to 0.5.0. PR #922 by @dependabot[bot].</li> <li>\ud83d\udccc Pin typing-extensions in tests for compatiblity with Python 3.8, dirty-equals, Pydantic. PR #965 by @tiangolo.</li> <li>\ud83d\udc77 Update GitHub Actions to download and upload artifacts. PR #936 by @tiangolo.</li> <li>\ud83d\udc77 Tweak CI for test-redistribute, add needed env vars for slim. PR #929 by @tiangolo.</li> </ul>"},{"location":"release-notes/#0018","title":"0.0.18","text":""},{"location":"release-notes/#internal_3","title":"Internal","text":"<ul> <li>\u2728 Add <code>sqlmodel-slim</code> setup. PR #916 by @tiangolo.</li> </ul> <p>In the future SQLModel will include the standard default recommended packages, and <code>sqlmodel-slim</code> will come without those recommended standard packages and with a group of optional dependencies <code>sqlmodel-slim[standard]</code>, equivalent to <code>sqlmodel</code>, for those that want to opt out of those packages.</p> <ul> <li>\ud83d\udd27 Re-enable MkDocs Material Social plugin. PR #915 by @tiangolo.</li> </ul>"},{"location":"release-notes/#0017","title":"0.0.17","text":""},{"location":"release-notes/#refactors_1","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Refactor types to properly support Pydantic 2.7. PR #913 by @tiangolo.</li> </ul>"},{"location":"release-notes/#docs_3","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update ModelRead to ModelPublic documentation and examples. PR #885 by @estebanx64.</li> <li>\u2728 Add source examples for Python 3.10 and 3.9 with updated syntax. PR #842 by @tiangolo and @estebanx64.</li> </ul>"},{"location":"release-notes/#internal_4","title":"Internal","text":"<ul> <li>\u2b06 Bump actions/setup-python from 4 to 5. PR #733 by @dependabot[bot].</li> <li>\ud83d\udd28 Update internal scripts and remove unused ones. PR #914 by @tiangolo.</li> <li>\ud83d\udd27 Migrate from Poetry to PDM for the internal build config. PR #912 by @tiangolo.</li> <li>\ud83d\udd27 Update MkDocs, disable cards while I can upgrade to the latest MkDocs Material, that fixes an issue with social cards. PR #888 by @tiangolo.</li> <li>\ud83d\udc77 Add cron to run test once a week on monday. PR #869 by @estebanx64.</li> <li>\u2b06\ufe0f Upgrade Ruff version and configs. PR #859 by @tiangolo.</li> <li>\ud83d\udd25 Remove Jina QA Bot as it has been discontinued. PR #840 by @tiangolo.</li> </ul>"},{"location":"release-notes/#0016","title":"0.0.16","text":""},{"location":"release-notes/#features_2","title":"Features","text":"<ul> <li>\u2728 Add new method <code>.sqlmodel_update()</code> to update models in place, including an <code>update</code> parameter for extra data. And fix implementation for the (now documented) <code>update</code> parameter for <code>.model_validate()</code>. PR #804 by @tiangolo.<ul> <li>Updated docs: Update Data with FastAPI.</li> <li>New docs: Update with Extra Data (Hashed Passwords) with FastAPI.</li> </ul> </li> </ul>"},{"location":"release-notes/#0015","title":"0.0.15","text":""},{"location":"release-notes/#fixes_1","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix class initialization compatibility with Pydantic and SQLModel, fixing errors revealed by the latest Pydantic. PR #807 by @tiangolo.</li> </ul>"},{"location":"release-notes/#internal_5","title":"Internal","text":"<ul> <li>\u2b06 Bump tiangolo/issue-manager from 0.4.0 to 0.4.1. PR #775 by @dependabot[bot].</li> <li>\ud83d\udc77 Fix GitHub Actions build docs filter paths for GitHub workflows. PR #738 by @tiangolo.</li> </ul>"},{"location":"release-notes/#0014","title":"0.0.14","text":""},{"location":"release-notes/#features_3","title":"Features","text":"<ul> <li>\u2728 Add support for Pydantic v2 (while keeping support for v1 if v2 is not available). PR #722 by @tiangolo including initial work in PR #699 by @AntonDeMeester.</li> </ul>"},{"location":"release-notes/#0013","title":"0.0.13","text":""},{"location":"release-notes/#fixes_2","title":"Fixes","text":"<ul> <li>\u267b\ufe0f Refactor type generation of selects re-order to prioritize models to optimize editor support. PR #718 by @tiangolo.</li> </ul>"},{"location":"release-notes/#refactors_2","title":"Refactors","text":"<ul> <li>\ud83d\udd07 Do not raise deprecation warnings for execute as it's automatically used internally. PR #716 by @tiangolo.</li> <li>\u2705 Move OpenAPI tests inline to simplify updating them with Pydantic v2. PR #709 by @tiangolo.</li> </ul>"},{"location":"release-notes/#upgrades_1","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Add support for Python 3.11 and Python 3.12. PR #710 by @tiangolo.</li> </ul>"},{"location":"release-notes/#docs_4","title":"Docs","text":"<ul> <li>\u270f\ufe0f Fix typo, simplify single quote/apostrophe character in \"Sister Margaret's\" everywhere in the docs. PR #721 by @tiangolo.</li> <li>\ud83d\udcdd Update docs for Decimal, use proper types. PR #719 by @tiangolo.</li> <li>\ud83d\udcdd Add source examples for Python 3.9 and 3.10. PR #715 by @tiangolo.</li> </ul>"},{"location":"release-notes/#internal_6","title":"Internal","text":"<ul> <li>\ud83d\ude48 Update gitignore, include all coverage files. PR #711 by @tiangolo.</li> <li>\ud83d\udd27 Update config with new pymdown extensions. PR #712 by @tiangolo.</li> <li>\ud83d\udd27 Update docs build setup, add support for sponsors, add sponsor GOVCERT.LU. PR #720 by @tiangolo.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #697 by @pre-commit-ci[bot].</li> <li>\ud83d\udd27 Show line numbers in docs during local development. PR #714 by @tiangolo.</li> <li>\ud83d\udcdd Update details syntax with new pymdown extensions format. PR #713 by @tiangolo.</li> </ul>"},{"location":"release-notes/#0012","title":"0.0.12","text":""},{"location":"release-notes/#features_4","title":"Features","text":"<ul> <li>\u2728 Upgrade SQLAlchemy to 2.0. PR #700 by @tiangolo including initial work in PR #563 by @farahats9.</li> </ul>"},{"location":"release-notes/#internal_7","title":"Internal","text":"<ul> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #686 by @pre-commit-ci[bot].</li> <li>\ud83d\udc77 Upgrade latest-changes GitHub Action. PR #693 by @tiangolo.</li> </ul>"},{"location":"release-notes/#0011","title":"0.0.11","text":""},{"location":"release-notes/#features_5","title":"Features","text":"<ul> <li>\u2728 Add support for passing a custom SQLAlchemy type to <code>Field()</code> with <code>sa_type</code>. PR #505 by @maru0123-2004.<ul> <li>You might consider this a breaking change if you were using an incompatible combination of arguments, those arguments were not taking effect and now you will have a type error and runtime error telling you that.</li> </ul> </li> <li>\u2728 Do not allow invalid combinations of field parameters for columns and relationships, <code>sa_column</code> excludes <code>sa_column_args</code>, <code>primary_key</code>, <code>nullable</code>, etc. PR #681 by @tiangolo.</li> </ul>"},{"location":"release-notes/#docs_5","title":"Docs","text":"<ul> <li>\ud83c\udfa8 Update inline source examples, hide <code>#</code> in annotations (from MkDocs Material). PR #677 by @Matthieu-LAURENT39.</li> </ul>"},{"location":"release-notes/#internal_8","title":"Internal","text":"<ul> <li>\u2b06 Update coverage requirement from ^6.2 to &gt;=6.2,&lt;8.0. PR #663 by @dependabot[bot].</li> <li>\u2b06 Update mkdocs-material requirement from 9.1.21 to 9.2.7. PR #675 by @dependabot[bot].</li> <li>\u2b06\ufe0f Upgrade mypy manually. PR #684 by @tiangolo.</li> <li>\u2b06 Update black requirement from ^22.10.0 to &gt;=22.10,&lt;24.0. PR #664 by @dependabot[bot].</li> <li>\ud83d\udc77 Update CI to build MkDocs Insiders only when the secrets are available, for Dependabot. PR #683 by @tiangolo.</li> </ul>"},{"location":"release-notes/#0010","title":"0.0.10","text":""},{"location":"release-notes/#features_6","title":"Features","text":"<ul> <li>\u2728 Add support for all <code>Field</code> parameters from Pydantic <code>1.9.0</code> and above, make Pydantic <code>1.9.0</code> the minimum required version. PR #440 by @daniil-berg.</li> </ul>"},{"location":"release-notes/#internal_9","title":"Internal","text":"<ul> <li>\ud83d\udd27 Adopt Ruff for formatting. PR #679 by @tiangolo.</li> </ul>"},{"location":"release-notes/#009","title":"0.0.9","text":""},{"location":"release-notes/#breaking-changes","title":"Breaking Changes","text":"<ul> <li>\ud83d\uddd1\ufe0f Deprecate Python 3.6 and upgrade Poetry and Poetry Version Plugin. PR #627 by @tiangolo.</li> </ul>"},{"location":"release-notes/#features_7","title":"Features","text":"<ul> <li>\u2728 Raise a more clear error when a type is not valid. PR #425 by @ddanier.</li> </ul>"},{"location":"release-notes/#fixes_3","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix <code>AsyncSession</code> type annotations for <code>exec()</code>. PR #58 by @Bobronium.</li> <li>\ud83d\udc1b Fix allowing using a <code>ForeignKey</code> directly, remove repeated column construction from <code>SQLModelMetaclass.__init__</code> and upgrade minimum SQLAlchemy to <code>&gt;=1.4.36</code>. PR #443 by @daniil-berg.</li> <li>\ud83d\udc1b Fix enum type checks ordering in <code>get_sqlalchemy_type</code>. PR #669 by @tiangolo.</li> <li>\ud83d\udc1b Fix SQLAlchemy version 1.4.36 breaks SQLModel relationships (#315). PR #461 by @byrman.</li> </ul>"},{"location":"release-notes/#upgrades_2","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade support for SQLAlchemy 1.4.49, update tests. PR #519 by @sandrotosi.</li> <li>\u2b06 Raise SQLAlchemy version requirement to at least <code>1.4.29</code> (related to #434). PR #439 by @daniil-berg.</li> </ul>"},{"location":"release-notes/#docs_6","title":"Docs","text":"<ul> <li>\ud83d\udcdd Clarify description of in-memory SQLite database in <code>docs/tutorial/create-db-and-table.md</code>. PR #601 by @SimonCW.</li> <li>\ud83d\udcdd Tweak wording in <code>docs/tutorial/fastapi/multiple-models.md</code>. PR #674 by @tiangolo.</li> <li>\u270f\ufe0f Fix contributing instructions to run tests, update script name. PR #634 by @PookieBuns.</li> <li>\ud83d\udcdd Update link to docs for intro to databases. PR #593 by @abenezerBelachew.</li> <li>\ud83d\udcdd Update docs, use <code>offset</code> in example with <code>limit</code> and <code>where</code>. PR #273 by @jbmchuck.</li> <li>\ud83d\udcdd Fix docs for Pydantic's fields using <code>le</code> (<code>lte</code> is invalid, use <code>le</code> ). PR #207 by @jrycw.</li> <li>\ud83d\udcdd Update outdated link in <code>docs/db-to-code.md</code>. PR #649 by @MatveyF.</li> <li>\u270f\ufe0f Fix typos found with codespell. PR #520 by @kianmeng.</li> <li>\ud83d\udcdd Fix typos (duplication) in main page. PR #631 by @Mr-DRP.</li> <li>\ud83d\udcdd Update release notes, add second author to PR. PR #429 by @br-follow.</li> <li>\ud83d\udcdd Update instructions about how to make a foreign key required in <code>docs/tutorial/relationship-attributes/define-relationships-attributes.md</code>. PR #474 by @jalvaradosegura.</li> <li>\ud83d\udcdd Update help SQLModel docs. PR #548 by @tiangolo.</li> <li>\u270f\ufe0f Fix typo in internal function name <code>get_sqlachemy_type()</code>. PR #496 by @cmarqu.</li> <li>\u270f\ufe0f Fix typo in docs. PR #446 by @davidbrochart.</li> <li>\u270f\ufe0f Fix typo in <code>docs/tutorial/create-db-and-table.md</code>. PR #477 by @FluffyDietEngine.</li> <li>\u270f\ufe0f Fix small typos in docs. PR #481 by @micuffaro.</li> </ul>"},{"location":"release-notes/#internal_10","title":"Internal","text":"<ul> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #672 by @pre-commit-ci[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.24.2 to 2.28.0. PR #660 by @dependabot[bot].</li> <li>\u2705 Refactor OpenAPI FastAPI tests to simplify updating them later, this moves things around without changes. PR #671 by @tiangolo.</li> <li>\u2b06 Bump actions/checkout from 3 to 4. PR #670 by @dependabot[bot].</li> <li>\ud83d\udd27 Update mypy config, use <code>strict = true</code> instead of manual configs. PR #428 by @michaeloliverx.</li> <li>\u2b06\ufe0f Upgrade MkDocs Material. PR #668 by @tiangolo.</li> <li>\ud83c\udfa8 Update docs format and references with pre-commit and Ruff. PR #667 by @tiangolo.</li> <li>\ud83c\udfa8 Run pre-commit on all files and autoformat. PR #666 by @tiangolo.</li> <li>\ud83d\udc77 Move to Ruff and add pre-commit. PR #661 by @tiangolo.</li> <li>\ud83d\udee0\ufe0f Add <code>CITATION.cff</code> file for academic citations. PR #13 by @sugatoray.</li> <li>\ud83d\udc77 Update docs deployments to Cloudflare. PR #630 by @tiangolo.</li> <li>\ud83d\udc77\u200d\u2642\ufe0f Upgrade CI for docs. PR #628 by @tiangolo.</li> <li>\ud83d\udc77 Update CI debug mode with Tmate. PR #629 by @tiangolo.</li> <li>\ud83d\udc77 Update latest changes token. PR #616 by @tiangolo.</li> <li>\u2b06\ufe0f Upgrade analytics. PR #558 by @tiangolo.</li> <li>\ud83d\udd27 Update new issue chooser to point to GitHub Discussions. PR #546 by @tiangolo.</li> <li>\ud83d\udd27 Add template for GitHub Discussion questions and update issues template. PR #544 by @tiangolo.</li> <li>\ud83d\udc77 Refactor CI artifact upload/download for docs previews. PR #514 by @tiangolo.</li> <li>\u2b06 Bump actions/cache from 2 to 3. PR #497 by @dependabot[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.24.0 to 2.24.2. PR #493 by @dependabot[bot].</li> <li>\ud83d\udd27 Update Smokeshow coverage threshold. PR #487 by @tiangolo.</li> <li>\ud83d\udc77 Move from Codecov to Smokeshow. PR #486 by @tiangolo.</li> <li>\u2b06 Bump actions/setup-python from 2 to 4. PR #411 by @dependabot[bot].</li> <li>\u2b06 Update black requirement from ^21.5-beta.1 to ^22.10.0. PR #460 by @dependabot[bot].</li> <li>\u2795 Add extra dev dependencies for MkDocs Material. PR #485 by @tiangolo.</li> <li>\u2b06 Update mypy requirement from 0.930 to 0.971. PR #380 by @dependabot[bot].</li> <li>\u2b06 Update coverage requirement from ^5.5 to ^6.2. PR #171 by @dependabot[bot].</li> <li>\u2b06 Bump codecov/codecov-action from 2 to 3. PR #415 by @dependabot[bot].</li> <li>\u2b06 Bump actions/upload-artifact from 2 to 3. PR #412 by @dependabot[bot].</li> <li>\u2b06 Update flake8 requirement from ^3.9.2 to ^5.0.4. PR #396 by @dependabot[bot].</li> <li>\u2b06 Update pytest requirement from ^6.2.4 to ^7.0.1. PR #242 by @dependabot[bot].</li> <li>\u2b06 Bump actions/checkout from 2 to 3.1.0. PR #458 by @dependabot[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.9.0 to 2.24.0. PR #470 by @dependabot[bot].</li> <li>\ud83d\udc77 Update Dependabot config. PR #484 by @tiangolo.</li> </ul>"},{"location":"release-notes/#008","title":"0.0.8","text":""},{"location":"release-notes/#fixes_4","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix auto detecting and setting <code>nullable</code>, allowing overrides in field. PR #423 by @JonasKs and @br-follow.</li> <li>\u267b\ufe0f Update <code>expresion.py</code>, sync from Jinja2 template, implement <code>inherit_cache</code> to solve errors like: <code>SAWarning: Class SelectOfScalar will not make use of SQL compilation caching</code>. PR #422 by @tiangolo.</li> </ul>"},{"location":"release-notes/#docs_7","title":"Docs","text":"<ul> <li>\ud83d\udcdd Adjust and clarify docs for <code>docs/tutorial/create-db-and-table.md</code>. PR #426 by @tiangolo.</li> <li>\u270f Fix typo in <code>docs/tutorial/connect/remove-data-connections.md</code>. PR #421 by @VerdantFox.</li> </ul>"},{"location":"release-notes/#007","title":"0.0.7","text":""},{"location":"release-notes/#features_8","title":"Features","text":"<ul> <li>\u2728 Allow setting <code>unique</code> in <code>Field()</code> for a column. PR #83 by @raphaelgibson.</li> <li>\u2728 Update GUID handling to use stdlib <code>UUID.hex</code> instead of an <code>int</code>. PR #26 by @andrewbolster.</li> <li>\u2728 Raise an exception when using a Pydantic field type with no matching SQLAlchemy type. PR #18 by @elben10.</li> <li>\u2b06 Upgrade constrain for SQLAlchemy = \"&gt;=1.4.17,&lt;=1.4.41\". PR #371 by @RobertRosca.</li> <li>\u2728 Add new <code>Session.get()</code> parameter <code>execution_options</code>. PR #302 by @tiangolo.</li> </ul>"},{"location":"release-notes/#fixes_5","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix type annotations for <code>Model.parse_obj()</code>, and <code>Model.validate()</code>. PR #321 by @phi-friday.</li> <li>\ud83d\udc1b Fix <code>Select</code> and <code>SelectOfScalar</code> to inherit cache to avoid warning: <code>SAWarning: Class SelectOfScalar will not make use of SQL compilation caching</code>. PR #234 by @rabinadk1.</li> <li>\ud83d\udc1b Fix handling validators for non-default values. PR #253 by @byrman.</li> <li>\ud83d\udc1b Fix fields marked as \"set\" in models. PR #117 by @statt8900.</li> <li>\ud83d\udc1b Fix Enum handling in SQLAlchemy. PR #165 by @chriswhite199.</li> <li>\ud83d\udc1b Fix setting nullable property of Fields that don't accept <code>None</code>. PR #79 by @van51.</li> <li>\ud83d\udc1b Fix SQLAlchemy version 1.4.36 breaks SQLModel relationships (#315). PR #322 by @byrman.</li> </ul>"},{"location":"release-notes/#docs_8","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update docs for models for updating, <code>id</code> should not be updatable. PR #335 by @kurtportelli.</li> <li>\u270f Fix broken variable/typo in docs for Read Relationships, <code>hero_spider_boy.id</code> =&gt; <code>hero_spider_boy.team_id</code>. PR #106 by @yoannmos.</li> <li>\ud83c\udfa8 Remove unwanted highlight in the docs. PR #233 by @jalvaradosegura.</li> <li>\u270f Fix typos in <code>docs/databases.md</code> and <code>docs/tutorial/index.md</code>. PR #35 by @prrao87.</li> <li>\u270f Fix typo in <code>docs/tutorial/relationship-attributes/define-relationships-attributes.md</code>. PR #239 by @jalvaradosegura.</li> <li>\u270f Fix typo in <code>docs/tutorial/fastapi/simple-hero-api.md</code>. PR #80 by @joemudryk.</li> <li>\u270f Fix typos in multiple files in the docs. PR #400 by @VictorGambarini.</li> <li>\u270f Fix typo in <code>docs/tutorial/code-structure.md</code>. PR #344 by @marciomazza.</li> <li>\u270f Fix typo in <code>docs/db-to-code.md</code>. PR #155 by @gr8jam.</li> <li>\u270f Fix typo in <code>docs/contributing.md</code>. PR #323 by @Fardad13.</li> <li>\u270f Fix typo in <code>docs/tutorial/fastapi/tests.md</code>. PR #265 by @johnhoman.</li> <li>\u270f Fix typo in <code>docs/tutorial/where.md</code>. PR #286 by @jalvaradosegura.</li> <li>\u270f Fix typos in <code>docs/tutorial/fastapi/update.md</code>. PR #268 by @cirrusj.</li> <li>\u270f Fix typo in <code>docs/tutorial/fastapi/simple-hero-api.md</code>. PR #247 by @hao-wang.</li> <li>\u270f Fix typos in <code>docs/tutorial/automatic-id-none-refresh.md</code>, <code>docs/tutorial/fastapi/update.md</code>, <code>docs/tutorial/select.md</code>. PR #185 by @rootux.</li> <li>\u270f Fix typo in <code>docs/databases.md</code>. PR #177 by @seandlg.</li> <li>\u270f Fix typos in <code>docs/tutorial/fastapi/update.md</code>. PR #162 by @wmcgee3.</li> <li>\u270f Fix typos in <code>docs/tutorial/code-structure.md</code>, <code>docs/tutorial/fastapi/multiple-models.md</code>, <code>docs/tutorial/fastapi/simple-hero-api.md</code>, <code>docs/tutorial/many-to-many/index.md</code>. PR #116 by @moonso.</li> <li>\u270f Fix typo in <code>docs/tutorial/fastapi/teams.md</code>. PR #154 by @chrisgoddard.</li> <li>\u270f Fix typo variable in example about relationships and <code>back_populates</code>, always use <code>hero</code> instead of <code>owner</code>. PR #120 by @onionj.</li> <li>\u270f Fix typo in <code>docs/tutorial/fastapi/tests.md</code>. PR #113 by @feanil.</li> <li>\u270f Fix typo in <code>docs/tutorial/where.md</code>. PR #72 by @ZettZet.</li> <li>\u270f Fix typo in <code>docs/tutorial/code-structure.md</code>. PR #91 by @dhiraj.</li> <li>\u270f Fix broken link to newsletter sign-up in <code>docs/help.md</code>. PR #84 by @mborus.</li> <li>\u270f Fix typos in <code>docs/tutorial/many-to-many/create-models-with-link.md</code>. PR #45 by @xginn8.</li> <li>\u270f Fix typo in <code>docs/tutorial/index.md</code>. PR #398 by @ryangrose.</li> </ul>"},{"location":"release-notes/#internal_11","title":"Internal","text":"<ul> <li>\u267b Refactor internal statements to simplify code. PR #53 by @yezz123.</li> <li>\u267b Refactor internal imports to reduce redundancy. PR #272 by @aminalaee.</li> <li>\u2b06 Update development requirement for FastAPI from <code>^0.68.0</code> to <code>^0.68.1</code>. PR #48 by @alucarddelta.</li> <li>\u23ea Revert upgrade Poetry, to make a release that supports Python 3.6 first. PR #417 by @tiangolo.</li> <li>\ud83d\udc77 Add dependabot for GitHub Actions. PR #410 by @tiangolo.</li> <li>\u2b06\ufe0f Upgrade Poetry to version <code>==1.2.0b1</code>. PR #303 by @tiangolo.</li> <li>\ud83d\udc77 Add CI for Python 3.10. PR #305 by @tiangolo.</li> <li>\ud83d\udcdd Add Jina's QA Bot to the docs to help people that want to ask quick questions. PR #263 by @tiangolo.</li> <li>\ud83d\udc77 Upgrade Codecov GitHub Action. PR #304 by @tiangolo.</li> <li>\ud83d\udc9a Only run CI on push when on master, to avoid duplicate runs on PRs. PR #244 by @tiangolo.</li> <li>\ud83d\udd27 Upgrade MkDocs Material and update configs. PR #217 by @tiangolo.</li> <li>\u2b06 Upgrade mypy, fix type annotations. PR #218 by @tiangolo.</li> </ul>"},{"location":"release-notes/#006","title":"0.0.6","text":""},{"location":"release-notes/#breaking-changes_1","title":"Breaking Changes","text":"<p>SQLModel no longer creates indexes by default for every column, indexes are now opt-in. You can read more about it in PR #205.</p> <p>Before this change, if you had a model like this:</p> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, SQLModel\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n</code></pre> <p>...when creating the tables, SQLModel version <code>0.0.5</code> and below, would also create an index for <code>name</code>, one for <code>secret_name</code>, and one for <code>age</code> (<code>id</code> is the primary key, so it doesn't need an additional index).</p> <p>If you depended on having an index for each one of those columns, now you can (and would have to) define them explicitly:</p> <pre><code>class Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str = Field(index=True)\n    age: Optional[int] = Field(default=None, index=True)\n</code></pre> <p>There's a high chance you don't need indexes for all the columns. For example, you might only need indexes for <code>name</code> and <code>age</code>, but not for <code>secret_name</code>. In that case, you could define the model as:</p> <pre><code>class Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n</code></pre> <p>If you already created your database tables with SQLModel using versions <code>0.0.5</code> or below, it would have also created those indexes in the database. In that case, you might want to manually drop (remove) some of those indexes, if they are unnecessary, to avoid the extra cost in performance and space.</p> <p>Depending on the database you are using, there will be a different way to find the available indexes.</p> <p>For example, let's say you no longer need the index for <code>secret_name</code>. You could check the current indexes in the database and find the one for <code>secret_name</code>, it could be named <code>ix_hero_secret_name</code>. Then you can remove it with SQL:</p> <pre><code>DROP INDEX ix_hero_secret_name\n</code></pre> <p>or</p> <pre><code>DROP INDEX ix_hero_secret_name ON hero;\n</code></pre> <p>Here's the new, extensive documentation explaining indexes and how to use them: Indexes - Optimize Queries.</p>"},{"location":"release-notes/#docs_9","title":"Docs","text":"<ul> <li>\u2728 Document indexes and make them opt-in. Here's the new documentation: Indexes - Optimize Queries. This is the same change described above in Breaking Changes. PR #205 by @tiangolo.</li> <li>\u270f Fix typo in FastAPI tutorial. PR #192 by @yaquelinehoyos.</li> <li>\ud83d\udcdd Add links to the license file. PR #29 by @sobolevn.</li> <li>\u270f Fix typos in docs titles. PR #28 by @Batalex.</li> <li>\u270f Fix multiple typos and some rewording. PR #22 by @egrim.</li> <li>\u270f Fix typo in <code>docs/tutorial/automatic-id-none-refresh.md</code>. PR #14 by @leynier.</li> <li>\u270f Fix typos in <code>docs/tutorial/index.md</code> and <code>docs/databases.md</code>. PR #5 by @sebastianmarines.</li> </ul>"},{"location":"release-notes/#005","title":"0.0.5","text":""},{"location":"release-notes/#features_9","title":"Features","text":"<ul> <li>\u2728 Add support for Decimal fields from Pydantic and SQLAlchemy. Original PR #103 by @robcxyz. New docs: Advanced User Guide - Decimal Numbers.</li> </ul>"},{"location":"release-notes/#docs_10","title":"Docs","text":"<ul> <li>\u270f Update decimal tutorial source for consistency. PR #188 by @tiangolo.</li> </ul>"},{"location":"release-notes/#internal_12","title":"Internal","text":"<ul> <li>\ud83d\udd27 Split MkDocs insiders build in CI to support building from PRs. PR #186 by @tiangolo.</li> <li>\ud83c\udfa8 Format <code>expression.py</code> and expression template, currently needed by CI. PR #187 by @tiangolo.</li> <li>\ud83d\udc1bFix docs light/dark theme switcher. PR #1 by @Lehoczky.</li> <li>\ud83d\udd27 Add MkDocs Material social cards. PR #90 by @tiangolo.</li> <li>\u2728 Update type annotations and upgrade mypy. PR #173 by @tiangolo.</li> </ul>"},{"location":"release-notes/#004","title":"0.0.4","text":"<ul> <li>\ud83c\udfa8 Fix type detection of select results in PyCharm. PR #15 by @tiangolo.</li> </ul>"},{"location":"release-notes/#003","title":"0.0.3","text":"<ul> <li>\u2b06\ufe0f Update and relax specification range for <code>sqlalchemy-stubs</code>. PR #4 by @tiangolo.</li> </ul>"},{"location":"release-notes/#002","title":"0.0.2","text":"<ul> <li>This includes several small bug fixes detected during the first CI runs.</li> <li>\ud83d\udc9a Fix CI installs and tests. PR #2 by @tiangolo.</li> </ul>"},{"location":"release-notes/#001","title":"0.0.1","text":"<ul> <li>First release. \ud83c\udf89</li> </ul>"},{"location":"virtual-environments/","title":"\u865a\u62df\u73af\u5883","text":"<p>\u5728\u8fdb\u884c Python \u9879\u76ee\u5f00\u53d1\u65f6\uff0c\u4f60\u901a\u5e38\u5e94\u8be5\u4f7f\u7528 \u865a\u62df\u73af\u5883\uff08\u6216\u7c7b\u4f3c\u7684\u673a\u5236\uff09\u6765\u9694\u79bb\u4e3a\u6bcf\u4e2a\u9879\u76ee\u5b89\u88c5\u7684\u5305\u3002</p> <p>Info</p> <p>\u5982\u679c\u4f60\u5df2\u7ecf\u4e86\u89e3\u865a\u62df\u73af\u5883\u3001\u5982\u4f55\u521b\u5efa\u548c\u4f7f\u7528\u5b83\u4eec\uff0c\u4f60\u53ef\u4ee5\u8df3\u8fc7\u8fd9\u4e00\u90e8\u5206\u3002\ud83e\udd13</p> <p>Tip</p> <p>\u865a\u62df\u73af\u5883 \u4e0e \u73af\u5883\u53d8\u91cf \u4e0d\u540c\u3002</p> <p>\u73af\u5883\u53d8\u91cf \u662f\u7cfb\u7edf\u4e2d\u7684\u4e00\u4e2a\u53d8\u91cf\uff0c\u53ef\u4ee5\u88ab\u7a0b\u5e8f\u4f7f\u7528\u3002</p> <p>\u865a\u62df\u73af\u5883 \u662f\u4e00\u4e2a\u5305\u542b\u4e00\u4e9b\u6587\u4ef6\u7684\u76ee\u5f55\u3002</p> <p>Info</p> <p>\u672c\u9875\u9762\u5c06\u6559\u4f60\u5982\u4f55\u4f7f\u7528 \u865a\u62df\u73af\u5883 \u4ee5\u53ca\u5b83\u4eec\u7684\u5de5\u4f5c\u539f\u7406\u3002</p> <p>\u5982\u679c\u4f60\u51c6\u5907\u597d\u91c7\u7528\u4e00\u4e2a \u4e3a\u4f60\u7ba1\u7406\u4e00\u5207\u7684\u5de5\u5177\uff08\u5305\u62ec\u5b89\u88c5 Python\uff09\uff0c\u53ef\u4ee5\u8bd5\u8bd5 uv\u3002</p>"},{"location":"virtual-environments/#_2","title":"\u521b\u5efa\u9879\u76ee","text":"<p>\u9996\u5148\uff0c\u4e3a\u4f60\u7684\u9879\u76ee\u521b\u5efa\u4e00\u4e2a\u76ee\u5f55\u3002</p> <p>\u6211\u901a\u5e38\u505a\u7684\u662f\uff0c\u5728\u6211\u7684\u4e3b\u76ee\u5f55/user \u76ee\u5f55\u4e0b\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a <code>code</code> \u7684\u76ee\u5f55\u3002</p> <p>\u7136\u540e\u5728\u8fd9\u4e2a\u76ee\u5f55\u4e0b\u4e3a\u6bcf\u4e2a\u9879\u76ee\u521b\u5efa\u4e00\u4e2a\u5b50\u76ee\u5f55\u3002</p> <pre><code>// \u8fdb\u5165\u4e3b\u76ee\u5f55\n$ cd\n// \u521b\u5efa\u4e00\u4e2a\u7528\u4e8e\u5b58\u653e\u6240\u6709\u4ee3\u7801\u9879\u76ee\u7684\u76ee\u5f55\n$ mkdir code\n// \u8fdb\u5165\u8fd9\u4e2a code \u76ee\u5f55\n$ cd code\n// \u4e3a\u6b64\u9879\u76ee\u521b\u5efa\u4e00\u4e2a\u76ee\u5f55\n$ mkdir awesome-project\n// \u8fdb\u5165\u8be5\u9879\u76ee\u76ee\u5f55\n$ cd awesome-project\n</code></pre>"},{"location":"virtual-environments/#_3","title":"\u521b\u5efa\u865a\u62df\u73af\u5883","text":"<p>\u5f53\u4f60\u5f00\u59cb\u7b2c\u4e00\u6b21\u8fdb\u884c Python \u9879\u76ee\u5f00\u53d1\u65f6\uff0c\u5e94\u8be5\u5728 \u9879\u76ee\u5185\u90e8 \u521b\u5efa\u4e00\u4e2a\u865a\u62df\u73af\u5883\u3002</p> <p>Tip</p> <p>\u4f60\u53ea\u9700\u8981\u4e3a\u6bcf\u4e2a\u9879\u76ee\u505a\u4e00\u6b21\u8fd9\u4ef6\u4e8b\uff0c\u800c\u4e0d\u662f\u6bcf\u6b21\u5de5\u4f5c\u65f6\u90fd\u505a\u3002</p> <code>venv</code><code>uv</code> <p>\u8981\u521b\u5efa\u865a\u62df\u73af\u5883\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 Python \u5185\u7f6e\u7684 <code>venv</code> \u6a21\u5757\u3002</p> <pre><code>$ python -m venv .venv\n</code></pre> \u8be5\u547d\u4ee4\u7684\u542b\u4e49 <ul> <li><code>python</code>\uff1a\u4f7f\u7528\u540d\u4e3a <code>python</code> \u7684\u7a0b\u5e8f</li> <li><code>-m</code>\uff1a\u5c06\u6a21\u5757\u4f5c\u4e3a\u811a\u672c\u6267\u884c\uff0c\u6211\u4eec\u63a5\u4e0b\u6765\u4f1a\u544a\u8bc9\u5b83\u4f7f\u7528\u54ea\u4e2a\u6a21\u5757</li> <li><code>venv</code>\uff1a\u4f7f\u7528\u540d\u4e3a <code>venv</code> \u7684\u6a21\u5757\uff0c\u5b83\u901a\u5e38\u968f Python \u4e00\u8d77\u5b89\u88c5</li> <li><code>.venv</code>\uff1a\u5728\u65b0\u76ee\u5f55 <code>.venv</code> \u4e2d\u521b\u5efa\u865a\u62df\u73af\u5883</li> </ul> <p>\u5982\u679c\u4f60\u5df2\u7ecf\u5b89\u88c5\u4e86 <code>uv</code>\uff0c\u4f60\u53ef\u4ee5\u7528\u5b83\u6765\u521b\u5efa\u865a\u62df\u73af\u5883\u3002</p> <pre><code>$ uv venv\n</code></pre> <p>Tip</p> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c<code>uv</code> \u4f1a\u5728\u540d\u4e3a <code>.venv</code> \u7684\u76ee\u5f55\u4e2d\u521b\u5efa\u865a\u62df\u73af\u5883\u3002</p> <p>\u4e0d\u8fc7\uff0c\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u4e00\u4e2a\u989d\u5916\u7684\u53c2\u6570\u6765\u5b9a\u5236\u76ee\u5f55\u540d\u79f0\u3002</p> <p>\u8be5\u547d\u4ee4\u4f1a\u5728\u4e00\u4e2a\u540d\u4e3a <code>.venv</code> \u7684\u76ee\u5f55\u4e2d\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u865a\u62df\u73af\u5883\u3002</p> <code>.venv</code> \u6216\u5176\u4ed6\u540d\u79f0 <p>\u4f60\u53ef\u4ee5\u5728\u5176\u4ed6\u76ee\u5f55\u4e2d\u521b\u5efa\u865a\u62df\u73af\u5883\uff0c\u4f46\u901a\u5e38\u7ea6\u5b9a\u4f7f\u7528 <code>.venv</code> \u4f5c\u4e3a\u76ee\u5f55\u540d\u79f0\u3002</p>"},{"location":"virtual-environments/#_4","title":"\u6fc0\u6d3b\u865a\u62df\u73af\u5883","text":"<p>\u6fc0\u6d3b\u65b0\u7684\u865a\u62df\u73af\u5883\uff0c\u4ee5\u4fbf\u4f60\u8fd0\u884c\u7684\u4efb\u4f55 Python \u547d\u4ee4\u6216\u5b89\u88c5\u7684\u5305\u90fd\u4f7f\u7528\u5b83\u3002</p> <p>Tip</p> <p>\u6bcf\u6b21\u5f00\u59cb\u4e00\u4e2a \u65b0\u7684\u7ec8\u7aef\u4f1a\u8bdd \u6765\u5904\u7406\u9879\u76ee\u65f6\uff0c\u90fd\u9700\u8981\u6267\u884c\u6b64\u64cd\u4f5c\u3002</p> Linux, macOSWindows PowerShellWindows Bash <pre><code>$ source .venv/bin/activate\n</code></pre> <pre><code>$ .venv\\Scripts\\Activate.ps1\n</code></pre> <p>\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f Windows \u7684 Bash\uff08\u4f8b\u5982 Git Bash\uff09\uff1a</p> <pre><code>$ source .venv/Scripts/activate\n</code></pre> <p>Tip</p> <p>\u6bcf\u6b21\u5728\u8be5\u73af\u5883\u4e2d\u5b89\u88c5 \u65b0\u5305 \u65f6\uff0c\u90fd\u8981\u91cd\u65b0 \u6fc0\u6d3b \u73af\u5883\u3002</p> <p>\u8fd9\u6837\u53ef\u4ee5\u786e\u4fdd\u4f60\u4f7f\u7528\u7684\u662f\u865a\u62df\u73af\u5883\u4e2d\u7684\u7a0b\u5e8f\uff0c\u800c\u4e0d\u662f\u4efb\u4f55\u53ef\u80fd\u5df2\u7ecf\u5168\u5c40\u5b89\u88c5\u7684\u7a0b\u5e8f\uff0c\u540e\u8005\u53ef\u80fd\u662f\u4e0d\u540c\u7248\u672c\u7684\u3002</p>"},{"location":"virtual-environments/#_5","title":"\u68c0\u67e5\u865a\u62df\u73af\u5883\u662f\u5426\u5df2\u6fc0\u6d3b","text":"<p>\u68c0\u67e5\u865a\u62df\u73af\u5883\u662f\u5426\u5df2\u6fc0\u6d3b\uff08\u5373\u4e4b\u524d\u7684\u547d\u4ee4\u662f\u5426\u6210\u529f\uff09\u3002</p> <p>Tip</p> <p>\u8fd9**\u662f\u53ef\u9009\u7684**\uff0c\u4f46\u5b83\u662f**\u68c0\u67e5**\u4e00\u5207\u662f\u5426\u6309\u9884\u671f\u5de5\u4f5c\uff0c\u786e\u4fdd\u4f60\u4f7f\u7528\u7684\u662f\u9884\u5b9a\u7684\u865a\u62df\u73af\u5883\u7684\u597d\u65b9\u6cd5\u3002</p> Linux, macOS, Windows BashWindows PowerShell <pre><code>$ which python\n\n/home/user/code/awesome-project/.venv/bin/python\n</code></pre> <p>\u5982\u679c\u5b83\u663e\u793a\u7684 <code>python</code> \u4e8c\u8fdb\u5236\u6587\u4ef6\u5728 <code>.venv/bin/python</code>\uff0c\u5e76\u4e14\u4f4d\u4e8e\u4f60\u7684\u9879\u76ee\u76ee\u5f55\uff08\u6b64\u5904\u4e3a <code>awesome-project</code>\uff09\u5185\uff0c\u90a3\u4e48\u8bf4\u660e\u5b83\u6210\u529f\u4e86\u3002\ud83c\udf89</p> <pre><code>$ Get-Command python\n\nC:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\\python\n</code></pre> <p>\u5982\u679c\u5b83\u663e\u793a\u7684 <code>python</code> \u4e8c\u8fdb\u5236\u6587\u4ef6\u5728 <code>.venv\\Scripts\\python</code>\uff0c\u5e76\u4e14\u4f4d\u4e8e\u4f60\u7684\u9879\u76ee\u76ee\u5f55\uff08\u6b64\u5904\u4e3a <code>awesome-project</code>\uff09\u5185\uff0c\u90a3\u4e48\u8bf4\u660e\u5b83\u6210\u529f\u4e86\u3002\ud83c\udf89</p>"},{"location":"virtual-environments/#pip","title":"\u5347\u7ea7 <code>pip</code>","text":"<p>Tip</p> <p>\u5982\u679c\u4f60\u4f7f\u7528 <code>uv</code>\uff0c\u4f60\u5c06\u4f7f\u7528\u5b83\u6765\u5b89\u88c5\u8f6f\u4ef6\u5305\uff0c\u800c\u4e0d\u662f <code>pip</code>\uff0c\u56e0\u6b64\u4f60\u65e0\u9700\u5347\u7ea7 <code>pip</code>\u3002\ud83d\ude0e</p> <p>\u5982\u679c\u4f60\u4f7f\u7528 <code>pip</code> \u5b89\u88c5\u5305\uff08\u5b83\u662f Python \u7684\u9ed8\u8ba4\u5b89\u88c5\u5de5\u5177\uff09\uff0c\u4f60\u5e94\u8be5**\u5347\u7ea7**\u5230\u6700\u65b0\u7248\u672c\u3002</p> <p>\u8bb8\u591a\u5b89\u88c5\u5305\u65f6\u9047\u5230\u7684\u5f02\u5e38\u9519\u8bef\uff0c\u4ec5\u901a\u8fc7\u5148\u5347\u7ea7 <code>pip</code> \u5c31\u80fd\u89e3\u51b3\u3002</p> <p>Tip</p> <p>\u901a\u5e38\u53ea\u9700\u5728\u521b\u5efa\u865a\u62df\u73af\u5883\u4e4b\u540e \u4e00\u6b21\u6027 \u6267\u884c\u6b64\u64cd\u4f5c\u3002</p> <p>\u786e\u4fdd\u865a\u62df\u73af\u5883\u5df2\u6fc0\u6d3b\uff08\u4f7f\u7528\u4e0a\u9762\u7684\u547d\u4ee4\uff09\uff0c\u7136\u540e\u8fd0\u884c\uff1a</p> <pre><code>$ python -m pip install --upgrade pip\n\n---&gt; 100%\n</code></pre>"},{"location":"virtual-environments/#gitignore","title":"\u6dfb\u52a0 <code>.gitignore</code>","text":"<p>\u5982\u679c\u4f60\u4f7f\u7528 Git\uff08\u5e94\u8be5\u4f7f\u7528\uff09\uff0c\u5219\u5e94\u6dfb\u52a0\u4e00\u4e2a <code>.gitignore</code> \u6587\u4ef6\uff0c\u4ee5\u5c06 <code>.venv</code> \u4e2d\u7684\u6240\u6709\u5185\u5bb9\u6392\u9664\u5728 Git \u4e4b\u5916\u3002</p> <p>Tip</p> <p>\u5982\u679c\u4f60\u4f7f\u7528 <code>uv</code> \u521b\u5efa\u865a\u62df\u73af\u5883\uff0c\u5b83\u5df2\u7ecf\u4e3a\u4f60\u5b8c\u6210\u4e86\u8fd9\u4e2a\u6b65\u9aa4\uff0c\u53ef\u4ee5\u8df3\u8fc7\u6b64\u6b65\u9aa4\u3002\ud83d\ude0e</p> <p>Tip</p> <p>\u53ea\u9700\u5728\u521b\u5efa\u865a\u62df\u73af\u5883\u4e4b\u540e \u4e00\u6b21\u6027 \u6267\u884c\u6b64\u64cd\u4f5c\u3002</p> <pre><code>$ echo \"*\" &gt; .venv/.gitignore\n</code></pre> \u8be5\u547d\u4ee4\u7684\u542b\u4e49 <ul> <li><code>echo \"*\"</code>\uff1a\u5c06\u5728\u7ec8\u7aef\u6253\u5370\u6587\u672c <code>*</code>\uff08\u63a5\u4e0b\u6765\u7684\u90e8\u5206\u7a0d\u4f5c\u8c03\u6574\uff09</li> <li><code>&gt;</code>\uff1a\u547d\u4ee4\u5de6\u4fa7\u7684\u8f93\u51fa\u5c06\u4e0d\u4f1a\u6253\u5370\u5230\u7ec8\u7aef\uff0c\u800c\u662f\u5199\u5165\u53f3\u4fa7\u6307\u5b9a\u7684\u6587\u4ef6</li> <li><code>.gitignore</code>\uff1a\u6587\u4ef6\u7684\u540d\u79f0\uff0c\u7528\u6765\u5b58\u50a8\u8f93\u51fa\u5185\u5bb9</li> </ul> <p>\u5728 Git \u4e2d\uff0c<code>*</code> \u8868\u793a\u201c\u6240\u6709\u5185\u5bb9\u201d\u3002\u56e0\u6b64\uff0c\u5b83\u4f1a\u5ffd\u7565 <code>.venv</code> \u76ee\u5f55\u4e2d\u7684\u6240\u6709\u5185\u5bb9\u3002</p> <p>\u8be5\u547d\u4ee4\u5c06\u521b\u5efa\u4e00\u4e2a <code>.gitignore</code> \u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1a</p> <pre><code>*\n</code></pre>"},{"location":"virtual-environments/#_6","title":"\u5b89\u88c5\u5305","text":"<p>\u6fc0\u6d3b\u865a\u62df\u73af\u5883\u540e\uff0c\u4f60\u53ef\u4ee5\u5728\u5176\u4e2d\u5b89\u88c5\u5305\u3002</p> <p>Tip</p> <p>\u5b89\u88c5\u6216\u5347\u7ea7\u9879\u76ee\u6240\u9700\u7684\u5305\u65f6\uff0c\u53ea\u9700\u6267\u884c\u4e00\u6b21\u3002</p> <p>\u5982\u679c\u4f60\u9700\u8981\u5347\u7ea7\u7248\u672c\u6216\u6dfb\u52a0\u65b0\u5305\uff0c**\u518d\u6b21\u6267\u884c**\u6b64\u64cd\u4f5c\u3002</p>"},{"location":"virtual-environments/#_7","title":"\u76f4\u63a5\u5b89\u88c5\u5305","text":"<p>\u5982\u679c\u4f60\u5f88\u6025\uff0c\u5e76\u4e14\u4e0d\u60f3\u4f7f\u7528\u6587\u4ef6\u6765\u58f0\u660e\u9879\u76ee\u6240\u9700\u7684\u5305\uff0c\u53ef\u4ee5\u76f4\u63a5\u5b89\u88c5\u5b83\u4eec\u3002</p> <p>Tip</p> <p>\u5c06\u7a0b\u5e8f\u6240\u9700\u7684\u5305\u53ca\u7248\u672c\u653e\u5165\u6587\u4ef6\uff08\u4f8b\u5982 <code>requirements.txt</code> \u6216 <code>pyproject.toml</code>\uff09\u662f\u4e00\u4e2a\uff08\u975e\u5e38\uff09\u597d\u7684\u505a\u6cd5\u3002</p> <code>pip</code><code>uv</code> <pre><code>$ pip install sqlmodel\n\n---&gt; 100%\n</code></pre> <p>\u5982\u679c\u4f60\u4f7f\u7528 <code>uv</code>\uff1a</p> <pre><code>$ uv pip install sqlmodel\n---&gt; 100%\n</code></pre>"},{"location":"virtual-environments/#requirementstxt","title":"\u4ece <code>requirements.txt</code> \u5b89\u88c5","text":"<p>\u5982\u679c\u4f60\u6709\u4e00\u4e2a <code>requirements.txt</code> \u6587\u4ef6\uff0c\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u5b89\u88c5\u6587\u4ef6\u4e2d\u7684\u5305\u3002</p> <code>pip</code><code>uv</code> <pre><code>$ pip install -r requirements.txt\n---&gt; 100%\n</code></pre> <p>\u5982\u679c\u4f60\u4f7f\u7528 <code>uv</code>\uff1a</p> <pre><code>$ uv pip install -r requirements.txt\n---&gt; 100%\n</code></pre> <code>requirements.txt</code> <p>\u4e00\u4e2a\u5305\u542b\u4e00\u4e9b\u5305\u7684 <code>requirements.txt</code> \u6587\u4ef6\u53ef\u80fd\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>sqlmodel==0.13.0\nrich==13.7.1\n</code></pre>"},{"location":"virtual-environments/#_8","title":"\u8fd0\u884c\u4f60\u7684\u7a0b\u5e8f","text":"<p>\u6fc0\u6d3b\u865a\u62df\u73af\u5883\u540e\uff0c\u4f60\u53ef\u4ee5\u8fd0\u884c\u4f60\u7684\u7a0b\u5e8f\uff0c\u5b83\u5c06\u4f7f\u7528\u865a\u62df\u73af\u5883\u4e2d\u7684 Python \u548c\u4f60\u5728\u90a3\u91cc\u5b89\u88c5\u7684\u5305\u3002</p> <pre><code>$ python main.py\n\nHello World\n</code></pre>"},{"location":"virtual-environments/#_9","title":"\u914d\u7f6e\u4f60\u7684\u7f16\u8f91\u5668","text":"<p>\u4f60\u53ef\u80fd\u4f1a\u4f7f\u7528\u4e00\u4e2a\u7f16\u8f91\u5668\uff0c\u786e\u4fdd\u4f60\u914d\u7f6e\u5b83\u4f7f\u7528\u4f60\u521b\u5efa\u7684\u865a\u62df\u73af\u5883\uff08\u5b83\u53ef\u80fd\u4f1a\u81ea\u52a8\u68c0\u6d4b\u5230\uff09\uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u83b7\u5f97\u81ea\u52a8\u8865\u5168\u548c\u5185\u8054\u9519\u8bef\u3002</p> <p>\u4f8b\u5982\uff1a</p> <ul> <li>VS Code</li> <li>PyCharm</li> </ul> <p>Tip</p> <p>\u901a\u5e38\u4f60\u53ea\u9700\u8981\u5728\u521b\u5efa\u865a\u62df\u73af\u5883\u65f6 \u6267\u884c\u4e00\u6b21 \u8fd9\u4e2a\u64cd\u4f5c\u3002</p>"},{"location":"virtual-environments/#_10","title":"\u505c\u7528\u865a\u62df\u73af\u5883","text":"<p>\u5b8c\u6210\u9879\u76ee\u5de5\u4f5c\u540e\uff0c\u4f60\u53ef\u4ee5 \u505c\u7528 \u865a\u62df\u73af\u5883\u3002</p> <pre><code>$ deactivate\n</code></pre> <p>\u8fd9\u6837\uff0c\u5f53\u4f60\u8fd0\u884c <code>python</code> \u65f6\uff0c\u5b83\u5c31\u4e0d\u4f1a\u518d\u5c1d\u8bd5\u4ece\u8be5\u865a\u62df\u73af\u5883\u4e2d\u8fd0\u884c Python\uff0c\u4e5f\u4e0d\u4f1a\u4f7f\u7528\u5176\u4e2d\u5b89\u88c5\u7684\u5305\u3002</p>"},{"location":"virtual-environments/#_11","title":"\u51c6\u5907\u5de5\u4f5c","text":"<p>\u73b0\u5728\u4f60\u51c6\u5907\u597d\u5f00\u59cb\u4f60\u7684\u9879\u76ee\u4e86\u3002</p> <p>Tip</p> <p>\u60f3\u4e86\u89e3\u4e0a\u9762\u6240\u6709\u5185\u5bb9\u5417\uff1f</p> <p>\u7ee7\u7eed\u9605\u8bfb\u3002\ud83d\udc47\ud83e\udd13</p>"},{"location":"virtual-environments/#_12","title":"\u4e3a\u4ec0\u4e48\u4f7f\u7528\u865a\u62df\u73af\u5883","text":"<p>\u8981\u4f7f\u7528 SQLModel\uff0c\u4f60\u9700\u8981\u5b89\u88c5 Python\u3002</p> <p>\u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u4f60\u8fd8\u9700\u8981 \u5b89\u88c5 SQLModel \u548c\u4f60\u60f3\u4f7f\u7528\u7684\u5176\u4ed6 \u5305\u3002</p> <p>\u5b89\u88c5\u5305\u65f6\uff0c\u4f60\u901a\u5e38\u4f1a\u4f7f\u7528 Python \u81ea\u5e26\u7684 <code>pip</code> \u547d\u4ee4\uff08\u6216\u8005\u7c7b\u4f3c\u7684\u66ff\u4ee3\u5de5\u5177\uff09\u3002</p> <p>\u7136\u800c\uff0c\u5982\u679c\u4f60\u76f4\u63a5\u4f7f\u7528 <code>pip</code>\uff0c\u5305\u5c06\u4f1a\u5b89\u88c5\u5230\u4f60\u7684 \u5168\u5c40 Python \u73af\u5883\uff08\u5168\u5c40\u5b89\u88c5\u7684 Python\uff09\u4e2d\u3002</p>"},{"location":"virtual-environments/#_13","title":"\u95ee\u9898","text":"<p>\u90a3\u4e48\uff0c\u5728\u5168\u5c40 Python \u73af\u5883\u4e2d\u5b89\u88c5\u5305\u6709\u4ec0\u4e48\u95ee\u9898\u5462\uff1f</p> <p>\u5230\u67d0\u4e2a\u65f6\u5019\uff0c\u4f60\u53ef\u80fd\u4f1a\u5199\u8bb8\u591a\u4e0d\u540c\u7684\u7a0b\u5e8f\uff0c\u8fd9\u4e9b\u7a0b\u5e8f\u4f9d\u8d56\u4e8e \u4e0d\u540c\u7684\u5305\u3002\u5e76\u4e14\u8fd9\u4e9b\u9879\u76ee\u4e2d\uff0c\u67d0\u4e9b\u4f9d\u8d56\u4e8e \u76f8\u540c\u5305\u7684\u4e0d\u540c\u7248\u672c\u3002 \ud83d\ude31</p> <p>\u4f8b\u5982\uff0c\u4f60\u53ef\u80fd\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a <code>philosophers-stone</code> \u7684\u9879\u76ee\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u4f9d\u8d56\u4e8e\u53e6\u4e00\u4e2a\u5305 <code>harry</code>\uff0c\u7248\u672c <code>1</code>\u3002\u6240\u4ee5\uff0c\u4f60\u9700\u8981\u5b89\u88c5 <code>harry</code>\u3002</p> <pre><code>flowchart LR\n    stone(philosophers-stone) --&gt;|requires| harry-1[harry v1]</code></pre> <p>\u7136\u540e\uff0c\u5728\u67d0\u4e2a\u65f6\u95f4\u70b9\uff0c\u4f60\u53c8\u521b\u5efa\u4e86\u4e00\u4e2a\u540d\u4e3a <code>prisoner-of-azkaban</code> \u7684\u9879\u76ee\uff0c\u8fd9\u4e2a\u9879\u76ee\u4e5f\u4f9d\u8d56\u4e8e <code>harry</code>\uff0c\u4f46\u5b83\u9700\u8981 <code>harry</code> \u7248\u672c <code>3</code>\u3002</p> <pre><code>flowchart LR\n    azkaban(prisoner-of-azkaban) --&gt; |requires| harry-3[harry v3]</code></pre> <p>\u4f46\u73b0\u5728\u7684\u95ee\u9898\u662f\uff0c\u5982\u679c\u4f60\u5c06\u5305\u5b89\u88c5\u5728\u5168\u5c40\uff08\u5168\u5c40\u73af\u5883\uff09\u4e2d\uff0c\u800c\u4e0d\u662f\u5728\u672c\u5730\u7684 \u865a\u62df\u73af\u5883 \u4e2d\uff0c\u4f60\u5c31\u5fc5\u987b\u9009\u62e9\u5b89\u88c5\u54ea\u4e2a\u7248\u672c\u7684 <code>harry</code>\u3002</p> <p>\u5982\u679c\u4f60\u60f3\u8fd0\u884c <code>philosophers-stone</code>\uff0c\u4f60\u9700\u8981\u9996\u5148\u5b89\u88c5 <code>harry</code> \u7248\u672c <code>1</code>\uff0c\u4f8b\u5982\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\uff1a</p> <pre><code>$ pip install \"harry==1\"\n</code></pre> <p>\u7136\u540e\u4f60\u4f1a\u5728\u5168\u5c40 Python \u73af\u5883\u4e2d\u5b89\u88c5 <code>harry</code> \u7248\u672c <code>1</code>\u3002</p> <pre><code>flowchart LR\n    subgraph global[global env]\n        harry-1[harry v1]\n    end\n    subgraph stone-project[philosophers-stone project]\n        stone(philosophers-stone) --&gt;|requires| harry-1\n    end</code></pre> <p>\u4f46\u662f\u5982\u679c\u4f60\u60f3\u8fd0\u884c <code>prisoner-of-azkaban</code>\uff0c\u4f60\u5c31\u9700\u8981\u5148\u5378\u8f7d <code>harry</code> \u7248\u672c <code>1</code>\uff0c\u7136\u540e\u5b89\u88c5 <code>harry</code> \u7248\u672c <code>3</code>\uff08\u6216\u8005\u76f4\u63a5\u5b89\u88c5\u7248\u672c <code>3</code>\uff0c\u5b83\u4f1a\u81ea\u52a8\u5378\u8f7d\u7248\u672c <code>1</code>\uff09\u3002</p> <pre><code>$ pip install \"harry==3\"\n</code></pre> <p>\u7136\u540e\u4f60\u4f1a\u5728\u5168\u5c40 Python \u73af\u5883\u4e2d\u5b89\u88c5 <code>harry</code> \u7248\u672c <code>3</code>\u3002</p> <p>\u5982\u679c\u4f60\u518d\u6b21\u5c1d\u8bd5\u8fd0\u884c <code>philosophers-stone</code>\uff0c\u5b83\u53ef\u80fd\u4f1a \u65e0\u6cd5\u8fd0\u884c\uff0c\u56e0\u4e3a\u5b83\u9700\u8981\u7684\u662f <code>harry</code> \u7248\u672c <code>1</code>\u3002</p> <pre><code>flowchart LR\n    subgraph global[global env]\n        harry-1[&lt;strike&gt;harry v1&lt;/strike&gt;]\n        style harry-1 fill:#ccc,stroke-dasharray: 5 5\n        harry-3[harry v3]\n    end\n    subgraph stone-project[philosophers-stone project]\n        stone(philosophers-stone) -.-x|\u26d4\ufe0f| harry-1\n    end\n    subgraph azkaban-project[prisoner-of-azkaban project]\n        azkaban(prisoner-of-azkaban) --&gt; |requires| harry-3\n    end</code></pre> <p>Tip</p> <p>\u5728 Python \u5305\u4e2d\uff0c\u5c3d\u91cf\u907f\u514d\u5728 \u65b0\u7248\u672c \u4e2d\u5f15\u5165 \u7834\u574f\u6027\u66f4\u6539 \u662f\u5f88\u5e38\u89c1\u7684\uff0c\u4f46\u4e3a\u4e86\u5b89\u5168\u8d77\u89c1\uff0c\u6700\u597d\u5728\u53ef\u4ee5\u8fd0\u884c\u6d4b\u8bd5\u5e76\u68c0\u67e5\u4e00\u5207\u662f\u5426\u6b63\u5e38\u5de5\u4f5c\u7684\u60c5\u51b5\u4e0b\uff0c\u6709\u610f\u8bc6\u5730\u5b89\u88c5\u8f83\u65b0\u7684\u7248\u672c\u3002</p> <p>\u73b0\u5728\uff0c\u60f3\u8c61\u4e00\u4e0b\uff0c\u6240\u6709 \u9879\u76ee\u6240\u4f9d\u8d56\u7684 \u5176\u4ed6 \u5305\u3002\u90a3\u5c06\u53d8\u5f97\u975e\u5e38\u96be\u4ee5\u7ba1\u7406\u3002\u4f60\u53ef\u80fd\u4f1a\u6700\u7ec8\u5728\u67d0\u4e9b\u9879\u76ee\u4e2d\u8fd0\u884c\u4e00\u4e9b \u4e0d\u517c\u5bb9\u7248\u672c \u7684\u5305\uff0c\u800c\u4f60\u4e5f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u67d0\u4e9b\u529f\u80fd\u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c\u3002</p> <p>\u53e6\u5916\uff0c\u53d6\u51b3\u4e8e\u4f60\u7684\u64cd\u4f5c\u7cfb\u7edf\uff08\u4f8b\u5982 Linux\u3001Windows\u3001macOS\uff09\uff0c\u5b83\u53ef\u80fd\u5df2\u7ecf\u9884\u88c5\u4e86 Python\u3002\u5982\u679c\u662f\u8fd9\u6837\uff0c\u7cfb\u7edf\u53ef\u80fd\u5df2\u7ecf\u9884\u88c5\u4e86\u4e00\u4e9b\u5177\u6709\u7279\u5b9a\u7248\u672c\u7684\u5305\uff0c\u8fd9\u4e9b\u5305 \u662f\u4f60\u7684\u7cfb\u7edf\u6240\u9700\u8981\u7684\u3002\u5982\u679c\u4f60\u5c06\u5305\u5b89\u88c5\u5230\u5168\u5c40 Python \u73af\u5883\u4e2d\uff0c\u53ef\u80fd\u4f1a \u7834\u574f \u64cd\u4f5c\u7cfb\u7edf\u4e2d\u9884\u88c5\u7684\u67d0\u4e9b\u7a0b\u5e8f\u3002</p>"},{"location":"virtual-environments/#_14","title":"\u5305\u5b89\u88c5\u7684\u4f4d\u7f6e","text":"<p>\u5f53\u4f60\u5b89\u88c5 Python \u65f6\uff0c\u5b83\u4f1a\u5728\u4f60\u7684\u8ba1\u7b97\u673a\u4e0a\u521b\u5efa\u4e00\u4e9b\u76ee\u5f55\u548c\u6587\u4ef6\u3002</p> <p>\u5176\u4e2d\u4e00\u4e9b\u76ee\u5f55\u4e13\u95e8\u7528\u4e8e\u5b58\u653e\u4f60\u5b89\u88c5\u7684\u6240\u6709\u5305\u3002</p> <p>\u5f53\u4f60\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u65f6\uff1a</p> <pre><code>// \u73b0\u5728\u4e0d\u8981\u8fd0\u884c\u8fd9\u4e2a\uff0c\u53ea\u662f\u4e00\u4e2a\u793a\u4f8b \ud83e\udd13\n$ pip install sqlmodel\n---&gt; 100%\n</code></pre> <p>\u8fd9\u4e2a\u547d\u4ee4\u4f1a\u4e0b\u8f7d\u4e00\u4e2a\u538b\u7f29\u5305\uff0c\u5176\u4e2d\u5305\u542b SQLModel \u7684\u4ee3\u7801\uff0c\u901a\u5e38\u4f1a\u4ece PyPI \u4e0b\u8f7d\u3002</p> <p>\u5b83\u8fd8\u4f1a \u4e0b\u8f7d SQLModel \u6240\u4f9d\u8d56\u7684\u5176\u4ed6\u5305\u7684\u6587\u4ef6\u3002</p> <p>\u7136\u540e\uff0c\u5b83\u4f1a \u89e3\u538b \u8fd9\u4e9b\u6587\u4ef6\u5e76\u5c06\u5176\u653e\u5230\u8ba1\u7b97\u673a\u4e0a\u7684\u67d0\u4e2a\u76ee\u5f55\u4e2d\u3002</p> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5b83\u4f1a\u5c06\u8fd9\u4e9b\u4e0b\u8f7d\u5e76\u89e3\u538b\u7684\u6587\u4ef6\u653e\u5230\u4f60\u7684 Python \u5b89\u88c5\u76ee\u5f55\u4e2d\u7684\u67d0\u4e2a\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u662f \u5168\u5c40\u73af\u5883 \u4e2d\u3002</p>"},{"location":"virtual-environments/#_15","title":"\u4ec0\u4e48\u662f\u865a\u62df\u73af\u5883","text":"<p>\u89e3\u51b3\u5c06\u6240\u6709\u5305\u5b89\u88c5\u5728\u5168\u5c40\u73af\u5883\u4e2d\u7684\u95ee\u9898\u7684\u65b9\u6cd5\u662f\uff0c\u4e3a\u4f60\u5de5\u4f5c\u7684\u6bcf\u4e2a\u9879\u76ee\u4f7f\u7528 \u865a\u62df\u73af\u5883\u3002</p> <p>\u865a\u62df\u73af\u5883\u662f\u4e00\u4e2a \u76ee\u5f55\uff0c\u4e0e\u5168\u5c40\u73af\u5883\u975e\u5e38\u76f8\u4f3c\uff0c\u4f60\u53ef\u4ee5\u5728\u5176\u4e2d\u4e3a\u4e00\u4e2a\u9879\u76ee\u5b89\u88c5\u5305\u3002</p> <p>\u8fd9\u6837\uff0c\u6bcf\u4e2a\u9879\u76ee\u90fd\u4f1a\u6709\u81ea\u5df1\u7684\u865a\u62df\u73af\u5883\uff08<code>.venv</code> \u76ee\u5f55\uff09\u548c\u81ea\u5df1\u7684\u5305\u3002</p> <pre><code>flowchart TB\n    subgraph stone-project[philosophers-stone project]\n        stone(philosophers-stone) ---&gt;|requires| harry-1\n        subgraph venv1[.venv]\n            harry-1[harry v1]\n        end\n    end\n    subgraph azkaban-project[prisoner-of-azkaban project]\n        azkaban(prisoner-of-azkaban) ---&gt;|requires| harry-3\n        subgraph venv2[.venv]\n            harry-3[harry v3]\n        end\n    end\n    stone-project ~~~ azkaban-project</code></pre>"},{"location":"virtual-environments/#_16","title":"\u6fc0\u6d3b\u865a\u62df\u73af\u5883\u610f\u5473\u7740\u4ec0\u4e48","text":"<p>\u5f53\u4f60\u6fc0\u6d3b\u4e00\u4e2a\u865a\u62df\u73af\u5883\u65f6\uff0c\u4f8b\u5982\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\uff1a</p> Linux, macOSWindows PowerShellWindows Bash <pre><code>$ source .venv/bin/activate\n</code></pre> <pre><code>$ .venv\\Scripts\\Activate.ps1\n</code></pre> <p>\u6216\u8005\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f Windows \u4e0a\u7684 Bash\uff08\u4f8b\u5982 Git Bash\uff09\uff1a</p> <pre><code>$ source .venv/Scripts/activate\n</code></pre> <p>\u8be5\u547d\u4ee4\u4f1a\u521b\u5efa\u6216\u4fee\u6539\u4e00\u4e9b \u73af\u5883\u53d8\u91cf\uff0c\u8fd9\u4e9b\u53d8\u91cf\u5c06\u5728\u63a5\u4e0b\u6765\u7684\u547d\u4ee4\u4e2d\u53ef\u7528\u3002</p> <p>\u5176\u4e2d\u4e00\u4e2a\u53d8\u91cf\u5c31\u662f <code>PATH</code> \u53d8\u91cf\u3002</p> <p>Tip</p> <p>\u4f60\u53ef\u4ee5\u5728 \u73af\u5883\u53d8\u91cf \u90e8\u5206\u4e86\u89e3\u66f4\u591a\u5173\u4e8e <code>PATH</code> \u73af\u5883\u53d8\u91cf\u7684\u5185\u5bb9\u3002</p> <p>\u6fc0\u6d3b\u865a\u62df\u73af\u5883\u4f1a\u5c06\u5176\u8def\u5f84 <code>.venv/bin</code>\uff08\u5728 Linux \u548c macOS \u4e0a\uff09\u6216 <code>.venv\\Scripts</code>\uff08\u5728 Windows \u4e0a\uff09\u6dfb\u52a0\u5230 <code>PATH</code> \u73af\u5883\u53d8\u91cf\u4e2d\u3002</p> <p>\u5047\u8bbe\u5728\u6fc0\u6d3b\u73af\u5883\u4e4b\u524d\uff0c<code>PATH</code> \u53d8\u91cf\u5982\u4e0b\u6240\u793a\uff1a</p> Linux, macOSWindows <pre><code>/usr/bin:/bin:/usr/sbin:/sbin\n</code></pre> <p>\u8fd9\u610f\u5473\u7740\u7cfb\u7edf\u4f1a\u5728\u4ee5\u4e0b\u76ee\u5f55\u4e2d\u67e5\u627e\u7a0b\u5e8f\uff1a</p> <ul> <li><code>/usr/bin</code></li> <li><code>/bin</code></li> <li><code>/usr/sbin</code></li> <li><code>/sbin</code></li> </ul> <pre><code>C:\\Windows\\System32\n</code></pre> <p>\u8fd9\u610f\u5473\u7740\u7cfb\u7edf\u4f1a\u5728\u4ee5\u4e0b\u76ee\u5f55\u4e2d\u67e5\u627e\u7a0b\u5e8f\uff1a</p> <ul> <li><code>C:\\Windows\\System32</code></li> </ul> <p>\u6fc0\u6d3b\u865a\u62df\u73af\u5883\u540e\uff0c<code>PATH</code> \u53d8\u91cf\u4f1a\u53d8\u6210\u5982\u4e0b\u6240\u793a\uff1a</p> Linux, macOSWindows <pre><code>/home/user/code/awesome-project/.venv/bin:/usr/bin:/bin:/usr/sbin:/sbin\n</code></pre> <p>\u8fd9\u610f\u5473\u7740\u7cfb\u7edf\u73b0\u5728\u4f1a\u9996\u5148\u5728\u4ee5\u4e0b\u76ee\u5f55\u4e2d\u67e5\u627e\u7a0b\u5e8f\uff1a</p> <pre><code>/home/user/code/awesome-project/.venv/bin\n</code></pre> <p>\u7136\u540e\u518d\u53bb\u5176\u4ed6\u76ee\u5f55\u67e5\u627e\u3002</p> <p>\u56e0\u6b64\uff0c\u5f53\u4f60\u5728\u7ec8\u7aef\u4e2d\u8f93\u5165 <code>python</code> \u65f6\uff0c\u7cfb\u7edf\u4f1a\u9996\u5148\u5728\u4ee5\u4e0b\u8def\u5f84\u627e\u5230 Python \u7a0b\u5e8f\uff1a</p> <pre><code>/home/user/code/awesome-project/.venv/bin/python\n</code></pre> <p>\u5e76\u4f7f\u7528\u8be5\u7a0b\u5e8f\u3002</p> <pre><code>C:\\Users\\user\\code\\awesome-project\\.venv\\Scripts;C:\\Windows\\System32\n</code></pre> <p>\u8fd9\u610f\u5473\u7740\u7cfb\u7edf\u73b0\u5728\u4f1a\u9996\u5148\u5728\u4ee5\u4e0b\u76ee\u5f55\u4e2d\u67e5\u627e\u7a0b\u5e8f\uff1a</p> <pre><code>C:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\n</code></pre> <p>\u7136\u540e\u518d\u53bb\u5176\u4ed6\u76ee\u5f55\u67e5\u627e\u3002</p> <p>\u56e0\u6b64\uff0c\u5f53\u4f60\u5728\u7ec8\u7aef\u4e2d\u8f93\u5165 <code>python</code> \u65f6\uff0c\u7cfb\u7edf\u4f1a\u9996\u5148\u5728\u4ee5\u4e0b\u8def\u5f84\u627e\u5230 Python \u7a0b\u5e8f\uff1a</p> <pre><code>C:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\\python\n</code></pre> <p>\u5e76\u4f7f\u7528\u8be5\u7a0b\u5e8f\u3002</p> <p>\u4e00\u4e2a\u91cd\u8981\u7684\u7ec6\u8282\u662f\uff0c\u5b83\u4f1a\u5c06\u865a\u62df\u73af\u5883\u8def\u5f84\u653e\u5728 <code>PATH</code> \u53d8\u91cf\u7684 \u524d\u9762\u3002\u7cfb\u7edf\u4f1a \u5148 \u627e\u5230\u5b83\uff0c\u800c\u4e0d\u662f\u5176\u4ed6 Python \u7a0b\u5e8f\u3002\u56e0\u6b64\uff0c\u5f53\u4f60\u8fd0\u884c <code>python</code> \u65f6\uff0c\u7cfb\u7edf\u4f1a\u4f7f\u7528 \u865a\u62df\u73af\u5883\u4e2d\u7684 Python\uff0c\u800c\u4e0d\u662f\u5168\u5c40\u73af\u5883\u4e2d\u7684\u4efb\u4f55\u5176\u4ed6 <code>python</code>\u3002</p> <p>\u6fc0\u6d3b\u865a\u62df\u73af\u5883\u8fd8\u4f1a\u6539\u53d8\u5176\u4ed6\u4e00\u4e9b\u8bbe\u7f6e\uff0c\u4f46\u8fd9\u662f\u5b83\u6700\u91cd\u8981\u7684\u529f\u80fd\u4e4b\u4e00\u3002</p>"},{"location":"virtual-environments/#_17","title":"\u68c0\u67e5\u865a\u62df\u73af\u5883","text":"<p>\u5f53\u4f60\u68c0\u67e5\u865a\u62df\u73af\u5883\u662f\u5426\u6fc0\u6d3b\u65f6\uff0c\u4f8b\u5982\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\uff1a</p> Linux, macOS, Windows BashWindows PowerShell <pre><code>$ which python\n\n/home/user/code/awesome-project/.venv/bin/python\n</code></pre> <pre><code>$ Get-Command python\n\nC:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\\python\n</code></pre> <p>\u8fd9\u610f\u5473\u7740\u5c06\u4f7f\u7528\u7684 <code>python</code> \u7a0b\u5e8f\u6765\u81ea \u865a\u62df\u73af\u5883\u3002</p> <p>\u5728 Linux \u548c macOS \u4e0a\u4f60\u4f7f\u7528 <code>which</code>\uff0c\u5728 Windows PowerShell \u4e2d\u4f7f\u7528 <code>Get-Command</code>\u3002</p> <p>\u8be5\u547d\u4ee4\u7684\u5de5\u4f5c\u65b9\u5f0f\u662f\uff0c\u5b83\u4f1a\u68c0\u67e5 <code>PATH</code> \u73af\u5883\u53d8\u91cf\uff0c\u6309\u987a\u5e8f\u904d\u5386 \u6bcf\u4e00\u4e2a\u8def\u5f84\uff0c\u5bfb\u627e\u540d\u4e3a <code>python</code> \u7684\u7a0b\u5e8f\u3002\u4e00\u65e6\u627e\u5230\uff0c\u5b83\u4f1a \u663e\u793a\u8be5\u7a0b\u5e8f\u7684\u8def\u5f84\u3002</p> <p>\u6700\u91cd\u8981\u7684\u662f\uff0c\u5f53\u4f60\u8c03\u7528 <code>python</code> \u65f6\uff0c\u7cfb\u7edf\u4f1a\u6267\u884c\u7684\u5c31\u662f\u8fd9\u4e2a \"<code>python</code>\" \u7a0b\u5e8f\u3002</p> <p>\u56e0\u6b64\uff0c\u4f60\u53ef\u4ee5\u786e\u8ba4\u81ea\u5df1\u662f\u5426\u5904\u4e8e\u6b63\u786e\u7684\u865a\u62df\u73af\u5883\u4e2d\u3002</p> <p>Tip</p> <p>\u6fc0\u6d3b\u4e00\u4e2a\u865a\u62df\u73af\u5883\uff0c\u4f7f\u7528\u5176\u4e2d\u7684 Python\uff0c\u7136\u540e \u5207\u6362\u5230\u53e6\u4e00\u4e2a\u9879\u76ee\u3002</p> <p>\u5982\u679c\u6ca1\u6709\u9000\u51fa\u7b2c\u4e00\u4e2a\u9879\u76ee\u7684\u865a\u62df\u73af\u5883\uff0c\u7b2c\u4e8c\u4e2a\u9879\u76ee \u53ef\u80fd\u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c\uff0c\u56e0\u4e3a\u4f60\u4ecd\u5728\u4f7f\u7528\u7b2c\u4e00\u4e2a\u9879\u76ee\u7684\u865a\u62df\u73af\u5883\u4e2d\u7684 Python\u3002</p> <p>\u80fd\u591f\u68c0\u67e5\u6b63\u5728\u4f7f\u7528\u7684 <code>python</code> \u662f\u975e\u5e38\u6709\u7528\u7684\u3002\ud83e\udd13</p>"},{"location":"virtual-environments/#_18","title":"\u4e3a\u4ec0\u4e48\u8981\u9000\u51fa\u865a\u62df\u73af\u5883","text":"<p>\u4f8b\u5982\uff0c\u4f60\u53ef\u80fd\u5728\u4e00\u4e2a\u9879\u76ee <code>philosophers-stone</code> \u4e0a\u5de5\u4f5c\uff0c\u6fc0\u6d3b\u8be5\u865a\u62df\u73af\u5883\uff0c\u5b89\u88c5\u5305\u5e76\u5728\u8be5\u73af\u5883\u4e2d\u5de5\u4f5c\u3002</p> <p>\u7136\u540e\u4f60\u60f3\u8981\u5207\u6362\u5230 \u53e6\u4e00\u4e2a\u9879\u76ee <code>prisoner-of-azkaban</code>\u3002</p> <p>\u4f60\u8fdb\u5165\u90a3\u4e2a\u9879\u76ee\u76ee\u5f55\uff1a</p> <pre><code>$ cd ~/code/prisoner-of-azkaban\n</code></pre> <p>\u5982\u679c\u4f60\u4e0d\u9000\u51fa <code>philosophers-stone</code> \u7684\u865a\u62df\u73af\u5883\uff0c\u5f53\u4f60\u5728\u7ec8\u7aef\u8fd0\u884c <code>python</code> \u65f6\uff0c\u5b83\u4f1a\u5c1d\u8bd5\u4f7f\u7528 <code>philosophers-stone</code> \u4e2d\u7684 Python\u3002</p> <pre><code>$ cd ~/code/prisoner-of-azkaban\n\n$ python main.py\n\n// \u5bfc\u5165 sirius \u65f6\u51fa\u9519\uff0c\u56e0\u4e3a\u5b83\u6ca1\u6709\u5b89\u88c5 \ud83d\ude31\nTraceback (most recent call last):\n    File \"main.py\", line 1, in &lt;module&gt;\n        import sirius\n</code></pre> <p>\u4f46\u662f\u5982\u679c\u4f60\u9000\u51fa\u865a\u62df\u73af\u5883\u5e76\u6fc0\u6d3b <code>prisoner-of-azkaban</code> \u7684\u65b0\u73af\u5883\uff0c\u90a3\u4e48\u5f53\u4f60\u8fd0\u884c <code>python</code> \u65f6\uff0c\u5b83\u4f1a\u4f7f\u7528 <code>prisoner-of-azkaban</code> \u4e2d\u865a\u62df\u73af\u5883\u7684 Python\u3002</p> <pre><code>$ cd ~/code/prisoner-of-azkaban\n\n// \u4f60\u4e0d\u9700\u8981\u5728\u539f\u9879\u76ee\u76ee\u5f55\u4e2d\u624d\u80fd\u9000\u51fa\u73af\u5883\uff0c\u5b9e\u9645\u4e0a\u5373\u4f7f\u4f60\u5df2\u7ecf\u5207\u6362\u5230\u53e6\u4e00\u4e2a\u9879\u76ee\u4e5f\u53ef\u4ee5\u9000\u51fa \ud83d\ude0e\n$ deactivate\n\n// \u6fc0\u6d3b prisoner-of-azkaban/.venv \u4e2d\u7684\u865a\u62df\u73af\u5883 \ud83d\ude80\n$ source .venv/bin/activate\n\n// \u73b0\u5728\uff0c\u5f53\u4f60\u8fd0\u884c python \u65f6\uff0c\u5b83\u4f1a\u627e\u5230\u5b89\u88c5\u5728\u6b64\u865a\u62df\u73af\u5883\u4e2d\u7684 sirius \u5305 \u2728\n$ python main.py\n\nI solemnly swear \ud83d\udc3a\n</code></pre>"},{"location":"virtual-environments/#_19","title":"\u66ff\u4ee3\u65b9\u6848","text":"<p>\u8fd9\u53ea\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u6307\u5357\uff0c\u5e2e\u52a9\u4f60\u5165\u95e8\u5e76\u4e86\u89e3 \u5e95\u5c42 \u7684\u5de5\u4f5c\u539f\u7406\u3002</p> <p>\u6709\u8bb8\u591a \u66ff\u4ee3\u65b9\u6cd5 \u53ef\u4ee5\u7528\u6765\u7ba1\u7406\u865a\u62df\u73af\u5883\u3001\u5305\u4f9d\u8d56\uff08requirements\uff09\u548c\u9879\u76ee\u3002</p> <p>\u4e00\u65e6\u4f60\u51c6\u5907\u597d\u5e76\u5e0c\u671b\u4f7f\u7528\u4e00\u4e2a\u5de5\u5177\u6765 \u7ba1\u7406\u6574\u4e2a\u9879\u76ee\uff0c\u5305\u62ec\u5305\u4f9d\u8d56\u3001\u865a\u62df\u73af\u5883\u7b49\uff0c\u6211\u5efa\u8bae\u4f60\u5c1d\u8bd5 uv\u3002</p> <p><code>uv</code> \u53ef\u4ee5\u505a\u5f88\u591a\u4e8b\u60c5\uff0c\u5305\u62ec\uff1a</p> <ul> <li>\u4e3a\u4f60\u5b89\u88c5 Python\uff0c\u5305\u62ec\u4e0d\u540c\u7248\u672c\u7684 Python</li> <li>\u7ba1\u7406\u4f60\u9879\u76ee\u7684 \u865a\u62df\u73af\u5883</li> <li>\u5b89\u88c5 \u5305</li> <li>\u7ba1\u7406\u9879\u76ee\u7684 \u5305\u4f9d\u8d56\u548c\u7248\u672c</li> <li>\u786e\u4fdd\u4f60\u62e5\u6709 \u7cbe\u786e \u7684\u5305\u548c\u7248\u672c\u96c6\uff0c\u8fde\u540c\u5b83\u4eec\u7684\u4f9d\u8d56\u9879\uff0c\u8fd9\u6837\u4f60\u5c31\u80fd\u786e\u4fdd\u5728\u5f00\u53d1\u65f6\u4e0e\u751f\u4ea7\u73af\u5883\u4e2d\u8fd0\u884c\u7684\u9879\u76ee\u5b8c\u5168\u76f8\u540c\uff0c\u8fd9\u88ab\u79f0\u4e3a \u9501\u5b9a\uff08locking\uff09</li> <li>\u8fd8\u6709\u8bb8\u591a\u5176\u4ed6\u529f\u80fd</li> </ul>"},{"location":"virtual-environments/#_20","title":"\u603b\u7ed3","text":"<p>\u5982\u679c\u4f60\u9605\u8bfb\u5e76\u7406\u89e3\u4e86\u6240\u6709\u8fd9\u4e9b\u5185\u5bb9\uff0c\u90a3\u4e48\u73b0\u5728 \u4f60\u6bd4\u5f88\u591a\u5f00\u53d1\u8005\u4e86\u89e3\u5f97\u66f4\u591a \u5173\u4e8e\u865a\u62df\u73af\u5883\u7684\u77e5\u8bc6\u3002\ud83e\udd13</p> <p>\u4e86\u89e3\u8fd9\u4e9b\u7ec6\u8282\uff0c\u53ef\u80fd\u5728\u4f60\u672a\u6765\u8c03\u8bd5\u4e00\u4e9b\u770b\u4f3c\u590d\u6742\u7684\u95ee\u9898\u65f6\u4f1a\u975e\u5e38\u6709\u7528\uff0c\u56e0\u4e3a\u4f60\u4f1a\u77e5\u9053 \u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002\ud83d\ude0e</p>"},{"location":"about/","title":"\u5173\u4e8e","text":"<p>\u5173\u4e8e SQLModel, \u5b83\u7684\u8bbe\u8ba1\u3001\u7075\u611f\u7b49\u7b49\u3002 \ud83e\udd13</p>"},{"location":"advanced/","title":"\u9ad8\u7ea7\u7528\u6237\u6307\u5357","text":"<p>\u9ad8\u7ea7\u7528\u6237\u6307\u5357 \u6b63\u5728\u9010\u6b65\u6269\u5c55\uff0c\u4f60\u5df2\u7ecf\u53ef\u4ee5\u9605\u8bfb\u4e00\u4e9b\u9ad8\u7ea7\u8bdd\u9898\u4e86\u3002</p> <p>\u672a\u6765\u5b83\u5c06\u5305\u62ec\uff1a</p> <ul> <li>\u5982\u4f55\u4f7f\u7528 <code>async</code> \u548c <code>await</code> \u4e0e\u5f02\u6b65\u4f1a\u8bdd\u4e00\u8d77\u4f7f\u7528\u3002</li> <li>\u5982\u4f55\u8fd0\u884c\u8fc1\u79fb\u3002</li> <li>\u5982\u4f55\u5c06 SQLModel \u6a21\u578b\u4e0e SQLAlchemy \u7ed3\u5408\u4f7f\u7528\u3002</li> <li>\u2026\u2026\u4ee5\u53ca\u66f4\u591a\u5185\u5bb9\u3002\ud83e\udd13</li> </ul>"},{"location":"advanced/decimal/","title":"\u5341\u8fdb\u5236\u6570\u5b57","text":"<p>\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u80fd\u591f\u5b58\u50a8\u5177\u6709\u7cbe\u5ea6\u4fdd\u8bc1\u7684\u5341\u8fdb\u5236\u6570\u5b57\u3002</p> <p>\u8fd9\u5bf9\u4e8e\u5b58\u50a8\u50cf \u8d27\u5e01\u3001\u4ef7\u683c\u3001\u8d26\u6237 \u7b49\u5185\u5bb9\u5c24\u4e3a\u91cd\u8981\uff0c\u56e0\u4e3a\u60a8\u5e0c\u671b\u786e\u4fdd\u4e0d\u4f1a\u53d1\u751f\u56db\u820d\u4e94\u5165\u9519\u8bef\u3002</p> <p>\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u60a8\u5728 Python \u4e2d\u6267\u884c <code>1.1 + 2.2</code>\uff0c\u60a8\u53ef\u80fd\u671f\u671b\u7ed3\u679c\u662f <code>3.3</code>\uff0c\u4f46\u5b9e\u9645\u4e0a\u60a8\u4f1a\u5f97\u5230 <code>3.3000000000000003</code>\uff1a</p> <pre><code>&gt;&gt;&gt; 1.1 + 2.2\n3.3000000000000003\n</code></pre> <p>\u8fd9\u662f\u56e0\u4e3a\u6570\u5b57\u5728\u201c\u96f6\u548c\u4e00\u201d\uff08\u4e8c\u8fdb\u5236\uff09\u4e2d\u5b58\u50a8\u7684\u65b9\u5f0f\u3002\u4f46 Python \u6709\u4e00\u4e2a\u6a21\u5757\u548c\u4e00\u4e9b\u7c7b\u578b\uff0c\u5141\u8bb8\u4f7f\u7528\u4e25\u683c\u7684\u5341\u8fdb\u5236\u503c\u3002\u60a8\u53ef\u4ee5\u5728\u5b98\u65b9\u7684 Python Decimal \u6587\u6863 \u4e2d\u4e86\u89e3\u66f4\u591a\u5185\u5bb9\u3002</p> <p>\u7531\u4e8e\u6570\u636e\u5e93\u4ee5\u4e0e\u8ba1\u7b97\u673a\u76f8\u540c\u7684\u65b9\u5f0f\u5b58\u50a8\u6570\u636e\uff08\u5373\u4e8c\u8fdb\u5236\uff09\uff0c\u5b83\u4eec\u4e5f\u4f1a\u9762\u4e34\u76f8\u540c\u7684\u95ee\u9898\u3002\u56e0\u6b64\uff0c\u6570\u636e\u5e93\u4e5f\u6709\u4e00\u4e2a\u7279\u6b8a\u7684 \u5341\u8fdb\u5236 \u7c7b\u578b\u3002</p> <p>\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u8fd9\u53ef\u80fd\u4e0d\u4f1a\u6210\u4e3a\u95ee\u9898\uff0c\u4f8b\u5982\u89c6\u9891\u4e2d\u7684\u89c2\u770b\u6b21\u6570\u6216\u89c6\u9891\u6e38\u620f\u4e2d\u7684\u751f\u547d\u6761\u6570\u3002\u4f46\u6b63\u5982\u60a8\u53ef\u4ee5\u60f3\u8c61\u7684\u90a3\u6837\uff0c\u5728\u5904\u7406 \u8d27\u5e01 \u548c \u8d22\u52a1 \u65f6\uff0c\u8fd9\u4e00\u70b9\u5c24\u4e3a\u91cd\u8981\u3002</p>"},{"location":"advanced/decimal/#_2","title":"\u5341\u8fdb\u5236\u7c7b\u578b","text":"<p>Pydantic \u7279\u522b\u652f\u6301 <code>Decimal</code> \u7c7b\u578b\u3002</p> <p>\u5f53\u60a8\u4f7f\u7528 <code>Decimal</code> \u65f6\uff0c\u53ef\u4ee5\u5728 <code>Field()</code> \u51fd\u6570\u4e2d\u6307\u5b9a\u652f\u6301\u7684\u4f4d\u6570\u548c\u5c0f\u6570\u4f4d\u6570\u3002Pydantic \u4f1a\u9a8c\u8bc1\u8fd9\u4e9b\uff08\u4f8b\u5982\uff0c\u5728\u4f7f\u7528 FastAPI \u65f6\uff09\uff0c\u540c\u6837\u7684\u4fe1\u606f\u4e5f\u5c06\u7528\u4e8e\u6570\u636e\u5e93\u5217\u3002</p> <p>Info</p> <p>\u5bf9\u4e8e\u6570\u636e\u5e93\uff0cSQLModel \u5c06\u4f7f\u7528 SQLAlchemy \u7684 <code>DECIMAL</code> \u7c7b\u578b\u3002</p>"},{"location":"advanced/decimal/#sqlmodel","title":"SQLModel \u4e2d\u7684\u5341\u8fdb\u5236","text":"<p>\u5047\u8bbe\u6570\u636e\u5e93\u4e2d\u6bcf\u4e2a\u82f1\u96c4\u90fd\u6709\u4e00\u7b14\u94b1\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 <code>condecimal()</code> \u51fd\u6570\u5c06\u8be5\u5b57\u6bb5\u8bbe\u7f6e\u4e3a <code>Decimal</code> \u7c7b\u578b\uff1a</p> Python 3.10+Python 3.7+ <pre><code>from decimal import Decimal\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n    money: Decimal = Field(default=0, max_digits=5, decimal_places=3)\n\n# More code here later \ud83d\udc47\n</code></pre> <pre><code>from decimal import Decimal\nfrom typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n    money: Decimal = Field(default=0, max_digits=5, decimal_places=3)\n\n# More code here later \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from decimal import Decimal\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n    money: Decimal = Field(default=0, max_digits=5, decimal_places=3)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\", money=1.1)\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", money=0.001)\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, money=2.2)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Rusty-Man\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        total_money = hero_1.money + hero_2.money\n        print(f\"Total money: {total_money}\")\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from decimal import Decimal\nfrom typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n    money: Decimal = Field(default=0, max_digits=5, decimal_places=3)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\", money=1.1)\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", money=0.001)\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, money=2.2)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Rusty-Man\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        total_money = hero_1.money + hero_2.money\n        print(f\"Total money: {total_money}\")\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u8fd9\u91cc\u6211\u4eec\u58f0\u660e <code>money</code> \u6700\u591a\u53ef\u4ee5\u6709 <code>5</code> \u4f4d\u6570\u5b57\uff08\u901a\u8fc7 <code>max_digits</code>\uff09\uff0c\u8fd9\u5305\u62ec\u6574\u6570\u90e8\u5206\uff08\u5c0f\u6570\u70b9\u5de6\u8fb9\uff09\u548c\u5c0f\u6570\u90e8\u5206\uff08\u5c0f\u6570\u70b9\u53f3\u8fb9\uff09\u3002</p> <p>\u6211\u4eec\u8fd8\u58f0\u660e\u5c0f\u6570\u90e8\u5206\uff08\u5c0f\u6570\u70b9\u53f3\u8fb9\uff09\u7684\u4f4d\u6570\u4e3a <code>3</code>\uff0c\u6240\u4ee5\u5728 <code>money</code> \u5b57\u6bb5\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u6709 3 \u4f4d\u5c0f\u6570\u6570\u5b57\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u5c06\u6709 2 \u4f4d\u7528\u4e8e\u6574\u6570\u90e8\u5206 \u548c 3 \u4f4d\u7528\u4e8e\u5c0f\u6570\u90e8\u5206\u3002</p> <p>\u2705 \u4f8b\u5982\uff0c\u4ee5\u4e0b\u90fd\u662f <code>money</code> \u5b57\u6bb5\u7684\u6709\u6548\u6570\u5b57\uff1a</p> <ul> <li><code>12.345</code></li> <li><code>12.3</code></li> <li><code>12</code></li> <li><code>1.2</code></li> <li><code>0.123</code></li> <li><code>0</code></li> </ul> <p>\ud83d\udeab \u4f46\u662f\u4ee5\u4e0b\u6570\u5b57\u5bf9\u4e8e <code>money</code> \u5b57\u6bb5\u6765\u8bf4\u662f\u65e0\u6548\u7684\uff1a</p> <ul> <li><code>1.2345</code></li> <li>\u8fd9\u4e2a\u6570\u5b57\u6709\u8d85\u8fc7 3 \u4f4d\u7684\u5c0f\u6570\u3002</li> <li><code>123.234</code></li> <li>\u8fd9\u4e2a\u6570\u5b57\u7684\u603b\u4f4d\u6570\uff08\u6574\u6570\u90e8\u5206\u548c\u5c0f\u6570\u90e8\u5206\uff09\u8d85\u8fc7\u4e86 5 \u4f4d\u3002</li> <li><code>123</code></li> <li>\u5373\u4f7f\u8fd9\u4e2a\u6570\u5b57\u6ca1\u6709\u5c0f\u6570\u90e8\u5206\uff0c\u6211\u4eec\u4ecd\u7136\u4e3a\u5c0f\u6570\u90e8\u5206\u9884\u7559\u4e86 3 \u4f4d\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ea\u80fd\u4e3a \u6574\u6570\u90e8\u5206 \u4f7f\u7528 2 \u4f4d\uff0c\u800c\u8fd9\u4e2a\u6570\u5b57\u6709 3 \u4f4d\u6574\u6570\u3002\u6240\u4ee5\uff0c\u5141\u8bb8\u7684\u6574\u6570\u4f4d\u6570\u662f <code>max_digits</code> - <code>decimal_places</code> = 2\u3002</li> </ul> <p>/// \u63d0\u793a</p> <p>\u786e\u4fdd\u6839\u636e\u60a8\u81ea\u5df1\u5e94\u7528\u7a0b\u5e8f\u7684\u9700\u6c42\u8c03\u6574\u4f4d\u6570\u548c\u5c0f\u6570\u4f4d\u6570\u3002\ud83e\udd13</p> <p>///</p>"},{"location":"advanced/decimal/#_3","title":"\u4f7f\u7528\u5341\u8fdb\u5236\u521b\u5efa\u6a21\u578b","text":"<p>\u5728\u521b\u5efa\u65b0\u6a21\u578b\u65f6\uff0c\u60a8\u5b9e\u9645\u4e0a\u53ef\u4ee5\u4f20\u9012\u666e\u901a\u7684 (<code>float</code>) \u6570\u5b57\uff0cPydantic \u4f1a\u81ea\u52a8\u5c06\u5b83\u4eec\u8f6c\u6362\u4e3a <code>Decimal</code> \u7c7b\u578b\uff0cSQLModel \u4f1a\u5c06\u5b83\u4eec\u4f5c\u4e3a <code>Decimal</code> \u7c7b\u578b\u5b58\u50a8\u5728\u6570\u636e\u5e93\u4e2d\uff08\u4f7f\u7528 SQLAlchemy\uff09\u3002</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\", money=1.1)\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", money=0.001)\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, money=2.2)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\", money=1.1)\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", money=0.001)\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, money=2.2)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from decimal import Decimal\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n    money: Decimal = Field(default=0, max_digits=5, decimal_places=3)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\", money=1.1)\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", money=0.001)\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, money=2.2)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Rusty-Man\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        total_money = hero_1.money + hero_2.money\n        print(f\"Total money: {total_money}\")\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from decimal import Decimal\nfrom typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n    money: Decimal = Field(default=0, max_digits=5, decimal_places=3)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\", money=1.1)\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", money=0.001)\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, money=2.2)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Rusty-Man\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        total_money = hero_1.money + hero_2.money\n        print(f\"Total money: {total_money}\")\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"advanced/decimal/#_4","title":"\u9009\u62e9\u5341\u8fdb\u5236\u6570\u636e","text":"<p>\u7136\u540e\uff0c\u5f53\u4f7f\u7528\u5341\u8fdb\u5236\u7c7b\u578b\u65f6\uff0c\u60a8\u53ef\u4ee5\u786e\u8ba4\u5b83\u4eec\u786e\u5b9e\u907f\u514d\u4e86\u6d6e\u52a8\u6570\u5b57\u7684\u56db\u820d\u4e94\u5165\u9519\u8bef\uff1a</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Rusty-Man\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        total_money = hero_1.money + hero_2.money\n        print(f\"Total money: {total_money}\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Rusty-Man\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        total_money = hero_1.money + hero_2.money\n        print(f\"Total money: {total_money}\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from decimal import Decimal\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n    money: Decimal = Field(default=0, max_digits=5, decimal_places=3)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\", money=1.1)\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", money=0.001)\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, money=2.2)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Rusty-Man\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        total_money = hero_1.money + hero_2.money\n        print(f\"Total money: {total_money}\")\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from decimal import Decimal\nfrom typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n    money: Decimal = Field(default=0, max_digits=5, decimal_places=3)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\", money=1.1)\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", money=0.001)\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, money=2.2)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Rusty-Man\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        total_money = hero_1.money + hero_2.money\n        print(f\"Total money: {total_money}\")\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"advanced/decimal/#_5","title":"\u5ba1\u67e5\u7ed3\u679c","text":"<p>\u73b0\u5728\uff0c\u5982\u679c\u60a8\u8fd0\u884c\u6b64\u4ee3\u7801\uff0c\u5b83\u5c06\u8f93\u51fa <code>3.300</code>\uff0c\u800c\u4e0d\u662f\u610f\u5916\u7684 <code>3.3000000000000003</code>\uff1a</p> <pre><code>$ python app.py\n\n// \u4e00\u4e9b\u793a\u4f8b\u4ee3\u7801\u548c\u524d\u9762\u7684\u8f93\u51fa\u7701\u7565 \ud83d\ude09\n\n// money \u7684\u7c7b\u578b\u662f Decimal('1.100')\nHero 1: id=1 secret_name='Dive Wilson' age=None name='Deadpond' money=Decimal('1.100')\n\n// \u66f4\u591a\u8f93\u51fa\u7701\u7565 \ud83e\udd13\n\n// money \u7684\u7c7b\u578b\u662f Decimal('1.100')\nHero 2: id=3 secret_name='Tommy Sharp' age=48 name='Rusty-Man' money=Decimal('2.200')\n\n// \u6ca1\u6709\u56db\u820d\u4e94\u5165\u9519\u8bef\uff0c\u53ea\u6709 3.3\uff01\ud83c\udf89\nTotal money: 3.300\n</code></pre> <p>Warning</p> <p>\u5c3d\u7ba1\u5728 Python \u7aef\u652f\u6301\u5e76\u4f7f\u7528\u4e86\u5341\u8fdb\u5236\u7c7b\u578b\uff0c\u4f46\u5e76\u975e\u6240\u6709\u6570\u636e\u5e93\u90fd\u652f\u6301\u5b83\u3002\u7279\u522b\u662f\uff0cSQLite \u4e0d\u652f\u6301\u5341\u8fdb\u5236\uff0c\u56e0\u6b64\u5b83\u4f1a\u5c06\u5176\u8f6c\u6362\u4e3a\u5b83\u652f\u6301\u7684\u6d6e\u52a8 <code>NUMERIC</code> \u7c7b\u578b\u3002</p> <p>\u4f46\u5927\u591a\u6570\u5176\u4ed6 SQL \u6570\u636e\u5e93\u90fd\u652f\u6301\u5341\u8fdb\u5236\u3002\ud83c\udf89</p>"},{"location":"advanced/uuid/","title":"UUID\uff08\u901a\u7528\u552f\u4e00\u6807\u8bc6\u7b26\uff09","text":"<p>\u6211\u4eec\u5df2\u7ecf\u8ba8\u8bba\u4e86\u4e00\u4e9b\u6570\u636e\u7c7b\u578b\uff0c\u5982 <code>str</code>\u3001<code>int</code> \u7b49\u3002</p> <p>\u53e6\u4e00\u4e2a\u6570\u636e\u7c7b\u578b\u662f <code>UUID</code>\uff08\u901a\u7528\u552f\u4e00\u6807\u8bc6\u7b26\uff09\u3002</p> <p>\u4f60\u53ef\u80fd\u5728 URL \u4e2d\u89c1\u8fc7 UUIDs\uff0c\u5b83\u4eec\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a</p> <pre><code>4ff2dab7-bffe-414d-88a5-1826b9fea8df\n</code></pre> <p>UUIDs \u53ef\u4ee5\u4f5c\u4e3a \u4e3b\u952e \u7684\u66ff\u4ee3\uff0c\u7528\u6765\u4ee3\u66ff\u81ea\u52a8\u9012\u589e\u7684\u6574\u6570\u3002</p> <p>Info</p> <p>UUIDs \u7684\u5b98\u65b9\u652f\u6301\u5728 SQLModel \u7248\u672c <code>0.0.20</code> \u4e2d\u88ab\u6dfb\u52a0\u3002</p>"},{"location":"advanced/uuid/#uuids","title":"\u5173\u4e8e UUIDs","text":"<p>UUIDs \u662f 128 \u4f4d\u7684\u6570\u5b57\uff0c\u5373 16 \u5b57\u8282\u3002</p> <p>\u5b83\u4eec\u901a\u5e38\u8868\u793a\u4e3a\u7531 32 \u4e2a \u5341\u516d\u8fdb\u5236 \u5b57\u7b26\u7ec4\u6210\uff0c\u8fd9\u4e9b\u5b57\u7b26\u7531\u77ed\u6a2a\u7ebf\u5206\u9694\u3002</p> <p>UUID \u6709\u591a\u4e2a\u7248\u672c\uff0c\u5176\u4e2d\u4e00\u4e9b\u7248\u672c\u5c06\u5f53\u524d\u65f6\u95f4\u5305\u542b\u5728\u5b57\u8282\u4e2d\uff0c\u4f46 UUID \u7248\u672c 4 \u4e3b\u8981\u662f\u968f\u673a\u7684\uff0c\u5b83\u4eec\u7684\u751f\u6210\u65b9\u5f0f\u4f7f\u5f97\u5b83\u4eec\u51e0\u4e4e\u662f \u552f\u4e00\u7684\u3002</p>"},{"location":"advanced/uuid/#uuids_1","title":"\u5206\u5e03\u5f0f UUIDs","text":"<p>\u4f60\u53ef\u4ee5\u5728\u4e00\u53f0\u8ba1\u7b97\u673a\u4e0a\u751f\u6210\u4e00\u4e2a UUID\uff0c\u5728\u53e6\u4e00\u53f0\u8ba1\u7b97\u673a\u4e0a\u751f\u6210\u53e6\u4e00\u4e2a UUID\uff0c\u5b83\u4eec\u51e0\u4e4e \u4e0d\u53ef\u80fd \u5b8c\u5168\u76f8\u540c\u3002</p> <p>\u8fd9\u610f\u5473\u7740\uff0c\u4f60\u65e0\u9700\u7b49\u5f85\u6570\u636e\u5e93\u4e3a\u4f60\u751f\u6210 ID\uff0c\u53ef\u4ee5\u5728\u4ee3\u7801\u4e2d \u63d0\u524d\u751f\u6210 UUID \u5e76\u53d1\u9001\u5230\u6570\u636e\u5e93\uff0c\u56e0\u4e3a\u4f60\u53ef\u4ee5\u975e\u5e38\u786e\u5b9a\u5b83\u662f\u552f\u4e00\u7684\u3002</p> <p>\u6280\u672f\u7ec6\u8282</p> <p>\u7531\u4e8e\u53ef\u80fd\u7684 UUID \u6570\u91cf\u975e\u5e38\u5927\uff082^128\uff09\uff0c\u56e0\u6b64\u751f\u6210\u4e24\u4e2a\u76f8\u540c\u7684 UUID \u7248\u672c 4\uff08\u5373\u968f\u673a\u751f\u6210\u7684 UUID\uff09\u7684\u6982\u7387\u975e\u5e38\u4f4e\u3002</p> <p>\u5982\u679c\u4f60\u5728\u6570\u636e\u5e93\u4e2d\u5b58\u50a8\u4e86 103 \u4e07\u4ebf\u4e2a\u7248\u672c 4 \u7684 UUID\uff0c\u90a3\u4e48\u751f\u6210\u4e00\u4e2a\u91cd\u590d UUID \u7684\u6982\u7387\u662f\u5341\u4ebf\u5206\u4e4b\u4e00\u3002 \ud83e\udd13</p> <p>\u51fa\u4e8e\u540c\u6837\u7684\u539f\u56e0\uff0c\u5982\u679c\u4f60\u51b3\u5b9a\u8fc1\u79fb\u6570\u636e\u5e93\uff0c\u5c06\u5176\u4e0e\u53e6\u4e00\u4e2a\u6570\u636e\u5e93\u5408\u5e76\u6216\u6df7\u5408\u8bb0\u5f55\u7b49\uff0c\u4f60\u5f88\u53ef\u80fd \u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u539f\u6765\u7684 UUIDs\u3002</p> <p>Warning</p> <p>\u5c3d\u7ba1\u53d1\u751f\u78b0\u649e\u7684\u51e0\u7387\u975e\u5e38\u4f4e\uff0c\u4f46\u5b83\u4ecd\u7136\u5b58\u5728\u3002\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u4ee5\u5047\u8bbe\u4e0d\u4f1a\u53d1\u751f\u78b0\u649e\uff0c\u4f46\u505a\u597d\u51c6\u5907\u603b\u662f\u597d\u7684\u3002</p>"},{"location":"advanced/uuid/#uuids_2","title":"UUIDs \u9632\u6b62\u4fe1\u606f\u6cc4\u9732","text":"<p>\u7531\u4e8e UUID \u7248\u672c 4 \u662f \u968f\u673a\u7684\uff0c\u4f60\u53ef\u4ee5\u5c06\u8fd9\u4e9b ID \u53d1\u9001\u7ed9\u5e94\u7528\u7a0b\u5e8f\u7528\u6237\u6216\u5176\u4ed6\u7cfb\u7edf\uff0c\u800c\u4e0d\u4f1a\u66b4\u9732 \u5e94\u7528\u7a0b\u5e8f\u7684\u4efb\u4f55\u4fe1\u606f\u3002</p> <p>\u4f7f\u7528 \u81ea\u52a8\u9012\u589e\u7684\u6574\u6570 \u4f5c\u4e3a\u4e3b\u952e\u65f6\uff0c\u53ef\u80fd\u4f1a\u65e0\u610f\u4e2d\u66b4\u9732\u7cfb\u7edf\u4e2d\u7684\u4fe1\u606f\u3002\u4f8b\u5982\uff0c\u67d0\u4eba\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u82f1\u96c4\uff0c\u5e76\u901a\u8fc7\u83b7\u53d6\u82f1\u96c4 ID <code>20</code> \u63a8\u65ad\u51fa\u7cfb\u7edf\u4e2d\u6709 20 \u4e2a\u82f1\u96c4\uff08\u5982\u679c\u67d0\u4e9b\u82f1\u96c4\u5df2\u88ab\u5220\u9664\uff0c\u5b9e\u9645\u6570\u91cf\u53ef\u80fd\u66f4\u5c11\uff09\u3002</p>"},{"location":"advanced/uuid/#uuid_1","title":"UUID \u5b58\u50a8","text":"<p>\u7531\u4e8e UUID \u662f 16 \u5b57\u8282\uff0c\u5b83\u4eec\u5728\u6570\u636e\u5e93\u4e2d \u5360\u7528\u7684\u7a7a\u95f4\u6bd4\u8f83\u5927\uff0c\u6bd4\u81ea\u52a8\u9012\u589e\u7684\u6574\u6570\uff08\u901a\u5e38\u4e3a 4 \u5b57\u8282\uff09\u8981\u591a\u3002</p> <p>\u6839\u636e\u4f60\u4f7f\u7528\u7684\u6570\u636e\u5e93\uff0cUUIDs \u7684 \u6027\u80fd\u548c\u7a7a\u95f4\u4f7f\u7528 \u53ef\u80fd\u4f1a\u6709\u6240\u4e0d\u540c\u3002\u5982\u679c\u4f60\u5173\u5fc3\u8fd9\u4e9b\u95ee\u9898\uff0c\u5e94\u8be5\u67e5\u9605\u7279\u5b9a\u6570\u636e\u5e93\u7684\u6587\u6863\u3002</p> <p>SQLite \u6ca1\u6709\u4e13\u95e8\u7684 UUID \u7c7b\u578b\uff0c\u56e0\u6b64\u5b83\u4f1a\u5c06 UUID \u5b58\u50a8\u4e3a\u5b57\u7b26\u4e32\u3002\u5176\u4ed6\u6570\u636e\u5e93\uff0c\u5982 Postgres\uff0c\u6709\u4e13\u95e8\u7684 UUID \u7c7b\u578b\uff0c\u8fd9\u5c06\u6bd4\u5b57\u7b26\u4e32\u66f4\u8282\u7701\u7a7a\u95f4\u4e14\u6027\u80fd\u66f4\u597d\u3002</p>"},{"location":"advanced/uuid/#uuid_2","title":"\u4f7f\u7528 UUID \u7684\u6a21\u578b","text":"<p>\u4e3a\u4e86\u4f7f\u7528 UUID \u4f5c\u4e3a\u4e3b\u952e\uff0c\u6211\u4eec\u9700\u8981\u5bfc\u5165 <code>uuid</code>\uff0c\u5b83\u662f Python \u6807\u51c6\u5e93\u7684\u4e00\u90e8\u5206\uff08\u4e0d\u9700\u8981\u989d\u5916\u5b89\u88c5\uff09\uff0c\u5e76\u4f7f\u7528 <code>uuid.UUID</code> \u4f5c\u4e3a ID \u5b57\u6bb5\u7684 \u7c7b\u578b\u3002</p> <p>\u6211\u4eec\u8fd8\u5e0c\u671b Python \u4ee3\u7801 \u5728\u521b\u5efa\u65b0\u5b9e\u4f8b\u65f6\u751f\u6210\u65b0\u7684 UUID\uff0c\u6240\u4ee5\u6211\u4eec\u4f7f\u7528 <code>default_factory</code>\u3002</p> <p><code>default_factory</code> \u53c2\u6570\u63a5\u53d7\u4e00\u4e2a\u51fd\u6570\uff08\u6216\u8005\u4e00\u822c\u6765\u8bf4\u662f\u4e00\u4e2a \u201c\u53ef\u8c03\u7528\u201d \u5bf9\u8c61\uff09\u3002\u8fd9\u4e2a\u51fd\u6570\u4f1a\u5728\u521b\u5efa\u6a21\u578b\u7684\u65b0\u5b9e\u4f8b\u65f6 \u88ab\u8c03\u7528\uff0c\u5e76\u8fd4\u56de\u7684\u503c\u5c06\u4f5c\u4e3a\u5b57\u6bb5\u7684\u9ed8\u8ba4\u503c\u3002</p> <p>\u5bf9\u4e8e <code>default_factory</code> \u4e2d\u7684\u51fd\u6570\uff0c\u6211\u4eec\u4f20\u9012 <code>uuid.uuid4</code>\uff0c\u8fd9\u662f\u4e00\u4e2a\u751f\u6210 \u65b0\u7684 UUID \u7248\u672c 4 \u7684\u51fd\u6570\u3002</p> <p>Tip</p> <p>\u6211\u4eec\u5728\u4ee3\u7801\u4e2d\u4e0d\u4f1a\u81ea\u5df1\u8c03\u7528 <code>uuid.uuid4()</code>\uff08\u4e0d\u4f1a\u52a0\u62ec\u53f7\uff09\u3002\u76f8\u53cd\uff0c\u6211\u4eec\u53ea\u4f20\u9012\u51fd\u6570\u672c\u8eab\uff0c<code>uuid.uuid4</code>\uff0c\u4ee5\u4fbf SQLModel \u6bcf\u6b21\u521b\u5efa\u65b0\u5b9e\u4f8b\u65f6\u90fd\u80fd\u8c03\u7528\u5b83\u3002</p> <p>\u8fd9\u610f\u5473\u7740 UUID \u4f1a\u5728 Python \u4ee3\u7801\u4e2d\u751f\u6210\uff0c\u5728\u5c06\u6570\u636e\u53d1\u9001\u5230\u6570\u636e\u5e93\u4e4b\u524d\u3002</p> Python 3.10+ <pre><code>import uuid\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: uuid.UUID = Field(default_factory=uuid.uuid4, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview <pre><code>import uuid\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: uuid.UUID = Field(default_factory=uuid.uuid4, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_hero():\n    with Session(engine) as session:\n        hero = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n        print(\"The hero before saving in the DB\")\n        print(hero)\n        print(\"The hero ID was already set\")\n        print(hero.id)\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"After saving in the DB\")\n        print(hero)\n\n\ndef select_hero():\n    with Session(engine) as session:\n        hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_2)\n        session.commit()\n        session.refresh(hero_2)\n        hero_id = hero_2.id\n        print(\"Created hero:\")\n        print(hero_2)\n        print(\"Created hero ID:\")\n        print(hero_id)\n\n        statement = select(Hero).where(Hero.id == hero_id)\n        selected_hero = session.exec(statement).one()\n        print(\"Selected hero:\")\n        print(selected_hero)\n        print(\"Selected hero ID:\")\n        print(selected_hero.id)\n\n\ndef main() -&gt; None:\n    create_db_and_tables()\n    create_hero()\n    select_hero()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>import uuid\nfrom typing import Union\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: uuid.UUID = Field(default_factory=uuid.uuid4, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_hero():\n    with Session(engine) as session:\n        hero = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n        print(\"The hero before saving in the DB\")\n        print(hero)\n        print(\"The hero ID was already set\")\n        print(hero.id)\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"After saving in the DB\")\n        print(hero)\n\n\ndef select_hero():\n    with Session(engine) as session:\n        hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_2)\n        session.commit()\n        session.refresh(hero_2)\n        hero_id = hero_2.id\n        print(\"Created hero:\")\n        print(hero_2)\n        print(\"Created hero ID:\")\n        print(hero_id)\n\n        statement = select(Hero).where(Hero.id == hero_id)\n        selected_hero = session.exec(statement).one()\n        print(\"Selected hero:\")\n        print(selected_hero)\n        print(\"Selected hero ID:\")\n        print(selected_hero.id)\n\n\ndef main() -&gt; None:\n    create_db_and_tables()\n    create_hero()\n    select_hero()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Pydantic \u652f\u6301 <code>UUID</code> \u7c7b\u578b\u3002</p> <p>\u5bf9\u4e8e\u6570\u636e\u5e93\uff0cSQLModel \u5185\u90e8\u4f7f\u7528 SQLAlchemy \u7684 <code>Uuid</code> \u7c7b\u578b\u3002</p>"},{"location":"advanced/uuid/#uuid_3","title":"\u4f7f\u7528 UUID \u521b\u5efa\u8bb0\u5f55","text":"<p>\u521b\u5efa <code>Hero</code> \u8bb0\u5f55\u65f6\uff0c<code>id</code> \u5b57\u6bb5\u4f1a \u81ea\u52a8\u586b\u5145 \u65b0\u7684 UUID\uff0c\u56e0\u4e3a\u6211\u4eec\u8bbe\u7f6e\u4e86 <code>default_factory=uuid.uuid4</code>\u3002</p> <p>\u7531\u4e8e <code>uuid.uuid4</code> \u4f1a\u5728\u521b\u5efa\u6a21\u578b\u5b9e\u4f8b\u65f6\u88ab\u8c03\u7528\uff0c\u6240\u4ee5\u5373\u4f7f\u5728\u5c06\u6570\u636e\u53d1\u9001\u5230\u6570\u636e\u5e93\u4e4b\u524d\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5 \u7acb\u5373\u8bbf\u95ee\u5e76\u4f7f\u7528\u8fd9\u4e2a ID\u3002</p> <p>\u800c\u8fd9\u4e2a \u76f8\u540c\u7684 ID\uff08UUID\uff09 \u4f1a\u88ab\u4fdd\u5b58\u5230\u6570\u636e\u5e93\u4e2d\u3002</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\ndef create_hero():\n    with Session(engine) as session:\n        hero = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n        print(\"The hero before saving in the DB\")\n        print(hero)\n        print(\"The hero ID was already set\")\n        print(hero.id)\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"After saving in the DB\")\n        print(hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview <pre><code>import uuid\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: uuid.UUID = Field(default_factory=uuid.uuid4, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_hero():\n    with Session(engine) as session:\n        hero = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n        print(\"The hero before saving in the DB\")\n        print(hero)\n        print(\"The hero ID was already set\")\n        print(hero.id)\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"After saving in the DB\")\n        print(hero)\n\n\ndef select_hero():\n    with Session(engine) as session:\n        hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_2)\n        session.commit()\n        session.refresh(hero_2)\n        hero_id = hero_2.id\n        print(\"Created hero:\")\n        print(hero_2)\n        print(\"Created hero ID:\")\n        print(hero_id)\n\n        statement = select(Hero).where(Hero.id == hero_id)\n        selected_hero = session.exec(statement).one()\n        print(\"Selected hero:\")\n        print(selected_hero)\n        print(\"Selected hero ID:\")\n        print(selected_hero.id)\n\n\ndef main() -&gt; None:\n    create_db_and_tables()\n    create_hero()\n    select_hero()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>import uuid\nfrom typing import Union\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: uuid.UUID = Field(default_factory=uuid.uuid4, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_hero():\n    with Session(engine) as session:\n        hero = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n        print(\"The hero before saving in the DB\")\n        print(hero)\n        print(\"The hero ID was already set\")\n        print(hero.id)\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"After saving in the DB\")\n        print(hero)\n\n\ndef select_hero():\n    with Session(engine) as session:\n        hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_2)\n        session.commit()\n        session.refresh(hero_2)\n        hero_id = hero_2.id\n        print(\"Created hero:\")\n        print(hero_2)\n        print(\"Created hero ID:\")\n        print(hero_id)\n\n        statement = select(Hero).where(Hero.id == hero_id)\n        selected_hero = session.exec(statement).one()\n        print(\"Selected hero:\")\n        print(selected_hero)\n        print(\"Selected hero ID:\")\n        print(selected_hero.id)\n\n\ndef main() -&gt; None:\n    create_db_and_tables()\n    create_hero()\n    select_hero()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"advanced/uuid/#_1","title":"\u9009\u62e9\u4e00\u4e2a\u82f1\u96c4","text":"<p>\u6211\u4eec\u53ef\u4ee5\u5bf9 UUID \u8fdb\u884c\u4e0e\u5176\u4ed6\u5b57\u6bb5\u76f8\u540c\u7684\u64cd\u4f5c\u3002</p> <p>\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5 \u901a\u8fc7 ID \u9009\u62e9\u4e00\u4e2a\u82f1\u96c4\uff1a</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_hero():\n    with Session(engine) as session:\n        hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_2)\n        session.commit()\n        session.refresh(hero_2)\n        hero_id = hero_2.id\n        print(\"Created hero:\")\n        print(hero_2)\n        print(\"Created hero ID:\")\n        print(hero_id)\n\n        statement = select(Hero).where(Hero.id == hero_id)\n        selected_hero = session.exec(statement).one()\n        print(\"Selected hero:\")\n        print(selected_hero)\n        print(\"Selected hero ID:\")\n        print(selected_hero.id)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview <pre><code>import uuid\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: uuid.UUID = Field(default_factory=uuid.uuid4, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_hero():\n    with Session(engine) as session:\n        hero = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n        print(\"The hero before saving in the DB\")\n        print(hero)\n        print(\"The hero ID was already set\")\n        print(hero.id)\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"After saving in the DB\")\n        print(hero)\n\n\ndef select_hero():\n    with Session(engine) as session:\n        hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_2)\n        session.commit()\n        session.refresh(hero_2)\n        hero_id = hero_2.id\n        print(\"Created hero:\")\n        print(hero_2)\n        print(\"Created hero ID:\")\n        print(hero_id)\n\n        statement = select(Hero).where(Hero.id == hero_id)\n        selected_hero = session.exec(statement).one()\n        print(\"Selected hero:\")\n        print(selected_hero)\n        print(\"Selected hero ID:\")\n        print(selected_hero.id)\n\n\ndef main() -&gt; None:\n    create_db_and_tables()\n    create_hero()\n    select_hero()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>import uuid\nfrom typing import Union\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: uuid.UUID = Field(default_factory=uuid.uuid4, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_hero():\n    with Session(engine) as session:\n        hero = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n        print(\"The hero before saving in the DB\")\n        print(hero)\n        print(\"The hero ID was already set\")\n        print(hero.id)\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"After saving in the DB\")\n        print(hero)\n\n\ndef select_hero():\n    with Session(engine) as session:\n        hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_2)\n        session.commit()\n        session.refresh(hero_2)\n        hero_id = hero_2.id\n        print(\"Created hero:\")\n        print(hero_2)\n        print(\"Created hero ID:\")\n        print(hero_id)\n\n        statement = select(Hero).where(Hero.id == hero_id)\n        selected_hero = session.exec(statement).one()\n        print(\"Selected hero:\")\n        print(selected_hero)\n        print(\"Selected hero ID:\")\n        print(selected_hero.id)\n\n\ndef main() -&gt; None:\n    create_db_and_tables()\n    create_hero()\n    select_hero()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Tip</p> <p>\u5373\u4f7f\u50cf SQLite \u8fd9\u6837\u7684\u6570\u636e\u5e93\u5c06 UUID \u5b58\u50a8\u4e3a\u5b57\u7b26\u4e32\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528 Python \u7684 UUID \u5bf9\u8c61\u8fdb\u884c\u9009\u62e9\u548c\u6bd4\u8f83\uff0c\u5b83\u4ecd\u7136\u6709\u6548\u3002</p> <p>SQLModel\uff08\u5b9e\u9645\u4e0a\u662f SQLAlchemy\uff09\u4f1a\u5904\u7406\u8fd9\u4e9b\u64cd\u4f5c\u3002\u2728</p>"},{"location":"advanced/uuid/#sessionget","title":"\u4f7f\u7528 <code>session.get()</code> \u9009\u62e9","text":"<p>\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528 <code>session.get()</code> \u6309 ID \u8fdb\u884c\u9009\u62e9\uff1a</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_hero():\n    with Session(engine) as session:\n        hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_2)\n        session.commit()\n        session.refresh(hero_2)\n        hero_id = hero_2.id\n        print(\"Created hero:\")\n        print(hero_2)\n        print(\"Created hero ID:\")\n        print(hero_id)\n\n        selected_hero = session.get(Hero, hero_id)\n        print(\"Selected hero:\")\n        print(selected_hero)\n        print(\"Selected hero ID:\")\n        print(selected_hero.id)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview <pre><code>import uuid\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: uuid.UUID = Field(default_factory=uuid.uuid4, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_hero():\n    with Session(engine) as session:\n        hero = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n        print(\"The hero before saving in the DB\")\n        print(hero)\n        print(\"The hero ID was already set\")\n        print(hero.id)\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"After saving in the DB\")\n        print(hero)\n\n\ndef select_hero():\n    with Session(engine) as session:\n        hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_2)\n        session.commit()\n        session.refresh(hero_2)\n        hero_id = hero_2.id\n        print(\"Created hero:\")\n        print(hero_2)\n        print(\"Created hero ID:\")\n        print(hero_id)\n\n        selected_hero = session.get(Hero, hero_id)\n        print(\"Selected hero:\")\n        print(selected_hero)\n        print(\"Selected hero ID:\")\n        print(selected_hero.id)\n\n\ndef main() -&gt; None:\n    create_db_and_tables()\n    create_hero()\n    select_hero()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>import uuid\nfrom typing import Union\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: uuid.UUID = Field(default_factory=uuid.uuid4, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_hero():\n    with Session(engine) as session:\n        hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n        print(\"The hero before saving in the DB\")\n        print(hero_1)\n        print(\"The hero ID was already set\")\n        print(hero_1.id)\n        session.add(hero_1)\n        session.commit()\n        session.refresh(hero_1)\n        print(\"After saving in the DB\")\n        print(hero_1)\n\n\ndef select_hero():\n    with Session(engine) as session:\n        hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_2)\n        session.commit()\n        session.refresh(hero_2)\n        hero_id = hero_2.id\n        print(\"Created hero:\")\n        print(hero_2)\n        print(\"Created hero ID:\")\n        print(hero_id)\n\n        selected_hero = session.get(Hero, hero_id)\n        print(\"Selected hero:\")\n        print(selected_hero)\n        print(\"Selected hero ID:\")\n        print(selected_hero.id)\n\n\ndef main() -&gt; None:\n    create_db_and_tables()\n    create_hero()\n    select_hero()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u50cf\u5904\u7406\u5176\u4ed6\u5b57\u6bb5\u4e00\u6837\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u66f4\u65b0\u3001\u5220\u9664\u7b49\u3002\ud83d\ude80</p>"},{"location":"advanced/uuid/#_2","title":"\u8fd0\u884c\u7a0b\u5e8f","text":"<p>\u5982\u679c\u8fd0\u884c\u7a0b\u5e8f\uff0c\u4f60\u5c06\u770b\u5230 UUID \u5728 Python \u4ee3\u7801\u4e2d\u751f\u6210\uff0c\u5e76\u4e14\u8bb0\u5f55 \u4ee5\u76f8\u540c\u7684 UUID \u4fdd\u5b58\u5230\u6570\u636e\u5e93 \u4e2d\u3002</p> <pre><code>$ python app.py\n\n// \u4e00\u4e9b\u6a21\u677f\u548c\u524d\u9762\u7684\u8f93\u51fa\u7701\u7565 \ud83d\ude09\n\n// \u5728 SQLite \u4e2d\uff0cUUID \u4f1a\u4f5c\u4e3a\u5b57\u7b26\u4e32\u5b58\u50a8\n// \u5176\u4ed6\u6570\u636e\u5e93\u5982 Postgres \u6709\u4e13\u95e8\u7684 UUID \u7c7b\u578b\nCREATE TABLE hero (\n        id CHAR(32) NOT NULL,\n        name VARCHAR NOT NULL,\n        secret_name VARCHAR NOT NULL,\n        age INTEGER,\n        PRIMARY KEY (id)\n)\n\n// \u5728\u4fdd\u5b58\u5230\u6570\u636e\u5e93\u4e4b\u524d\uff0c\u6211\u4eec\u5df2\u7ecf\u6709\u4e86 UUID\nThe hero before saving in the DB\nname='Deadpond' secret_name='Dive Wilson' id=UUID('0e44c1a6-88d3-4a35-8b8a-307faa2def28') age=None\nThe hero ID was already set\n0e44c1a6-88d3-4a35-8b8a-307faa2def28\n\n// \u63d2\u5165\u8bb0\u5f55\u7684 SQL \u8bed\u53e5\u4f7f\u7528\u4e86\u6211\u4eec\u521b\u5efa\u7684 UUID\nINSERT INTO hero (id, name, secret_name, age) VALUES (?, ?, ?, ?)\n('0e44c1a688d34a358b8a307faa2def28', 'Deadpond', 'Dive Wilson', None)\n\n// \u8bb0\u5f55\u786e\u5b9e\u4f7f\u7528\u6211\u4eec\u521b\u5efa\u7684 UUID \u4fdd\u5b58\u4e86 \ud83d\ude0e\nAfter saving in the DB\nage=None id=UUID('0e44c1a6-88d3-4a35-8b8a-307faa2def28') name='Deadpond' secret_name='Dive Wilson'\n\n// \u73b0\u5728\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u65b0\u82f1\u96c4\uff08\u7a0d\u540e\u9009\u62e9\uff09\nCreated hero:\nage=None id=UUID('9d90d186-85db-4eaa-891a-def7b4ae2dab') name='Spider-Boy' secret_name='Pedro Parqueador'\nCreated hero ID:\n9d90d186-85db-4eaa-891a-def7b4ae2dab\n\n// \u7136\u540e\u6211\u4eec\u9009\u62e9\u5b83\nSelected hero:\nage=None id=UUID('9d90d186-85db-4eaa-891a-def7b4ae2dab') name='Spider-Boy' secret_name='Pedro Parqueador'\nSelected hero ID:\n9d90d186-85db-4eaa-891a-def7b4ae2dab\n</code></pre>"},{"location":"advanced/uuid/#_3","title":"\u4e86\u89e3\u66f4\u591a","text":"<p>\u4f60\u53ef\u4ee5\u4e86\u89e3\u66f4\u591a\u5173\u4e8e UUIDs \u7684\u4fe1\u606f\uff1a</p> <ul> <li>\u5b98\u65b9\u7684 Python UUID \u6587\u6863\u3002</li> <li>Wikipedia \u5173\u4e8e UUID \u7684\u4ecb\u7ecd\u3002</li> </ul>"},{"location":"learn/","title":"\u5b66\u4e60","text":"<p>\u5728\u8fd9\u91cc\u5b66\u4e60\u5982\u4f55\u4f7f\u7528 SQLModel\u3002</p> <p>\u5185\u5bb9\u5305\u62ec \u6570\u636e\u5e93\u3001SQL \u7684\u7b80\u4ecb\uff0c\u4ee5\u53ca\u5982\u4f55\u901a\u8fc7 **\u4ee3\u7801**\u4e0e\u6570\u636e\u5e93\u4ea4\u4e92\u7b49\u3002</p> <p>\u60a8\u53ef\u4ee5\u5c06\u5176\u89c6\u4e3a\u4e00\u672c**\u4e66**\u3001\u4e00\u95e8**\u8bfe\u7a0b**\uff0c\u4e5f\u662f\u5b66\u4e60 SQLModel \u7684**\u5b98\u65b9**\u4e14\u63a8\u8350\u7684\u65b9\u6cd5\u3002\ud83d\ude0e</p>"},{"location":"resources/","title":"\u8d44\u6e90","text":"<p>\u9644\u52a0\u8d44\u6e90\uff0c\u5982\u4f55 \u5e2e\u52a9 \u548c\u83b7\u53d6\u5e2e\u52a9\uff0c\u5982\u4f55 \u8d21\u732e\uff0c\u4ee5\u53ca\u66f4\u591a\u5185\u5bb9\u3002 \u2708\ufe0f</p>"},{"location":"tutorial/","title":"\u6559\u7a0b - \u7528\u6237\u6307\u5357","text":"<p>\u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u4f60\u5c06\u5b66\u4e60\u5982\u4f55\u4f7f\u7528 SQLModel\u3002</p>"},{"location":"tutorial/#_1","title":"\u7c7b\u578b\u63d0\u793a","text":"<p>\u5982\u679c\u4f60\u9700\u8981\u590d\u4e60\u5982\u4f55\u4f7f\u7528 Python \u7c7b\u578b\u63d0\u793a\uff08\u7c7b\u578b\u6ce8\u89e3\uff09\uff0c\u53ef\u4ee5\u67e5\u770b FastAPI \u7684 Python \u7c7b\u578b\u4ecb\u7ecd\u3002</p> <p>\u4f60\u4e5f\u53ef\u4ee5\u67e5\u770b mypy \u5907\u5fd8\u5355\u3002</p> <p>SQLModel \u4e3a\u6240\u6709\u5185\u5bb9\u90fd\u4f7f\u7528\u7c7b\u578b\u6ce8\u89e3\uff0c\u8fd9\u6837\u4f60\u53ef\u4ee5\u4f7f\u7528\u719f\u6089\u7684 Python \u8bed\u6cd5\uff0c\u5e76\u83b7\u5f97\u7f16\u8f91\u5668\u7684\u6240\u6709\u652f\u6301\uff0c\u5982\u81ea\u52a8\u8865\u5168\u548c\u7f16\u8f91\u5668\u5185\u9519\u8bef\u68c0\u67e5\u3002</p>"},{"location":"tutorial/#_2","title":"\u7b80\u4ecb","text":"<p>\u672c\u6559\u7a0b\u5c06\u4e00\u6b65\u6b65\u5c55\u793a\u5982\u4f55\u4f7f\u7528 SQLModel \u7684\u6240\u6709\u529f\u80fd\u3002</p> <p>\u6bcf\u4e2a\u7ae0\u8282\u90fd\u4f1a\u5728\u524d\u9762\u7684\u57fa\u7840\u4e0a\u9010\u6b65\u6784\u5efa\uff0c\u4f46\u5b83\u662f\u6309\u4e3b\u9898\u7ed3\u6784\u5316\u7684\uff0c\u56e0\u6b64\u4f60\u53ef\u4ee5\u76f4\u63a5\u8df3\u5230\u4efb\u4f55\u4e00\u4e2a\u5177\u4f53\u90e8\u5206\uff0c\u4ee5\u89e3\u51b3\u4f60\u7684\u7279\u5b9a\u9700\u6c42\u3002</p> <p>\u5b83\u8fd8\u88ab\u8bbe\u8ba1\u4e3a\u672a\u6765\u7684\u53c2\u8003\u8d44\u6599\u3002</p> <p>\u8fd9\u6837\uff0c\u4f60\u53ef\u4ee5\u56de\u6765\u67e5\u770b\u4f60\u9700\u8981\u7684\u5185\u5bb9\u3002</p>"},{"location":"tutorial/#_3","title":"\u8fd0\u884c\u4ee3\u7801","text":"<p>\u6240\u6709\u7684\u4ee3\u7801\u5757\u90fd\u53ef\u4ee5\u76f4\u63a5\u590d\u5236\u5e76\u4f7f\u7528\uff08\u5b83\u4eec\u662f\u7ecf\u8fc7\u6d4b\u8bd5\u7684 Python \u6587\u4ef6\uff09\u3002</p> <p>\u5f3a\u70c8\u5efa\u8bae\u4f60\u4eb2\u81ea\u7f16\u5199\u6216\u590d\u5236\u4ee3\u7801\u3001\u7f16\u8f91\u5e76\u5728\u672c\u5730\u8fd0\u884c\u3002</p> <p>\u5728\u7f16\u8f91\u5668\u4e2d\u4f7f\u7528\u8fd9\u4e9b\u4ee3\u7801\uff0c\u624d\u80fd\u771f\u6b63\u5c55\u793a SQLModel \u7684\u4f18\u52bf\uff0c\u770b\u5230\u5b83\u4e3a\u4f60\u8282\u7701\u4e86\u591a\u5c11\u4ee3\u7801\uff0c\u5e76\u4e14\u83b7\u5f97\u6240\u6709\u7684\u7f16\u8f91\u5668\u652f\u6301\uff0c\u5305\u62ec\u81ea\u52a8\u8865\u5168\u548c\u7f16\u8f91\u5668\u5185\u9519\u8bef\u68c0\u67e5\uff0c\u5e2e\u52a9\u4f60\u907f\u514d\u5f88\u591a bug\u3002</p> <p>\u8fd0\u884c\u793a\u4f8b\u4ee3\u7801\u5c06\u771f\u6b63\u5e2e\u52a9\u4f60\u7406\u89e3\u53d1\u751f\u4e86\u4ec0\u4e48\u3002</p> <p>\u901a\u8fc7\u8fd0\u884c\u4e00\u4e9b\u793a\u4f8b\u5e76\u8fdb\u884c\u5c1d\u8bd5\uff0c\u4f60\u5c06\u5b66\u5230\u6bd4\u9605\u8bfb\u8fd9\u91cc\u7684\u6240\u6709\u6587\u6863\u66f4\u591a\u7684\u4e1c\u897f\u3002</p>"},{"location":"tutorial/automatic-id-none-refresh/","title":"\u81ea\u52a8\u751f\u6210\u7684 ID\u3001<code>None</code> \u9ed8\u8ba4\u503c\u548c\u6570\u636e\u5237\u65b0","text":"<p>\u5728\u4e0a\u4e00\u7ae0\u4e2d\uff0c\u6211\u4eec\u5b66\u4e60\u4e86\u5982\u4f55\u4f7f\u7528 SQLModel \u5411\u6570\u636e\u5e93\u6dfb\u52a0\u884c\u3002</p> <p>\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u8be6\u7ec6\u63a2\u8ba8\u4e00\u4e0b\u4e3a\u4ec0\u4e48 <code>id</code> \u5b57\u6bb5\u5728\u6570\u636e\u5e93\u4e2d\u4f5c\u4e3a \u4e3b\u952e \u65f6 \u4e0d\u80fd\u4e3a <code>NULL</code>\uff0c\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u901a\u8fc7 <code>Field(primary_key=True)</code> \u58f0\u660e\u5b83\u3002</p> <p>\u7136\u800c\uff0c\u5728 Python \u4ee3\u7801\u4e2d\uff0c\u540c\u4e00\u4e2a <code>id</code> \u5b57\u6bb5\u5b9e\u9645\u4e0a \u53ef\u4ee5\u662f <code>None</code>\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u4f7f\u7528 <code>int | None</code>\uff08\u6216 <code>Optional[int]</code>\uff09\u58f0\u660e\u5176\u7c7b\u578b\uff0c\u5e76\u8bbe\u7f6e\u9ed8\u8ba4\u503c\u4e3a <code>Field(default=None)</code>\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4e0a\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n# \u4e0b\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n# \u4e0b\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    print(\"Before interacting with the database\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        print(\"After committing the session, show IDs\")\n        print(\"Hero 1 ID:\", hero_1.id)\n        print(\"Hero 2 ID:\", hero_2.id)\n        print(\"Hero 3 ID:\", hero_3.id)\n\n        print(\"After committing the session, show names\")\n        print(\"Hero 1 name:\", hero_1.name)\n        print(\"Hero 2 name:\", hero_2.name)\n        print(\"Hero 3 name:\", hero_3.name)\n\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n        session.refresh(hero_3)\n\n        print(\"After refreshing the heroes\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n    print(\"After the session closes\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    print(\"Before interacting with the database\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        print(\"After committing the session, show IDs\")\n        print(\"Hero 1 ID:\", hero_1.id)\n        print(\"Hero 2 ID:\", hero_2.id)\n        print(\"Hero 3 ID:\", hero_3.id)\n\n        print(\"After committing the session, show names\")\n        print(\"Hero 1 name:\", hero_1.name)\n        print(\"Hero 2 name:\", hero_2.name)\n        print(\"Hero 3 name:\", hero_3.name)\n\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n        session.refresh(hero_3)\n\n        print(\"After refreshing the heroes\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n    print(\"After the session closes\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u5c06\u8be6\u7ec6\u4ecb\u7ecd\u6570\u636e\u5e93\u4e0e Python \u4ee3\u7801\u4e4b\u95f4\u7684\u6570\u636e\u540c\u6b65\u3002</p> <p>\u6bd4\u5982\uff0c\u4ec0\u4e48\u65f6\u5019\u4f1a\u4ece\u6570\u636e\u5e93\u4e2d\u83b7\u53d6 <code>id</code> \u5b57\u6bb5\u7684\u5b9e\u9645 <code>int</code> \u503c\uff1f\u8ba9\u6211\u4eec\u4e00\u8d77\u6765\u63a2\u8ba8\u8fd9\u4e9b\u5185\u5bb9\u3002\ud83d\udc47</p>"},{"location":"tutorial/automatic-id-none-refresh/#hero","title":"\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 <code>Hero</code> \u5b9e\u4f8b","text":"<p>\u5f53\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 <code>Hero</code> \u5b9e\u4f8b\u65f6\uff0c\u6211\u4eec\u5e76\u6ca1\u6709\u8bbe\u7f6e <code>id</code>\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4e0a\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n# \u4e0b\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n# \u4e0b\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    print(\"Before interacting with the database\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        print(\"After committing the session, show IDs\")\n        print(\"Hero 1 ID:\", hero_1.id)\n        print(\"Hero 2 ID:\", hero_2.id)\n        print(\"Hero 3 ID:\", hero_3.id)\n\n        print(\"After committing the session, show names\")\n        print(\"Hero 1 name:\", hero_1.name)\n        print(\"Hero 2 name:\", hero_2.name)\n        print(\"Hero 3 name:\", hero_3.name)\n\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n        session.refresh(hero_3)\n\n        print(\"After refreshing the heroes\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n    print(\"After the session closes\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    print(\"Before interacting with the database\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        print(\"After committing the session, show IDs\")\n        print(\"Hero 1 ID:\", hero_1.id)\n        print(\"Hero 2 ID:\", hero_2.id)\n        print(\"Hero 3 ID:\", hero_3.id)\n\n        print(\"After committing the session, show names\")\n        print(\"Hero 1 name:\", hero_1.name)\n        print(\"Hero 2 name:\", hero_2.name)\n        print(\"Hero 3 name:\", hero_3.name)\n\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n        session.refresh(hero_3)\n\n        print(\"After refreshing the heroes\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n    print(\"After the session closes\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/automatic-id-none-refresh/#optional","title":"<code>Optional</code> \u5982\u4f55\u5e2e\u52a9","text":"<p>\u7531\u4e8e\u6211\u4eec\u6ca1\u6709\u8bbe\u7f6e <code>id</code>\uff0c\u5b83\u4f1a\u91c7\u7528\u6211\u4eec\u5728 <code>Field(default=None)</code> \u4e2d\u8bbe\u7f6e\u7684 Python \u9ed8\u8ba4\u503c <code>None</code>\u3002</p> <p>\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u4f7f\u7528 <code>Optional</code> \u5e76\u5c06\u9ed8\u8ba4\u503c\u8bbe\u7f6e\u4e3a <code>None</code> \u7684\u552f\u4e00\u539f\u56e0\u3002</p> <p>\u56e0\u4e3a\u5728\u4ee3\u7801\u7684\u8fd9\u4e00\u90e8\u5206\uff0c\u5728\u4e0e\u6570\u636e\u5e93\u4ea4\u4e92\u4e4b\u524d\uff0cPython \u7684\u503c\u5b9e\u9645\u4e0a\u53ef\u80fd\u662f <code>None</code>\u3002</p> <p>\u5982\u679c\u6211\u4eec\u5047\u8bbe <code>id</code> \u603b\u662f\u4e00\u4e2a <code>int</code>\uff0c\u5e76\u4e14\u6ca1\u6709\u4f7f\u7528 <code>Optional</code> \u6dfb\u52a0\u7c7b\u578b\u6ce8\u89e3\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u5199\u51fa\u9519\u8bef\u7684\u4ee3\u7801\uff0c\u4f8b\u5982\uff1a</p> <pre><code>next_hero_id = hero_1.id + 1\n</code></pre> <p>\u5982\u679c\u6211\u4eec\u5728\u5c06\u82f1\u96c4\u4fdd\u5b58\u5230\u6570\u636e\u5e93\u4e4b\u524d\u8fd0\u884c\u8fd9\u6bb5\u4ee3\u7801\uff0c\u5e76\u4e14 <code>hero_1.id</code> \u4ecd\u7136\u662f <code>None</code>\uff0c\u6211\u4eec\u4f1a\u5f97\u5230\u5982\u4e0b\u9519\u8bef\uff1a</p> <pre><code>TypeError: unsupported operand type(s) for +: 'NoneType' and 'int'\n</code></pre> <p>\u4f46\u662f\u901a\u8fc7\u4f7f\u7528 <code>Optional[int]</code> \u58f0\u660e\uff0c\u7f16\u8f91\u5668\u4f1a\u5e2e\u52a9\u6211\u4eec\u907f\u514d\u5199\u51fa\u9519\u8bef\u7684\u4ee3\u7801\uff0c\u5e76\u63d0\u9192\u6211\u4eec\u5982\u679c <code>hero_1.id</code> \u662f <code>None</code>\uff0c\u4ee3\u7801\u53ef\u80fd\u65e0\u6548\u3002\ud83d\udd0d</p>"},{"location":"tutorial/automatic-id-none-refresh/#id","title":"\u6253\u5370\u9ed8\u8ba4\u7684 <code>id</code> \u503c","text":"<p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728\u5c06\u82f1\u96c4\u6dfb\u52a0\u5230\u6570\u636e\u5e93\u4e4b\u524d\u6253\u5370\u5b83\u4eec\u6765\u786e\u8ba4\u8fd9\u4e00\u70b9\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4e0a\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    print(\"Before interacting with the database\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n# \u4e0b\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    print(\"Before interacting with the database\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n# \u4e0b\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    print(\"Before interacting with the database\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        print(\"After committing the session, show IDs\")\n        print(\"Hero 1 ID:\", hero_1.id)\n        print(\"Hero 2 ID:\", hero_2.id)\n        print(\"Hero 3 ID:\", hero_3.id)\n\n        print(\"After committing the session, show names\")\n        print(\"Hero 1 name:\", hero_1.name)\n        print(\"Hero 2 name:\", hero_2.name)\n        print(\"Hero 3 name:\", hero_3.name)\n\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n        session.refresh(hero_3)\n\n        print(\"After refreshing the heroes\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n    print(\"After the session closes\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    print(\"Before interacting with the database\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        print(\"After committing the session, show IDs\")\n        print(\"Hero 1 ID:\", hero_1.id)\n        print(\"Hero 2 ID:\", hero_2.id)\n        print(\"Hero 3 ID:\", hero_3.id)\n\n        print(\"After committing the session, show names\")\n        print(\"Hero 1 name:\", hero_1.name)\n        print(\"Hero 2 name:\", hero_2.name)\n        print(\"Hero 3 name:\", hero_3.name)\n\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n        session.refresh(hero_3)\n\n        print(\"After refreshing the heroes\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n    print(\"After the session closes\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u8f93\u51fa\u5c06\u662f\uff1a</p> <pre><code>$ python app.py\n\n// \u4e0a\u65b9\u8f93\u51fa\u7701\u7565 \ud83d\udc46\n\n\u5728\u4e0e\u6570\u636e\u5e93\u4ea4\u4e92\u4e4b\u524d\nHero 1: id=None name='Deadpond' secret_name='Dive Wilson' age=None\nHero 2: id=None name='Spider-Boy' secret_name='Pedro Parqueador' age=None\nHero 3: id=None name='Rusty-Man' secret_name='Tommy Sharp' age=48\n</code></pre> <p>\u6ce8\u610f\u5b83\u4eec\u7684 <code>id=None</code>\u3002</p> <p>\u8fd9\u662f\u6211\u4eec\u5728 <code>Hero</code> \u6a21\u578b\u7c7b\u4e2d\u5b9a\u4e49\u7684\u9ed8\u8ba4\u503c\u3002</p> <p>\u5f53\u6211\u4eec\u5c06\u8fd9\u4e9b\u5bf9\u8c61 <code>add</code> \u5230 session \u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f</p>"},{"location":"tutorial/automatic-id-none-refresh/#session","title":"\u5c06\u5bf9\u8c61\u6dfb\u52a0\u5230 Session","text":"<p>\u5728\u6211\u4eec\u5c06 <code>Hero</code> \u5b9e\u4f8b\u5bf9\u8c61\u6dfb\u52a0\u5230 session \u540e\uff0cID \u4ecd\u7136\u662f <code>None</code>\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 <code>with</code> \u5757\u521b\u5efa\u4e00\u4e2a session\uff0c\u6dfb\u52a0\u5bf9\u8c61\uff0c\u7136\u540e\u518d\u6b21\u6253\u5370\u5b83\u4eec\u6765\u9a8c\u8bc1\u8fd9\u4e00\u70b9\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4e0a\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    print(\"Before interacting with the database\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n# \u4e0b\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    print(\"Before interacting with the database\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n# \u4e0b\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    print(\"Before interacting with the database\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        print(\"After committing the session, show IDs\")\n        print(\"Hero 1 ID:\", hero_1.id)\n        print(\"Hero 2 ID:\", hero_2.id)\n        print(\"Hero 3 ID:\", hero_3.id)\n\n        print(\"After committing the session, show names\")\n        print(\"Hero 1 name:\", hero_1.name)\n        print(\"Hero 2 name:\", hero_2.name)\n        print(\"Hero 3 name:\", hero_3.name)\n\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n        session.refresh(hero_3)\n\n        print(\"After refreshing the heroes\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n    print(\"After the session closes\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    print(\"Before interacting with the database\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        print(\"After committing the session, show IDs\")\n        print(\"Hero 1 ID:\", hero_1.id)\n        print(\"Hero 2 ID:\", hero_2.id)\n        print(\"Hero 3 ID:\", hero_3.id)\n\n        print(\"After committing the session, show names\")\n        print(\"Hero 1 name:\", hero_1.name)\n        print(\"Hero 2 name:\", hero_2.name)\n        print(\"Hero 3 name:\", hero_3.name)\n\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n        session.refresh(hero_3)\n\n        print(\"After refreshing the heroes\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n    print(\"After the session closes\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u8fd9\u5c06\u518d\u6b21\u8f93\u51fa\u5bf9\u8c61\u7684 <code>id</code> \u4e3a <code>None</code>\uff1a</p> <pre><code>$ python app.py\n\n// \u4e0a\u65b9\u8f93\u51fa\u7701\u7565 \ud83d\udc46\n\n\u6dfb\u52a0\u5230 session \u540e\nHero 1: id=None name='Deadpond' secret_name='Dive Wilson' age=None\nHero 2: id=None name='Spider-Boy' secret_name='Pedro Parqueador' age=None\nHero 3: id=None name='Rusty-Man' secret_name='Tommy Sharp' age=48\n</code></pre> <p>\u6b63\u5982\u6211\u4eec\u4e4b\u524d\u6240\u89c1\uff0csession \u5f88\u667a\u80fd\uff0c\u4e0d\u4f1a\u5728\u6bcf\u6b21\u51c6\u5907\u66f4\u6539\u65f6\u90fd\u4e0e\u6570\u636e\u5e93\u901a\u4fe1\uff0c\u53ea\u6709\u5728\u6211\u4eec\u51c6\u5907\u597d\u5e76\u544a\u8bc9\u5b83 <code>commit</code> \u66f4\u6539\u65f6\uff0c\u5b83\u624d\u4f1a\u5c06\u6240\u6709 SQL \u53d1\u9001\u5230\u6570\u636e\u5e93\u4ee5\u5b58\u50a8\u6570\u636e\u3002</p>"},{"location":"tutorial/automatic-id-none-refresh/#_1","title":"\u63d0\u4ea4\u66f4\u6539\u5230\u6570\u636e\u5e93","text":"<p>\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u63d0\u4ea4 session \u4e2d\u7684\u66f4\u6539\uff0c\u5e76\u518d\u6b21\u6253\u5370\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4e0a\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n# \u4e0b\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n# \u4e0b\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    print(\"Before interacting with the database\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        print(\"After committing the session, show IDs\")\n        print(\"Hero 1 ID:\", hero_1.id)\n        print(\"Hero 2 ID:\", hero_2.id)\n        print(\"Hero 3 ID:\", hero_3.id)\n\n        print(\"After committing the session, show names\")\n        print(\"Hero 1 name:\", hero_1.name)\n        print(\"Hero 2 name:\", hero_2.name)\n        print(\"Hero 3 name:\", hero_3.name)\n\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n        session.refresh(hero_3)\n\n        print(\"After refreshing the heroes\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n    print(\"After the session closes\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    print(\"Before interacting with the database\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        print(\"After committing the session, show IDs\")\n        print(\"Hero 1 ID:\", hero_1.id)\n        print(\"Hero 2 ID:\", hero_2.id)\n        print(\"Hero 3 ID:\", hero_3.id)\n\n        print(\"After committing the session, show names\")\n        print(\"Hero 1 name:\", hero_1.name)\n        print(\"Hero 2 name:\", hero_2.name)\n        print(\"Hero 3 name:\", hero_3.name)\n\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n        session.refresh(hero_3)\n\n        print(\"After refreshing the heroes\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n    print(\"After the session closes\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u73b0\u5728\uff0c\u53d1\u751f\u4e86\u4e00\u4e9b\u610f\u60f3\u4e0d\u5230\u7684\u4e8b\u60c5\uff0c\u770b\u770b\u8f93\u51fa\uff0c\u4f3c\u4e4e <code>Hero</code> \u5b9e\u4f8b\u5bf9\u8c61\u6839\u672c\u6ca1\u6709\u6570\u636e\uff1a</p> <pre><code>$ python app.py\n\n// \u4e0a\u65b9\u8f93\u51fa\u7701\u7565 \ud83d\udc46\n\n// \u8fd9\u91cc\u662f\u5f15\u64ce\u4e0e\u6570\u636e\u5e93\u4ea4\u4e92\u7684\u90e8\u5206\uff0cSQL \u64cd\u4f5c\nINFO Engine BEGIN (implicit)\nINFO Engine INSERT INTO hero (name, secret_name, age) VALUES (?, ?, ?)\nINFO Engine [generated in 0.00018s] ('Deadpond', 'Dive Wilson', None)\nINFO Engine INSERT INTO hero (name, secret_name, age) VALUES (?, ?, ?)\nINFO Engine [cached since 0.0008968s ago] ('Spider-Boy', 'Pedro Parqueador', None)\nINFO Engine INSERT INTO hero (name, secret_name, age) VALUES (?, ?, ?)\nINFO Engine [cached since 0.001143s ago] ('Rusty-Man', 'Tommy Sharp', 48)\nINFO Engine COMMIT\n\n// \u73b0\u5728\u662f\u6211\u4eec\u7684\u6253\u5370\u8f93\u51fa\n\u63d0\u4ea4 session \u540e\nHero 1:\nHero 2:\nHero 3:\n\n// \u8fd9\u91cc\u53d1\u751f\u4e86\u4ec0\u4e48\uff1f\ud83d\ude31\n</code></pre> <p>\u53d1\u751f\u7684\u60c5\u51b5\u662f SQLModel\uff08\u5b9e\u9645\u4e0a\u662f SQLAlchemy\uff09\u5185\u90e8\u5c06\u8fd9\u4e9b\u5bf9\u8c61\u6807\u8bb0\u4e3a\u201c\u8fc7\u671f\u201d\uff0c\u5b83\u4eec \u6ca1\u6709\u6700\u65b0\u7248\u672c\u7684\u6570\u636e \u3002\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u53ef\u80fd\u5728\u6570\u636e\u5e93\u4e2d\u66f4\u65b0\u4e86\u4e00\u4e9b\u5b57\u6bb5\uff0c\u4f8b\u5982\uff0c\u5047\u8bbe\u6709\u4e00\u4e2a\u5b57\u6bb5 <code>updated_at: datetime</code>\uff0c\u5b83\u5728\u6211\u4eec\u4fdd\u5b58\u66f4\u6539\u65f6\u4f1a\u81ea\u52a8\u66f4\u65b0\u3002</p> <p>\u540c\u6837\uff0c\u5176\u4ed6\u503c\u4e5f\u53ef\u80fd\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u56e0\u6b64 session \u4e3a\u4e86\u786e\u4fdd\u5b89\u5168\uff0c\u4f1a\u5185\u90e8\u5c06\u5bf9\u8c61\u6807\u8bb0\u4e3a\u8fc7\u671f\u3002</p> <p>\u7136\u540e\uff0c\u4e0b\u6b21\u6211\u4eec\u8bbf\u95ee\u6bcf\u4e2a\u5c5e\u6027\u65f6\uff0c\u4f8b\u5982\uff1a</p> <pre><code>current_hero_name = hero_1.name\n</code></pre> <p>...SQLModel\uff08\u5b9e\u9645\u4e0a\u662f SQLAlchemy\uff09\u4f1a\u786e\u4fdd\u8054\u7cfb\u6570\u636e\u5e93\u5e76 \u83b7\u53d6\u6570\u636e\u7684\u6700\u65b0\u7248\u672c \uff0c\u66f4\u65b0\u5bf9\u8c61\u4e2d\u7684 <code>name</code> \u5b57\u6bb5\uff0c\u7136\u540e\u4f7f\u5176\u5bf9\u540e\u7eed\u7684 Python \u8868\u8fbe\u5f0f\u53ef\u7528\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0cPython \u4f1a\u7ee7\u7eed\u6267\u884c\uff0c\u5e76\u4f7f\u7528\u521a\u521a\u66f4\u65b0\u7684 <code>hero_1.name</code> \u503c\u5c06\u5176\u8d4b\u503c\u7ed9\u53d8\u91cf <code>current_hero_name</code>\u3002</p> <p>\u8fd9\u4e00\u5207\u90fd\u4f1a\u81ea\u52a8\u53d1\u751f\uff0c\u5e76\u4e14\u662f\u5e55\u540e\u8fdb\u884c\u7684\u3002\u2728</p> <p>\u800c\u4e14\u8fd9\u662f\u6211\u4eec\u793a\u4f8b\u4e2d\u7684\u6709\u8da3\u548c\u5947\u602a\u4e4b\u5904\uff1a</p> <pre><code>print(\"Hero 1:\", hero_1)\n</code></pre> <p>\u6211\u4eec\u5e76\u6ca1\u6709\u8bbf\u95ee\u5bf9\u8c61\u7684\u5c5e\u6027\uff0c\u5982 <code>hero.name</code>\u3002\u6211\u4eec\u53ea\u662f\u8bbf\u95ee\u4e86\u6574\u4e2a\u5bf9\u8c61\u5e76\u6253\u5370\u4e86\u5b83\uff0c\u6240\u4ee5 SQLAlchemy \u65e0\u6cd5\u77e5\u9053 \u6211\u4eec\u60f3\u8bbf\u95ee\u8be5\u5bf9\u8c61\u7684\u6570\u636e\u3002</p>"},{"location":"tutorial/automatic-id-none-refresh/#_2","title":"\u6253\u5370\u5355\u4e2a\u5b57\u6bb5","text":"<p>\u4e3a\u4e86\u786e\u8ba4\u548c\u7406\u89e3\u5f53\u8bbf\u95ee\u5c5e\u6027\u65f6\u5982\u4f55\u8fdb\u884c**\u81ea\u52a8\u8fc7\u671f\u548c\u6570\u636e\u5237\u65b0**\uff0c\u6211\u4eec\u53ef\u4ee5\u6253\u5370\u4e00\u4e9b\u5355\u72ec\u7684\u5b57\u6bb5\uff08\u5b9e\u4f8b\u5c5e\u6027\uff09\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4e0a\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        print(\"After committing the session, show IDs\")\n        print(\"Hero 1 ID:\", hero_1.id)\n        print(\"Hero 2 ID:\", hero_2.id)\n        print(\"Hero 3 ID:\", hero_3.id)\n\n        print(\"After committing the session, show names\")\n        print(\"Hero 1 name:\", hero_1.name)\n        print(\"Hero 2 name:\", hero_2.name)\n        print(\"Hero 3 name:\", hero_3.name)\n\n# \u4e0b\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        print(\"After committing the session, show IDs\")\n        print(\"Hero 1 ID:\", hero_1.id)\n        print(\"Hero 2 ID:\", hero_2.id)\n        print(\"Hero 3 ID:\", hero_3.id)\n\n        print(\"After committing the session, show names\")\n        print(\"Hero 1 name:\", hero_1.name)\n        print(\"Hero 2 name:\", hero_2.name)\n        print(\"Hero 3 name:\", hero_3.name)\n\n# \u4e0b\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    print(\"Before interacting with the database\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        print(\"After committing the session, show IDs\")\n        print(\"Hero 1 ID:\", hero_1.id)\n        print(\"Hero 2 ID:\", hero_2.id)\n        print(\"Hero 3 ID:\", hero_3.id)\n\n        print(\"After committing the session, show names\")\n        print(\"Hero 1 name:\", hero_1.name)\n        print(\"Hero 2 name:\", hero_2.name)\n        print(\"Hero 3 name:\", hero_3.name)\n\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n        session.refresh(hero_3)\n\n        print(\"After refreshing the heroes\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n    print(\"After the session closes\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    print(\"Before interacting with the database\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        print(\"After committing the session, show IDs\")\n        print(\"Hero 1 ID:\", hero_1.id)\n        print(\"Hero 2 ID:\", hero_2.id)\n        print(\"Hero 3 ID:\", hero_3.id)\n\n        print(\"After committing the session, show names\")\n        print(\"Hero 1 name:\", hero_1.name)\n        print(\"Hero 2 name:\", hero_2.name)\n        print(\"Hero 3 name:\", hero_3.name)\n\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n        session.refresh(hero_3)\n\n        print(\"After refreshing the heroes\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n    print(\"After the session closes\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u73b0\u5728\u6211\u4eec\u5b9e\u9645\u4e0a\u6b63\u5728\u8bbf\u95ee\u5c5e\u6027\uff0c\u56e0\u4e3a\u6211\u4eec\u4e0d\u518d\u6253\u5370\u6574\u4e2a\u5bf9\u8c61 <code>hero_1</code>\uff1a</p> <pre><code>print(\"Hero 1:\", hero_1)\n</code></pre> <p>...\u6211\u4eec\u73b0\u5728\u6253\u5370\u7684\u662f <code>hero.id</code> \u4e2d\u7684 <code>id</code> \u5c5e\u6027\uff1a</p> <pre><code>print(\"Hero 1 ID:\", hero_1.id)\n</code></pre> <p>\u901a\u8fc7\u8bbf\u95ee\u5c5e\u6027\uff0c\u8fd9**\u89e6\u53d1**\u4e86 SQLModel\uff08\u5b9e\u9645\u4e0a\u662f SQLAlchemy\uff09\u5728\u540e\u53f0\u8fdb\u884c\u5927\u91cf\u5de5\u4f5c\uff0c\u4ece\u6570\u636e\u5e93\u5237\u65b0\u6570\u636e\uff0c\u5c06\u5176\u8bbe\u7f6e\u5230\u5bf9\u8c61\u7684 <code>id</code> \u5c5e\u6027\u4e2d\uff0c\u5e76\u4f7f\u5176\u5728 Python \u8868\u8fbe\u5f0f\u4e2d\u53ef\u7528\uff08\u5728\u672c\u4f8b\u4e2d\u5c31\u662f\u6253\u5370\u51fa\u6765\uff09\u3002</p> <p>\u8ba9\u6211\u4eec\u770b\u770b\u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff1a</p> <pre><code>$ python app.py\n\n// \u4e0a\u65b9\u8f93\u51fa\u7701\u7565 \ud83d\udc46\n\n// \u63d0\u4ea4\u540e\uff0c\u5bf9\u8c61\u5df2\u8fc7\u671f\u4e14\u6ca1\u6709\u503c\n\u63d0\u4ea4 session \u540e\nHero 1:\nHero 2:\nHero 3:\n\n// \u73b0\u5728\u6211\u4eec\u5c06\u8bbf\u95ee\u50cf ID \u8fd9\u6837\u7684\u5c5e\u6027\uff0c\u8fd9\u662f\u7b2c\u4e00\u6b21\u6253\u5370\n\u63d0\u4ea4 session \u540e\uff0c\u663e\u793a ID\n\n// \u8bf7\u6ce8\u610f\uff0c\u5728\u6253\u5370\u7b2c\u4e00\u4e2a ID \u4e4b\u524d\uff0cSession \u4f1a\u8ba9 Engine \u53bb\u6570\u636e\u5e93\u5237\u65b0\u6570\u636e \ud83e\udd13\nINFO Engine BEGIN (implicit)\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [generated in 0.00017s] (1,)\n\n// \u8fd9\u662f\u6211\u4eec\u7684\u7b2c\u4e00\u6b21\u6253\u5370\uff0c\u73b0\u5728\u6211\u4eec\u6709\u4e86\u6570\u636e\u5e93\u751f\u6210\u7684 ID\nHero 1 ID: 1\n\n// \u5728\u6253\u5370\u4e0b\u4e00\u4e2a ID \u4e4b\u524d\uff0c\u5237\u65b0\u7b2c\u4e8c\u4e2a\u5bf9\u8c61\u7684\u6570\u636e\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.001245s ago] (2,)\n\n// \u8fd9\u662f\u6211\u4eec\u7684\u7b2c\u4e8c\u4e2a\u82f1\u96c4\u6253\u5370\uff0c\u5e26\u6709\u81ea\u52a8\u751f\u6210\u7684 ID\nHero 2 ID: 2\n\n// \u5728\u7b2c\u4e09\u4e2a\u6253\u5370\u4e4b\u524d\uff0c\u5237\u65b0\u5b83\u7684\u6570\u636e\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.002215s ago] (3,)\n\n// \u8fd9\u662f\u6211\u4eec\u7684\u7b2c\u4e09\u4e2a\u82f1\u96c4\u6253\u5370\nHero 3 ID: 3\n\n// \u5982\u679c\u6211\u4eec\u6253\u5370\u53e6\u4e00\u4e2a\u5c5e\u6027\uff0c\u6bd4\u5982\u540d\u5b57\u5462\uff1f\n\u63d0\u4ea4 session \u540e\uff0c\u663e\u793a\u540d\u5b57\nHero 1 name: Deadpond\nHero 2 name: Spider-Boy\nHero 3 name: Rusty-Man\n\n// \u56e0\u4e3a Session \u5df2\u7ecf\u5237\u65b0\u4e86\u8fd9\u4e9b\u5bf9\u8c61\u7684\u6240\u6709\u6570\u636e\uff0c\u5e76\u4e14 Session \u77e5\u9053\u5b83\u4eec\u6ca1\u6709\u8fc7\u671f\uff0c\u6240\u4ee5\u5b83\u4e0d\u9700\u8981\u518d\u6b21\u53bb\u6570\u636e\u5e93\u83b7\u53d6\u540d\u5b57 \ud83e\udd13\n</code></pre>"},{"location":"tutorial/automatic-id-none-refresh/#_3","title":"\u663e\u5f0f\u5237\u65b0\u5bf9\u8c61","text":"<p>\u4f60\u521a\u521a\u5b66\u4e60\u4e86\u5982\u4f55\u901a\u8fc7 session \u5728\u540e\u53f0\u81ea\u52a8\u5237\u65b0\u6570\u636e\uff0c\u5f53\u4f60\u8bbf\u95ee\u67d0\u4e2a\u5c5e\u6027\u65f6\uff0c\u6570\u636e\u4f1a\u4f5c\u4e3a\u526f\u4f5c\u7528\u88ab\u5237\u65b0\u3002</p> <p>\u4f46\u662f\u5982\u679c\u4f60\u60f3 \u663e\u5f0f\u5237\u65b0 \u6570\u636e\u600e\u4e48\u529e\u5462\uff1f</p> <p>\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 <code>session.refresh(object)</code> \u6765\u505a\u5230\u8fd9\u4e00\u70b9\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4e0a\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        print(\"After committing the session, show IDs\")\n        print(\"Hero 1 ID:\", hero_1.id)\n        print(\"Hero 2 ID:\", hero_2.id)\n        print(\"Hero 3 ID:\", hero_3.id)\n\n        print(\"After committing the session, show names\")\n        print(\"Hero 1 name:\", hero_1.name)\n        print(\"Hero 2 name:\", hero_2.name)\n        print(\"Hero 3 name:\", hero_3.name)\n\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n        session.refresh(hero_3)\n\n        print(\"After refreshing the heroes\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n# \u4e0b\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        print(\"After committing the session, show IDs\")\n        print(\"Hero 1 ID:\", hero_1.id)\n        print(\"Hero 2 ID:\", hero_2.id)\n        print(\"Hero 3 ID:\", hero_3.id)\n\n        print(\"After committing the session, show names\")\n        print(\"Hero 1 name:\", hero_1.name)\n        print(\"Hero 2 name:\", hero_2.name)\n        print(\"Hero 3 name:\", hero_3.name)\n\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n        session.refresh(hero_3)\n\n        print(\"After refreshing the heroes\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n# \u4e0b\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    print(\"Before interacting with the database\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        print(\"After committing the session, show IDs\")\n        print(\"Hero 1 ID:\", hero_1.id)\n        print(\"Hero 2 ID:\", hero_2.id)\n        print(\"Hero 3 ID:\", hero_3.id)\n\n        print(\"After committing the session, show names\")\n        print(\"Hero 1 name:\", hero_1.name)\n        print(\"Hero 2 name:\", hero_2.name)\n        print(\"Hero 3 name:\", hero_3.name)\n\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n        session.refresh(hero_3)\n\n        print(\"After refreshing the heroes\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n    print(\"After the session closes\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    print(\"Before interacting with the database\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        print(\"After committing the session, show IDs\")\n        print(\"Hero 1 ID:\", hero_1.id)\n        print(\"Hero 2 ID:\", hero_2.id)\n        print(\"Hero 3 ID:\", hero_3.id)\n\n        print(\"After committing the session, show names\")\n        print(\"Hero 1 name:\", hero_1.name)\n        print(\"Hero 2 name:\", hero_2.name)\n        print(\"Hero 3 name:\", hero_3.name)\n\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n        session.refresh(hero_3)\n\n        print(\"After refreshing the heroes\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n    print(\"After the session closes\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u5f53 Python \u6267\u884c\u4ee5\u4e0b\u4ee3\u7801\u65f6\uff1a</p> <pre><code>session.refresh(hero_1)\n</code></pre> <p>... session \u4f1a\u8ba9 engine \u4e0e\u6570\u636e\u5e93\u8fdb\u884c\u901a\u4fe1\uff0c\u83b7\u53d6\u8be5\u5bf9\u8c61 <code>hero_1</code> \u7684\u6700\u65b0\u6570\u636e\uff0c\u7136\u540e\u5c06\u6570\u636e\u653e\u5165 <code>hero_1</code> \u5bf9\u8c61\u4e2d\uff0c\u5e76\u5c06\u5176\u6807\u8bb0\u4e3a\u201c\u65b0\u9c9c\u201d\u6216\u201c\u672a\u8fc7\u671f\u201d\u3002</p> <p>\u4ee5\u4e0b\u662f\u8f93\u51fa\u7684\u6837\u5b50\uff1a</p> <pre><code>$ python app.py\n\n// \u4e0a\u65b9\u8f93\u51fa\u7701\u7565 \ud83d\udc46\n\n// \u7b2c\u4e00\u6b21\u5237\u65b0\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [generated in 0.00024s] (1,)\n\n// \u7b2c\u4e8c\u6b21\u5237\u65b0\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.001487s ago] (2,)\n\n// \u7b2c\u4e09\u6b21\u5237\u65b0\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.002377s ago] (3,)\n\n// \u73b0\u5728\u6253\u5370\u6570\u636e\uff0c\u7531\u4e8e\u6570\u636e\u5df2\u7ecf\u5237\u65b0\uff0cSession \u4e0d\u9700\u8981\u518d\u6b21\u5237\u65b0\n\u5237\u65b0\u82f1\u96c4\u540e\nHero 1: age=None id=1 name='Deadpond' secret_name='Dive Wilson'\nHero 2: age=None id=2 name='Spider-Boy' secret_name='Pedro Parqueador'\nHero 3: age=48 id=3 name='Rusty-Man' secret_name='Tommy Sharp'\n</code></pre> <p>\u8fd9\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u4f1a\u5f88\u6709\u7528\uff0c\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u6b63\u5728\u6784\u5efa\u4e00\u4e2a\u7528\u4e8e\u521b\u5efa\u82f1\u96c4\u7684 Web API\u3002\u5047\u8bbe\u4e00\u65e6\u521b\u5efa\u4e86\u67d0\u4e2a\u82f1\u96c4\u5e76\u4fdd\u5b58\u4e86\u4e00\u4e9b\u6570\u636e\uff0c\u4f60\u5c06\u5176\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u3002</p> <p>\u4f60\u4e0d\u5e0c\u671b\u8fd4\u56de\u4e00\u4e2a\u770b\u8d77\u6765\u7a7a\u7a7a\u7684\u5bf9\u8c61\uff0c\u56e0\u4e3a\u6ca1\u6709\u89e6\u53d1\u81ea\u52a8\u5237\u65b0\u6570\u636e\u7684\u673a\u5236\u3002</p> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u63d0\u4ea4\u5bf9\u8c61\u5230\u6570\u636e\u5e93\u540e\uff0c\u4f60\u53ef\u4ee5\u663e\u5f0f\u5237\u65b0\u5b83\uff0c\u7136\u540e\u5c06\u5176\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u3002\u8fd9\u5c06\u786e\u4fdd\u5bf9\u8c61\u5305\u542b\u6700\u65b0\u7684\u6570\u636e\u3002</p>"},{"location":"tutorial/automatic-id-none-refresh/#_4","title":"\u5173\u95ed\u4f1a\u8bdd\u540e\u6253\u5370\u6570\u636e","text":"<p>\u73b0\u5728\uff0c\u4f5c\u4e3a\u6700\u540e\u4e00\u4e2a\u5b9e\u9a8c\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u5728 \u4f1a\u8bdd \u5173\u95ed\u540e\u6253\u5370\u6570\u636e\u3002</p> <p>\u8fd9\u91cc\u6ca1\u6709\u4ec0\u4e48\u610f\u5916\uff0c\u4f9d\u7136\u80fd\u591f\u6b63\u5e38\u5de5\u4f5c\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4e0a\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        print(\"After committing the session, show IDs\")\n        print(\"Hero 1 ID:\", hero_1.id)\n        print(\"Hero 2 ID:\", hero_2.id)\n        print(\"Hero 3 ID:\", hero_3.id)\n\n        print(\"After committing the session, show names\")\n        print(\"Hero 1 name:\", hero_1.name)\n        print(\"Hero 2 name:\", hero_2.name)\n        print(\"Hero 3 name:\", hero_3.name)\n\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n        session.refresh(hero_3)\n\n        print(\"After refreshing the heroes\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n    print(\"After the session closes\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n# \u4e0b\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        print(\"After committing the session, show IDs\")\n        print(\"Hero 1 ID:\", hero_1.id)\n        print(\"Hero 2 ID:\", hero_2.id)\n        print(\"Hero 3 ID:\", hero_3.id)\n\n        print(\"After committing the session, show names\")\n        print(\"Hero 1 name:\", hero_1.name)\n        print(\"Hero 2 name:\", hero_2.name)\n        print(\"Hero 3 name:\", hero_3.name)\n\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n        session.refresh(hero_3)\n\n        print(\"After refreshing the heroes\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n    print(\"After the session closes\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n# \u4e0b\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    print(\"Before interacting with the database\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        print(\"After committing the session, show IDs\")\n        print(\"Hero 1 ID:\", hero_1.id)\n        print(\"Hero 2 ID:\", hero_2.id)\n        print(\"Hero 3 ID:\", hero_3.id)\n\n        print(\"After committing the session, show names\")\n        print(\"Hero 1 name:\", hero_1.name)\n        print(\"Hero 2 name:\", hero_2.name)\n        print(\"Hero 3 name:\", hero_3.name)\n\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n        session.refresh(hero_3)\n\n        print(\"After refreshing the heroes\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n    print(\"After the session closes\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    print(\"Before interacting with the database\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        print(\"After committing the session, show IDs\")\n        print(\"Hero 1 ID:\", hero_1.id)\n        print(\"Hero 2 ID:\", hero_2.id)\n        print(\"Hero 3 ID:\", hero_3.id)\n\n        print(\"After committing the session, show names\")\n        print(\"Hero 1 name:\", hero_1.name)\n        print(\"Hero 2 name:\", hero_2.name)\n        print(\"Hero 3 name:\", hero_3.name)\n\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n        session.refresh(hero_3)\n\n        print(\"After refreshing the heroes\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n    print(\"After the session closes\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u8f93\u51fa\u518d\u6b21\u663e\u793a\u76f8\u540c\u7684\u6570\u636e\uff1a</p> <pre><code>$ python app.py\n\n// \u4e0a\u65b9\u8f93\u51fa\u7701\u7565 \ud83d\udc46\n\n// \u5728\u5b8c\u6210 with \u5757\u540e\uff0c\u4f1a\u8bdd\u5df2\u5173\u95ed\uff0c\u5305\u62ec\u4efb\u4f55\u672a\u63d0\u4ea4\u7684\u6302\u8d77\u4e8b\u52a1\u7684\u56de\u6eda\nINFO Engine ROLLBACK\n\n// \u7136\u540e\u6211\u4eec\u6253\u5370\u6570\u636e\uff0c\u6b63\u5e38\u5de5\u4f5c\n\u4f1a\u8bdd\u5173\u95ed\u540e\nHero 1: age=None id=1 name='Deadpond' secret_name='Dive Wilson'\nHero 2: age=None id=2 name='Spider-Boy' secret_name='Pedro Parqueador'\nHero 3: age=48 id=3 name='Rusty-Man' secret_name='Tommy Sharp'\n</code></pre>"},{"location":"tutorial/automatic-id-none-refresh/#_5","title":"\u56de\u987e\u6240\u6709\u4ee3\u7801","text":"<p>\u73b0\u5728\u8ba9\u6211\u4eec\u518d\u6b21\u56de\u987e\u6240\u6709\u7684\u4ee3\u7801\u3002</p> <p>Tip</p> <p>\u6bcf\u4e2a\u7f16\u53f7\u6c14\u6ce1\u90fd\u4f1a\u663e\u793a\u8be5\u884c\u4ee3\u7801\u5728\u8f93\u51fa\u4e2d\u7684\u6253\u5370\u5185\u5bb9\u3002</p> <p>\u7531\u4e8e\u6211\u4eec\u5728\u521b\u5efa**\u5f15\u64ce**\u65f6\u4f7f\u7528\u4e86 <code>echo=True</code>\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5728\u6bcf\u4e2a\u6b65\u9aa4\u4e2d\u6267\u884c\u7684 SQL \u8bed\u53e5\u3002</p> Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")  # (1)!\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")  # (2)!\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)  # (3)!\n\n    print(\"Before interacting with the database\")  # (4)!\n    print(\"Hero 1:\", hero_1)  # (5)!\n    print(\"Hero 2:\", hero_2)  # (6)!\n    print(\"Hero 3:\", hero_3)  # (7)!\n\n    with Session(engine) as session:  # (8)!\n        session.add(hero_1)  # (9)!\n        session.add(hero_2)  # (10)!\n        session.add(hero_3)  # (11)!\n\n        print(\"After adding to the session\")  # (12)!\n        print(\"Hero 1:\", hero_1)  # (13)!\n        print(\"Hero 2:\", hero_2)  # (14)!\n        print(\"Hero 3:\", hero_3)  # (15)!\n\n        session.commit()  # (16)!\n\n        print(\"After committing the session\")  # (17)!\n        print(\"Hero 1:\", hero_1)  # (18)!\n        print(\"Hero 2:\", hero_2)  # (19)!\n        print(\"Hero 3:\", hero_3)  # (20)!\n\n        print(\"After committing the session, show IDs\")  # (21)!\n        print(\"Hero 1 ID:\", hero_1.id)  # (22)!\n        print(\"Hero 2 ID:\", hero_2.id)  # (23)!\n        print(\"Hero 3 ID:\", hero_3.id)  # (24)!\n\n        print(\"After committing the session, show names\")  # (25)!\n        print(\"Hero 1 name:\", hero_1.name)  # (26)!\n        print(\"Hero 2 name:\", hero_2.name)  # (27)!\n        print(\"Hero 3 name:\", hero_3.name)  # (28)!\n\n        session.refresh(hero_1)  # (29)!\n        session.refresh(hero_2)  # (30)!\n        session.refresh(hero_3)  # (31)!\n\n        print(\"After refreshing the heroes\")  # (32)!\n        print(\"Hero 1:\", hero_1)  # (33)!\n        print(\"Hero 2:\", hero_2)  # (34)!\n        print(\"Hero 3:\", hero_3)  # (35)!\n    # (36)!\n\n    print(\"After the session closes\")  # (37)!\n    print(\"Hero 1:\", hero_1)  # (38)!\n    print(\"Hero 2:\", hero_2)  # (39)!\n    print(\"Hero 3:\", hero_3)  # (40)!\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <ol> <li> <p>Create the <code>hero_1</code>.</p> <p>Doesn't generate any output.</p> </li> <li> <p>Create the <code>hero_2</code>.</p> <p>Doesn't generate any output.</p> </li> <li> <p>Create the <code>hero_3</code>.</p> <p>Doesn't generate any output.</p> </li> <li> <p>Print the line <code>\"Before interacting with the database\"</code>.</p> <p>Generates the output:</p> <pre><code>Before interacting with the database\n</code></pre> </li> <li> <p>Print the <code>hero_1</code> before interacting with the database.</p> <p>Generates the output:</p> <pre><code>Hero 1: id=None name='Deadpond' secret_name='Dive Wilson' age=None\n</code></pre> </li> <li> <p>Print the <code>hero_2</code> before interacting with the database.</p> <p>Generates the output:</p> <pre><code>Hero 2: id=None name='Spider-Boy' secret_name='Pedro Parqueador' age=None\n</code></pre> </li> <li> <p>Print the <code>hero_3</code> before interacting with the database.</p> <p>Generates the output:</p> <pre><code>Hero 3: id=None name='Rusty-Man' secret_name='Tommy Sharp' age=48\n</code></pre> </li> <li> <p>Create the <code>Session</code> in a <code>with</code> block.</p> <p>Doesn't generate any output.</p> </li> <li> <p>Add the <code>hero_1</code> to the session.</p> <p>This still doesn't save it to the database.</p> <p>Doesn't generate any output.</p> </li> <li> <p>Add the <code>hero_2</code> to the session.</p> <p>This still doesn't save it to the database.</p> <p>Doesn't generate any output.</p> </li> <li> <p>Add the <code>hero_3</code> to the session.</p> <p>This still doesn't save it to the database.</p> <p>Doesn't generate any output.</p> </li> <li> <p>Print the line <code>\"After adding to the session\"</code>.</p> <p>Generates the output:</p> <pre><code>After adding to the session\n</code></pre> </li> <li> <p>Print the <code>hero_1</code> after adding it to the session.</p> <p>It still has the same data as there hasn't been any interaction with the database yet. Notice that the <code>id</code> is still <code>None</code>.</p> <p>Generates the output:</p> <pre><code>Hero 1: id=None name='Deadpond' secret_name='Dive Wilson' age=None\n</code></pre> </li> <li> <p>Print the <code>hero_2</code> after adding it to the session.</p> <p>It still has the same data as there hasn't been any interaction with the database yet. Notice that the <code>id</code> is still <code>None</code>.</p> <p>Generates the output:</p> <pre><code>Hero 2: id=None name='Spider-Boy' secret_name='Pedro Parqueador' age=None\n</code></pre> </li> <li> <p>Print the <code>hero_3</code> after adding it to the session.</p> <p>It still has the same data as there hasn't been any interaction with the database yet. Notice that the <code>id</code> is still <code>None</code>.</p> <p>Generates the output:</p> <pre><code>Hero 3: id=None name='Rusty-Man' secret_name='Tommy Sharp' age=48\n</code></pre> </li> <li> <p><code>commit</code> the session.</p> <p>This will save all the data to the database. The session will use the engine to run a lot of SQL.</p> <p>Generates the output:</p> <pre><code>INFO Engine BEGIN (implicit)\nINFO Engine INSERT INTO hero (name, secret_name, age) VALUES (?, ?, ?)\nINFO Engine [generated in 0.00018s] ('Deadpond', 'Dive Wilson', None)\nINFO Engine INSERT INTO hero (name, secret_name, age) VALUES (?, ?, ?)\nINFO Engine [cached since 0.0008968s ago] ('Spider-Boy', 'Pedro Parqueador', None)\nINFO Engine INSERT INTO hero (name, secret_name, age) VALUES (?, ?, ?)\nINFO Engine [cached since 0.001143s ago] ('Rusty-Man', 'Tommy Sharp', 48)\nINFO Engine COMMIT\n</code></pre> </li> <li> <p>Print the line <code>\"After committing the session\"</code>.</p> <p>Generates the output:</p> <pre><code>After committing the session\n</code></pre> </li> <li> <p>Print the <code>hero_1</code> after committing the session.</p> <p>The <code>hero_1</code> is now internally marked as expired, and until it is refreshed, it looks like if it didn't contain any data.</p> <p>Generates the output:</p> <pre><code>Hero 1:\n</code></pre> </li> <li> <p>Print the <code>hero_2</code> after committing the session.</p> <p>The <code>hero_2</code> is now internally marked as expired, and until it is refreshed, it looks like if it didn't contain any data.</p> <p>Generates the output:</p> <pre><code>Hero 2:\n</code></pre> </li> <li> <p>Print the <code>hero_3</code> after committing the session.</p> <p>The <code>hero_3</code> is now internally marked as expired, and until it is refreshed, it looks like if it didn't contain any data.</p> <p>Generates the output:</p> <pre><code>Hero 3:\n</code></pre> </li> <li> <p>Print the line <code>\"After committing the session, show IDs\"</code>.</p> <p>Generates the output:</p> <pre><code>After committing the session, show IDs\n</code></pre> </li> <li> <p>Print the <code>hero_1.id</code>. A lot happens here.</p> <p>Because we are accessing the attribute <code>id</code> of <code>hero_1</code>, SQLModel (actually SQLAlchemy) can detect that we are trying to access data from the <code>hero_1</code>.</p> <p>It then detects that <code>hero_1</code> is currently associated with a session (because we added it to the session and committed it), and it is marked as expired.</p> <p>Then with the session, it uses the engine to execute all the SQL to fetch the data for this object from the database.</p> <p>Next it updates the object with the new data and marks it internally as \"fresh\" or \"not expired\".</p> <p>Finally, it makes the ID value available for the rest of the Python expression. In this case, the Python expression just prints the ID.</p> <p>Generates the output:</p> <pre><code>INFO Engine BEGIN (implicit)\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [generated in 0.00017s] (1,)\n\nHero 1 ID: 1\n</code></pre> </li> <li> <p>Print the <code>hero_2.id</code>.</p> <p>A lot happens here, all the same stuff that happened at point 22, but for this <code>hero_2</code> object.</p> <p>Generates the output:</p> <pre><code>INFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.001245s ago] (2,)\n\nHero 2 ID: 2\n</code></pre> </li> <li> <p>Print the <code>hero_3.id</code>.</p> <p>A lot happens here, all the same stuff that happened at point 22, but for this <code>hero_3</code> object.</p> <p>Generates the output:</p> <pre><code>INFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.002215s ago] (3,)\n\n\nHero 3 ID: 3\n</code></pre> </li> <li> <p>Print the line <code>\"After committing the session, show names\"</code>.</p> <p>Generates the output:</p> <pre><code>After committing the session, show names\n</code></pre> </li> <li> <p>Print the <code>hero_1.name</code>.</p> <p>Because <code>hero_1</code> is still fresh, no additional data is fetched, no additional SQL is executed, and the name is available.</p> <p>Generates the output:</p> <pre><code>Hero 1 name: Deadpond\n</code></pre> </li> <li> <p>Print the <code>hero_2.name</code>.</p> <p>Because <code>hero_2</code> is still fresh, no additional data is fetched, no additional SQL is executed, and the name is available.</p> <p>Generates the output:</p> <pre><code>Hero 2 name: Spider-Boy\n</code></pre> </li> <li> <p>Print the <code>hero_3.name</code>.</p> <p>Because <code>hero_3</code> is still fresh, no additional data is fetched, no additional SQL is executed, and the name is available.</p> <p>Generates the output:</p> <pre><code>Hero 3 name: Rusty-Man\n</code></pre> </li> <li> <p>Explicitly refresh the <code>hero_1</code> object.</p> <p>The session will use the engine to execute the SQL necessary to fetch fresh data from the database for the <code>hero_1</code> object.</p> <p>Generates the output:</p> <pre><code>INFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [generated in 0.00024s] (1,)\n</code></pre> </li> <li> <p>Explicitly refresh the <code>hero_2</code> object.</p> <p>The session will use the engine to execute the SQL necessary to fetch fresh data from the database for the <code>hero_2</code> object.</p> <p>Generates the output:</p> <pre><code>INFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.001487s ago] (2,)\n</code></pre> </li> <li> <p>Explicitly refresh the <code>hero_3</code> object.</p> <p>The session will use the engine to execute the SQL necessary to fetch fresh data from the database for the <code>hero_3</code> object.</p> <p>Generates the output:</p> <pre><code>INFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.002377s ago] (3,)\n</code></pre> </li> <li> <p>Print the line <code>\"After refreshing the heroes\"</code>.</p> <p>Generates the output:</p> <pre><code>After refreshing the heroes\n</code></pre> </li> <li> <p>Print the <code>hero_1</code>.</p> <p>Info</p> <p>Even if the <code>hero_1</code> wasn't fresh, this would not trigger a <code>refresh</code> making the session use the engine to fetch data from the database because it is not accessing an attribute.</p> <p>Because the <code>hero_1</code> is fresh it has all it's data available.</p> <p>Generates the output:</p> <pre><code>Hero 1: age=None id=1 name='Deadpond' secret_name='Dive Wilson'\n</code></pre> </li> <li> <p>Print the <code>hero_2</code>.</p> <p>Info</p> <p>Even if the <code>hero_2</code> wasn't fresh, this would not trigger a <code>refresh</code> making the session use the engine to fetch data from the database because it is not accessing an attribute.</p> <p>Because the <code>hero_2</code> is fresh it has all it's data available.</p> <p>Generates the output:</p> <pre><code>Hero 2: age=None id=2 name='Spider-Boy' secret_name='Pedro Parqueador'\n</code></pre> </li> <li> <p>Print the <code>hero_3</code>.</p> <p>Info</p> <p>Even if the <code>hero_3</code> wasn't fresh, this would not trigger a <code>refresh</code> making the session use the engine to fetch data from the database because it is not accessing an attribute.</p> <p>Because the <code>hero_3</code> is fresh it has all it's data available.</p> <p>Generates the output:</p> <pre><code>Hero 3: age=48 id=3 name='Rusty-Man' secret_name='Tommy Sharp'\n</code></pre> </li> <li> <p>The <code>with</code> block ends here (there's no more indented code), so the session is closed, running all it's closing code.</p> <p>This includes doing a <code>ROLLBACK</code> of any possible transaction that could have been started.</p> <p>Generates the output:</p> <pre><code>INFO Engine ROLLBACK\n</code></pre> </li> <li> <p>Print the line <code>\"After the session closes\"</code>.</p> <p>Generates the output:</p> <pre><code>After the session closes\n</code></pre> </li> <li> <p>Print the <code>hero_1</code> after closing the session.</p> <p>Generates the output:</p> <pre><code>Hero 1: age=None id=1 name='Deadpond' secret_name='Dive Wilson'\n</code></pre> </li> <li> <p>Print the <code>hero_2</code> after closing the session.</p> <p>Generates the output:</p> <pre><code>Hero 2: age=None id=2 name='Spider-Boy' secret_name='Pedro Parqueador'\n</code></pre> </li> <li> <p>Print the <code>hero_3</code> after closing the session.</p> <p>Generates the output:</p> <pre><code>Hero 3: age=48 id=3 name='Rusty-Man' secret_name='Tommy Sharp'\n</code></pre> </li> </ol> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")  # (1)!\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")  # (2)!\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)  # (3)!\n\n    print(\"Before interacting with the database\")  # (4)!\n    print(\"Hero 1:\", hero_1)  # (5)!\n    print(\"Hero 2:\", hero_2)  # (6)!\n    print(\"Hero 3:\", hero_3)  # (7)!\n\n    with Session(engine) as session:  # (8)!\n        session.add(hero_1)  # (9)!\n        session.add(hero_2)  # (10)!\n        session.add(hero_3)  # (11)!\n\n        print(\"After adding to the session\")  # (12)!\n        print(\"Hero 1:\", hero_1)  # (13)!\n        print(\"Hero 2:\", hero_2)  # (14)!\n        print(\"Hero 3:\", hero_3)  # (15)!\n\n        session.commit()  # (16)!\n\n        print(\"After committing the session\")  # (17)!\n        print(\"Hero 1:\", hero_1)  # (18)!\n        print(\"Hero 2:\", hero_2)  # (19)!\n        print(\"Hero 3:\", hero_3)  # (20)!\n\n        print(\"After committing the session, show IDs\")  # (21)!\n        print(\"Hero 1 ID:\", hero_1.id)  # (22)!\n        print(\"Hero 2 ID:\", hero_2.id)  # (23)!\n        print(\"Hero 3 ID:\", hero_3.id)  # (24)!\n\n        print(\"After committing the session, show names\")  # (25)!\n        print(\"Hero 1 name:\", hero_1.name)  # (26)!\n        print(\"Hero 2 name:\", hero_2.name)  # (27)!\n        print(\"Hero 3 name:\", hero_3.name)  # (28)!\n\n        session.refresh(hero_1)  # (29)!\n        session.refresh(hero_2)  # (30)!\n        session.refresh(hero_3)  # (31)!\n\n        print(\"After refreshing the heroes\")  # (32)!\n        print(\"Hero 1:\", hero_1)  # (33)!\n        print(\"Hero 2:\", hero_2)  # (34)!\n        print(\"Hero 3:\", hero_3)  # (35)!\n    # (36)!\n\n    print(\"After the session closes\")  # (37)!\n    print(\"Hero 1:\", hero_1)  # (38)!\n    print(\"Hero 2:\", hero_2)  # (39)!\n    print(\"Hero 3:\", hero_3)  # (40)!\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <ol> <li> <p>Create the <code>hero_1</code>.</p> <p>Doesn't generate any output.</p> </li> <li> <p>Create the <code>hero_2</code>.</p> <p>Doesn't generate any output.</p> </li> <li> <p>Create the <code>hero_3</code>.</p> <p>Doesn't generate any output.</p> </li> <li> <p>Print the line <code>\"Before interacting with the database\"</code>.</p> <p>Generates the output:</p> <pre><code>Before interacting with the database\n</code></pre> </li> <li> <p>Print the <code>hero_1</code> before interacting with the database.</p> <p>Generates the output:</p> <pre><code>Hero 1: id=None name='Deadpond' secret_name='Dive Wilson' age=None\n</code></pre> </li> <li> <p>Print the <code>hero_2</code> before interacting with the database.</p> <p>Generates the output:</p> <pre><code>Hero 2: id=None name='Spider-Boy' secret_name='Pedro Parqueador' age=None\n</code></pre> </li> <li> <p>Print the <code>hero_3</code> before interacting with the database.</p> <p>Generates the output:</p> <pre><code>Hero 3: id=None name='Rusty-Man' secret_name='Tommy Sharp' age=48\n</code></pre> </li> <li> <p>Create the <code>Session</code> in a <code>with</code> block.</p> <p>Doesn't generate any output.</p> </li> <li> <p>Add the <code>hero_1</code> to the session.</p> <p>This still doesn't save it to the database.</p> <p>Doesn't generate any output.</p> </li> <li> <p>Add the <code>hero_2</code> to the session.</p> <p>This still doesn't save it to the database.</p> <p>Doesn't generate any output.</p> </li> <li> <p>Add the <code>hero_3</code> to the session.</p> <p>This still doesn't save it to the database.</p> <p>Doesn't generate any output.</p> </li> <li> <p>Print the line <code>\"After adding to the session\"</code>.</p> <p>Generates the output:</p> <pre><code>After adding to the session\n</code></pre> </li> <li> <p>Print the <code>hero_1</code> after adding it to the session.</p> <p>It still has the same data as there hasn't been any interaction with the database yet. Notice that the <code>id</code> is still <code>None</code>.</p> <p>Generates the output:</p> <pre><code>Hero 1: id=None name='Deadpond' secret_name='Dive Wilson' age=None\n</code></pre> </li> <li> <p>Print the <code>hero_2</code> after adding it to the session.</p> <p>It still has the same data as there hasn't been any interaction with the database yet. Notice that the <code>id</code> is still <code>None</code>.</p> <p>Generates the output:</p> <pre><code>Hero 2: id=None name='Spider-Boy' secret_name='Pedro Parqueador' age=None\n</code></pre> </li> <li> <p>Print the <code>hero_3</code> after adding it to the session.</p> <p>It still has the same data as there hasn't been any interaction with the database yet. Notice that the <code>id</code> is still <code>None</code>.</p> <p>Generates the output:</p> <pre><code>Hero 3: id=None name='Rusty-Man' secret_name='Tommy Sharp' age=48\n</code></pre> </li> <li> <p><code>commit</code> the session.</p> <p>This will save all the data to the database. The session will use the engine to run a lot of SQL.</p> <p>Generates the output:</p> <pre><code>INFO Engine BEGIN (implicit)\nINFO Engine INSERT INTO hero (name, secret_name, age) VALUES (?, ?, ?)\nINFO Engine [generated in 0.00018s] ('Deadpond', 'Dive Wilson', None)\nINFO Engine INSERT INTO hero (name, secret_name, age) VALUES (?, ?, ?)\nINFO Engine [cached since 0.0008968s ago] ('Spider-Boy', 'Pedro Parqueador', None)\nINFO Engine INSERT INTO hero (name, secret_name, age) VALUES (?, ?, ?)\nINFO Engine [cached since 0.001143s ago] ('Rusty-Man', 'Tommy Sharp', 48)\nINFO Engine COMMIT\n</code></pre> </li> <li> <p>Print the line <code>\"After committing the session\"</code>.</p> <p>Generates the output:</p> <pre><code>After committing the session\n</code></pre> </li> <li> <p>Print the <code>hero_1</code> after committing the session.</p> <p>The <code>hero_1</code> is now internally marked as expired, and until it is refreshed, it looks like if it didn't contain any data.</p> <p>Generates the output:</p> <pre><code>Hero 1:\n</code></pre> </li> <li> <p>Print the <code>hero_2</code> after committing the session.</p> <p>The <code>hero_2</code> is now internally marked as expired, and until it is refreshed, it looks like if it didn't contain any data.</p> <p>Generates the output:</p> <pre><code>Hero 2:\n</code></pre> </li> <li> <p>Print the <code>hero_3</code> after committing the session.</p> <p>The <code>hero_3</code> is now internally marked as expired, and until it is refreshed, it looks like if it didn't contain any data.</p> <p>Generates the output:</p> <pre><code>Hero 3:\n</code></pre> </li> <li> <p>Print the line <code>\"After committing the session, show IDs\"</code>.</p> <p>Generates the output:</p> <pre><code>After committing the session, show IDs\n</code></pre> </li> <li> <p>Print the <code>hero_1.id</code>. A lot happens here.</p> <p>Because we are accessing the attribute <code>id</code> of <code>hero_1</code>, SQLModel (actually SQLAlchemy) can detect that we are trying to access data from the <code>hero_1</code>.</p> <p>It then detects that <code>hero_1</code> is currently associated with a session (because we added it to the session and committed it), and it is marked as expired.</p> <p>Then with the session, it uses the engine to execute all the SQL to fetch the data for this object from the database.</p> <p>Next it updates the object with the new data and marks it internally as \"fresh\" or \"not expired\".</p> <p>Finally, it makes the ID value available for the rest of the Python expression. In this case, the Python expression just prints the ID.</p> <p>Generates the output:</p> <pre><code>INFO Engine BEGIN (implicit)\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [generated in 0.00017s] (1,)\n\nHero 1 ID: 1\n</code></pre> </li> <li> <p>Print the <code>hero_2.id</code>.</p> <p>A lot happens here, all the same stuff that happened at point 22, but for this <code>hero_2</code> object.</p> <p>Generates the output:</p> <pre><code>INFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.001245s ago] (2,)\n\nHero 2 ID: 2\n</code></pre> </li> <li> <p>Print the <code>hero_3.id</code>.</p> <p>A lot happens here, all the same stuff that happened at point 22, but for this <code>hero_3</code> object.</p> <p>Generates the output:</p> <pre><code>INFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.002215s ago] (3,)\n\n\nHero 3 ID: 3\n</code></pre> </li> <li> <p>Print the line <code>\"After committing the session, show names\"</code>.</p> <p>Generates the output:</p> <pre><code>After committing the session, show names\n</code></pre> </li> <li> <p>Print the <code>hero_1.name</code>.</p> <p>Because <code>hero_1</code> is still fresh, no additional data is fetched, no additional SQL is executed, and the name is available.</p> <p>Generates the output:</p> <pre><code>Hero 1 name: Deadpond\n</code></pre> </li> <li> <p>Print the <code>hero_2.name</code>.</p> <p>Because <code>hero_2</code> is still fresh, no additional data is fetched, no additional SQL is executed, and the name is available.</p> <p>Generates the output:</p> <pre><code>Hero 2 name: Spider-Boy\n</code></pre> </li> <li> <p>Print the <code>hero_3.name</code>.</p> <p>Because <code>hero_3</code> is still fresh, no additional data is fetched, no additional SQL is executed, and the name is available.</p> <p>Generates the output:</p> <pre><code>Hero 3 name: Rusty-Man\n</code></pre> </li> <li> <p>Explicitly refresh the <code>hero_1</code> object.</p> <p>The session will use the engine to execute the SQL necessary to fetch fresh data from the database for the <code>hero_1</code> object.</p> <p>Generates the output:</p> <pre><code>INFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [generated in 0.00024s] (1,)\n</code></pre> </li> <li> <p>Explicitly refresh the <code>hero_2</code> object.</p> <p>The session will use the engine to execute the SQL necessary to fetch fresh data from the database for the <code>hero_2</code> object.</p> <p>Generates the output:</p> <pre><code>INFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.001487s ago] (2,)\n</code></pre> </li> <li> <p>Explicitly refresh the <code>hero_3</code> object.</p> <p>The session will use the engine to execute the SQL necessary to fetch fresh data from the database for the <code>hero_3</code> object.</p> <p>Generates the output:</p> <pre><code>INFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.002377s ago] (3,)\n</code></pre> </li> <li> <p>Print the line <code>\"After refreshing the heroes\"</code>.</p> <p>Generates the output:</p> <pre><code>After refreshing the heroes\n</code></pre> </li> <li> <p>Print the <code>hero_1</code>.</p> <p>Info</p> <p>Even if the <code>hero_1</code> wasn't fresh, this would not trigger a <code>refresh</code> making the session use the engine to fetch data from the database because it is not accessing an attribute.</p> <p>Because the <code>hero_1</code> is fresh it has all it's data available.</p> <p>Generates the output:</p> <pre><code>Hero 1: age=None id=1 name='Deadpond' secret_name='Dive Wilson'\n</code></pre> </li> <li> <p>Print the <code>hero_2</code>.</p> <p>Info</p> <p>Even if the <code>hero_2</code> wasn't fresh, this would not trigger a <code>refresh</code> making the session use the engine to fetch data from the database because it is not accessing an attribute.</p> <p>Because the <code>hero_2</code> is fresh it has all it's data available.</p> <p>Generates the output:</p> <pre><code>Hero 2: age=None id=2 name='Spider-Boy' secret_name='Pedro Parqueador'\n</code></pre> </li> <li> <p>Print the <code>hero_3</code>.</p> <p>Info</p> <p>Even if the <code>hero_3</code> wasn't fresh, this would not trigger a <code>refresh</code> making the session use the engine to fetch data from the database because it is not accessing an attribute.</p> <p>Because the <code>hero_3</code> is fresh it has all it's data available.</p> <p>Generates the output:</p> <pre><code>Hero 3: age=48 id=3 name='Rusty-Man' secret_name='Tommy Sharp'\n</code></pre> </li> <li> <p>The <code>with</code> block ends here (there's no more indented code), so the session is closed, running all it's closing code.</p> <p>This includes doing a <code>ROLLBACK</code> of any possible transaction that could have been started.</p> <p>Generates the output:</p> <pre><code>INFO Engine ROLLBACK\n</code></pre> </li> <li> <p>Print the line <code>\"After the session closes\"</code>.</p> <p>Generates the output:</p> <pre><code>After the session closes\n</code></pre> </li> <li> <p>Print the <code>hero_1</code> after closing the session.</p> <p>Generates the output:</p> <pre><code>Hero 1: age=None id=1 name='Deadpond' secret_name='Dive Wilson'\n</code></pre> </li> <li> <p>Print the <code>hero_2</code> after closing the session.</p> <p>Generates the output:</p> <pre><code>Hero 2: age=None id=2 name='Spider-Boy' secret_name='Pedro Parqueador'\n</code></pre> </li> <li> <p>Print the <code>hero_3</code> after closing the session.</p> <p>Generates the output:</p> <pre><code>Hero 3: age=48 id=3 name='Rusty-Man' secret_name='Tommy Sharp'\n</code></pre> </li> </ol> <p>\u4ee5\u4e0b\u662f\u8fd0\u884c\u8be5\u7a0b\u5e8f\u65f6\u751f\u6210\u7684\u6240\u6709\u8f93\u51fa\uff1a</p> <pre><code>$ python app.py\n\nINFO Engine BEGIN (implicit)\nINFO Engine PRAGMA main.table_info(\"hero\")\nINFO Engine [raw sql] ()\nINFO Engine PRAGMA temp.table_info(\"hero\")\nINFO Engine [raw sql] ()\nINFO Engine\nCREATE TABLE hero (\n        id INTEGER,\n        name VARCHAR NOT NULL,\n        secret_name VARCHAR NOT NULL,\n        age INTEGER,\n        PRIMARY KEY (id)\n)\n\n\nINFO Engine [no key 0.00018s] ()\nINFO Engine COMMIT\nBefore interacting with the database\nHero 1: id=None name='Deadpond' secret_name='Dive Wilson' age=None\nHero 2: id=None name='Spider-Boy' secret_name='Pedro Parqueador' age=None\nHero 3: id=None name='Rusty-Man' secret_name='Tommy Sharp' age=48\nAfter adding to the session\nHero 1: id=None name='Deadpond' secret_name='Dive Wilson' age=None\nHero 2: id=None name='Spider-Boy' secret_name='Pedro Parqueador' age=None\nHero 3: id=None name='Rusty-Man' secret_name='Tommy Sharp' age=48\nINFO Engine BEGIN (implicit)\nINFO Engine INSERT INTO hero (name, secret_name, age) VALUES (?, ?, ?)\nINFO Engine [generated in 0.00022s] ('Deadpond', 'Dive Wilson', None)\nINFO Engine INSERT INTO hero (name, secret_name, age) VALUES (?, ?, ?)\nINFO Engine [cached since 0.001127s ago] ('Spider-Boy', 'Pedro Parqueador', None)\nINFO Engine INSERT INTO hero (name, secret_name, age) VALUES (?, ?, ?)\nINFO Engine [cached since 0.001483s ago] ('Rusty-Man', 'Tommy Sharp', 48)\nINFO Engine COMMIT\nAfter committing the session\nHero 1:\nHero 2:\nHero 3:\nAfter committing the session, show IDs\nINFO Engine BEGIN (implicit)\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [generated in 0.00029s] (1,)\nHero 1 ID: 1\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.002132s ago] (2,)\nHero 2 ID: 2\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.003367s ago] (3,)\nHero 3 ID: 3\nAfter committing the session, show names\nHero 1 name: Deadpond\nHero 2 name: Spider-Boy\nHero 3 name: Rusty-Man\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [generated in 0.00025s] (1,)\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.001583s ago] (2,)\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.002722s ago] (3,)\nAfter refreshing the heroes\nHero 1: age=None id=1 name='Deadpond' secret_name='Dive Wilson'\nHero 2: age=None id=2 name='Spider-Boy' secret_name='Pedro Parqueador'\nHero 3: age=48 id=3 name='Rusty-Man' secret_name='Tommy Sharp'\nINFO Engine ROLLBACK\nAfter the session closes\nHero 1: age=None id=1 name='Deadpond' secret_name='Dive Wilson'\nHero 2: age=None id=2 name='Spider-Boy' secret_name='Pedro Parqueador'\nHero 3: age=48 id=3 name='Rusty-Man' secret_name='Tommy Sharp'\n</code></pre>"},{"location":"tutorial/automatic-id-none-refresh/#_6","title":"\u56de\u987e","text":"<p>\u4f60\u8bfb\u5b8c\u4e86\u6240\u6709\u8fd9\u4e9b\u5185\u5bb9\uff01\u771f\u662f\u5f88\u591a\u554a\uff01\u6765\u5757\u86cb\u7cd5\u5956\u52b1\u4e00\u4e0b\u81ea\u5df1\u5427\uff0c\u4f60\u503c\u5f97\u62e5\u6709\u3002\ud83c\udf70</p> <p>\u6211\u4eec\u8ba8\u8bba\u4e86 \u4f1a\u8bdd \u5982\u4f55\u4f7f\u7528 \u5f15\u64ce \u5411\u6570\u636e\u5e93\u53d1\u9001 SQL\uff0c\u7528\u4e8e\u521b\u5efa\u6570\u636e\u548c\u83b7\u53d6\u6570\u636e\u3002\u5b83\u5982\u4f55\u8ffd\u8e2a\u201c \u8fc7\u671f \u201d\u548c\u201c \u65b0\u9c9c \u201d\u7684\u6570\u636e\u3002\u5728\u4f55\u65f6\u4f1a \u81ea\u52a8\u83b7\u53d6\u6570\u636e \uff08\u8bbf\u95ee\u5b9e\u4f8b\u5c5e\u6027\u65f6\uff09\u4ee5\u53ca\u5982\u4f55\u901a\u8fc7 \u4f1a\u8bdd \u5728\u5185\u5b58\u4e2d\u7684\u5bf9\u8c61\u548c\u6570\u636e\u5e93\u4e4b\u95f4\u540c\u6b65\u6570\u636e\u3002</p> <p>\u5982\u679c\u4f60\u7406\u89e3\u4e86\u8fd9\u4e9b\u5185\u5bb9\uff0c\u90a3\u4e48\u73b0\u5728\u4f60\u5bf9 SQLModel \u3001SQLAlchemy\uff0c\u4ee5\u53ca Python \u4e0e\u6570\u636e\u5e93\u4ea4\u4e92\u7684\u5de5\u4f5c\u539f\u7406\u6709\u4e86\u5f88\u6df1\u5165\u7684\u4e86\u89e3\u3002</p> <p>\u5982\u679c\u4f60\u6ca1\u6709\u5b8c\u5168\u7406\u89e3\u4e5f\u6ca1\u5173\u7cfb\uff0c\u968f\u65f6\u53ef\u4ee5\u56de\u6765 <code>\u5237\u65b0</code> \u4e00\u4e0b\u8fd9\u4e9b\u6982\u5ff5\u3002<code>refresh</code></p> <p>\u6211\u8ba4\u4e3a\u8fd9\u53ef\u80fd\u662f\u5bfc\u81f4\u95ee\u9898\u548c\u8ba9\u4f60\u5934\u75bc\u7684\u4e3b\u8981\u9519\u8bef\u7c7b\u578b\u4e4b\u4e00\u3002\u6240\u4ee5\uff0c\u505a\u5f97\u597d\uff0c\u7ee7\u7eed\u52aa\u529b\u5b66\u4e60\uff01\ud83d\udcaa</p>"},{"location":"tutorial/code-structure/","title":"\u4ee3\u7801\u7ed3\u6784\u4e0e\u591a\u4e2a\u6587\u4ef6","text":"<p>\u8ba9\u6211\u4eec\u505c\u4e0b\u6765\u601d\u8003\u4e00\u4e0b\u5982\u4f55\u7ec4\u7ec7\u4ee3\u7801\uff0c\u7279\u522b\u662f\u5728 \u5927\u578b\u9879\u76ee \u4e2d\uff0c\u6d89\u53ca\u591a\u4e2a\u6587\u4ef6\u7684\u60c5\u51b5\u3002</p>"},{"location":"tutorial/code-structure/#_2","title":"\u5faa\u73af\u5bfc\u5165","text":"<p><code>Hero</code> \u7c7b\u5185\u90e8\u5f15\u7528\u4e86 <code>Team</code> \u7c7b\u3002</p> <p>\u4f46\u662f\uff0c<code>Team</code> \u7c7b\u4e5f\u5f15\u7528\u4e86 <code>Hero</code> \u7c7b\u3002</p> <p>\u56e0\u6b64\uff0c\u5982\u679c\u8fd9\u4e24\u4e2a\u7c7b\u5206\u522b\u4f4d\u4e8e\u4e0d\u540c\u7684\u6587\u4ef6\u4e2d\uff0c\u5e76\u4e14\u4f60\u5c1d\u8bd5\u76f4\u63a5\u5728\u5f7c\u6b64\u7684\u6587\u4ef6\u4e2d\u5bfc\u5165\u8fd9\u4e9b\u7c7b\uff0c\u5c31\u4f1a\u5bfc\u81f4 \u5faa\u73af\u5bfc\u5165 \u3002\ud83d\udd04</p> <p>Python \u65e0\u6cd5\u5904\u7406\u8fd9\u79cd\u60c5\u51b5\uff0c\u4f1a\u629b\u51fa\u4e00\u4e2a\u9519\u8bef\u3002\ud83d\udea8</p> <p>\u4f46\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u5e0c\u671b\u8868\u8fbe\u7684\u662f \u8fd9\u79cd\u5faa\u73af\u5f15\u7528 \uff0c\u56e0\u4e3a\u5728\u6211\u4eec\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u505a\u4e00\u4e9b\u975e\u5e38\u70ab\u9177\u7684\u4e8b\u60c5\uff0c\u4f8b\u5982\uff1a</p> <pre><code>hero.team.heroes[0].team.heroes[1].team.heroes[2].name\n</code></pre> <p>\u8fd9\u4e2a\u5faa\u73af\u5f15\u7528\u6b63\u662f\u6211\u4eec\u901a\u8fc7\u8fd9\u4e9b \u5173\u7cfb\u5c5e\u6027 \u5728\u8868\u8fbe\u7684\u610f\u601d\uff0c\u5373\uff1a</p> <ul> <li>\u4e00\u4e2a\u82f1\u96c4\u53ef\u4ee5\u6709\u4e00\u4e2a\u56e2\u961f<ul> <li>\u8fd9\u4e2a\u56e2\u961f\u53ef\u4ee5\u6709\u4e00\u7ec4\u82f1\u96c4<ul> <li>\u8fd9\u4e9b\u82f1\u96c4\u4e2d\u7684\u6bcf\u4e2a\u90fd\u53ef\u4ee5\u6709\u4e00\u4e2a\u56e2\u961f<ul> <li>...\u4ee5\u6b64\u7c7b\u63a8\u3002</li> </ul> </li> </ul> </li> </ul> </li> </ul> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u770b\u5230\u51e0\u79cd \u7ed3\u6784\u5316\u4ee3\u7801 \u7684\u7b56\u7565\uff0c\u8003\u8651\u5230\u8fd9\u79cd\u60c5\u51b5\u3002</p>"},{"location":"tutorial/code-structure/#_3","title":"\u5355\u4e00\u6a21\u5757\u6a21\u578b","text":"<p>\u8fd9\u662f\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u3002\u2728</p> <p>\u5728\u8fd9\u79cd\u89e3\u51b3\u65b9\u6848\u4e2d\uff0c\u6211\u4eec\u4ecd\u7136\u4f7f\u7528 \u591a\u4e2a\u6587\u4ef6 \uff0c\u5206\u522b\u7528\u4e8e <code>models</code>\u3001<code>database</code> \u548c <code>app</code>\u3002</p> <p>\u6211\u4eec\u8fd8\u53ef\u4ee5\u6709\u4efb\u4f55\u5176\u4ed6\u5fc5\u8981\u7684 \u6587\u4ef6 \u3002</p> <p>\u4f46\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u7684\u6a21\u578b\u90fd\u4f1a\u653e\u5728 \u4e00\u4e2a\u6587\u4ef6 \u4e2d\u3002</p> <p>\u9879\u76ee\u7684\u6587\u4ef6\u7ed3\u6784\u53ef\u80fd\u662f\uff1a</p> <pre><code>.\n\u251c\u2500\u2500 project\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 app.py\n    \u251c\u2500\u2500 database.py\n    \u2514\u2500\u2500 models.py\n</code></pre> <p>\u6211\u4eec\u6709 3 \u4e2a Python\u6a21\u5757 \uff08\u6216\u6587\u4ef6\uff09\uff1a</p> <ul> <li><code>app</code></li> <li><code>database</code></li> <li><code>models</code></li> </ul> <p>\u6211\u4eec\u8fd8\u4f1a\u6709\u4e00\u4e2a\u7a7a\u7684 <code>__init__.py</code> \u6587\u4ef6\uff0c\u4f7f\u8be5\u9879\u76ee\u6210\u4e3a\u4e00\u4e2a\u201c Python \u5305 \u201d\uff08\u4e00\u7ec4 Python \u6a21\u5757\uff09\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728 <code>app.py</code> \u6587\u4ef6/\u6a21\u5757\u4e2d\u4f7f\u7528 \u76f8\u5bf9\u5bfc\u5165 \uff0c\u6bd4\u5982\uff1a</p> <pre><code>from .models import Hero, Team\nfrom .database import engine\n</code></pre> <p>\u6211\u4eec\u4e4b\u6240\u4ee5\u80fd\u4f7f\u7528\u8fd9\u4e9b\u76f8\u5bf9\u5bfc\u5165\uff0c\u662f\u56e0\u4e3a\uff0c\u4f8b\u5982\uff0c\u5728\u6587\u4ef6 <code>app.py</code>\uff08<code>app</code> \u6a21\u5757\uff09\u4e2d\uff0cPython \u77e5\u9053\u5b83\u662f \u6211\u4eec Python \u5305\u7684\u4e00\u90e8\u5206 \uff0c\u56e0\u4e3a\u5b83\u4e0e <code>__init__.py</code> \u6587\u4ef6\u4f4d\u4e8e\u540c\u4e00\u76ee\u5f55\u3002\u800c\u540c\u4e00\u76ee\u5f55\u4e0b\u7684\u6240\u6709 Python \u6587\u4ef6\u4e5f\u90fd\u5c5e\u4e8e\u540c\u4e00\u4e2a Python \u5305\u3002</p>"},{"location":"tutorial/code-structure/#_4","title":"\u6a21\u578b\u6587\u4ef6","text":"<p>\u4f60\u53ef\u4ee5\u5c06\u6240\u6709\u6570\u636e\u5e93\u6a21\u578b\u653e\u5728\u4e00\u4e2a Python \u6a21\u5757\uff08\u4e00\u4e2a Python \u6587\u4ef6\uff09\u4e2d\uff0c\u4f8b\u5982 <code>models.py</code>\uff1a</p> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, SQLModel\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n</code></pre> <p>\u8fd9\u6837\uff0c\u4f60\u5c31\u4e0d\u9700\u8981\u4e3a\u5176\u4ed6\u6a21\u578b\u5904\u7406\u5faa\u73af\u5bfc\u5165\u7684\u95ee\u9898\u3002</p> <p>\u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u4efb\u4f55\u5176\u4ed6\u6587\u4ef6/\u6a21\u5757\u4e2d\u5bfc\u5165\u8be5\u6587\u4ef6/\u6a21\u5757\u4e2d\u7684\u6a21\u578b\u3002</p>"},{"location":"tutorial/code-structure/#_5","title":"\u6570\u636e\u5e93\u6587\u4ef6","text":"<p>\u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5c06\u521b\u5efa**engine** \u548c\u521b\u5efa\u6240\u6709\u8868\u7684\u51fd\u6570\uff08\u5982\u679c\u6ca1\u6709\u4f7f\u7528\u8fc1\u79fb\u7684\u8bdd\uff09\u653e\u5728\u53e6\u4e00\u4e2a\u6587\u4ef6 <code>database.py</code> \u4e2d\uff1a</p> <pre><code>from sqlmodel import SQLModel, create_engine\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n</code></pre> <p>\u8fd9\u4e2a\u6587\u4ef6\u4e5f\u4f1a\u88ab\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u5bfc\u5165\uff0c\u4ee5\u4fbf\u4f7f\u7528\u5171\u4eab\u7684 engine \uff0c\u5e76\u8c03\u7528\u51fd\u6570 <code>create_db_and_tables()</code>\u3002</p>"},{"location":"tutorial/code-structure/#_6","title":"\u5e94\u7528\u7a0b\u5e8f\u6587\u4ef6","text":"<p>\u6700\u540e\uff0c\u4f60\u53ef\u4ee5\u5c06\u521b\u5efa \u5e94\u7528\u7a0b\u5e8f \u7684\u4ee3\u7801\u653e\u5728\u53e6\u4e00\u4e2a\u6587\u4ef6 <code>app.py</code> \u4e2d\uff1a</p> <pre><code>from sqlmodel import Session\n\nfrom .database import create_db_and_tables, engine\nfrom .models import Hero, Team\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        session.add(hero_deadpond)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Hero's team:\", hero_deadpond.team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5bfc\u5165\u6a21\u578b\u3001engine \u4ee5\u53ca\u521b\u5efa\u6240\u6709\u8868\u7684\u51fd\u6570\uff0c\u7136\u540e\u53ef\u4ee5\u5728\u5185\u90e8\u4f7f\u7528\u5b83\u4eec\u3002</p>"},{"location":"tutorial/code-structure/#_7","title":"\u987a\u5e8f\u5f88\u91cd\u8981","text":"<p>\u8bb0\u5f97\u5728\u8c03\u7528 <code>SQLModel.metadata.create_all()</code> \u65f6\uff0c \u987a\u5e8f\u5f88\u91cd\u8981 \u5417\uff1f \u6587\u6863\u4e2d\u7684\u8fd9\u4e00\u90e8\u5206 \u6307\u51fa\uff0c\u4f60\u5fc5\u987b\u5728\u8c03\u7528 <code>SQLModel.metadata.create_all()</code> \u4e4b\u524d\uff0c\u5bfc\u5165\u5305\u542b\u6a21\u578b\u7684\u6a21\u5757\u3002</p> <p>\u6211\u4eec\u5728\u8fd9\u91cc\u505a\u7684\u662f\uff0c\u9996\u5148\u5728 <code>app.py</code> \u4e2d\u5bfc\u5165\u6a21\u578b\uff0c\u7136\u540e \u518d \u521b\u5efa\u6570\u636e\u5e93\u548c\u8868\u683c\uff0c\u6240\u4ee5\u4e00\u5207\u90fd\u6b63\u5e38\uff0c\u4ee3\u7801\u4e5f\u80fd\u6b63\u786e\u8fd0\u884c\u3002\ud83d\udc4c</p>"},{"location":"tutorial/code-structure/#_8","title":"\u5728\u547d\u4ee4\u884c\u8fd0\u884c","text":"<p>\u56e0\u4e3a\u73b0\u5728\u8fd9\u662f\u4e00\u4e2a\u5305\u542b Python \u5305 \u7684\u8f83\u5927\u9879\u76ee\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u5355\u4e00\u7684 Python \u6587\u4ef6\uff0c\u6240\u4ee5\u6211\u4eec \u4e0d\u80fd \u50cf\u4ee5\u524d\u90a3\u6837\u53ea\u4f20\u9012\u5355\u4e2a\u6587\u4ef6\u540d\u6765\u8fd0\u884c\uff1a</p> <pre><code>$ python app.py\n</code></pre> <p>\u73b0\u5728\uff0c\u6211\u4eec\u9700\u8981\u544a\u8bc9 Python\uff0c\u6211\u4eec\u5e0c\u671b\u5b83\u6267\u884c\u4e00\u4e2a\u4f5c\u4e3a\u5305\u4e00\u90e8\u5206\u7684*\u6a21\u5757*\uff1a</p> <pre><code>$ python -m project.app\n</code></pre> <p><code>-m</code> \u9009\u9879\u544a\u8bc9 Python \u8c03\u7528\u4e00\u4e2a*\u6a21\u5757*\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4f20\u9012 <code>project.app</code> \u5b57\u7b26\u4e32\uff0c\u8fd9\u662f\u6211\u4eec\u5728 \u5bfc\u5165 \u65f6\u4f7f\u7528\u7684\u76f8\u540c\u683c\u5f0f\uff1a</p> <pre><code>import project.app\n</code></pre> <p>\u7136\u540e\uff0cPython \u4f1a\u5728\u8be5\u5305\u5185\u6267\u884c\u8be5\u6a21\u5757\uff0c\u5e76\u4e14\u7531\u4e8e Python \u662f\u76f4\u63a5\u6267\u884c\u5b83\u7684\uff0c<code>app.py</code> \u4e2d\u7684 \u4e3b\u51fd\u6570\u5757 \uff08main block\uff09\u4ecd\u7136\u4f1a\u8d77\u4f5c\u7528\uff1a</p> <pre><code>if __name__ == '__main__':\n    main()\n</code></pre> <p>\u6240\u4ee5\uff0c\u8f93\u51fa\u5c06\u662f\uff1a</p> <pre><code>$ python -m project.app\n\nCreated hero: id=1 secret_name='Dive Wilson' team_id=1 name='Deadpond' age=None\nHero's team: name='Z-Force' headquarters='Sister Margaret's Bar' id=1\n</code></pre>"},{"location":"tutorial/code-structure/#_9","title":"\u89e3\u51b3\u5faa\u73af\u5bfc\u5165\u95ee\u9898","text":"<p>\u5047\u8bbe\u7531\u4e8e\u67d0\u79cd\u539f\u56e0\uff0c\u4f60\u4e0d\u559c\u6b22\u5c06\u6240\u6709\u6570\u636e\u5e93\u6a21\u578b\u653e\u5728\u4e00\u4e2a\u6587\u4ef6\u4e2d\uff0c\u800c\u662f\u5e0c\u671b\u5c06\u5b83\u4eec\u5206\u5f00\uff0c\u5206\u522b\u653e\u5728 <code>hero_model.py</code> \u548c <code>team_model.py</code> \u6587\u4ef6\u4e2d\u3002</p> <p>\u4f60\u5f53\u7136\u53ef\u4ee5\u8fd9\u6837\u505a\u3002\ud83d\ude0e \u4f46\u6709\u51e0\u4ef6\u4e8b\u9700\u8981\u6ce8\u610f\u3002\ud83e\udd13</p> <p>/// \u8b66\u544a</p> <p>\u8fd9\u6709\u70b9\u66f4\u9ad8\u7ea7\u3002</p> <p>\u5982\u679c\u4e0a\u9762\u7684\u89e3\u51b3\u65b9\u6848\u5df2\u7ecf\u9002\u7528\u4e8e\u4f60\uff0c\u90a3\u53ef\u80fd\u5c31\u8db3\u591f\u4e86\uff0c\u4f60\u53ef\u4ee5\u7ee7\u7eed\u8fdb\u884c\u4e0b\u4e00\u7ae0\u7684\u5185\u5bb9\u3002\ud83e\udd13</p> <p>///</p> <p>\u5047\u8bbe\u73b0\u5728\u6587\u4ef6\u7ed3\u6784\u53d8\u4e3a\uff1a</p> <pre><code>.\n\u251c\u2500\u2500 project\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 app.py\n    \u251c\u2500\u2500 database.py\n    \u251c\u2500\u2500 hero_model.py\n    \u2514\u2500\u2500 team_model.py\n</code></pre>"},{"location":"tutorial/code-structure/#_10","title":"\u5faa\u73af\u5bfc\u5165\u548c\u7c7b\u578b\u6ce8\u89e3","text":"<p>\u5faa\u73af\u5bfc\u5165\u7684\u95ee\u9898\u5728\u4e8e\uff0cPython \u65e0\u6cd5\u5728 \u8fd0\u884c\u65f6 \u89e3\u51b3\u5b83\u4eec\u3002</p> <p>\u4f46\u662f\uff0c\u5728\u4f7f\u7528 Python \u7c7b\u578b\u6ce8\u89e3 \u65f6\uff0c\u901a\u5e38\u9700\u8981\u58f0\u660e\u4e00\u4e9b\u53d8\u91cf\u7684\u7c7b\u578b\uff0c\u8fd9\u4e9b\u53d8\u91cf\u7684\u7c7b\u53ef\u80fd\u662f\u4ece\u5176\u4ed6\u6587\u4ef6\u5bfc\u5165\u7684\u3002</p> <p>\u800c\u8fd9\u4e9b\u5305\u542b\u7c7b\u7684\u6587\u4ef6 \u4e5f\u53ef\u80fd\u9700\u8981\u5bfc\u5165 \u66f4\u591a\u6765\u81ea\u7b2c\u4e00\u4e2a\u6587\u4ef6\u7684\u5185\u5bb9\u3002</p> <p>\u8fd9\u6700\u7ec8\u5c31\u9700\u8981\u4f7f\u7528 \u5faa\u73af\u5bfc\u5165 \uff0c\u800c Python \u5728 \u8fd0\u884c\u65f6 \u662f\u4e0d\u652f\u6301\u7684\u3002</p>"},{"location":"tutorial/code-structure/#_11","title":"\u7c7b\u578b\u6ce8\u89e3\u4e0e\u8fd0\u884c\u65f6","text":"<p>\u4f46\u8fd9\u4e9b\u6211\u4eec\u60f3\u58f0\u660e\u7684 \u7c7b\u578b\u6ce8\u89e3 \u5e76\u4e0d\u9700\u8981\u5728 \u8fd0\u884c\u65f6 \u4f7f\u7528\u3002</p> <p>\u4e8b\u5b9e\u4e0a\uff0c\u8bb0\u5f97\u6211\u4eec\u4f7f\u7528\u4e86 <code>List[\"Hero\"]</code>\uff0c\u5176\u4e2d <code>\"Hero\"</code> \u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u5417\uff1f</p> <p>\u5bf9 Python \u6765\u8bf4\uff0c\u5728\u8fd0\u884c\u65f6\uff0c\u8fd9\u53ea\u662f\u4e00\u4e2a \u5b57\u7b26\u4e32\u3002</p> <p>\u6240\u4ee5\uff0c\u5982\u679c\u6211\u4eec\u80fd\u7528 \u5b57\u7b26\u4e32\u7248\u672c \u6dfb\u52a0\u9700\u8981\u7684\u7c7b\u578b\u6ce8\u89e3\uff0cPython \u5c31\u4e0d\u4f1a\u6709\u95ee\u9898\u3002</p> <p>\u4f46\u5982\u679c\u6211\u4eec\u4ec5\u5728\u7c7b\u578b\u6ce8\u89e3\u4e2d\u4f7f\u7528\u5b57\u7b26\u4e32\uff0c\u800c\u4e0d\u5bfc\u5165\u4efb\u4f55\u4e1c\u897f\uff0c\u7f16\u8f91\u5668\u5c31\u65e0\u6cd5\u77e5\u9053\u6211\u4eec\u7684\u610f\u601d\uff0c\u4e5f\u65e0\u6cd5\u63d0\u4f9b \u81ea\u52a8\u8865\u5168 \u548c \u5185\u8054\u9519\u8bef \u7684\u5e2e\u52a9\u3002</p> <p>\u56e0\u6b64\uff0c\u5982\u679c\u6709\u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u201c\u5bfc\u5165\u201d\u67d0\u4e9b\u5185\u5bb9\uff0c\u53ea\u5728\u7f16\u8f91\u4ee3\u7801\u65f6\u4f5c\u4e3a\u201c\u5bfc\u5165\u201d\uff0c\u800c\u5728 \u8fd0\u884c\u65f6 \u4e0d\u9700\u8981\u5bfc\u5165\uff0c\u90a3\u5c31\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u2026\u2026\u800c\u8fd9\u79cd\u65b9\u6cd5\u786e\u5b9e\u5b58\u5728\uff01\u5c31\u662f\u8fd9\u6837\u3002\ud83c\udf89</p>"},{"location":"tutorial/code-structure/#type_checking","title":"\u4ec5\u5728\u7f16\u8f91\u65f6\u5bfc\u5165 <code>TYPE_CHECKING</code>","text":"<p>\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0cPython \u63d0\u4f9b\u4e86\u4e00\u4e2a\u7279\u6b8a\u7684\u6280\u5de7\uff0c\u5229\u7528 <code>typing</code> \u6a21\u5757\u4e2d\u7684\u4e00\u4e2a\u7279\u6b8a\u53d8\u91cf <code>TYPE_CHECKING</code>\u3002</p> <p>\u8be5\u53d8\u91cf\u5728\u4ee3\u7801\u7f16\u8f91\u5668\u548c\u5de5\u5177\u5206\u6790\u7c7b\u578b\u6ce8\u89e3\u65f6\u503c\u4e3a <code>True</code>\u3002</p> <p>\u4f46\u5f53 Python \u6267\u884c\u65f6\uff0c\u503c\u4e3a <code>False</code>\u3002</p> <p>\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 <code>if</code> \u5757\u4e2d\u4f7f\u7528\u5b83\uff0c\u5728\u5176\u4e2d\u5bfc\u5165\u5176\u4ed6\u5185\u5bb9\u3002\u8fd9\u6837\uff0c\u8fd9\u4e9b\u5185\u5bb9\u53ea\u4f1a\u5728\u7f16\u8f91\u5668\u4e2d\u201c\u5bfc\u5165\u201d\uff0c\u800c\u5728\u8fd0\u884c\u65f6\u4e0d\u4f1a\u5bfc\u5165\u3002</p>"},{"location":"tutorial/code-structure/#hero","title":"Hero \u6a21\u578b\u6587\u4ef6","text":"<p>\u4f7f\u7528 <code>TYPE_CHECKING</code> \u7684\u6280\u5de7\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 <code>hero_model.py</code> \u4e2d\u201c\u5bfc\u5165\u201d <code>Team</code>\uff1a</p> <pre><code>from typing import TYPE_CHECKING, Optional\n\nfrom sqlmodel import Field, Relationship, SQLModel\n\nif TYPE_CHECKING:\n    from .team_model import Team\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[\"Team\"] = Relationship(back_populates=\"heroes\")\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u73b0\u5728\u6211\u4eec \u5fc5\u987b \u5c06 <code>Team</code> \u7684\u6ce8\u89e3\u5199\u6210\u5b57\u7b26\u4e32\u5f62\u5f0f\uff1a\u201c<code>\"Team\"</code>\u201d\uff0c\u8fd9\u6837 Python \u5728\u8fd0\u884c\u65f6\u5c31\u4e0d\u4f1a\u62a5\u9519\u3002</p>"},{"location":"tutorial/code-structure/#team","title":"Team \u6a21\u578b\u6587\u4ef6","text":"<p>\u6211\u4eec\u5728 <code>team_model.py</code> \u6587\u4ef6\u4e2d\u4f7f\u7528\u76f8\u540c\u7684\u6280\u5de7\uff1a</p> <pre><code>from typing import TYPE_CHECKING, List, Optional\n\nfrom sqlmodel import Field, Relationship, SQLModel\n\nif TYPE_CHECKING:\n    from .hero_model import Hero\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n</code></pre> <p>\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5728\u7f16\u8f91\u5668\u4e2d\u5f97\u5230\u652f\u6301\uff0c\u5305\u62ec\u81ea\u52a8\u8865\u5168\u3001\u5185\u8054\u9519\u8bef\u63d0\u793a\uff0c\u540c\u65f6 SQLModel \u4ecd\u7136\u80fd\u591f\u6b63\u5e38\u5de5\u4f5c\u3002\ud83c\udf89</p>"},{"location":"tutorial/code-structure/#_12","title":"\u5e94\u7528\u7a0b\u5e8f\u6587\u4ef6","text":"<p>\u73b0\u5728\uff0c\u4e3a\u4e86\u5b8c\u6574\u6027\uff0c<code>app.py</code> \u6587\u4ef6\u5c06\u4ece\u4e24\u4e2a\u6a21\u5757\u4e2d\u5bfc\u5165\u6a21\u578b\uff1a</p> <pre><code>from sqlmodel import Session\n\nfrom .database import create_db_and_tables, engine\nfrom .hero_model import Hero\nfrom .team_model import Team\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        session.add(hero_deadpond)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Hero's team:\", hero_deadpond.team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u5f53\u7136\uff0c\u6240\u6709\u7684 <code>TYPE_CHECKING</code> \u548c\u7c7b\u578b\u6ce8\u89e3\u5b57\u7b26\u4e32\u7684\u6280\u5de7 \u53ea\u9700\u8981\u5728\u6709\u5faa\u73af\u5bfc\u5165\u7684\u6587\u4ef6\u4e2d \u4f7f\u7528\u3002</p> <p>\u56e0\u4e3a <code>app.py</code> \u6ca1\u6709\u5faa\u73af\u5bfc\u5165\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u6b63\u5e38\u7684\u5bfc\u5165\u65b9\u5f0f\uff0c\u5e76\u50cf\u5e73\u5e38\u4e00\u6837\u4f7f\u7528\u7c7b\u3002</p> <p>\u8fd0\u884c\u8be5\u7a0b\u5e8f\u5c06\u5f97\u5230\u4e0e\u4e4b\u524d\u76f8\u540c\u7684\u7ed3\u679c\uff1a</p> <pre><code>$ python -m project.app\n\nCreated hero: id=1 age=None name='Deadpond' secret_name='Dive Wilson' team_id=1\nHero's team: id=1 name='Z-Force' headquarters='Sister Margaret's Bar'\n</code></pre>"},{"location":"tutorial/code-structure/#_13","title":"\u603b\u7ed3","text":"<p>\u5bf9\u4e8e \u6700\u7b80\u5355\u7684\u60c5\u51b5 \uff08\u5927\u591a\u6570\u60c5\u51b5\uff09\uff0c\u4f60\u53ef\u4ee5\u5c06\u6240\u6709\u6a21\u578b\u653e\u5728\u4e00\u4e2a\u6587\u4ef6\u4e2d\uff0c\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u7684\u7ed3\u6784\uff08\u5305\u62ec\u8bbe\u7f6e engine \uff09\u53ef\u4ee5\u5206\u5e03\u5728\u591a\u4e2a\u6587\u4ef6\u4e2d\u3002</p> <p>\u800c\u5bf9\u4e8e\u90a3\u4e9b \u590d\u6742\u7684\u60c5\u51b5 \uff0c\u9700\u8981\u5c06\u6240\u6709\u6a21\u578b\u5206\u79bb\u5230\u4e0d\u540c\u7684\u6587\u4ef6\u4e2d\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>TYPE_CHECKING</code> \u6765\u8ba9\u6240\u6709\u5185\u5bb9\u6b63\u5e38\u5de5\u4f5c\uff0c\u5e76\u4fdd\u6301\u6700\u4f73\u7684\u5f00\u53d1\u4f53\u9a8c\u548c\u7f16\u8f91\u5668\u652f\u6301\u3002\u2728</p>"},{"location":"tutorial/create-db-and-table-with-db-browser/","title":"\u4f7f\u7528 SQL \u521b\u5efa\u8868","text":"<p>\u8ba9\u6211\u4eec\u5f00\u59cb\u5427\uff01</p> <p>\u6211\u4eec\u5c06\uff1a</p> <ul> <li>\u4f7f\u7528 DB Browser for SQLite \u521b\u5efa\u4e00\u4e2a SQLite \u6570\u636e\u5e93</li> <li>\u4f7f\u7528 DB Browser for SQLite \u5728\u6570\u636e\u5e93\u4e2d\u521b\u5efa\u4e00\u4e2a\u8868</li> </ul> <p>\u6211\u4eec\u7a0d\u540e\u4f1a\u6dfb\u52a0\u6570\u636e\u3002\u73b0\u5728\uff0c\u6211\u4eec\u5c06\u521b\u5efa\u6570\u636e\u5e93\u548c\u7b2c\u4e00\u4e2a\u8868\u7ed3\u6784\u3002</p> <p>\u6211\u4eec\u5c06\u521b\u5efa\u4e00\u4e2a\u8868\u6765\u5b58\u50a8\u4ee5\u4e0b\u6570\u636e\uff1a</p> idnamesecret_nameage 1DeadpondDive Wilsonnull 2Spider-BoyPedro Parqueadornull 3Rusty-ManTommy Sharp48"},{"location":"tutorial/create-db-and-table-with-db-browser/#_1","title":"\u521b\u5efa\u6570\u636e\u5e93","text":"<p>SQLModel \u548c SQLAlchemy \u57fa\u4e8e SQL\u3002</p> <p>\u5b83\u4eec\u7684\u8bbe\u8ba1\u65e8\u5728\u901a\u8fc7 Python \u7c7b\u548c\u5bf9\u8c61\u5e2e\u52a9\u4f60\u4f7f\u7528 SQL\u3002\u4f46\u7406\u89e3 SQL \u603b\u662f\u975e\u5e38\u6709\u7528\u7684\u3002</p> <p>\u56e0\u6b64\uff0c\u8ba9\u6211\u4eec\u4ece\u4e00\u4e2a\u7b80\u5355\u7684\u7eaf SQL \u793a\u4f8b\u5f00\u59cb\u3002</p> <p>\u6253\u5f00 DB Browser for SQLite\u3002</p> <p>\u70b9\u51fb New Database \u6309\u94ae\u3002</p> <p></p> <p>\u4f1a\u5f39\u51fa\u4e00\u4e2a\u5bf9\u8bdd\u6846\u3002\u8fdb\u5165\u4f60\u521b\u5efa\u7684 \u9879\u76ee\u76ee\u5f55\uff0c\u5e76\u5c06\u6587\u4ef6\u4fdd\u5b58\u4e3a <code>database.db</code>\u3002</p> <p>Tip</p> <p>SQLite \u6570\u636e\u5e93\u6587\u4ef6\u901a\u5e38\u4ee5 <code>.db</code> \u6269\u5c55\u540d\u4fdd\u5b58\u3002\u6709\u65f6\u4e5f\u4f1a\u4f7f\u7528 <code>.sqlite</code>\u3002</p>"},{"location":"tutorial/create-db-and-table-with-db-browser/#_2","title":"\u521b\u5efa\u8868","text":"<p>\u5b8c\u6210\u6b64\u64cd\u4f5c\u540e\uff0c\u5b83\u53ef\u80fd\u4f1a\u63d0\u793a\u4f60\u7acb\u5373\u521b\u5efa\u4e00\u4e2a\u65b0\u8868\u3002</p> <p>\u5982\u679c\u6ca1\u6709\u63d0\u793a\uff0c\u70b9\u51fb Create Table \u6309\u94ae\u3002</p> <p></p> <p>\u7136\u540e\uff0c\u4f60\u5c06\u770b\u5230\u521b\u5efa\u65b0\u8868\u7684\u5bf9\u8bdd\u6846\u3002</p> <p>\u73b0\u5728\uff0c\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a <code>hero</code> \u7684\u65b0\u8868\uff0c\u5305\u542b\u4ee5\u4e0b\u5217\uff1a</p> <ul> <li><code>id</code>\uff1a\u4e00\u4e2a <code>INTEGER</code> \u7c7b\u578b\u7684\u5b57\u6bb5\uff0c\u5c06\u4f5c\u4e3a \u4e3b\u952e\uff08\u52fe\u9009 <code>PK</code> \u2705\uff09\u3002</li> <li><code>name</code>\uff1a\u4e00\u4e2a <code>TEXT</code> \u7c7b\u578b\u7684\u5b57\u6bb5\uff0c\u5e94\u8be5\u4e3a <code>NOT NULL</code>\uff08\u52fe\u9009 <code>NN</code> \u2705\uff09\uff0c\u6240\u4ee5\u5b83\u5e94\u8be5\u59cb\u7ec8\u6709\u4e00\u4e2a\u503c\u3002</li> <li><code>secret_name</code>\uff1a\u4e00\u4e2a <code>TEXT</code> \u7c7b\u578b\u7684\u5b57\u6bb5\uff0c\u5e94\u8be5\u4e3a <code>NOT NULL</code>\uff08\u52fe\u9009 <code>NN</code> \u2705\uff09\u3002</li> <li><code>age</code>\uff1a\u4e00\u4e2a <code>INTEGER</code> \u7c7b\u578b\u7684\u5b57\u6bb5\uff0c\u53ef\u4ee5\u4e3a <code>NULL</code>\uff0c\u56e0\u6b64\u4f60\u4e0d\u9700\u8981\u52fe\u9009\u5176\u4ed6\u4efb\u4f55\u9009\u9879\u3002</li> </ul> <p></p> <p>\u70b9\u51fb OK \u521b\u5efa\u8868\u3002</p> <p>\u5f53\u4f60\u70b9\u51fb Add \u6309\u94ae\u5e76\u6dfb\u52a0\u4fe1\u606f\u65f6\uff0c\u5b83\u4f1a\u521b\u5efa\u5e76\u66f4\u65b0\u6267\u884c\u521b\u5efa\u8868\u7684 SQL \u8bed\u53e5\uff1a</p> <pre><code>CREATE TABLE \"hero\" ( --(1)\n  \"id\"  INTEGER, --(2)\n  \"name\"  TEXT NOT NULL, --(3)\n  \"secret_name\" TEXT NOT NULL, --(4)\n  \"age\" INTEGER, --(5)\n  PRIMARY KEY(\"id\") --(6)\n); --(7)\n</code></pre> <ol> <li>\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a <code>hero</code> \u7684\u8868\u3002\u6ce8\u610f\uff0c\u8fd9\u4e2a\u8868\u7684\u5217\u5728\u62ec\u53f7 \"<code>(</code>\" \u5185\u58f0\u660e\uff0c\u4ece\u8fd9\u91cc\u5f00\u59cb\u3002</li> <li><code>id</code> \u5217\uff0c\u7c7b\u578b\u4e3a <code>INTEGER</code>\u3002\u5b83\u88ab\u58f0\u660e\u4e3a\u4e3b\u952e\uff0c\u4f4d\u4e8e\u6700\u540e\u3002</li> <li><code>name</code> \u5217\uff0c\u7c7b\u578b\u4e3a <code>TEXT</code>\uff0c\u5e76\u4e14\u5b83\u5fc5\u987b\u59cb\u7ec8\u6709\u4e00\u4e2a\u503c\uff0c<code>NOT NULL</code>\u3002</li> <li><code>secret_name</code> \u5217\uff0c\u7c7b\u578b\u4e3a <code>TEXT</code>\uff0c\u540c\u6837\u662f <code>NOT NULL</code>\u3002</li> <li><code>age</code> \u5217\uff0c\u7c7b\u578b\u4e3a <code>INTEGER</code>\u3002\u8fd9\u4e2a\u5217\u6ca1\u6709 <code>NOT NULL</code>\uff0c\u6240\u4ee5\u5b83\u53ef\u4ee5\u4e3a <code>NULL</code>\u3002</li> <li>\u8fd9\u4e2a\u8868\u7684\u4e3b\u952e\u662f <code>id</code> \u5217\u3002</li> <li>\u8fd9\u662f SQL \u8868\u7684\u7ed3\u675f\u90e8\u5206\uff0c\u6700\u540e\u4e00\u4e2a\u62ec\u53f7 \"<code>)</code>\" \u548c\u5206\u53f7 \"<code>;</code>\" \u8868\u793a SQL \u8bed\u53e5\u7684\u7ed3\u675f\u3002\u8fd9\u4e2a SQL \u5b57\u7b26\u4e32\u53ef\u80fd\u8fd8\u4f1a\u5305\u542b\u5176\u4ed6 SQL \u8bed\u53e5\u3002</li> </ol> <p>\u73b0\u5728\u4f60\u5c06\u770b\u5230\u5b83\u51fa\u73b0\u5728\u8868\u7684\u5217\u8868\u4e2d\uff0c\u4e14\u5305\u542b\u6211\u4eec\u6307\u5b9a\u7684\u5217\u3002\ud83c\udf89</p> <p></p> <p>\u5269\u4e0b\u7684\u6b65\u9aa4\u662f\u70b9\u51fb Write Changes \u4fdd\u5b58\u66f4\u6539\u5230\u6587\u4ef6\u3002</p> <p></p> <p>\u4e4b\u540e\uff0c\u65b0\u8868\u5c06\u4fdd\u5b58\u5728 <code>./database.db</code> \u6587\u4ef6\u4e2d\u3002</p>"},{"location":"tutorial/create-db-and-table-with-db-browser/#_3","title":"\u786e\u8ba4\u8868\u7684\u521b\u5efa","text":"<p>\u8ba9\u6211\u4eec\u786e\u8ba4\u5b83\u662f\u5426\u5df2\u4fdd\u5b58\u3002</p> <p>\u9996\u5148\u70b9\u51fb Close Database \u6309\u94ae\u5173\u95ed\u6570\u636e\u5e93\u3002</p> <p></p> <p>\u7136\u540e\u70b9\u51fb Open Database \u6309\u94ae\u91cd\u65b0\u6253\u5f00\u6570\u636e\u5e93\uff0c\u9009\u62e9\u76f8\u540c\u7684 <code>./database.db</code> \u6587\u4ef6\u3002</p> <p></p> <p>\u4f60\u5c06\u518d\u6b21\u770b\u5230\u6211\u4eec\u521b\u5efa\u7684\u76f8\u540c\u8868\u3002</p> <p></p>"},{"location":"tutorial/create-db-and-table-with-db-browser/#sql_1","title":"\u4f7f\u7528 SQL \u518d\u6b21\u521b\u5efa\u8868","text":"<p>\u73b0\u5728\uff0c\u4e3a\u4e86\u4e86\u89e3 SQL \u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u8ba9\u6211\u4eec\u7528 SQL \u518d\u6b21\u521b\u5efa\u8868\u3002</p> <p>\u518d\u6b21\u70b9\u51fb Close Database \u6309\u94ae\u3002</p> <p>\u5220\u9664\u9879\u76ee\u76ee\u5f55\u4e2d\u7684 <code>./database.db</code> \u6587\u4ef6\u3002</p> <p>\u7136\u540e\u518d\u6b21\u70b9\u51fb New Database\u3002</p> <p>\u518d\u6b21\u5c06\u6587\u4ef6\u4fdd\u5b58\u4e3a <code>database.db</code>\u3002</p> <p>\u8fd9\u4e00\u6b21\uff0c\u5982\u679c\u4f60\u770b\u5230\u521b\u5efa\u65b0\u8868\u7684\u5bf9\u8bdd\u6846\uff0c\u53ea\u9700\u70b9\u51fb Cancel \u6309\u94ae\u5173\u95ed\u5b83\u3002</p> <p>\u73b0\u5728\uff0c\u5207\u6362\u5230 Execute SQL \u6807\u7b7e\u3002</p> <p>\u5199\u4e0b\u4e4b\u524d\u6b65\u9aa4\u4e2d\u751f\u6210\u7684\u76f8\u540c SQL\uff1a</p> <pre><code>CREATE TABLE \"hero\" (\n  \"id\"  INTEGER,\n  \"name\"  TEXT NOT NULL,\n  \"secret_name\" TEXT NOT NULL,\n  \"age\" INTEGER,\n  PRIMARY KEY(\"id\")\n);\n</code></pre> <p>\u7136\u540e\u70b9\u51fb \"Execute all\" \u25b6 \u6309\u94ae\u3002</p> <p></p> <p>\u4f60\u5c06\u770b\u5230 \"execution finished successfully\" \u7684\u63d0\u793a\u4fe1\u606f\u3002</p> <p></p> <p>\u5982\u679c\u4f60\u56de\u5230 Database Structure \u6807\u7b7e\uff0c\u4f60\u4f1a\u770b\u5230\u4f60\u786e\u5b9e\u518d\u6b21\u521b\u5efa\u4e86\u76f8\u540c\u7684\u8868\u3002</p> <p></p>"},{"location":"tutorial/create-db-and-table-with-db-browser/#sql_2","title":"\u8fdb\u4e00\u6b65\u5b66\u4e60 SQL","text":"<p>\u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u5c06\u7ee7\u7eed\u5411\u4f60\u5c55\u793a\u4e00\u4e9b SQL \u7684\u5c0f\u7247\u6bb5\u3002\u4f60\u4e0d\u9700\u8981\u6210\u4e3a SQL \u4e13\u5bb6\u5c31\u80fd\u4f7f\u7528 SQLModel\u3002</p> <p>\u4f46\u662f\uff0c\u5982\u679c\u4f60\u611f\u5174\u8da3\u5e76\u5e0c\u671b\u5feb\u901f\u4e86\u89e3 SQL\uff0c\u6211\u63a8\u8350\u4f60\u9605\u8bfb SQLite \u7684\u53ef\u89c6\u5316\u6587\u6863\uff0c\u94fe\u63a5\u5728\u8fd9\u91cc\uff1aSQL As Understood By SQLite\u3002</p> <p>\u4f60\u53ef\u4ee5\u4ece <code>CREATE TABLE</code> \u5f00\u59cb\u3002</p> <p>\u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u9009\u62e9\u53c2\u52a0\u5b8c\u6574\u7684 SQL \u8bfe\u7a0b\u6216\u9605\u8bfb\u6709\u5173 SQL \u7684\u4e66\u7c4d\uff0c\u4f46\u4f60\u4e0d\u9700\u8981\u6bd4\u6211\u5728\u672c\u6559\u7a0b\u4e2d\u89e3\u91ca\u7684\u5185\u5bb9\u66f4\u591a\uff0c\u5c31\u80fd\u5f00\u59cb\u9ad8\u6548\u5730\u4f7f\u7528 SQLModel\u3002\ud83e\udd13</p>"},{"location":"tutorial/create-db-and-table-with-db-browser/#_4","title":"\u5c0f\u7ed3","text":"<p>\u6211\u4eec\u5b66\u4e60\u4e86\u5982\u4f55\u4f7f\u7528 DB Browser for SQLite \u901a\u8fc7\u53ef\u89c6\u5316\u7528\u6237\u754c\u9762\u4e0e SQLite \u6570\u636e\u5e93\u6587\u4ef6\u8fdb\u884c\u4ea4\u4e92\u3002</p> <p>\u6211\u4eec\u8fd8\u4e86\u89e3\u4e86\u5982\u4f55\u76f4\u63a5\u5411 SQLite \u6570\u636e\u5e93\u5199\u5165 SQL \u8bed\u53e5\u3002\u8fd9\u5728\u9a8c\u8bc1\u6570\u636e\u5e93\u6570\u636e\u662f\u5426\u6b63\u786e\u3001\u8c03\u8bd5\u7b49\u65b9\u9762\u975e\u5e38\u6709\u7528\u3002</p> <p>\u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u5f00\u59cb\u4f7f\u7528 SQLModel \u4e0e\u6570\u636e\u5e93\u4ea4\u4e92\uff0c\u5e76\u4e14\u6211\u4eec\u5c06\u7ee7\u7eed\u540c\u65f6\u4f7f\u7528 DB Browser for SQLite \u6765\u67e5\u770b\u5e95\u5c42\u7684\u6570\u636e\u5e93\u3002\ud83d\udd0d</p>"},{"location":"tutorial/create-db-and-table/","title":"\u4f7f\u7528 SQLModel \u521b\u5efa\u8868 - \u4f7f\u7528\u5f15\u64ce","text":"<p>\u73b0\u5728\u8ba9\u6211\u4eec\u5f00\u59cb\u7f16\u5199\u4ee3\u7801\u5427\u3002\ud83d\udc69\u200d\ud83d\udcbb</p> <p>\u786e\u4fdd\u4f60\u5df2\u7ecf\u8fdb\u5165\u4f60\u7684\u9879\u76ee\u76ee\u5f55\u5e76\u6fc0\u6d3b\u4e86\u865a\u62df\u73af\u5883\uff0c\u6b63\u5982\u4e0a\u4e00\u7ae0\u8282\u6240\u89e3\u91ca\u7684\u3002</p> <p>\u6211\u4eec\u5c06\uff1a</p> <ul> <li>\u4f7f\u7528 SQLModel \u5b9a\u4e49\u4e00\u4e2a\u8868</li> <li>\u4f7f\u7528 SQLModel \u521b\u5efa\u76f8\u540c\u7684 SQLite \u6570\u636e\u5e93\u548c\u8868</li> <li>\u4f7f\u7528 DB Browser for SQLite \u6765\u786e\u8ba4\u64cd\u4f5c</li> </ul> <p>\u8fd9\u91cc\u662f\u6211\u4eec\u60f3\u8981\u7684\u8868\u7ed3\u6784\u7684\u63d0\u9192\uff1a</p> idnamesecret_nameage 1DeadpondDive Wilsonnull 2Spider-BoyPedro Parqueadornull 3Rusty-ManTommy Sharp48"},{"location":"tutorial/create-db-and-table/#_1","title":"\u521b\u5efa\u8868\u6a21\u578b\u7c7b","text":"<p>\u6211\u4eec\u9700\u8981\u505a\u7684\u7b2c\u4e00\u4ef6\u4e8b\u662f\u521b\u5efa\u4e00\u4e2a\u7c7b\u6765\u8868\u793a\u8868\u4e2d\u7684\u6570\u636e\u3002</p> <p>\u8fd9\u6837\u7684\u7c7b\u901a\u5e38\u88ab\u79f0\u4e3a \u6a21\u578b\u3002</p> <p>Tip</p> <p>\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u8fd9\u4e2a\u5305\u53eb\u505a <code>SQLModel</code>\u3002\u56e0\u4e3a\u5b83\u4e3b\u8981\u7528\u4e8e\u521b\u5efa SQL \u6a21\u578b\u3002</p> <p>\u4e3a\u6b64\uff0c\u6211\u4eec\u5c06\u5bfc\u5165 <code>SQLModel</code>\uff08\u4ee5\u53ca\u6211\u4eec\u8fd8\u5c06\u4f7f\u7528\u7684\u5176\u4ed6\u5185\u5bb9\uff09\uff0c\u5e76\u521b\u5efa\u4e00\u4e2a\u7ee7\u627f\u81ea <code>SQLModel</code> \u7684\u7c7b <code>Hero</code>\uff0c\u5b83\u8868\u793a\u6211\u4eec\u7684\u82f1\u96c4\u7684 \u8868\u6a21\u578b\uff1a</p> Python 3.10+ <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\nSQLModel.metadata.create_all(engine)\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\nSQLModel.metadata.create_all(engine)\n</code></pre> <p>\u8fd9\u4e2a <code>Hero</code> \u7c7b \u8868\u793a\u8868\uff0c\u6211\u4eec\u7a0d\u540e\u521b\u5efa\u7684\u6bcf\u4e2a\u5b9e\u4f8b\u5c06 \u8868\u793a\u8868\u4e2d\u7684\u4e00\u884c\u3002</p> <p>\u6211\u4eec\u4f7f\u7528\u914d\u7f6e <code>table=True</code> \u6765\u544a\u8bc9 SQLModel \u8fd9\u662f\u4e00\u4e2a \u8868\u6a21\u578b\uff0c\u5b83\u4ee3\u8868\u4e00\u4e2a\u8868\u3002</p> <p>Info</p> <p>\u4e5f\u53ef\u4ee5\u6ca1\u6709 <code>table=True</code> \u7684\u6a21\u578b\uff0c\u90a3\u4e9b\u53ea\u662f \u6570\u636e\u6a21\u578b\uff0c\u6ca1\u6709\u6570\u636e\u5e93\u4e2d\u7684\u8868\uff0c\u5b83\u4eec\u4e0d\u4f1a\u662f \u8868\u6a21\u578b\u3002</p> <p>\u8fd9\u4e9b \u6570\u636e\u6a21\u578b \u5728\u4ee5\u540e\u4f1a\u975e\u5e38\u6709\u7528\uff0c\u4f46\u73b0\u5728\uff0c\u6211\u4eec\u53ea\u9700\u7ee7\u7eed\u6dfb\u52a0 <code>table=True</code> \u914d\u7f6e\u3002</p>"},{"location":"tutorial/create-db-and-table/#_2","title":"\u5b9a\u4e49\u5b57\u6bb5\u3001\u5217","text":"<p>\u4e0b\u4e00\u6b65\u662f\u901a\u8fc7\u4f7f\u7528\u6807\u51c6\u7684 Python \u7c7b\u578b\u6ce8\u91ca\u6765\u5b9a\u4e49\u7c7b\u7684\u5b57\u6bb5\u6216\u5217\u3002</p> <p>\u8fd9\u4e9b\u53d8\u91cf\u7684\u540d\u79f0\u5c06\u6210\u4e3a\u8868\u4e2d\u5217\u7684\u540d\u79f0\u3002</p> <p>\u800c\u6bcf\u4e2a\u5b57\u6bb5\u7684\u7c7b\u578b\u4e5f\u5c06\u5bf9\u5e94\u8868\u5217\u7684\u7c7b\u578b\uff1a</p> Python 3.10+ <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\nSQLModel.metadata.create_all(engine)\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\nSQLModel.metadata.create_all(engine)\n</code></pre> <p>\u73b0\u5728\u6211\u4eec\u66f4\u8be6\u7ec6\u5730\u770b\u4e00\u4e0b\u8fd9\u4e9b\u5b57\u6bb5/\u5217\u7684\u58f0\u660e\u3002</p>"},{"location":"tutorial/create-db-and-table/#_3","title":"\u53ef\u9009\u5b57\u6bb5\uff0c\u5141\u8bb8\u4e3a\u7a7a\u7684\u5217","text":"<p>\u4ece <code>age</code> \u5f00\u59cb\u6ce8\u610f\uff0c\u5b83\u7684\u7c7b\u578b\u662f <code>int | None</code>\uff08\u6216 <code>Optional[int]</code>\uff09\u3002</p> <p>\u6211\u4eec\u4ece <code>typing</code> \u6807\u51c6\u6a21\u5757\u5bfc\u5165\u4e86 <code>Optional</code>\u3002</p> <p>\u8fd9\u662f\u5728 Python \u4e2d\u58f0\u660e\u67d0\u4e2a\u4e1c\u897f \"\u53ef\u4ee5\u662f <code>int</code> \u6216 <code>None</code>\" \u7684\u6807\u51c6\u65b9\u5f0f\u3002</p> <p>\u6211\u4eec\u8fd8\u5c06 <code>age</code> \u7684\u9ed8\u8ba4\u503c\u8bbe\u7f6e\u4e3a <code>None</code>\u3002</p> Python 3.10+ <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\nSQLModel.metadata.create_all(engine)\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\nSQLModel.metadata.create_all(engine)\n</code></pre> <p>Tip</p> <p>\u6211\u4eec\u4e5f\u5c06 <code>id</code> \u5b9a\u4e49\u4e3a <code>Optional</code>\u3002\u4f46\u662f\u6211\u4eec\u5c06\u5728\u4e0b\u9762\u8ba8\u8bba <code>id</code>\u3002</p> <p>\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6211\u4eec\u544a\u8bc9 SQLModel \u5728\u9a8c\u8bc1\u6570\u636e\u65f6\uff0c<code>age</code> \u4e0d\u662f\u5fc5\u9700\u7684\uff0c\u5e76\u4e14\u5b83\u7684\u9ed8\u8ba4\u503c\u662f <code>None</code>\u3002</p> <p>\u6211\u4eec\u8fd8\u544a\u8bc9\u5b83\uff0c\u5728 SQL \u6570\u636e\u5e93\u4e2d\uff0c<code>age</code> \u7684\u9ed8\u8ba4\u503c\u662f <code>NULL</code>\uff08\u4e0e Python \u4e2d\u7684 <code>None</code> \u7b49\u4ef7\uff09\u3002</p> <p>\u56e0\u6b64\uff0c\u8fd9\u4e2a\u5217\u662f \"\u53ef\u4e3a\u7a7a\u7684\"\uff08\u53ef\u4ee5\u8bbe\u7f6e\u4e3a <code>NULL</code>\uff09\u3002</p> <p>Info</p> <p>\u5728 Pydantic \u4e2d\uff0c<code>age</code> \u662f\u4e00\u4e2a \u53ef\u9009\u5b57\u6bb5\u3002</p> <p>\u5728 SQLAlchemy \u4e2d\uff0c<code>age</code> \u662f\u4e00\u4e2a \u5141\u8bb8\u4e3a\u7a7a\u7684\u5217\u3002</p>"},{"location":"tutorial/create-db-and-table/#id","title":"\u4e3b\u952e <code>id</code>","text":"<p>\u73b0\u5728\u8ba9\u6211\u4eec\u56de\u987e\u4e00\u4e0b <code>id</code> \u5b57\u6bb5\u3002\u5b83\u662f\u8868\u7684 \u4e3b\u952e\u3002</p> <p>\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u5c06 <code>id</code> \u6807\u8bb0\u4e3a \u4e3b\u952e\u3002</p> <p>\u4e3a\u6b64\uff0c\u6211\u4eec\u4f7f\u7528\u6765\u81ea <code>sqlmodel</code> \u7684\u7279\u6b8a <code>Field</code> \u51fd\u6570\uff0c\u5e76\u8bbe\u7f6e\u53c2\u6570 <code>primary_key=True</code>\uff1a</p> Python 3.10+ <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\nSQLModel.metadata.create_all(engine)\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\nSQLModel.metadata.create_all(engine)\n</code></pre> <p>\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6211\u4eec\u544a\u8bc9 SQLModel \u8fd9\u4e2a <code>id</code> \u5b57\u6bb5/\u5217\u662f\u8868\u7684\u4e3b\u952e\u3002</p> <p>\u4f46\u662f\u5728 SQL \u6570\u636e\u5e93\u4e2d\uff0c\u5b83\u662f \u59cb\u7ec8\u5fc5\u987b\u7684\uff0c\u5e76\u4e14\u4e0d\u80fd\u4e3a <code>NULL</code>\u3002\u4e3a\u4ec0\u4e48\u6211\u4eec\u8981\u7528 <code>Optional</code> \u6765\u58f0\u660e\u5b83\u5462\uff1f</p> <p><code>id</code> \u5728\u6570\u636e\u5e93\u4e2d\u662f\u5fc5\u987b\u7684\uff0c\u4f46\u5b83\u5c06\u7531\u6570\u636e\u5e93\u751f\u6210\uff0c\u800c\u4e0d\u662f\u7531\u6211\u4eec\u7684\u4ee3\u7801\u751f\u6210\u3002</p> <p>\u56e0\u6b64\uff0c\u6bcf\u5f53\u6211\u4eec\u521b\u5efa\u8fd9\u4e2a\u7c7b\u7684\u5b9e\u4f8b\uff08\u5728\u540e\u7eed\u7ae0\u8282\u4e2d\uff09\uff0c\u6211\u4eec \u4e0d\u4f1a\u8bbe\u7f6e <code>id</code>\u3002\u5e76\u4e14 <code>id</code> \u7684\u503c\u5c06\u662f <code>None</code> \u76f4\u5230\u6211\u4eec\u5c06\u5176\u4fdd\u5b58\u5230\u6570\u636e\u5e93\u4e2d\uff0c\u7136\u540e\u5b83\u624d\u4f1a\u6700\u7ec8\u6709\u4e00\u4e2a\u503c\u3002</p> <pre><code>my_hero = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n\ndo_something(my_hero.id)  # \u54ce\u5440\uff01 my_hero.id \u662f None\uff01 \ud83d\ude31\ud83d\udea8\n\n# \u60f3\u8c61\u4e00\u4e0b\u8fd9\u5c06\u5b83\u4fdd\u5b58\u5230\u6570\u636e\u5e93\u4e2d\nsomehow_save_in_db(my_hero)\n\ndo_something(my_hero.id)  # \u73b0\u5728 my_hero.id \u6709\u4e00\u4e2a\u7531\u6570\u636e\u5e93\u751f\u6210\u7684\u503c \ud83c\udf89\n</code></pre> <p>\u56e0\u6b64\uff0c\u56e0\u4e3a\u5728 \u6211\u4eec\u7684\u4ee3\u7801\u4e2d\uff08\u800c\u4e0d\u662f\u6570\u636e\u5e93\u4e2d\uff09<code>id</code> \u7684\u503c \u53ef\u80fd\u662f <code>None</code>\uff0c\u6240\u4ee5\u6211\u4eec\u4f7f\u7528 <code>Optional</code>\u3002\u8fd9\u6837 \u7f16\u8f91\u5668\u5c06\u80fd\u591f\u5e2e\u52a9\u6211\u4eec\uff0c\u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u8bbf\u95ee\u4e00\u4e2a\u5c1a\u672a\u4fdd\u5b58\u5230\u6570\u636e\u5e93\u4e2d\u7684\u5bf9\u8c61\u7684 <code>id</code>\uff0c\u5b83\u4ecd\u7136\u4f1a\u662f <code>None</code>\u3002</p> <p></p> <p>\u73b0\u5728\uff0c\u7531\u4e8e\u6211\u4eec\u7528 <code>Field()</code> \u51fd\u6570\u53d6\u4ee3\u4e86\u9ed8\u8ba4\u503c\uff0c\u6211\u4eec\u5728 <code>Field()</code> \u4e2d\u901a\u8fc7\u53c2\u6570 <code>default=None</code> \u8bbe\u7f6e\u4e86 <code>id</code> \u7684 \u5b9e\u9645\u9ed8\u8ba4\u503c\uff1a</p> <pre><code>Field(default=None)\n</code></pre> <p>\u5982\u679c\u6211\u4eec\u6ca1\u6709\u8bbe\u7f6e <code>default</code> \u503c\uff0c\u6bcf\u5f53\u6211\u4eec\u7a0d\u540e\u4f7f\u7528\u8fd9\u4e2a\u6a21\u578b\u8fdb\u884c\u6570\u636e\u9a8c\u8bc1\u65f6\uff08\u7531 Pydantic \u63d0\u4f9b\u652f\u6301\uff09\uff0c\u5b83\u5c06 \u63a5\u53d7 <code>None</code> \u548c <code>int</code> \u7684\u503c\uff0c\u4f46\u4ecd\u7136 \u8981\u6c42 \u4f20\u9012\u90a3\u4e2a <code>None</code> \u503c\u3002\u8fd9\u5bf9\u4e8e\u540e\u7eed\u4f7f\u7528\u8be5\u6a21\u578b\u7684\u4eba\uff08\u53ef\u80fd\u662f\u6211\u4eec\u81ea\u5df1\uff09\u6765\u8bf4\u4f1a\u975e\u5e38\u56f0\u60d1\uff0c\u56e0\u6b64 \u6700\u597d\u5728\u8fd9\u91cc\u8bbe\u7f6e\u9ed8\u8ba4\u503c \u3002</p>"},{"location":"tutorial/create-db-and-table/#_4","title":"\u521b\u5efa\u5f15\u64ce","text":"<p>\u73b0\u5728\u6211\u4eec\u9700\u8981\u521b\u5efa SQLAlchemy \u5f15\u64ce\u3002</p> <p>\u5b83\u662f\u4e00\u4e2a\u5904\u7406\u4e0e\u6570\u636e\u5e93\u901a\u4fe1\u7684\u5bf9\u8c61\u3002</p> <p>\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f\u670d\u52a1\u5668\u6570\u636e\u5e93\uff08\u4f8b\u5982 PostgreSQL \u6216 MySQL\uff09\uff0c\u5f15\u64ce**\u5c06\u4fdd\u5b58\u4e0e\u8be5\u6570\u636e\u5e93\u7684 **\u7f51\u7edc\u8fde\u63a5\u3002</p> <p>\u521b\u5efa \u5f15\u64ce \u975e\u5e38\u7b80\u5355\uff0c\u53ea\u9700\u8c03\u7528 <code>create_engine()</code> \u5e76\u63d0\u4f9b\u6570\u636e\u5e93\u7684 URL\uff1a</p> Python 3.10+ <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\nSQLModel.metadata.create_all(engine)\n</code></pre> \ud83d\udc40 Full file preview <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\nSQLModel.metadata.create_all(engine)\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\nSQLModel.metadata.create_all(engine)\n</code></pre> <p>\u901a\u5e38\uff0c\u4f60\u5e94\u8be5\u4e3a\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u521b\u5efa\u4e00\u4e2a \u5f15\u64ce \u5bf9\u8c61\uff0c\u5e76\u5728\u5404\u4e2a\u5730\u65b9\u91cd\u7528\u5b83\u3002</p> <p>Tip</p> <p>\u8fd8\u6709\u4e00\u4e2a\u76f8\u5173\u7684\u6982\u5ff5\u53eb\u505a \u4f1a\u8bdd\uff0c\u5b83\u901a\u5e38\u4e0d\u5e94\u8be5\u662f\u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u5355\u4e2a\u5bf9\u8c61\u3002</p> <p>\u4f46\u6211\u4eec\u7a0d\u540e\u4f1a\u8ba8\u8bba\u8fd9\u4e2a\u95ee\u9898\u3002</p>"},{"location":"tutorial/create-db-and-table/#url","title":"\u5f15\u64ce\u6570\u636e\u5e93 URL","text":"<p>\u6bcf\u4e2a\u652f\u6301\u7684\u6570\u636e\u5e93\u90fd\u6709\u5176\u81ea\u5df1\u7684 URL \u7c7b\u578b\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e SQLite\uff0c\u5b83\u662f <code>sqlite:///</code> \u540e\u8ddf\u6587\u4ef6\u8def\u5f84\u3002\u4f8b\u5982\uff1a</p> <ul> <li><code>sqlite:///database.db</code></li> <li><code>sqlite:///databases/local/application.db</code></li> <li><code>sqlite:///db.sqlite</code></li> </ul> <p>SQLite \u652f\u6301\u4e00\u4e2a\u7279\u6b8a\u7684\u6570\u636e\u5e93\uff0c\u5b83\u5b8c\u5168\u5b58\u5728\u4e8e \u5185\u5b58\u4e2d\u3002\u56e0\u6b64\uff0c\u5b83\u975e\u5e38\u5feb\u901f\uff0c\u4f46\u8bf7\u5c0f\u5fc3\uff0c\u7a0b\u5e8f\u7ec8\u6b62\u540e\u6570\u636e\u5e93\u4f1a\u88ab\u5220\u9664\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u53ea\u4f7f\u7528\u4e24\u4e2a\u659c\u6760\u5b57\u7b26\uff08<code>//</code>\uff09\u800c\u4e0d\u6307\u5b9a\u6587\u4ef6\u540d\u6765\u6307\u5b9a\u8fd9\u4e2a\u5185\u5b58\u6570\u636e\u5e93\uff1a</p> <ul> <li><code>sqlite://</code></li> </ul> Python 3.10+ <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\nSQLModel.metadata.create_all(engine)\n</code></pre> \ud83d\udc40 Full file preview <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\nSQLModel.metadata.create_all(engine)\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\nSQLModel.metadata.create_all(engine)\n</code></pre> <p>\u4f60\u53ef\u4ee5\u5728 SQLAlchemy \u6587\u6863 \u4e2d\u9605\u8bfb\u66f4\u591a\u5173\u4e8e SQLAlchemy \u652f\u6301\u7684\u6240\u6709\u6570\u636e\u5e93\u7684\u4fe1\u606f\uff08\u4ece\u800c\u4e5f\u652f\u6301 SQLModel\uff09\u3002</p>"},{"location":"tutorial/create-db-and-table/#_5","title":"\u5f15\u64ce\u56de\u663e","text":"<p>\u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u8fd8\u4f7f\u7528\u4e86 <code>echo=True</code> \u53c2\u6570\u3002</p> <p>\u5b83\u4f1a\u8ba9\u5f15\u64ce\u6253\u5370\u51fa\u5b83\u6267\u884c\u7684\u6240\u6709 SQL \u8bed\u53e5\uff0c\u8fd9\u6709\u52a9\u4e8e\u4f60\u7406\u89e3\u53d1\u751f\u4e86\u4ec0\u4e48\u3002</p> <p>\u5b83\u7279\u522b\u6709\u52a9\u4e8e \u5b66\u4e60 \u548c \u8c03\u8bd5\uff1a</p> Python 3.10+ <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\nSQLModel.metadata.create_all(engine)\n</code></pre> \ud83d\udc40 Full file preview <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\nSQLModel.metadata.create_all(engine)\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\nSQLModel.metadata.create_all(engine)\n</code></pre> <p>\u4f46\u5728\u751f\u4ea7\u73af\u5883\u4e2d\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u53bb\u6389 <code>echo=True</code>\uff1a</p> <pre><code>engine = create_engine(sqlite_url)\n</code></pre>"},{"location":"tutorial/create-db-and-table/#_6","title":"\u5f15\u64ce\u6280\u672f\u7ec6\u8282","text":"<p>Tip</p> <p>\u5982\u679c\u4f60\u4e4b\u524d\u5bf9 SQLAlchemy \u4e0d\u719f\u6089\uff0c\u73b0\u5728\u53ea\u662f\u5b66\u4e60 SQLModel\uff0c\u4f60\u53ef\u4ee5\u8df3\u8fc7\u8fd9\u4e00\u90e8\u5206\uff0c\u7ee7\u7eed\u5f80\u4e0b\u770b\u3002</p> <p>\u4f60\u53ef\u4ee5\u5728 SQLAlchemy \u6587\u6863 \u4e2d\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u5f15\u64ce\u7684\u5185\u5bb9\u3002</p> <p>SQLModel \u5b9a\u4e49\u4e86\u5b83\u81ea\u5df1\u7684 <code>create_engine()</code> \u51fd\u6570\u3002\u5b83\u4e0e SQLAlchemy \u7684 <code>create_engine()</code> \u76f8\u540c\uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u5b83\u9ed8\u8ba4\u4f7f\u7528 <code>future=True</code>\uff08\u8fd9\u610f\u5473\u7740\u5b83\u4f7f\u7528\u7684\u662f SQLAlchemy \u6700\u65b0\u7248\u672c 1.4 \u4ee5\u53ca\u672a\u6765\u7248\u672c 2.0 \u7684\u98ce\u683c\uff09\u3002</p> <p>\u800c\u4e14 SQLModel \u7684\u7248\u672c <code>create_engine()</code> \u662f\u5185\u90e8\u8fdb\u884c\u7c7b\u578b\u6ce8\u89e3\u7684\uff0c\u56e0\u6b64\u4f60\u7684\u7f16\u8f91\u5668\u5c06\u80fd\u591f\u901a\u8fc7\u81ea\u52a8\u5b8c\u6210\u548c\u5185\u8054\u9519\u8bef\u6765\u5e2e\u52a9\u4f60\u3002</p>"},{"location":"tutorial/create-db-and-table/#_7","title":"\u521b\u5efa\u6570\u636e\u5e93\u548c\u8868","text":"<p>\u73b0\u5728\u4e00\u5207\u90fd\u51c6\u5907\u5c31\u7eea\uff0c\u53ef\u4ee5\u6700\u7ec8\u521b\u5efa\u6570\u636e\u5e93\u548c\u8868\uff1a</p> Python 3.10+ <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\nSQLModel.metadata.create_all(engine)\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\nSQLModel.metadata.create_all(engine)\n</code></pre> <p>Tip</p> <p>\u521b\u5efa\u5f15\u64ce\u5e76\u4e0d\u4f1a\u521b\u5efa <code>database.db</code> \u6587\u4ef6\u3002</p> <p>\u4f46\u4e00\u65e6\u6211\u4eec\u8fd0\u884c <code>SQLModel.metadata.create_all(engine)</code>\uff0c\u5b83\u5c06\u521b\u5efa <code>database.db</code> \u6587\u4ef6 \u5e76\u4e14 \u5728\u8be5\u6570\u636e\u5e93\u4e2d\u521b\u5efa <code>hero</code> \u8868\u3002</p> <p>\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u4f1a\u5728\u4e00\u4e2a\u6b65\u9aa4\u4e2d\u5b8c\u6210\u3002</p> <p>\u8ba9\u6211\u4eec\u8be6\u7ec6\u89e3\u91ca\u4e00\u4e0b\uff1a</p> <pre><code>SQLModel.metadata.create_all(engine)\n</code></pre>"},{"location":"tutorial/create-db-and-table/#sqlmodel","title":"SQLModel \u5143\u6570\u636e","text":"<p><code>SQLModel</code> \u7c7b\u6709\u4e00\u4e2a <code>metadata</code> \u5c5e\u6027\u3002\u5b83\u662f <code>MetaData</code> \u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002</p> <p>\u6bcf\u5f53\u4f60\u521b\u5efa\u4e00\u4e2a\u7ee7\u627f\u81ea <code>SQLModel</code> \u5e76\u4e14\u914d\u7f6e\u4e86 <code>table = True</code> \u7684\u7c7b\u65f6\uff0c\u5b83\u4f1a\u5728\u8fd9\u4e2a <code>metadata</code> \u5c5e\u6027\u4e2d\u6ce8\u518c\u3002</p> <p>\u56e0\u6b64\uff0c\u5728\u6700\u540e\u4e00\u884c\u4e2d\uff0c<code>SQLModel.metadata</code> \u5df2\u7ecf\u6ce8\u518c\u4e86 <code>Hero</code>\u3002</p>"},{"location":"tutorial/create-db-and-table/#create_all","title":"\u8c03\u7528 <code>create_all()</code>","text":"<p><code>SQLModel.metadata</code> \u4e2d\u7684\u8fd9\u4e2a <code>MetaData</code> \u5bf9\u8c61\u6709\u4e00\u4e2a <code>create_all()</code> \u65b9\u6cd5\u3002</p> <p>\u5b83\u63a5\u6536\u4e00\u4e2a \u5f15\u64ce\uff0c\u5e76\u4f7f\u7528\u8be5\u5f15\u64ce\u6765\u521b\u5efa\u6570\u636e\u5e93\u548c\u6240\u6709\u5728\u8be5 <code>MetaData</code> \u5bf9\u8c61\u4e2d\u6ce8\u518c\u7684\u8868\u3002</p>"},{"location":"tutorial/create-db-and-table/#sqlmodel_1","title":"SQLModel \u5143\u6570\u636e\u7684\u987a\u5e8f\u5f88\u91cd\u8981","text":"<p>\u8fd9\u4e5f\u610f\u5473\u7740\u4f60\u5fc5\u987b\u5728\u521b\u5efa\u7ee7\u627f\u81ea <code>SQLModel</code> \u7684\u65b0\u6a21\u578b\u7c7b\u7684\u4ee3\u7801 \u4e4b\u540e \u8c03\u7528 <code>SQLModel.metadata.create_all()</code>\u3002</p> <p>\u4f8b\u5982\uff0c\u5047\u8bbe\u4f60\u8fd9\u6837\u505a\uff1a</p> <ul> <li>\u5728\u4e00\u4e2a Python \u6587\u4ef6 <code>models.py</code> \u4e2d\u521b\u5efa\u6a21\u578b\u3002</li> <li>\u5728\u6587\u4ef6 <code>db.py</code> \u4e2d\u521b\u5efa\u5f15\u64ce\u5bf9\u8c61\u3002</li> <li>\u5728\u4e3b\u5e94\u7528\u7a0b\u5e8f <code>app.py</code> \u4e2d\u8c03\u7528 <code>SQLModel.metadata.create_all()</code>\u3002</li> </ul> <p>\u5982\u679c\u4f60\u4ec5\u4ec5\u5bfc\u5165 <code>SQLModel</code> \u5e76\u5c1d\u8bd5\u5728 <code>app.py</code> \u4e2d\u8c03\u7528 <code>SQLModel.metadata.create_all()</code>\uff0c\u5b83\u5c06\u4e0d\u4f1a\u521b\u5efa\u4f60\u7684\u8868\uff1a</p> <pre><code># \u8fd9\u6837\u505a\u662f\u884c\u4e0d\u901a\u7684\uff01\ud83d\udea8\nfrom sqlmodel import SQLModel\n\nfrom .db import engine\n\nSQLModel.metadata.create_all(engine)\n</code></pre> <p>\u4e4b\u6240\u4ee5\u884c\u4e0d\u901a\uff0c\u662f\u56e0\u4e3a\u5f53\u4f60\u5355\u72ec\u5bfc\u5165 <code>SQLModel</code> \u65f6\uff0cPython \u5e76\u6ca1\u6709\u6267\u884c\u6240\u6709\u521b\u5efa\u7ee7\u627f\u81ea\u5b83\u7684\u7c7b\uff08\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\u662f <code>Hero</code> \u7c7b\uff09\u7684\u4ee3\u7801\uff0c\u56e0\u6b64 <code>SQLModel.metadata</code> \u4ecd\u7136\u4e3a\u7a7a\u3002</p> <p>\u4f46\u662f\uff0c\u5982\u679c\u4f60\u5728\u8c03\u7528 <code>SQLModel.metadata.create_all()</code> \u4e4b\u524d\u5bfc\u5165\u6a21\u578b\uff0c\u5b83\u5c06\u4f1a\u751f\u6548\uff1a</p> <pre><code>from sqlmodel import SQLModel\n\nfrom . import models\nfrom .db import engine\n\nSQLModel.metadata.create_all(engine)\n</code></pre> <p>\u8fd9\u6837\u505a\u662f\u6709\u6548\u7684\uff0c\u56e0\u4e3a\u901a\u8fc7\u5bfc\u5165\u6a21\u578b\uff0cPython \u4f1a\u6267\u884c\u6240\u6709\u521b\u5efa\u7ee7\u627f\u81ea <code>SQLModel</code> \u7684\u7c7b\u7684\u4ee3\u7801\uff0c\u5e76\u5c06\u5b83\u4eec\u6ce8\u518c\u5230 <code>SQLModel.metadata</code> \u4e2d\u3002</p> <p>\u4f5c\u4e3a\u4e00\u79cd\u66ff\u4ee3\u65b9\u6cd5\uff0c\u4f60\u53ef\u4ee5\u5728 <code>db.py</code> \u4e2d\u5bfc\u5165 <code>SQLModel</code> \u548c\u4f60\u7684\u6a21\u578b\uff1a</p> <pre><code># db.py\nfrom sqlmodel import SQLModel, create_engine\nfrom . import models\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url)\n</code></pre> <p>\u7136\u540e\u5728 <code>app.py</code> \u4e2d\u4ece <code>db.py</code> \u5bfc\u5165 <code>SQLModel</code>\uff0c\u5e76\u5728\u5176\u4e2d\u8c03\u7528 <code>SQLModel.metadata.create_all()</code>\uff1a</p> <pre><code># app.py\nfrom .db import engine, SQLModel\n\nSQLModel.metadata.create_all(engine)\n</code></pre> <p>\u4ece <code>db.py</code> \u5bfc\u5165 <code>SQLModel</code> \u662f\u6709\u6548\u7684\uff0c\u56e0\u4e3a <code>SQLModel</code> \u4e5f\u5728 <code>db.py</code> \u4e2d\u88ab\u5bfc\u5165\u3002</p> <p>\u8fd9\u4e2a\u6280\u5de7\u80fd\u591f\u6b63\u786e\u5730\u5de5\u4f5c\uff0c\u5e76\u521b\u5efa\u6570\u636e\u5e93\u4e2d\u7684\u8868\uff0c\u56e0\u4e3a\u901a\u8fc7\u4ece <code>db.py</code> \u5bfc\u5165 <code>SQLModel</code>\uff0cPython \u4f1a\u6267\u884c\u6240\u6709\u5728 <code>db.py</code> \u6587\u4ef6\u4e2d\u521b\u5efa\u7ee7\u627f\u81ea <code>SQLModel</code> \u7684\u7c7b\u7684\u4ee3\u7801\uff0c\u4f8b\u5982 <code>Hero</code> \u7c7b\u3002</p>"},{"location":"tutorial/create-db-and-table/#_8","title":"\u6570\u636e\u5e93\u8fc1\u79fb","text":"<p>\u5bf9\u4e8e\u8fd9\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\uff0c\u4ee5\u53ca \u6559\u7a0b - \u7528\u6237\u6307\u5357 \u4e2d\u7684\u5927\u591a\u6570\u5185\u5bb9\uff0c\u4f7f\u7528 <code>SQLModel.metadata.create_all()</code> \u5c31\u8db3\u591f\u4e86\u3002</p> <p>\u4f46\u5bf9\u4e8e\u751f\u4ea7\u7cfb\u7edf\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u4f7f\u7528\u4e00\u4e2a\u6570\u636e\u5e93\u8fc1\u79fb\u7cfb\u7edf\u3002</p> <p>\u4f8b\u5982\uff0c\u6bcf\u5f53\u4f60\u6dfb\u52a0\u6216\u5220\u9664\u5217\u3001\u6dfb\u52a0\u65b0\u8868\u3001\u66f4\u6539\u6570\u636e\u7c7b\u578b\u7b49\u65f6\uff0c\u8fd9\u5c06\u975e\u5e38\u6709\u7528\u548c\u91cd\u8981\u3002</p> <p>\u4e0d\u8fc7\uff0c\u4f60\u5c06\u5728\u540e\u9762\u7684\u9ad8\u7ea7\u7528\u6237\u6307\u5357\u4e2d\u5b66\u4e60\u6570\u636e\u5e93\u8fc1\u79fb\u3002</p>"},{"location":"tutorial/create-db-and-table/#_9","title":"\u8fd0\u884c\u7a0b\u5e8f","text":"<p>\u73b0\u5728\u8fd0\u884c\u7a0b\u5e8f\uff0c\u770b\u770b\u4e00\u5207\u662f\u5426\u6b63\u5e38\u5de5\u4f5c\u3002</p> <p>\u5982\u679c\u4f60\u8fd8\u6ca1\u6709\uff0c\u5c06\u4ee3\u7801\u653e\u5728 <code>app.py</code> \u6587\u4ef6\u4e2d\u3002</p> Python 3.10+ <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\nSQLModel.metadata.create_all(engine)\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\nSQLModel.metadata.create_all(engine)\n</code></pre> <p>Tip</p> <p>\u8bb0\u5f97\u5728\u8fd0\u884c\u4e4b\u524d \u6fc0\u6d3b\u865a\u62df\u73af\u5883\u3002</p> <p>\u73b0\u5728\u4f7f\u7528 Python \u8fd0\u884c\u7a0b\u5e8f\uff1a</p> <pre><code>// \u6211\u4eec\u8bbe\u7f6e\u4e86 echo=True\uff0c\u6240\u4ee5\u8fd9\u5c06\u663e\u793a SQL \u4ee3\u7801\n$ python app.py\n\n// \u9996\u5148\uff0c\u4e00\u4e9b\u6211\u4eec\u4e0d\u592a\u5173\u5fc3\u7684 SQL \u6837\u677f\u4ee3\u7801\n\nINFO Engine BEGIN (implicit)\nINFO Engine PRAGMA main.table_info(\"hero\")\nINFO Engine [raw sql] ()\nINFO Engine PRAGMA temp.table_info(\"hero\")\nINFO Engine [raw sql] ()\nINFO Engine\n\n// \u6700\u540e\uff0c\u521b\u5efa\u8868\u7684\u7cbe\u5f69 SQL \u2728\n\nCREATE TABLE hero (\n        id INTEGER,\n        name VARCHAR NOT NULL,\n        secret_name VARCHAR NOT NULL,\n        age INTEGER,\n        PRIMARY KEY (id)\n)\n\n// \u66f4\u591a SQL \u6837\u677f\u4ee3\u7801\n\nINFO Engine [no key 0.00020s] ()\nINFO Engine COMMIT\n</code></pre> <p>Info</p> <p>\u4e3a\u4e86\u4f7f\u8f93\u51fa\u66f4\u6613\u4e8e\u9605\u8bfb\uff0c\u6211\u5bf9\u4e0a\u9762\u7684\u8f93\u51fa\u505a\u4e86\u4e00\u4e9b\u7b80\u5316\u3002</p> <p>\u4f46\u5b9e\u9645\u4e0a\uff0c\u5b83\u663e\u793a\u7684\u5185\u5bb9\u53ef\u80fd\u662f\uff1a</p> <pre><code>2021-07-25 21:37:39,175 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n</code></pre>"},{"location":"tutorial/create-db-and-table/#text-varchar","title":"<code>TEXT</code> \u6216 <code>VARCHAR</code>","text":"<p>\u5728\u4e0a\u4e00\u7ae0\u8282\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 <code>TEXT</code> \u4e3a\u67d0\u4e9b\u5217\u521b\u5efa\u4e86\u8868\u683c\u3002</p> <p>\u4f46\u5728\u8fd9\u4e2a\u8f93\u51fa\u4e2d\uff0cSQLAlchemy \u4f7f\u7528\u7684\u662f <code>VARCHAR</code>\u3002\u8ba9\u6211\u4eec\u770b\u770b\u53d1\u751f\u4e86\u4ec0\u4e48\u3002</p> <p>\u8bb0\u4f4f\u5417\uff1f\u6bcf\u4e2a SQL \u6570\u636e\u5e93\u5728\u652f\u6301\u7684\u5185\u5bb9\u4e0a\u90fd\u6709\u4e00\u4e9b\u4e0d\u540c\u7684\u53d8\u79cd\uff1f</p> <p>\u8fd9\u5c31\u662f\u5176\u4e2d\u7684\u4e00\u4e2a\u5dee\u5f02\u3002\u6bcf\u4e2a\u6570\u636e\u5e93\u652f\u6301\u67d0\u4e9b\u7279\u5b9a\u7684 \u6570\u636e\u7c7b\u578b\uff0c\u6bd4\u5982 <code>INTEGER</code> \u548c <code>TEXT</code>\u3002</p> <p>\u4e00\u4e9b\u6570\u636e\u5e93\u6709\u4e00\u4e9b\u7279\u5b9a\u7684\u7c7b\u578b\uff0c\u4e13\u95e8\u7528\u4e8e\u67d0\u4e9b\u7279\u5b9a\u7684\u7528\u9014\u3002\u4f8b\u5982\uff0cPostgreSQL \u548c MySQL \u652f\u6301 <code>BOOLEAN</code> \u7c7b\u578b\uff0c\u7528\u4e8e\u8868\u793a <code>True</code> \u548c <code>False</code> \u7684\u503c\u3002SQLite \u4e5f\u63a5\u53d7\u5e26\u6709\u5e03\u5c14\u503c\u7684 SQL\uff0c\u751a\u81f3\u5728\u5b9a\u4e49\u8868\u683c\u5217\u65f6\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5e03\u5c14\u503c\uff0c\u4f46\u5b83\u5185\u90e8\u5b9e\u9645\u4f7f\u7528\u7684\u662f <code>INTEGER</code> \u7c7b\u578b\uff0c\u7528 <code>1</code> \u8868\u793a <code>True</code>\uff0c\u7528 <code>0</code> \u8868\u793a <code>False</code>\u3002</p> <p>\u540c\u6837\u5730\uff0c\u5b58\u50a8\u5b57\u7b26\u4e32\u6709\u51e0\u79cd\u53ef\u80fd\u7684\u7c7b\u578b\u3002SQLite \u4f7f\u7528 <code>TEXT</code> \u7c7b\u578b\uff0c\u4f46\u50cf PostgreSQL \u548c MySQL \u8fd9\u6837\u7684\u5176\u4ed6\u6570\u636e\u5e93\u9ed8\u8ba4\u4f7f\u7528 <code>VARCHAR</code> \u7c7b\u578b\uff0c<code>VARCHAR</code> \u662f\u6700\u5e38\u89c1\u7684\u5b57\u7b26\u4e32\u6570\u636e\u7c7b\u578b\u4e4b\u4e00\u3002</p> <p><code>VARCHAR</code> \u6765\u81ea \u53ef\u53d8 \u957f\u5ea6 \u5b57\u7b26\u3002</p> <p>SQLAlchemy \u751f\u6210\u7684 SQL \u8bed\u53e5\u4f7f\u7528 <code>VARCHAR</code>\uff0c\u7136\u540e SQLite \u63a5\u6536\u8fd9\u4e9b\u8bed\u53e5\uff0c\u5e76\u5185\u90e8\u5c06\u5b83\u4eec\u8f6c\u6362\u4e3a <code>TEXT</code>\u3002</p> <p>\u9664\u4e86\u8fd9\u4e24\u79cd\u6570\u636e\u7c7b\u578b\u4e4b\u95f4\u7684\u5dee\u5f02\u5916\uff0c\u4e00\u4e9b\u6570\u636e\u5e93\uff0c\u5982 MySQL\uff0c\u8981\u6c42\u4e3a <code>VARCHAR</code> \u7c7b\u578b\u8bbe\u7f6e\u6700\u5927\u957f\u5ea6\u3002\u4f8b\u5982\uff0c<code>VARCHAR(255)</code> \u8bbe\u7f6e\u4e86\u5b57\u7b26\u6570\u7684\u6700\u5927\u503c\u4e3a 255\u3002</p> <p>\u4e3a\u4e86\u4f7f\u5f97 SQLModel \u80fd\u591f\u66f4\u65b9\u4fbf\u5730\u5728\u4efb\u4f55\u6570\u636e\u5e93\u4e0a\u7acb\u5373\u4f7f\u7528\uff08\u5373\u4f7f\u662f MySQL\uff09\uff0c\u5e76\u4e14\u4e0d\u9700\u8981\u4efb\u4f55\u989d\u5916\u914d\u7f6e\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c<code>str</code> \u7c7b\u578b\u7684\u5b57\u6bb5\u5728\u5927\u591a\u6570\u6570\u636e\u5e93\u4e2d\u4f1a\u88ab\u89e3\u91ca\u4e3a <code>VARCHAR</code>\uff0c\u5728 MySQL \u4e2d\u5219\u662f <code>VARCHAR(255)</code>\u3002\u8fd9\u6837\uff0c\u4f60\u5c31\u53ef\u4ee5\u786e\u4fdd\u540c\u4e00\u4e2a\u7c7b\u53ef\u4ee5\u517c\u5bb9\u5927\u591a\u6570\u6d41\u884c\u6570\u636e\u5e93\uff0c\u65e0\u9700\u989d\u5916\u7684\u52aa\u529b\u3002</p> <p>Tip</p> <p>\u4f60\u5c06\u5728\u540e\u7eed\u7684\u9ad8\u7ea7\u6559\u7a0b - \u7528\u6237\u6307\u5357\u4e2d\u5b66\u4e60\u5982\u4f55\u66f4\u6539\u5b57\u7b26\u4e32\u5217\u7684\u6700\u5927\u957f\u5ea6\u3002</p>"},{"location":"tutorial/create-db-and-table/#_10","title":"\u9a8c\u8bc1\u6570\u636e\u5e93","text":"<p>\u73b0\u5728\uff0c\u4f7f\u7528 DB Browser for SQLite \u6253\u5f00\u6570\u636e\u5e93\uff0c\u4f60\u4f1a\u770b\u5230\u7a0b\u5e8f\u5df2\u7ecf\u521b\u5efa\u4e86 <code>hero</code> \u8868\uff0c\u6b63\u5982\u4e4b\u524d\u4e00\u6837\u3002\ud83c\udf89</p> <p></p>"},{"location":"tutorial/create-db-and-table/#_11","title":"\u91cd\u6784\u6570\u636e\u521b\u5efa","text":"<p>\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u7a0d\u5fae\u91cd\u6784\u4e00\u4e0b\u4ee3\u7801\uff0c\u4f7f\u5176\u66f4\u5bb9\u6613 \u91cd\u7528\u3001\u5171\u4eab \u548c \u6d4b\u8bd5\u3002</p> <p>\u6211\u4eec\u5c06\u628a\u90a3\u4e9b\u4e3b\u8981\u6709 \u526f\u4f5c\u7528\uff08\u5373\u6539\u53d8\u6570\u636e\u2014\u2014\u521b\u5efa\u4e00\u4e2a\u6570\u636e\u5e93\u6587\u4ef6\u548c\u8868\uff09\u7684\u4ee3\u7801\u79fb\u5230\u4e00\u4e2a\u51fd\u6570\u4e2d\u3002</p> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u552f\u4e00\u7684\u4ee3\u7801\u5c31\u662f <code>SQLModel.metadata.create_all(engine)</code>\u3002</p> <p>\u8ba9\u6211\u4eec\u5c06\u5b83\u653e\u5230\u4e00\u4e2a\u540d\u4e3a <code>create_db_and_tables()</code> \u7684\u51fd\u6570\u4e2d\uff1a</p> Python 3.10+ <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\nif __name__ == \"__main__\":\n    create_db_and_tables()\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\nif __name__ == \"__main__\":\n    create_db_and_tables()\n</code></pre> <p>\u5982\u679c <code>SQLModel.metadata.create_all(engine)</code> \u4e0d\u5728\u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u5c1d\u8bd5\u4ece\u5176\u4ed6\u6587\u4ef6\u5bfc\u5165\u8fd9\u4e2a\u6a21\u5757\u7684\u5185\u5bb9\u65f6\uff0c\u5b83\u4f1a \u6bcf\u6b21 \u6267\u884c\u5bfc\u5165\u8be5\u6a21\u5757\u7684\u6587\u4ef6\u65f6\uff0c\u90fd\u4f1a\u5c1d\u8bd5\u521b\u5efa\u6570\u636e\u5e93\u548c\u8868\u683c\u3002</p> <p>\u6211\u4eec\u4e0d\u5e0c\u671b\u8fd9\u6837\u53d1\u751f\uff0c\u53ea\u6709\u5728\u6211\u4eec \u6253\u7b97 \u8fd9\u4e48\u505a\u65f6\u624d\u4f1a\u6267\u884c\uff0c\u56e0\u6b64\u6211\u4eec\u628a\u5b83\u653e\u5230\u4e00\u4e2a\u51fd\u6570\u4e2d\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u786e\u4fdd\u53ea\u6709\u5728\u8c03\u7528\u8be5\u51fd\u6570\u65f6\u624d\u4f1a\u521b\u5efa\u8868\u683c\uff0c\u800c\u4e0d\u662f\u5728\u6a21\u5757\u88ab\u5bfc\u5165\u65f6\u81ea\u52a8\u6267\u884c\u3002</p> <p>\u73b0\u5728\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u5176\u4ed6\u6587\u4ef6\u4e2d\u5bfc\u5165 <code>Hero</code> \u7c7b\uff0c\u800c\u4e0d\u4f1a\u53d1\u751f\u90a3\u4e9b \u526f\u4f5c\u7528\u3002</p> <p>Tip</p> <p>\ud83d\ude05 \u5267\u900f\uff1a\u8fd9\u4e2a\u51fd\u6570\u88ab\u547d\u540d\u4e3a <code>create_db_and_tables()</code>\uff0c\u56e0\u4e3a\u672a\u6765\u6211\u4eec\u8fd8\u4f1a\u6709\u5176\u4ed6 \u8868\u683c\uff0c\u5305\u542b\u9664\u4e86 <code>Hero</code> \u7c7b\u4ee5\u5916\u7684\u5176\u4ed6\u7c7b\u3002\ud83d\ude80</p>"},{"location":"tutorial/create-db-and-table/#_12","title":"\u5c06\u6570\u636e\u521b\u5efa\u4f5c\u4e3a\u811a\u672c\u6267\u884c","text":"<p>\u6211\u4eec\u5df2\u7ecf\u9632\u6b62\u4e86\u4ece <code>app.py</code> \u6587\u4ef6\u5bfc\u5165\u65f6\u7684\u526f\u4f5c\u7528\u3002</p> <p>\u4f46\u6211\u4eec\u4ecd\u7136\u5e0c\u671b\u5f53\u6211\u4eec\u4ece\u7ec8\u7aef\u76f4\u63a5\u4ee5\u72ec\u7acb\u811a\u672c\u7684\u65b9\u5f0f\u8fd0\u884c\u65f6\uff0c\u80fd\u591f \u521b\u5efa\u6570\u636e\u5e93\u548c\u8868\u683c\uff0c\u5c31\u50cf\u4e4b\u524d\u90a3\u6837\u3002</p> <p>Tip</p> <p>\u53ef\u4ee5\u5c06 \u811a\u672c \u548c \u7a0b\u5e8f \u770b\u4f5c\u662f\u53ef\u4e92\u6362\u7684\u3002</p> <p>\u811a\u672c \u8fd9\u4e2a\u8bcd\u901a\u5e38\u610f\u5473\u7740\u4ee3\u7801\u53ef\u4ee5\u72ec\u7acb\u4e14\u5bb9\u6613\u5730\u8fd0\u884c\uff0c\u6216\u8005\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5b83\u6307\u7684\u662f\u4e00\u4e2a\u76f8\u5bf9\u7b80\u5355\u7684\u7a0b\u5e8f\u3002</p> <p>\u4e3a\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 <code>if</code> \u8bed\u53e5\u5757\u4e2d\u4f7f\u7528\u7279\u6b8a\u53d8\u91cf <code>__name__</code>\uff1a</p> Python 3.10+ <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\nif __name__ == \"__main__\":\n    create_db_and_tables()\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\nif __name__ == \"__main__\":\n    create_db_and_tables()\n</code></pre>"},{"location":"tutorial/create-db-and-table/#__name__-__main__","title":"\u5173\u4e8e <code>__name__ == \"__main__\"</code>","text":"<p><code>__name__ == \"__main__\"</code> \u7684\u4e3b\u8981\u76ee\u7684\u662f\u5728\u6587\u4ef6\u88ab\u76f4\u63a5\u6267\u884c\u65f6\u6267\u884c\u67d0\u4e9b\u4ee3\u7801\uff1a</p> <pre><code>$ python app.py\n\n// \u8fd9\u91cc\u4f1a\u53d1\u751f\u4e00\u4e9b\u4e8b\u60c5 \u2728\n</code></pre> <p>...\u4f46\u5f53\u5176\u4ed6\u6587\u4ef6\u5bfc\u5165\u5b83\u65f6\uff0c\u4ee3\u7801\u4e0d\u4f1a\u88ab\u6267\u884c\uff0c\u4f8b\u5982\uff1a</p> <pre><code>from app import Hero\n</code></pre> <p>Tip</p> <p>\u4f7f\u7528 <code>if __name__ == \"__main__\":</code> \u7684 <code>if</code> \u8bed\u53e5\u5757\u6709\u65f6\u88ab\u79f0\u4e3a \"\u4e3b\u5757\"\u3002</p> <p>\u5728 Python \u6587\u6863 \u4e2d\uff0c\u5b98\u65b9\u540d\u79f0\u662f \"\u9876\u7ea7\u811a\u672c\u73af\u5883\"\u3002</p>"},{"location":"tutorial/create-db-and-table/#_13","title":"\u66f4\u591a\u7ec6\u8282","text":"<p>\u5047\u8bbe\u4f60\u7684\u6587\u4ef6\u540d\u4e3a <code>myapp.py</code>\u3002</p> <p>\u5982\u679c\u4f60\u8fd0\u884c\u5b83\uff1a</p> <pre><code>$ python myapp.py\n\n// \u8fd9\u5c06\u8c03\u7528 create_db_and_tables()\n</code></pre> <p>...\u90a3\u4e48 Python \u81ea\u52a8\u521b\u5efa\u7684\u6587\u4ef6\u5185\u90e8\u53d8\u91cf <code>__name__</code> \u7684\u503c\u5c06\u662f\u5b57\u7b26\u4e32 <code>\"__main__\"</code>\u3002</p> <p>\u56e0\u6b64\uff0c\u4ee5\u4e0b\u51fd\u6570\u5c06\u4f1a\u6267\u884c\uff1a</p> <pre><code>if __name__ == \"__main__\":\n    create_db_and_tables()\n</code></pre> <p>\u5982\u679c\u4f60\u5bfc\u5165\u4e86\u8be5\u6a21\u5757\uff08\u6587\u4ef6\uff09\uff0c\u5c31\u4e0d\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u3002</p> <p>\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u6709\u53e6\u4e00\u4e2a\u6587\u4ef6 <code>importer.py</code>\uff0c\u5176\u4e2d\u5305\u542b\uff1a</p> <pre><code>from myapp import Hero\n\n# \u5176\u4ed6\u4ee3\u7801\n</code></pre> <p>...\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c<code>myapp.py</code> \u5185\u90e8\u7684\u81ea\u52a8\u53d8\u91cf <code>__name__</code> \u7684\u503c\u4e0d\u4f1a\u662f <code>\"__main__\"</code>\u3002</p> <p>\u56e0\u6b64\uff0c\u4ee5\u4e0b\u4ee3\u7801\uff1a</p> <pre><code>if __name__ == \"__main__\":\n    create_db_and_tables()\n</code></pre> <p>...\u4e0d\u4f1a \u6267\u884c\u3002</p> <p>Info</p> <p>\u6b32\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u67e5\u770b \u5b98\u65b9 Python \u6587\u6863\u3002</p>"},{"location":"tutorial/create-db-and-table/#_14","title":"\u6700\u7ec8\u56de\u987e","text":"<p>\u5728\u505a\u4e86\u8fd9\u4e9b\u66f4\u6539\u4e4b\u540e\uff0c\u4f60\u53ef\u4ee5\u518d\u6b21\u8fd0\u884c\u5b83\uff0c\u8f93\u51fa\u5c06\u4e0e\u4e4b\u524d\u76f8\u540c\u3002</p> <p>\u4f46\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u4ece\u5176\u4ed6\u6587\u4ef6\u4e2d\u5bfc\u5165\u8be5\u6a21\u5757\u4e2d\u7684\u5185\u5bb9\u3002</p> <p>\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u6700\u7ec8\u68c0\u67e5\u4e00\u4e0b\u4ee3\u7801\uff1a</p> Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, SQLModel, create_engine  # (2)!\n\n\nclass Hero(SQLModel, table=True):  # (3)!\n    id: int | None = Field(default=None, primary_key=True)  # (4)!\n    name: str  # (5)!\n    secret_name: str  # (6)!\n    age: int | None = None  # (7)!\n\n\nsqlite_file_name = \"database.db\"  # (8)!\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"  # (9)!\n\nengine = create_engine(sqlite_url, echo=True)  # (10)!\n\n\ndef create_db_and_tables():  # (11)!\n    SQLModel.metadata.create_all(engine)  # (12)!\n\n\nif __name__ == \"__main__\":  # (13)!\n    create_db_and_tables()  # (14)!\n</code></pre> <ol> <li>Import <code>Optional</code> from <code>typing</code> to declare fields that could be <code>None</code>.</li> <li>Import the things we will need from <code>sqlmodel</code>: <code>Field</code>, <code>SQLModel</code>, <code>create_engine</code>.</li> <li> <p>Create the <code>Hero</code> model class, representing the <code>hero</code> table in the database.</p> <p>And also mark this class as a table model with <code>table=True</code>.</p> </li> <li> <p>Create the <code>id</code> field:</p> <p>It could be <code>None</code> until the database assigns a value to it, so we annotate it with <code>Optional</code>.</p> <p>It is a primary key, so we use <code>Field()</code> and the argument <code>primary_key=True</code>.</p> </li> <li> <p>Create the <code>name</code> field.</p> <p>It is required, so there's no default value, and it's not <code>Optional</code>.</p> </li> <li> <p>Create the <code>secret_name</code> field.</p> <p>Also required.</p> </li> <li> <p>Create the <code>age</code> field.</p> <p>It is not required, the default value is <code>None</code>.</p> <p>In the database, the default value will be <code>NULL</code>, the SQL equivalent of <code>None</code>.</p> <p>As this field could be <code>None</code> (and <code>NULL</code> in the database), we annotate it with <code>Optional</code>.</p> </li> <li> <p>Write the name of the database file.</p> </li> <li>Use the name of the database file to create the database URL.</li> <li> <p>Create the engine using the URL.</p> <p>This doesn't create the database yet, no file or table is created at this point, only the engine object that will handle the connections with this specific database, and with specific support for SQLite (based on the URL).</p> </li> <li> <p>Put the code that creates side effects in a function.</p> <p>In this case, only one line that creates the database file with the table.</p> </li> <li> <p>Create all the tables that were automatically registered in <code>SQLModel.metadata</code>.</p> </li> <li> <p>Add a main block, or \"Top-level script environment\".</p> <p>And put some logic to be executed when this is called directly with Python, as in:</p> <pre><code>$ python app.py\n\n// Execute all the stuff and show the output\n</code></pre> <p>...but that is not executed when importing something from this module, like:</p> <pre><code>from app import Hero\n</code></pre> </li> <li> <p>In this main block, call the function that creates the database file and the table.</p> <p>This way when we call it with:</p> <pre><code>$ python app.py\n\n// Doing stuff \u2728\n</code></pre> <p>...it will create the database file and the table.</p> </li> </ol> <pre><code>from typing import Optional  # (1)!\n\nfrom sqlmodel import Field, SQLModel, create_engine  # (2)!\n\n\nclass Hero(SQLModel, table=True):  # (3)!\n    id: Optional[int] = Field(default=None, primary_key=True)  # (4)!\n    name: str  # (5)!\n    secret_name: str  # (6)!\n    age: Optional[int] = None  # (7)!\n\n\nsqlite_file_name = \"database.db\"  # (8)!\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"  # (9)!\n\nengine = create_engine(sqlite_url, echo=True)  # (10)!\n\n\ndef create_db_and_tables():  # (11)!\n    SQLModel.metadata.create_all(engine)  # (12)!\n\n\nif __name__ == \"__main__\":  # (13)!\n    create_db_and_tables()  # (14)!\n</code></pre> <ol> <li>Import <code>Optional</code> from <code>typing</code> to declare fields that could be <code>None</code>.</li> <li>Import the things we will need from <code>sqlmodel</code>: <code>Field</code>, <code>SQLModel</code>, <code>create_engine</code>.</li> <li> <p>Create the <code>Hero</code> model class, representing the <code>hero</code> table in the database.</p> <p>And also mark this class as a table model with <code>table=True</code>.</p> </li> <li> <p>Create the <code>id</code> field:</p> <p>It could be <code>None</code> until the database assigns a value to it, so we annotate it with <code>Optional</code>.</p> <p>It is a primary key, so we use <code>Field()</code> and the argument <code>primary_key=True</code>.</p> </li> <li> <p>Create the <code>name</code> field.</p> <p>It is required, so there's no default value, and it's not <code>Optional</code>.</p> </li> <li> <p>Create the <code>secret_name</code> field.</p> <p>Also required.</p> </li> <li> <p>Create the <code>age</code> field.</p> <p>It is not required, the default value is <code>None</code>.</p> <p>In the database, the default value will be <code>NULL</code>, the SQL equivalent of <code>None</code>.</p> <p>As this field could be <code>None</code> (and <code>NULL</code> in the database), we annotate it with <code>Optional</code>.</p> </li> <li> <p>Write the name of the database file.</p> </li> <li>Use the name of the database file to create the database URL.</li> <li> <p>Create the engine using the URL.</p> <p>This doesn't create the database yet, no file or table is created at this point, only the engine object that will handle the connections with this specific database, and with specific support for SQLite (based on the URL).</p> </li> <li> <p>Put the code that creates side effects in a function.</p> <p>In this case, only one line that creates the database file with the table.</p> </li> <li> <p>Create all the tables that were automatically registered in <code>SQLModel.metadata</code>.</p> </li> <li> <p>Add a main block, or \"Top-level script environment\".</p> <p>And put some logic to be executed when this is called directly with Python, as in:</p> <pre><code>$ python app.py\n\n// Execute all the stuff and show the output\n</code></pre> <p>...but that is not executed when importing something from this module, like:</p> <pre><code>from app import Hero\n</code></pre> </li> <li> <p>In this main block, call the function that creates the database file and the table.</p> <p>This way when we call it with:</p> <pre><code>$ python app.py\n\n// Doing stuff \u2728\n</code></pre> <p>...it will create the database file and the table.</p> </li> </ol> <p>Tip</p> <p>\u901a\u8fc7\u70b9\u51fb\u4ee3\u7801\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u6c14\u6ce1\uff0c\u56de\u987e\u6bcf\u884c\u4ee3\u7801\u7684\u4f5c\u7528\u3002\ud83d\udc46</p>"},{"location":"tutorial/create-db-and-table/#_15","title":"\u603b\u7ed3","text":"<p>\u6211\u4eec\u5b66\u4e60\u4e86\u5982\u4f55\u4f7f\u7528 SQLModel \u6765\u5b9a\u4e49\u6570\u636e\u5e93\u4e2d\u8868\u683c\u7684\u7ed3\u6784\uff0c\u5e76\u4e14\u6211\u4eec\u4f7f\u7528 SQLModel \u521b\u5efa\u4e86\u4e00\u4e2a\u6570\u636e\u5e93\u548c\u8868\u683c\u3002</p> <p>\u6211\u4eec\u8fd8\u91cd\u6784\u4e86\u4ee3\u7801\uff0c\u4f7f\u5176\u66f4\u5bb9\u6613\u91cd\u7528\u3001\u5171\u4eab\u548c\u6d4b\u8bd5\u3002</p> <p>\u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u770b\u5230 SQLModel \u5982\u4f55\u5e2e\u52a9\u6211\u4eec\u901a\u8fc7\u4ee3\u7801\u4e0e SQL \u6570\u636e\u5e93\u8fdb\u884c\u4ea4\u4e92\u3002\ud83e\udd13</p>"},{"location":"tutorial/delete/","title":"\u5220\u9664\u6570\u636e - DELETE","text":"<p>\u73b0\u5728\u8ba9\u6211\u4eec\u4f7f\u7528 SQLModel \u5220\u9664\u4e00\u4e9b\u6570\u636e\u3002</p>"},{"location":"tutorial/delete/#_1","title":"\u4ece\u4e4b\u524d\u7684\u4ee3\u7801\u7ee7\u7eed","text":"<p>\u548c\u4e4b\u524d\u4e00\u6837\uff0c\u6211\u4eec\u5c06\u4ece\u4e0a\u6b21\u7684\u4ee3\u7801\u7ee7\u7eed\u3002</p> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Captain North America\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        hero_1.age = 16\n        hero_1.name = \"Spider-Youngster\"\n        session.add(hero_1)\n\n        hero_2.name = \"Captain North America Except Canada\"\n        hero_2.age = 110\n        session.add(hero_2)\n\n        session.commit()\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n\n        print(\"Updated hero 1:\", hero_1)\n        print(\"Updated hero 2:\", hero_2)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Captain North America\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        hero_1.age = 16\n        hero_1.name = \"Spider-Youngster\"\n        session.add(hero_1)\n\n        hero_2.name = \"Captain North America Except Canada\"\n        hero_2.age = 110\n        session.add(hero_2)\n\n        session.commit()\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n\n        print(\"Updated hero 1:\", hero_1)\n        print(\"Updated hero 2:\", hero_2)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u8bb0\u5f97\u5728\u8fd0\u884c\u793a\u4f8b\u4e4b\u524d\u5220\u9664 <code>database.db</code> \u6587\u4ef6\uff0c\u4ee5\u83b7\u5f97\u76f8\u540c\u7684\u7ed3\u679c\u3002</p>"},{"location":"tutorial/delete/#sql","title":"\u4f7f\u7528 SQL \u5220\u9664","text":"<p>\u8fd9\u4e2a <code>Spider-Youngster</code> \u5b9e\u5728\u662f\u592a\u5947\u602a\u4e86\uff0c\u6211\u4eec\u5c31\u628a\u5b83\u5220\u9664\u5427\u3002</p> <p>\u4f46\u4e0d\u7528\u62c5\u5fc3\uff0c\u6211\u4eec\u7a0d\u540e\u4f1a\u7528\u4e00\u4e2a\u65b0\u7684\u6545\u4e8b\u91cd\u65b0\u5f00\u59cb\u3002\ud83d\ude05</p> <p>\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u4f7f\u7528 SQL \u5220\u9664\u5b83\uff1a</p> <pre><code>DELETE\nFROM hero\nWHERE name = \"Spider-Youngster\"\n</code></pre> <p>\u8fd9\u5927\u81f4\u7684\u610f\u601d\u662f\uff1a</p> <p>\u563f SQL \u6570\u636e\u5e93 \ud83d\udc4b\uff0c\u6211\u60f3\u8981 <code>DELETE</code> \u4ece\u540d\u4e3a <code>hero</code> \u7684\u8868\u4e2d\u5220\u9664\u884c\u3002</p> <p>\u8bf7\u5220\u9664\u6240\u6709 <code>WHERE</code> \u5217 <code>name</code> \u7684\u503c\u7b49\u4e8e <code>\"Spider-Youngster\"</code> \u7684\u884c\u3002</p> <p>\u8bb0\u4f4f\uff0c\u5f53\u4f7f\u7528 <code>SELECT</code> \u8bed\u53e5\u65f6\uff0c\u5b83\u7684\u683c\u5f0f\u662f\uff1a</p> <pre><code>SELECT [\u8fd9\u91cc\u586b\u5199\u4e00\u4e9b\u5185\u5bb9]\nFROM [\u8fd9\u91cc\u586b\u5199\u8868\u540d]\nWHERE [\u8fd9\u91cc\u586b\u5199\u6761\u4ef6]\n</code></pre> <p><code>DELETE</code> \u5f88\u76f8\u4f3c\uff0c\u540c\u6837\u6211\u4eec\u4f7f\u7528 <code>FROM</code> \u6765\u6307\u5b9a\u64cd\u4f5c\u7684\u8868\uff0c\u5e76\u7528 <code>WHERE</code> \u6765\u6307\u5b9a\u5339\u914d\u6211\u4eec\u60f3\u5220\u9664\u7684\u884c\u7684\u6761\u4ef6\u3002</p> <p>\u4f60\u53ef\u4ee5\u5728 DB Browser for SQLite \u4e2d\u5c1d\u8bd5\u8fd9\u4e2a\u64cd\u4f5c\uff1a</p> <p></p> <p>\u8bf7\u8bb0\u4f4f\uff0c<code>DELETE</code> \u662f\u5220\u9664\u6574\u884c\u6570\u636e\uff0c\u800c\u4e0d\u662f\u5355\u4e00\u5217\u4e2d\u7684\u67d0\u4e2a\u503c\u3002</p> <p>\u5982\u679c\u4f60\u60f3\u8981\u201c\u5220\u9664\u201d\u5217\u4e2d\u7684\u67d0\u4e2a\u5355\u4e00\u503c\uff0c\u4f46 \u4fdd\u7559\u6574\u884c\uff0c\u4f60\u5e94\u8be5\u50cf\u4e0a\u4e00\u7ae0\u6240\u89e3\u91ca\u7684\u90a3\u6837 \u66f4\u65b0 \u8be5\u884c\uff0c\u5c06\u8be5\u5217\u7684\u7279\u5b9a\u503c\u8bbe\u7f6e\u4e3a <code>NULL</code>\uff08\u5728 Python \u4e2d\u4e3a <code>None</code>\uff09\u3002</p> <p>\u73b0\u5728\u8ba9\u6211\u4eec\u7528 SQLModel \u6765\u5220\u9664\u3002</p> <p>\u4e3a\u4e86\u83b7\u5f97\u76f8\u540c\u7684\u7ed3\u679c\uff0c\u8bf7\u5728\u8fd0\u884c\u793a\u4f8b\u4e4b\u524d\u5220\u9664 <code>database.db</code> \u6587\u4ef6\u3002</p>"},{"location":"tutorial/delete/#_2","title":"\u4ece\u6570\u636e\u5e93\u8bfb\u53d6","text":"<p>\u6211\u4eec\u5c06\u9996\u5148\u9009\u62e9\u4e4b\u524d\u7ae0\u8282\u4e2d\u66f4\u65b0\u8fc7\u7684\u82f1\u96c4 <code>\"Spider-Youngster\"</code>\uff0c\u8fd9\u662f\u6211\u4eec\u63a5\u4e0b\u6765\u8981\u5220\u9664\u7684\u5bf9\u8c61\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Captain North America\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        hero_1.age = 16\n        hero_1.name = \"Spider-Youngster\"\n        session.add(hero_1)\n\n        hero_2.name = \"Captain North America Except Canada\"\n        hero_2.age = 110\n        session.add(hero_2)\n\n        session.commit()\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n\n        print(\"Updated hero 1:\", hero_1)\n        print(\"Updated hero 2:\", hero_2)\n\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n        session.commit()\n\n        print(\"Deleted hero:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.first()\n\n        if hero is None:\n            print(\"There's no hero named Spider-Youngster\")\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n    delete_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Captain North America\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        hero_1.age = 16\n        hero_1.name = \"Spider-Youngster\"\n        session.add(hero_1)\n\n        hero_2.name = \"Captain North America Except Canada\"\n        hero_2.age = 110\n        session.add(hero_2)\n\n        session.commit()\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n\n        print(\"Updated hero 1:\", hero_1)\n        print(\"Updated hero 2:\", hero_2)\n\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n        session.commit()\n\n        print(\"Deleted hero:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.first()\n\n        if hero is None:\n            print(\"There's no hero named Spider-Youngster\")\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n    delete_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u7531\u4e8e\u8fd9\u662f\u4e00\u4e2a\u65b0\u51fd\u6570 <code>delete_heroes()</code>\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5c06\u5176\u6dfb\u52a0\u5230 <code>main()</code> \u51fd\u6570\u4e2d\uff0c\u4ee5\u4fbf\u5728\u4ece\u547d\u4ee4\u884c\u6267\u884c\u7a0b\u5e8f\u65f6\u8c03\u7528\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n    delete_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n    delete_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Captain North America\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        hero_1.age = 16\n        hero_1.name = \"Spider-Youngster\"\n        session.add(hero_1)\n\n        hero_2.name = \"Captain North America Except Canada\"\n        hero_2.age = 110\n        session.add(hero_2)\n\n        session.commit()\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n\n        print(\"Updated hero 1:\", hero_1)\n        print(\"Updated hero 2:\", hero_2)\n\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n        session.commit()\n\n        print(\"Deleted hero:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.first()\n\n        if hero is None:\n            print(\"There's no hero named Spider-Youngster\")\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n    delete_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Captain North America\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        hero_1.age = 16\n        hero_1.name = \"Spider-Youngster\"\n        session.add(hero_1)\n\n        hero_2.name = \"Captain North America Except Canada\"\n        hero_2.age = 110\n        session.add(hero_2)\n\n        session.commit()\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n\n        print(\"Updated hero 1:\", hero_1)\n        print(\"Updated hero 2:\", hero_2)\n\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n        session.commit()\n\n        print(\"Deleted hero:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.first()\n\n        if hero is None:\n            print(\"There's no hero named Spider-Youngster\")\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n    delete_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u8fd9\u5c06\u6253\u5370\u51fa\u5f53\u524d\u5b58\u5728\u7684\u82f1\u96c4 Spider-Youngster\uff1a</p> <pre><code>$ python app.py\n\n// \u4e00\u4e9b\u6837\u677f\u548c\u4e4b\u524d\u7684\u8f93\u51fa\u7701\u7565 \ud83d\ude09\n\n// \u6267\u884c\u5e26 WHERE \u7684 SELECT\nINFO Engine BEGIN (implicit)\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.name = ?\nINFO Engine [no key 0.00011s] ('Spider-Youngster',)\n\n// \u6253\u5370\u4ece\u6570\u636e\u5e93\u83b7\u53d6\u7684\u82f1\u96c4\nHero:  name='Spider-Youngster' secret_name='Pedro Parqueador' age=16 id=2\n</code></pre>"},{"location":"tutorial/delete/#_3","title":"\u4ece\u4f1a\u8bdd\u4e2d\u5220\u9664\u82f1\u96c4","text":"<p>\u73b0\u5728\uff0c\u548c\u6211\u4eec\u4f7f\u7528 <code>session.add()</code> \u6765\u6dfb\u52a0\u6216\u66f4\u65b0\u65b0\u82f1\u96c4\u7684\u65b9\u5f0f\u7c7b\u4f3c\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 <code>session.delete()</code> \u6765\u4ece\u4f1a\u8bdd\u4e2d\u5220\u9664\u82f1\u96c4\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Captain North America\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        hero_1.age = 16\n        hero_1.name = \"Spider-Youngster\"\n        session.add(hero_1)\n\n        hero_2.name = \"Captain North America Except Canada\"\n        hero_2.age = 110\n        session.add(hero_2)\n\n        session.commit()\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n\n        print(\"Updated hero 1:\", hero_1)\n        print(\"Updated hero 2:\", hero_2)\n\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n        session.commit()\n\n        print(\"Deleted hero:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.first()\n\n        if hero is None:\n            print(\"There's no hero named Spider-Youngster\")\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n    delete_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Captain North America\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        hero_1.age = 16\n        hero_1.name = \"Spider-Youngster\"\n        session.add(hero_1)\n\n        hero_2.name = \"Captain North America Except Canada\"\n        hero_2.age = 110\n        session.add(hero_2)\n\n        session.commit()\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n\n        print(\"Updated hero 1:\", hero_1)\n        print(\"Updated hero 2:\", hero_2)\n\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n        session.commit()\n\n        print(\"Deleted hero:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.first()\n\n        if hero is None:\n            print(\"There's no hero named Spider-Youngster\")\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n    delete_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/delete/#_4","title":"\u63d0\u4ea4\u4f1a\u8bdd","text":"<p>\u8981\u4fdd\u5b58\u4f1a\u8bdd\u4e2d\u7684\u5f53\u524d\u66f4\u6539\uff0c \u63d0\u4ea4 \u5b83\u3002</p> <p>\u8fd9\u5c06\u4fdd\u5b58\u4f1a\u8bdd\u4e2d\u5b58\u50a8\u7684\u6240\u6709\u66f4\u6539\uff0c\u6bd4\u5982\u5220\u9664\u7684\u82f1\u96c4\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n        session.commit()\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n        session.commit()\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Captain North America\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        hero_1.age = 16\n        hero_1.name = \"Spider-Youngster\"\n        session.add(hero_1)\n\n        hero_2.name = \"Captain North America Except Canada\"\n        hero_2.age = 110\n        session.add(hero_2)\n\n        session.commit()\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n\n        print(\"Updated hero 1:\", hero_1)\n        print(\"Updated hero 2:\", hero_2)\n\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n        session.commit()\n\n        print(\"Deleted hero:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.first()\n\n        if hero is None:\n            print(\"There's no hero named Spider-Youngster\")\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n    delete_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Captain North America\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        hero_1.age = 16\n        hero_1.name = \"Spider-Youngster\"\n        session.add(hero_1)\n\n        hero_2.name = \"Captain North America Except Canada\"\n        hero_2.age = 110\n        session.add(hero_2)\n\n        session.commit()\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n\n        print(\"Updated hero 1:\", hero_1)\n        print(\"Updated hero 2:\", hero_2)\n\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n        session.commit()\n\n        print(\"Deleted hero:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.first()\n\n        if hero is None:\n            print(\"There's no hero named Spider-Youngster\")\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n    delete_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u548c\u4e4b\u524d\u770b\u5230\u7684\u4e00\u6837\uff0c<code>.commit()</code> \u8fd8\u4f1a\u4fdd\u5b58\u4f1a\u8bdd\u4e2d\u6240\u6709\u5176\u4ed6\u7684\u66f4\u6539\uff0c\u5305\u62ec\u66f4\u65b0\u6216\u521b\u5efa\u7684\u82f1\u96c4\u3002</p> <p>\u5728\u5220\u9664\u82f1\u96c4\u4e4b\u540e\u7684\u63d0\u4ea4\u5c06\u751f\u6210\u4ee5\u4e0b\u8f93\u51fa\uff1a</p> <pre><code>$ python app.py\n\n// \u4e00\u4e9b\u6837\u677f\u8f93\u51fa\u7701\u7565 \ud83d\ude09\n\n// \u4e4b\u524d\u7684\u8f93\u51fa\u7701\u7565 \ud83d\ude48\n\n// \u5220\u9664\u82f1\u96c4\u7684 SQL\nINFO Engine DELETE FROM hero WHERE hero.id = ?\nINFO Engine [generated in 0.00020s] (2,)\nINFO Engine COMMIT\n</code></pre>"},{"location":"tutorial/delete/#_5","title":"\u6253\u5370\u5df2\u5220\u9664\u7684\u5bf9\u8c61","text":"<p>\u73b0\u5728\uff0c\u82f1\u96c4\u5df2\u4ece\u6570\u636e\u5e93\u4e2d\u5220\u9664\u3002</p> <p>\u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u4f7f\u7528 <code>session.refresh()</code> \u6765\u5237\u65b0\u5b83\uff0c\u5c06\u4f1a\u5f15\u53d1\u5f02\u5e38\uff0c\u56e0\u4e3a\u6570\u636e\u5e93\u4e2d\u6ca1\u6709\u8fd9\u4e2a\u82f1\u96c4\u7684\u6570\u636e\u3002</p> <p>\u4e0d\u8fc7\uff0c\u5c3d\u7ba1\u5982\u6b64\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u4ecd\u7136\u5b58\u5728\u5e76\u4fdd\u7559\u5176\u6570\u636e\uff0c\u4f46\u73b0\u5728\u5b83\u4e0d\u518d\u4e0e\u4f1a\u8bdd\u8fde\u63a5\uff0c\u4e5f\u4e0d\u518d\u5b58\u5728\u4e8e\u6570\u636e\u5e93\u4e2d\u3002</p> <p>\u7531\u4e8e\u8be5\u5bf9\u8c61\u4e0d\u518d\u4e0e\u4f1a\u8bdd\u8fde\u63a5\uff0c\u5b83\u6ca1\u6709\u88ab\u6807\u8bb0\u4e3a\u201c\u8fc7\u671f\u201d\uff0c\u4f1a\u8bdd\u4e5f\u4e0d\u518d\u5173\u5fc3\u8fd9\u4e2a\u5bf9\u8c61\u3002</p> <p>\u56e0\u6b64\uff0c\u8be5\u5bf9\u8c61\u4ecd\u7136\u5305\u542b\u5176\u5c5e\u6027\u548c\u6570\u636e\uff0c\u6211\u4eec\u53ef\u4ee5\u6253\u5370\u5b83\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n        session.commit()\n\n        print(\"Deleted hero:\", hero)\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n        session.commit()\n\n        print(\"Deleted hero:\", hero)\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Captain North America\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        hero_1.age = 16\n        hero_1.name = \"Spider-Youngster\"\n        session.add(hero_1)\n\n        hero_2.name = \"Captain North America Except Canada\"\n        hero_2.age = 110\n        session.add(hero_2)\n\n        session.commit()\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n\n        print(\"Updated hero 1:\", hero_1)\n        print(\"Updated hero 2:\", hero_2)\n\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n        session.commit()\n\n        print(\"Deleted hero:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.first()\n\n        if hero is None:\n            print(\"There's no hero named Spider-Youngster\")\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n    delete_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Captain North America\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        hero_1.age = 16\n        hero_1.name = \"Spider-Youngster\"\n        session.add(hero_1)\n\n        hero_2.name = \"Captain North America Except Canada\"\n        hero_2.age = 110\n        session.add(hero_2)\n\n        session.commit()\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n\n        print(\"Updated hero 1:\", hero_1)\n        print(\"Updated hero 2:\", hero_2)\n\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n        session.commit()\n\n        print(\"Deleted hero:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.first()\n\n        if hero is None:\n            print(\"There's no hero named Spider-Youngster\")\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n    delete_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u8fd9\u5c06\u8f93\u51fa\uff1a</p> <pre><code>$ python app.py\n\n// \u4e00\u4e9b\u6837\u677f\u8f93\u51fa\u7701\u7565 \ud83d\ude09\n\n// \u4e4b\u524d\u7684\u8f93\u51fa\u7701\u7565 \ud83d\ude48\n\n// \u6253\u5370\u5df2\u5220\u9664\u7684\u82f1\u96c4\nDeleted hero: name='Spider-Youngster' secret_name='Pedro Parqueador' age=16 id=2\n</code></pre>"},{"location":"tutorial/delete/#_6","title":"\u67e5\u8be2\u6570\u636e\u5e93\u4e2d\u7684\u76f8\u540c\u884c","text":"<p>\u4e3a\u4e86\u786e\u8ba4\u5b83\u662f\u5426\u5df2\u88ab\u5220\u9664\uff0c\u73b0\u5728\u6211\u4eec\u518d\u6b21\u67e5\u8be2\u6570\u636e\u5e93\uff0c\u4f7f\u7528\u76f8\u540c\u7684 <code>\"Spider-Youngster\"</code> \u540d\u5b57\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n        session.commit()\n\n        print(\"Deleted hero:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.first()\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n        session.commit()\n\n        print(\"Deleted hero:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.first()\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Captain North America\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        hero_1.age = 16\n        hero_1.name = \"Spider-Youngster\"\n        session.add(hero_1)\n\n        hero_2.name = \"Captain North America Except Canada\"\n        hero_2.age = 110\n        session.add(hero_2)\n\n        session.commit()\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n\n        print(\"Updated hero 1:\", hero_1)\n        print(\"Updated hero 2:\", hero_2)\n\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n        session.commit()\n\n        print(\"Deleted hero:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.first()\n\n        if hero is None:\n            print(\"There's no hero named Spider-Youngster\")\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n    delete_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Captain North America\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        hero_1.age = 16\n        hero_1.name = \"Spider-Youngster\"\n        session.add(hero_1)\n\n        hero_2.name = \"Captain North America Except Canada\"\n        hero_2.age = 110\n        session.add(hero_2)\n\n        session.commit()\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n\n        print(\"Updated hero 1:\", hero_1)\n        print(\"Updated hero 2:\", hero_2)\n\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n        session.commit()\n\n        print(\"Deleted hero:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.first()\n\n        if hero is None:\n            print(\"There's no hero named Spider-Youngster\")\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n    delete_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 <code>results.first()</code> \u83b7\u53d6\u627e\u5230\u7684\u7b2c\u4e00\u4e2a\u5bf9\u8c61\uff08\u5982\u679c\u627e\u5230\u4e86\u591a\u4e2a\uff09\uff0c\u6216\u8005\u5982\u679c\u6ca1\u6709\u627e\u5230\u4efb\u4f55\u5185\u5bb9\uff0c\u5219\u8fd4\u56de <code>None</code>\u3002</p> <p>\u5982\u679c\u6211\u4eec\u4f7f\u7528 <code>results.one()</code>\uff0c\u5219\u4f1a\u5f15\u53d1\u5f02\u5e38\uff0c\u56e0\u4e3a\u5b83\u671f\u671b\u6070\u597d\u8fd4\u56de\u4e00\u4e2a\u7ed3\u679c\u3002</p> <p>\u7531\u4e8e\u6211\u4eec\u521a\u521a\u5220\u9664\u4e86\u8be5\u82f1\u96c4\uff0c\u56e0\u6b64\u6b64\u67e5\u8be2\u5e94\u8be5\u627e\u4e0d\u5230\u4efb\u4f55\u5185\u5bb9\uff0c\u5e94\u8be5\u8fd4\u56de <code>None</code>\u3002</p> <p>\u8fd9\u5c06\u6267\u884c\u4e00\u4e9b SQL \u67e5\u8be2\uff0c\u5e76\u8f93\u51fa\uff1a</p> <pre><code>$ python app.py\n\n// \u4e00\u4e9b\u6837\u677f\u8f93\u51fa\u7701\u7565 \ud83d\ude09\n\n// \u4e4b\u524d\u7684\u8f93\u51fa\u7701\u7565 \ud83d\ude48\n\n// \u81ea\u52a8\u542f\u52a8\u4e00\u4e2a\u65b0\u4e8b\u52a1\nINFO Engine BEGIN (implicit)\n\n// SQL \u67e5\u8be2\u82f1\u96c4\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.name = ?\nINFO Engine [no key 0.00013s] ('Spider-Youngster',)\n</code></pre>"},{"location":"tutorial/delete/#_7","title":"\u786e\u8ba4\u5220\u9664","text":"<p>\u73b0\u5728\u8ba9\u6211\u4eec\u786e\u8ba4\u4e00\u4e0b\uff0c\u786e\u5b9e\u6ca1\u6709\u627e\u5230\u6570\u636e\u5e93\u4e2d\u540d\u4e3a <code>\"Spider-Youngster\"</code> \u7684\u82f1\u96c4\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u68c0\u67e5 <code>results</code> \u4e2d\u7684\u7b2c\u4e00\u4e2a\u9879\u76ee\u662f\u5426\u4e3a <code>None</code> \u6765\u505a\u5230\u8fd9\u4e00\u70b9\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n        session.commit()\n\n        print(\"Deleted hero:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.first()\n\n        if hero is None:\n            print(\"There's no hero named Spider-Youngster\")\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n        session.commit()\n\n        print(\"Deleted hero:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.first()\n\n        if hero is None:\n            print(\"There's no hero named Spider-Youngster\")\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Captain North America\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        hero_1.age = 16\n        hero_1.name = \"Spider-Youngster\"\n        session.add(hero_1)\n\n        hero_2.name = \"Captain North America Except Canada\"\n        hero_2.age = 110\n        session.add(hero_2)\n\n        session.commit()\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n\n        print(\"Updated hero 1:\", hero_1)\n        print(\"Updated hero 2:\", hero_2)\n\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n        session.commit()\n\n        print(\"Deleted hero:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.first()\n\n        if hero is None:\n            print(\"There's no hero named Spider-Youngster\")\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n    delete_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Captain North America\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        hero_1.age = 16\n        hero_1.name = \"Spider-Youngster\"\n        session.add(hero_1)\n\n        hero_2.name = \"Captain North America Except Canada\"\n        hero_2.age = 110\n        session.add(hero_2)\n\n        session.commit()\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n\n        print(\"Updated hero 1:\", hero_1)\n        print(\"Updated hero 2:\", hero_2)\n\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n        session.commit()\n\n        print(\"Deleted hero:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.first()\n\n        if hero is None:\n            print(\"There's no hero named Spider-Youngster\")\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n    delete_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u8fd9\u5c06\u8f93\u51fa\uff1a</p> <pre><code>$ python app.py\n\n// \u4e00\u4e9b\u6837\u677f\u8f93\u51fa\u7701\u7565 \ud83d\ude09\n\n// \u4e4b\u524d\u7684\u8f93\u51fa\u7701\u7565 \ud83d\ude48\n\n// \u786e\u5b9e\uff0c\u82f1\u96c4\u5df2\u88ab\u5220\u9664 \ud83d\udd25\n\u6ca1\u6709\u540d\u4e3a Spider-Youngster \u7684\u82f1\u96c4\n\n// \u5b8c\u6210\u540e\u6e05\u7406 with \u5757\nINFO Engine ROLLBACK\n</code></pre>"},{"location":"tutorial/delete/#_8","title":"\u56de\u987e\u4ee3\u7801","text":"<p>\u73b0\u5728\u8ba9\u6211\u4eec\u56de\u987e\u4e00\u4e0b\u6240\u6709\u7684\u4ee3\u7801\uff1a</p> Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Captain North America\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        hero_1.age = 16\n        hero_1.name = \"Spider-Youngster\"\n        session.add(hero_1)\n\n        hero_2.name = \"Captain North America Except Canada\"\n        hero_2.age = 110\n        session.add(hero_2)\n\n        session.commit()\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n\n        print(\"Updated hero 1:\", hero_1)\n        print(\"Updated hero 2:\", hero_2)\n\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")  # (1)!\n        results = session.exec(statement)  # (2)!\n        hero = results.one()  # (3)!\n        print(\"Hero: \", hero)  # (4)!\n\n        session.delete(hero)  # (5)!\n        session.commit()  # (6)!\n\n        print(\"Deleted hero:\", hero)  # (7)!\n\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")  # (8)!\n        results = session.exec(statement)  # (9)!\n        hero = results.first()  # (10)!\n\n        if hero is None:  # (11)!\n            print(\"There's no hero named Spider-Youngster\")  # (12)!\n    # (13)!\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n    delete_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <ol> <li> <p>Select the hero we will delete.</p> </li> <li> <p>Execute the query with the select statement object.</p> <p>This generates the output:</p> <pre><code>INFO Engine BEGIN (implicit)\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.name = ?\nINFO Engine [no key 0.00011s] ('Spider-Youngster',)\n</code></pre> </li> <li> <p>Get one hero object, expecting exactly one.</p> <p>Tip</p> <p>This ensures there's no more than one, and that there's exactly one, not <code>None</code>.</p> <p>This would never return <code>None</code>, instead it would raise an exception.</p> </li> <li> <p>Print the hero object.</p> <p>This generates the output:</p> <pre><code>Hero:  name='Spider-Youngster' secret_name='Pedro Parqueador' age=16 id=2\n</code></pre> </li> <li> <p>Delete the hero from the session.</p> <p>This marks the hero as deleted from the session, but it will not be removed from the database until we commit the changes.</p> </li> <li> <p>Commit the session.</p> <p>This saves the changes in the session, including deleting this row.</p> <p>It generates the output:</p> <pre><code>INFO Engine DELETE FROM hero WHERE hero.id = ?\nINFO Engine [generated in 0.00020s] (2,)\nINFO Engine COMMIT\n</code></pre> </li> <li> <p>Print the deleted hero object.</p> <p>The hero is deleted in the database. And is marked as deleted in the session.</p> <p>But we still have the object in memory with its data, so we can use it to print it.</p> <p>This generates the output:</p> <pre><code>Deleted hero: name='Spider-Youngster' secret_name='Pedro Parqueador' age=16 id=2\n</code></pre> </li> <li> <p>Select the same hero again.</p> <p>We'll do this to confirm if the hero is really deleted.</p> </li> <li> <p>Execute the select statement.</p> <p>This generates the output:</p> <pre><code>INFO Engine BEGIN (implicit)\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.name = ?\nINFO Engine [no key 0.00013s] ('Spider-Youngster',)\n</code></pre> </li> <li> <p>Get the \"first\" item from the <code>results</code>.</p> <p>If no items were found, this will return <code>None</code>, which is what we expect.</p> </li> <li> <p>Check if the first item from the results is <code>None</code>.</p> </li> <li> <p>If this first item is indeed <code>None</code>, it means that it was correctly deleted from the database.</p> <p>Now we can print a message to confirm.</p> <p>This generates the output:</p> <pre><code>There's no hero named Spider-Youngster\n</code></pre> </li> <li> <p>This is the end of the <code>with</code> block, here the session executes its closing code.</p> <p>This generates the output:</p> <pre><code>INFO Engine ROLLBACK\n</code></pre> </li> </ol> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Captain North America\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        hero_1.age = 16\n        hero_1.name = \"Spider-Youngster\"\n        session.add(hero_1)\n\n        hero_2.name = \"Captain North America Except Canada\"\n        hero_2.age = 110\n        session.add(hero_2)\n\n        session.commit()\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n\n        print(\"Updated hero 1:\", hero_1)\n        print(\"Updated hero 2:\", hero_2)\n\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")  # (1)!\n        results = session.exec(statement)  # (2)!\n        hero = results.one()  # (3)!\n        print(\"Hero: \", hero)  # (4)!\n\n        session.delete(hero)  # (5)!\n        session.commit()  # (6)!\n\n        print(\"Deleted hero:\", hero)  # (7)!\n\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")  # (8)!\n        results = session.exec(statement)  # (9)!\n        hero = results.first()  # (10)!\n\n        if hero is None:  # (11)!\n            print(\"There's no hero named Spider-Youngster\")  # (12)!\n    # (13)!\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n    delete_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <ol> <li> <p>Select the hero we will delete.</p> </li> <li> <p>Execute the query with the select statement object.</p> <p>This generates the output:</p> <pre><code>INFO Engine BEGIN (implicit)\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.name = ?\nINFO Engine [no key 0.00011s] ('Spider-Youngster',)\n</code></pre> </li> <li> <p>Get one hero object, expecting exactly one.</p> <p>Tip</p> <p>This ensures there's no more than one, and that there's exactly one, not <code>None</code>.</p> <p>This would never return <code>None</code>, instead it would raise an exception.</p> </li> <li> <p>Print the hero object.</p> <p>This generates the output:</p> <pre><code>Hero:  name='Spider-Youngster' secret_name='Pedro Parqueador' age=16 id=2\n</code></pre> </li> <li> <p>Delete the hero from the session.</p> <p>This marks the hero as deleted from the session, but it will not be removed from the database until we commit the changes.</p> </li> <li> <p>Commit the session.</p> <p>This saves the changes in the session, including deleting this row.</p> <p>It generates the output:</p> <pre><code>INFO Engine DELETE FROM hero WHERE hero.id = ?\nINFO Engine [generated in 0.00020s] (2,)\nINFO Engine COMMIT\n</code></pre> </li> <li> <p>Print the deleted hero object.</p> <p>The hero is deleted in the database. And is marked as deleted in the session.</p> <p>But we still have the object in memory with its data, so we can use it to print it.</p> <p>This generates the output:</p> <pre><code>Deleted hero: name='Spider-Youngster' secret_name='Pedro Parqueador' age=16 id=2\n</code></pre> </li> <li> <p>Select the same hero again.</p> <p>We'll do this to confirm if the hero is really deleted.</p> </li> <li> <p>Execute the select statement.</p> <p>This generates the output:</p> <pre><code>INFO Engine BEGIN (implicit)\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.name = ?\nINFO Engine [no key 0.00013s] ('Spider-Youngster',)\n</code></pre> </li> <li> <p>Get the \"first\" item from the <code>results</code>.</p> <p>If no items were found, this will return <code>None</code>, which is what we expect.</p> </li> <li> <p>Check if the first item from the results is <code>None</code>.</p> </li> <li> <p>If this first item is indeed <code>None</code>, it means that it was correctly deleted from the database.</p> <p>Now we can print a message to confirm.</p> <p>This generates the output:</p> <pre><code>There's no hero named Spider-Youngster\n</code></pre> </li> <li> <p>This is the end of the <code>with</code> block, here the session executes its closing code.</p> <p>This generates the output:</p> <pre><code>INFO Engine ROLLBACK\n</code></pre> </li> </ol> <p>Tip</p> <p>\u67e5\u770b\u7f16\u53f7\u6c14\u6ce1\uff0c\u4e86\u89e3\u6bcf\u884c\u4ee3\u7801\u505a\u4e86\u4ec0\u4e48\u3002</p>"},{"location":"tutorial/delete/#_9","title":"\u5c0f\u7ed3","text":"<p>\u8981\u4f7f\u7528 SQLModel \u5220\u9664\u884c\uff0c\u53ea\u9700\u901a\u8fc7 session \u8c03\u7528 <code>.delete()</code> \u5220\u9664\u5b83\u4eec\uff0c\u7136\u540e\u50cf\u5f80\u5e38\u4e00\u6837\uff0c\u4f7f\u7528 <code>.commit()</code> \u63d0\u4ea4\u4f1a\u8bdd\uff0c\u5c06\u66f4\u6539\u4fdd\u5b58\u5230\u6570\u636e\u5e93\u4e2d\u3002\ud83d\udd25</p>"},{"location":"tutorial/indexes/","title":"\u7d22\u5f15 - \u4f18\u5316\u67e5\u8be2","text":"<p>\u6211\u4eec\u521a\u521a\u770b\u5230\u4e86\u5982\u4f55\u83b7\u53d6\u6ee1\u8db3\u67d0\u4e2a \u6761\u4ef6 \u7684\u6570\u636e\u3002\u4f8b\u5982\uff0c\u67e5\u8be2\u82f1\u96c4 \u540d\u5b57\u4e3a \"Deadpond\" \u7684\u6570\u636e\u3002</p> <p>\u5982\u679c\u6211\u4eec\u50cf\u4e4b\u524d\u4e00\u6837\u521b\u5efa\u8868\u548c\u6570\u636e\uff0c\u5f53\u6211\u4eec\u4f7f\u7528 <code>WHERE</code> \u67e5\u8be2\u6570\u636e\u65f6\uff0c\u6570\u636e\u5e93\u5fc5\u987b \u626b\u63cf \u6bcf\u4e00\u6761\u8bb0\u5f55 \u6765\u627e\u5230\u7b26\u5408\u6761\u4ef6\u7684\u8bb0\u5f55\u3002\u5728\u8fd9\u4e9b\u793a\u4f8b\u4e2d\uff0c\u53ea\u6709 3 \u4e2a\u82f1\u96c4\uff0c\u8fd9\u4e2a\u95ee\u9898\u4e0d\u5927\u3002</p> <p>\u4f46\u5982\u679c\u4f60\u7684\u6570\u636e\u5e93\u6709 \u6210\u5343\u4e0a\u4e07 \u6761 \u8bb0\u5f55\uff0c\u6bcf\u6b21\u67e5\u8be2\u540d\u5b57\u4e3a \"Deadpond\" \u7684\u82f1\u96c4\u65f6\uff0c\u6570\u636e\u5e93\u90fd\u9700\u8981\u626b\u63cf \u6240\u6709 \u8bb0\u5f55\u6765\u627e\u5230\u6240\u6709\u53ef\u80fd\u7684\u5339\u914d\u9879\uff0c\u8fd9\u5c31\u53d8\u5f97\u5f88\u9ebb\u70e6\uff0c\u56e0\u4e3a\u5b83\u4f1a\u53d8\u5f97\u975e\u5e38 \u6162\u3002</p> <p>\u6211\u5c06\u5411\u4f60\u5c55\u793a\u5982\u4f55\u901a\u8fc7\u6570\u636e\u5e93 \u7d22\u5f15 \u6765\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\u3002</p> <p>\u4ee3\u7801\u7684\u66f4\u6539 \u975e\u5e38\u5c0f\uff0c\u4f46\u7406\u89e3\u80cc\u540e\u53d1\u751f\u4e86\u4ec0\u4e48\u975e\u5e38\u6709\u7528\uff0c\u6240\u4ee5\u6211\u4f1a\u5411\u4f60\u5c55\u793a \u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u4ee5\u53ca\u5b83\u610f\u5473\u7740\u4ec0\u4e48\u3002</p> <p>\u5982\u679c\u4f60\u5df2\u7ecf\u6267\u884c\u4e86\u4e4b\u524d\u7684\u793a\u4f8b\u5e76\u4e14\u6709\u4e86\u6570\u636e\u5e93\u6570\u636e\uff0c\u5728\u8fd0\u884c\u6bcf\u4e2a\u793a\u4f8b\u4e4b\u524d\u5220\u9664\u6570\u636e\u5e93\u6587\u4ef6\uff0c\u8fd9\u6837\u4f60\u5c31\u4e0d\u4f1a\u6709\u91cd\u590d\u7684\u6570\u636e\uff0c\u5e76\u4e14\u53ef\u4ee5\u5f97\u5230\u76f8\u540c\u7684\u7ed3\u679c\u3002</p>"},{"location":"tutorial/indexes/#_1","title":"\u6ca1\u65f6\u95f4\u89e3\u91ca","text":"<p>\u4f60\u5df2\u7ecf\u662f SQL\u4e13\u5bb6\uff0c\u6ca1\u6709\u65f6\u95f4\u770b\u6211\u6240\u6709\u7684\u89e3\u91ca\u5417\uff1f</p> <p>\u6ca1\u95ee\u9898\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u4ee5 \u76f4\u63a5\u67e5\u770b \u521b\u5efa\u7d22\u5f15\u7684\u6700\u7ec8\u4ee3\u7801\u3002</p> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>...\u4f46\u5982\u679c\u4f60\u4e0d\u662f\u4e13\u5bb6\uff0c \u7ee7\u7eed\u9605\u8bfb\uff0c\u8fd9\u5c06\u53ef\u80fd\u5bf9\u4f60\u6709\u5e2e\u52a9\u3002\ud83e\udd13</p>"},{"location":"tutorial/indexes/#_2","title":"\u4ec0\u4e48\u662f\u7d22\u5f15","text":"<p>\u901a\u5e38\u6765\u8bf4\uff0c  \u7d22\u5f15 \u5c31\u662f\u6211\u4eec\u53ef\u4ee5\u7528\u6765\u5e2e\u52a9\u6211\u4eec \u66f4\u5feb\u627e\u5230\u4e1c\u897f \u7684\u5de5\u5177\u3002\u5b83\u901a\u5e38\u901a\u8fc7\u5c06\u4e8b\u7269\u6309 \u987a\u5e8f\u6392\u5217 \u6765\u5de5\u4f5c\u3002\u5728\u8003\u8651\u6570\u636e\u5e93\u548c\u4ee3\u7801\u4e4b\u524d\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u60f3\u60f3\u4e00\u4e9b\u73b0\u5b9e\u751f\u6d3b\u4e2d\u7684\u4f8b\u5b50\u3002</p>"},{"location":"tutorial/indexes/#_3","title":"\u7d22\u5f15\u548c\u5b57\u5178","text":"<p>\u60f3\u8c61\u4e00\u4e0b\u4e00\u4e2a \u5b57\u5178 \uff0c\u5b83\u662f\u4e00\u672c\u5305\u542b\u5355\u8bcd\u5b9a\u4e49\u7684\u4e66\u3002\ud83d\udcd4 ...\u4e0d\u662fPython\u4e2d\u7684<code>dict</code>\u3002\ud83d\ude05</p> <p>\u5047\u8bbe\u4f60\u60f3\u8981 \u67e5\u627e\u4e00\u4e2a\u5355\u8bcd \uff0c\u4f8b\u5982\u201c database \u201d\u3002\u4f60\u7ffb\u5f00\u5b57\u5178\uff0c\u53ef\u80fd\u6253\u5f00\u7684\u662f\u5b57\u5178\u7684\u4e2d\u95f4\u90e8\u5206\u3002\u4e5f\u8bb8\u4f60\u770b\u5230\u4e86\u4e00\u4e9b\u4ee5\u5b57\u6bcd <code>m</code> \u5f00\u5934\u7684\u5355\u8bcd\uff0c\u6bd4\u5982 <code>manual</code>\uff0c\u4e8e\u662f\u4f60\u63a8\u6d4b\u81ea\u5df1\u6b63\u5728\u5b57\u6bcd <code>m</code> \u7684\u90e8\u5206\u3002</p> <p></p> <p>\u4f60\u77e5\u9053\u5728\u5b57\u6bcd\u8868\u4e2d\uff0c\u5b57\u6bcd <code>d</code>\uff08\u6bd4\u5982\u201cdatabase\u201d\u4e2d\u7684\u5b57\u6bcd\uff09\u6392\u5728\u5b57\u6bcd <code>m</code> \u4e4b\u524d\u3002</p> <p></p> <p>\u56e0\u6b64\uff0c\u4f60\u77e5\u9053\u9700\u8981\u5728\u5f53\u524d\u6240\u5728\u7684\u4f4d\u7f6e\u4e4b\u524d\u8fdb\u884c\u67e5\u627e\u3002\u4f60\u4ecd\u7136\u4e0d\u77e5\u9053\u201cdatabase\u201d\u5177\u4f53\u5728\u54ea\u4e2a\u4f4d\u7f6e\uff0c\u56e0\u4e3a\u4f60\u8fd8\u4e0d\u6e05\u695a\u5b57\u6bcd <code>d</code> \u5728\u5b57\u5178\u4e2d\u7684\u786e\u5207\u4f4d\u7f6e\uff0c\u4f46\u4f60\u77e5\u9053\u5b83 \u4e0d\u4f1a\u5728 \u5f53\u524d\u4f4d\u7f6e\u4e4b\u540e\uff0c\u56e0\u6b64\u4f60\u53ef\u4ee5 \u4e22\u5f03\u5b57\u5178\u7684\u53f3\u534a\u90e8\u5206 \uff0c\u4e0d\u518d\u641c\u7d22\u3002</p> <p></p> <p>\u63a5\u4e0b\u6765\uff0c\u4f60 \u518d\u6b21\u7ffb\u5f00\u5b57\u5178 \uff0c\u4f46\u8fd9\u6b21\u53ea\u8003\u8651\u5305\u542b\u4f60\u8981\u627e\u7684\u5355\u8bcd\u7684 \u5b57\u5178\u5de6\u534a\u90e8\u5206 \u3002\u4f60\u5728\u8fd9\u4e2a\u5de6\u534a\u90e8\u5206\u7684\u4e2d\u95f4\u4f4d\u7f6e\u6253\u5f00\u5b57\u5178\uff0c\u4e5f\u8bb8\u4f60\u505c\u5728\u4e86\u5b57\u6bcd <code>f</code>\u3002</p> <p></p> <p>\u4f60\u77e5\u9053\u5b57\u6bcd <code>d</code> \u6392\u5728 <code>f</code> \u4e4b\u524d\uff0c\u6240\u4ee5\u201cdatabase\u201d\u80af\u5b9a\u5728 \u8fd9\u4e2a\u4f4d\u7f6e\u4e4b\u524d \u3002\u4f46\u6b64\u65f6\u4f60\u77e5\u9053\u201cdatabase\u201d **\u4e0d\u4f1a\u5728**\u8fd9\u4e2a\u4f4d\u7f6e\u4e4b\u540e\uff0c\u56e0\u6b64\u4f60\u53ef\u4ee5\u4e22\u5f03\u4ece\u6b64\u4f4d\u7f6e\u5f00\u59cb\u7684\u5b57\u5178\u90e8\u5206\u3002</p> <p></p> <p>\u73b0\u5728\uff0c\u4f60\u5269\u4e0b\u4e86\u4e00\u4e2a \u5c0f\u90e8\u5206\u5b57\u5178 \u6765\u7ee7\u7eed\u67e5\u627e\uff08\u53ea\u6709\u5b57\u5178\u7684 \u56db\u5206\u4e4b\u4e00 \u533a\u57df\u53ef\u80fd\u5305\u542b\u4f60\u8981\u7684\u5355\u8bcd\uff09\u3002\u4f60\u4ece\u5b57\u5178\u5f00\u5934\u7684\u8fd9\u4e2a\u56db\u5206\u4e4b\u4e00\u90e8\u5206\u4e2d\u6253\u5f00\uff0c\u5728\u4e2d\u95f4\u7684\u5730\u65b9\uff0c\u4e5f\u8bb8\u4f60\u5230\u8fbe\u4e86\u5b57\u6bcd <code>c</code>\u3002</p> <p></p> <p>\u4f60\u77e5\u9053\u201cdatabase\u201d\u5e94\u8be5\u5728 **\u5b57\u6bcd <code>c</code> \u4e4b\u540e**\u800c\u4e0d\u662f\u4e4b\u524d\uff0c\u56e0\u6b64\u4f60\u53ef\u4ee5\u4e22\u5f03\u8be5\u90e8\u5206\u7684\u5de6\u8fb9\u3002</p> <p></p> <p>\u4f60\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b \u51e0\u6b21 \uff0c\u6700\u7ec8\u5230\u8fbe\u5b57\u6bcd <code>d</code>\uff0c\u7136\u540e\u7ee7\u7eed\u5728\u8be5\u90e8\u5206\u8fdb\u884c\u67e5\u627e\uff0c\u6700\u540e\u4f60 \u627e\u5230\u4e86\u5355\u8bcd \u201cdatabase\u201d\u3002\ud83c\udf89</p> <p></p> <p>\u4f60\u53ea\u9700\u8981\u7ffb\u5f00\u5b57\u5178\u51e0\u6b21\uff0c\u53ef\u80fd\u662f 5\u6b21\u621610\u6b21 \u3002\u5b9e\u9645\u4e0a\uff0c\u8fd9\u76f8\u6bd4\u8d77\u4f60\u672c\u53ef\u80fd\u8981\u505a\u7684\u5de5\u4f5c\u6765\u8bf4\uff0c \u975e\u5e38\u5c11 \u3002</p> <p>\u6280\u672f\u7ec6\u8282</p> <p>\u4f60\u559c\u6b22 \u9ad8\u5927\u4e0a\u7684\u8bcd \u5417\uff1f\u9177\uff01\u7a0b\u5e8f\u5458\u901a\u5e38\u559c\u6b22\u9ad8\u5927\u4e0a\u7684\u8bcd\u3002\ud83d\ude05</p> <p>\u6211\u521a\u624d\u7ed9\u4f60\u5c55\u793a\u7684\u90a3\u4e2a \u7b97\u6cd5 \u53eb\u505a \u4e8c\u5206\u67e5\u627e \u3002</p> <p>\u4e4b\u6240\u4ee5\u53eb\u5b83\u201c\u4e8c\u5206\u67e5\u627e\u201d\uff0c\u662f\u56e0\u4e3a\u4f60 \u901a\u8fc7\u5c06\u5b57\u5178 \uff08\u6216\u4efb\u4f55\u6709\u5e8f\u7684\u5217\u8868\uff09\u5206\u6210 \u4e24 \u90e8\u5206\u6765\u67e5\u627e\u4e1c\u897f\uff08\u201c\u4e8c\u8fdb\u5236\u201d\u610f\u5473\u7740\u201c\u4e24\u4e2a\u201d\uff09\u3002\u7136\u540e\u4f60\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u76f4\u5230\u627e\u5230\u4f60\u60f3\u8981\u7684\u4e1c\u897f\u3002</p>"},{"location":"tutorial/indexes/#_4","title":"\u7d22\u5f15\u548c\u5c0f\u8bf4","text":"<p>\u73b0\u5728\uff0c\u5047\u8bbe\u4f60\u5728\u9605\u8bfb\u4e00\u672c \u5c0f\u8bf4 \u3002\u6709\u4eba\u544a\u8bc9\u4f60\uff0c\u5728\u67d0\u4e2a\u5730\u65b9\u63d0\u5230\u4e86 \u6570\u636e\u5e93 \uff0c\u800c\u4f60\u60f3\u8981\u627e\u5230\u90a3\u4e00\u7ae0\u3002</p> <p>\u4f60\u5982\u4f55\u5728\u5c0f\u8bf4\u4e2d\u627e\u5230\u201c\u6570\u636e\u5e93\u201d\u8fd9\u4e2a\u8bcd\u5462\uff1f\u4f60\u53ef\u80fd\u4e0d\u5f97\u4e0d \u9605\u8bfb\u6574\u672c\u4e66 \uff0c\u624d\u80fd\u627e\u5230\u201c \u6570\u636e\u5e93 \u201d\u51fa\u73b0\u7684\u7ae0\u8282\u3002\u4f60\u53ef\u80fd\u4f1a\u9010\u9875\u7ffb\u9605\uff0c \u6bcf\u4e00\u9875\u90fd\u8bfb\u4e00\u904d \uff0c\u76f4\u5230\u627e\u5230\u8fd9\u4e2a\u8bcd\u3002\u867d\u7136\u4f60\u53ef\u80fd\u4f1a\u4eab\u53d7\u8fd9\u672c\u4e66\uff0c\u4f46\u8fd9\u663e\u7136\u662f \u4f4e\u6548 \u7684\u3002\ud83d\ude05</p> <p>\u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u53ea\u662f\u60f3\u8981 \u5feb\u901f\u627e\u5230\u4fe1\u606f \uff08\u5c31\u50cf\u5728\u5904\u7406SQL\u6570\u636e\u5e93\u65f6\uff09\uff0c\u90a3\u4e48\u9010\u9875\u7ffb\u9605500\u9875\u5c31\u663e\u5f97 **\u592a\u4f4e\u6548**\u4e86\u3002\u8981\u662f\u6709\u4e2a\u529e\u6cd5\uff0c\u80fd\u8ba9\u4f60\u57285\u621610\u4e2a\u5730\u65b9\u76f4\u63a5\u627e\u5230\u4fe1\u606f\uff0c\u90a3\u5c31\u6548\u7387\u9ad8\u5f97\u591a\u4e86\u3002</p>"},{"location":"tutorial/indexes/#_5","title":"\u4e00\u672c\u6709\u7d22\u5f15\u7684\u6280\u672f\u4e66","text":"<p>\u73b0\u5728\uff0c\u5047\u8bbe\u4f60\u5728\u9605\u8bfb\u4e00\u672c\u6280\u672f\u4e66\u3002\u6bd4\u5982\uff0c\u5b83\u5305\u542b\u4e86\u5173\u4e8e\u7f16\u7a0b\u7684\u591a\u4e2a\u8bdd\u9898\u3002\u800c\u5176\u4e2d\u6709\u51e0\u8282\u5185\u5bb9\u63d0\u5230\u4e86 \u6570\u636e\u5e93 \u3002</p> <p>\u8fd9\u672c\u4e66\u53ef\u80fd\u6709\u4e00\u4e2a \u4e66\u7c4d\u7d22\u5f15 \uff1a\u4e66\u4e2d\u7684\u4e00\u8282\uff0c\u5217\u51fa\u4e86\u4e66\u4e2d \u6db5\u76d6\u7684\u4e3b\u9898\u540d\u79f0 \u4ee5\u53ca\u8fd9\u4e9b\u4e3b\u9898\u6240\u5728\u7684* \u9875\u7801*\u3002\u8fd9\u4e9b\u4e3b\u9898\u540d\u79f0\u662f \u6309\u5b57\u6bcd\u987a\u5e8f\u6392\u5217 \u7684\uff0c\u7c7b\u4f3c\u5b57\u5178\uff08\u5c31\u50cf\u524d\u9762\u7684\u4f8b\u5b50\u4e2d\u90a3\u672c\u5b57\u5178\uff09\u3002</p> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u4ee5\u7ffb\u5230\u4e66\u7684\u6700\u540e\u4e00\u9875\uff08\u6216\u8005\u5f00\u5934\uff09\u627e\u5230 \u4e66\u7c4d\u7d22\u5f15**\u90e8\u5206\uff0c\u8fd9\u90e8\u5206\u901a\u5e38\u53ea\u6709\u51e0\u9875\u3002\u7136\u540e\uff0c\u4f60\u5c31\u53ef\u4ee5\u4f7f\u7528\u548c\u4e0a\u9762 **\u5b57\u5178 \u793a\u4f8b\u76f8\u540c\u7684\u65b9\u6cd5\u3002</p> <p>\u7ffb\u5f00\u7d22\u5f15\uff0c\u7ecf\u8fc7 5\u523010\u6b65 \uff0c\u4f60\u5c31\u80fd\u5feb\u901f\u627e\u5230 \u201c\u6570\u636e\u5e93\u201d \u8fd9\u4e2a\u8bdd\u9898\uff0c\u5e76\u770b\u5230\u5b83\u6240\u5728\u7684\u9875\u7801\uff0c\u6bd4\u5982\u201c\u7b2c253\u9875\uff0c\u7b2c\u4e94\u7ae0\u201d\u3002\u73b0\u5728\uff0c\u4f60\u7528\u5b57\u5178\u4e2d\u7684\u65b9\u6cd5\u627e\u5230\u4e86 \u4e3b\u9898 \uff0c\u800c\u8fd9\u4e2a\u4e3b\u9898\u53c8\u7ed9\u4e86\u4f60\u4e00\u4e2a \u9875\u7801 \u3002</p> <p>\u73b0\u5728\u4f60\u77e5\u9053\u9700\u8981\u627e\u5230\u7684\u662f \u201c\u7b2c253\u9875\u201d \u3002\u4f46\u770b\u7740\u8fd9\u672c\u5408\u4e0a\u7684\u4e66\uff0c\u4f60\u8fd8\u4e0d\u77e5\u9053\u90a3\u4e00\u9875\u5728\u54ea\u91cc\uff0c\u6240\u4ee5\u4f60\u5f97 \u627e\u5230\u90a3\u4e00\u9875 \u3002\u4e3a\u4e86\u627e\u5230\u90a3\u4e00\u9875\uff0c\u4f60\u53ef\u4ee5\u518d\u6b21\u4f7f\u7528\u76f8\u540c\u7684\u65b9\u6cd5\uff0c\u4f46\u8fd9\u6b21\u4f60\u4e0d\u662f\u5728 \u7d22\u5f15 \u4e2d\u67e5\u627e \u4e3b\u9898 \uff0c\u800c\u662f\u5728 \u6574\u672c\u4e66 \u4e2d\u67e5\u627e \u9875\u7801 \u3002\u7ecf\u8fc7 5\u523010\u6b65 \uff0c\u4f60\u5c31\u80fd\u627e\u5230\u7b2c\u4e94\u7ae0\u7684\u7b2c253\u9875\u3002</p> <p></p> <p>\u7ecf\u8fc7\u8fd9\u4e9b\u6b65\u9aa4\uff0c\u867d\u7136\u8fd9\u672c\u4e66\u4e0d\u662f\u5b57\u5178\uff0c\u5185\u5bb9\u4e5f\u6709\u6240\u4e0d\u540c\uff0c\u4f46\u4f60\u8fd8\u662f\u80fd \u5feb\u901f\u627e\u5230 \u6d89\u53ca \u201c\u6570\u636e\u5e93\u201d \u7684\u90e8\u5206\uff0c\u6574\u4e2a\u8fc7\u7a0b\u53ea\u9700\u8981 \u51e0\u6b65 \uff08\u53ef\u80fd\u662f10\u523020\u6b65\uff0c\u800c\u4e0d\u662f\u7ffb\u9605\u6240\u6709500\u9875\uff09\u3002</p> <p>\u5173\u952e\u662f\uff0c\u7d22\u5f15\u662f \u6392\u5e8f\u7684 \uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u548c \u5b57\u5178 \u4e00\u6837\u7684\u65b9\u6cd5\u6765\u67e5\u627e\u4e3b\u9898\u3002\u7136\u540e\uff0c\u5f97\u5230\u7684\u9875\u7801\u4e5f\u662f \u6709\u5e8f\u7684 \uff01\ud83d\ude05</p> <p>\u5f53\u6211\u4eec\u6709\u4e00\u4e2a\u6392\u5e8f\u7684\u5217\u8868\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5e94\u7528\u76f8\u540c\u7684\u6280\u672f\uff0c\u8fd9\u5c31\u662f\u8fd9\u91cc\u7684\u6838\u5fc3\u6280\u5de7\uff1a\u6211\u4eec\u9996\u5148\u5728 \u7d22\u5f15 \u4e2d\u67e5\u627e \u4e3b\u9898 \uff0c\u7136\u540e\u5728 \u9875\u7801 \u4e0a\u5e94\u7528\u540c\u6837\u7684\u65b9\u6cd5\u6765\u627e\u5230\u5b9e\u9645\u7684\u7ae0\u8282\u3002</p> <p>\u5982\u6b64\u9ad8\u6548\uff01\ud83d\ude0e</p>"},{"location":"tutorial/indexes/#_6","title":"\u4ec0\u4e48\u662f\u6570\u636e\u5e93\u7d22\u5f15","text":"<p>\u6570\u636e\u5e93\u7d22\u5f15 \u4e0e **\u4e66\u7c4d\u7d22\u5f15**\u975e\u5e38\u76f8\u4f3c\u3002</p> <p>\u6570\u636e\u5e93\u7d22\u5f15\u5b58\u50a8\u4e00\u4e9b\u4fe1\u606f\u3001\u952e\u503c\uff0c\u5e76\u4ee5\u4e00\u79cd\u4f7f\u5f97\u67e5\u627e\u53d8\u5f97 \u5feb\u901f\u4e14\u7b80\u5355**\u7684\u65b9\u5f0f\u8fdb\u884c\u6392\u5e8f\uff08\u4f8b\u5982\u6309\u987a\u5e8f\u6392\u5217\uff09\u3002\u7136\u540e\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u952e\uff0c\u5b83\u4eec **\u6307\u5411\u6570\u636e\u5e93\u4e2d\u5176\u4ed6\u5730\u65b9\u7684\u6570\u636e\u3002</p> <p>\u8ba9\u6211\u4eec\u770b\u4e00\u4e2a\u66f4\u6e05\u6670\u7684\u4f8b\u5b50\u3002\u5047\u8bbe\u4f60\u5728\u6570\u636e\u5e93\u4e2d\u6709\u4e00\u4e2a\u8fd9\u6837\u7684\u8868\uff1a</p> idnamesecret_nameage 1DeadpondDive Wilsonnull 2Spider-BoyPedro Parqueadornull 3Rusty-ManTommy Sharp48 <p>\u5047\u8bbe\u4f60\u6709 \u66f4\u591a\u7684\u884c\uff0c\u53ef\u80fd\u6709 **\u6210\u5343\u4e0a\u4e07**\u7684\u8bb0\u5f55\u3002</p> <p>\u5982\u679c\u4f60\u8981\u6c42SQL\u6570\u636e\u5e93\u6839\u636e\u7279\u5b9a\u7684\u540d\u5b57\u83b7\u53d6\u82f1\u96c4\uff0c\u4f8b\u5982 <code>Spider-Boy</code>\uff08\u4f7f\u7528 <code>name</code> \u5728SQL\u67e5\u8be2\u7684 <code>WHERE</code> \u90e8\u5206\uff09\uff0c\u6570\u636e\u5e93\u5c31\u5fc5\u987b **\u626b\u63cf**\u6240\u6709\u7684\u82f1\u96c4\uff0c\u9010\u4e2a\u68c0\u67e5\u6bcf\u4e00\u884c\uff0c\u4ee5\u627e\u5230\u540d\u5b57\u4e3a <code>Spider-Boy</code> \u7684\u8bb0\u5f55\u3002</p> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ea\u6709\u4e00\u6761\u8bb0\u5f55\uff0c\u4f46\u5e76\u6ca1\u6709\u4efb\u4f55\u9650\u5236\u6570\u636e\u5e93\u4e0d\u80fd\u6709 \u66f4\u591a\u76f8\u540c\u540d\u5b57\u7684\u8bb0\u5f55\u3002\u56e0\u6b64\uff0c\u6570\u636e\u5e93\u4f1a \u7ee7\u7eed\u67e5\u627e\uff0c\u9010\u6761\u68c0\u67e5\u6bcf\u4e00\u6761\u8bb0\u5f55\uff0c\u8fd9\u4f1a\u975e\u5e38\u6162\u3002</p> <p>\u4f46\u73b0\u5728\u5047\u8bbe\u6570\u636e\u5e93\u5df2\u7ecf\u4e3a <code>name</code> \u5217\u521b\u5efa\u4e86\u7d22\u5f15\u3002\u8fd9\u4e2a\u7d22\u5f15\u53ef\u80fd\u50cf\u8fd9\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u60f3\u8c61\u6210\u6570\u636e\u5e93\u81ea\u52a8\u7ba1\u7406\u7684\u4e00\u4e2a\u989d\u5916\u7684\u7279\u6b8a\u8868\uff1a</p> nameid Deadpond1 Rusty-Man3 Spider-Boy2 <p>\u7d22\u5f15\u4f1a\u6309 **\u987a\u5e8f**\u5217\u51fa\u6bcf\u4e2a <code>name</code> \u5b57\u6bb5\u3002\u5b83\u4e0d\u4f1a\u6309 <code>id</code> \u6392\u5e8f\uff0c\u800c\u662f\u6309 <code>name</code> \u6392\u5e8f\uff08\u6309\u5b57\u6bcd\u987a\u5e8f\uff0c\u56e0\u4e3a <code>name</code> \u662f\u5b57\u7b26\u4e32\uff09\u3002\u6240\u4ee5\uff0c\u9996\u5148\u662f <code>Deadpond</code>\uff0c\u7136\u540e\u662f <code>Rusty-Man</code>\uff0c\u6700\u540e\u662f <code>Spider-Boy</code>\u3002\u5b83\u8fd8\u4f1a\u5305\u542b\u6bcf\u4e2a\u82f1\u96c4\u7684 <code>id</code>\u3002\u8bb0\u4f4f\uff0c\u8fd9\u91cc\u53ef\u80fd\u6709 **\u6210\u5343\u4e0a\u4e07**\u4e2a\u82f1\u96c4\u3002</p> <p>\u7136\u540e\uff0c\u6570\u636e\u5e93\u5c31\u80fd\u591f\u4f7f\u7528\u7c7b\u4f3c\u4e0a\u8ff0 **\u5b57\u5178**\u548c **\u4e66\u7c4d\u7d22\u5f15**\u7684\u65b9\u5f0f\u6765\u67e5\u627e\u3002</p> <p>\u5b83\u53ef\u4ee5\u4ece\u67d0\u4e2a\u5730\u65b9\u5f00\u59cb\uff08\u4f8b\u5982\uff0c\u4ece\u7d22\u5f15\u7684\u4e2d\u95f4\uff09\u3002\u5b83\u53ef\u80fd\u4f1a\u627e\u5230\u50cf <code>Rusty-Man</code> \u8fd9\u6837\u7684\u82f1\u96c4\u3002\u56e0\u4e3a \u7d22\u5f15**\u4e2d\u7684 <code>name</code> \u5b57\u6bb5\u662f\u6309\u987a\u5e8f\u6392\u5217\u7684\uff0c\u6570\u636e\u5e93\u4f1a\u77e5\u9053\u5b83\u53ef\u4ee5 **\u4e22\u5f03\u6240\u6709\u4e4b\u524d\u7684\u7d22\u5f15\u884c\uff0c\u53ea\u5728\u540e\u9762\u7684\u7d22\u5f15\u884c\u4e2d\u8fdb\u884c\u67e5\u627e\u3002</p> nameid Deadpond1 Rusty-Man3 Spider-Boy2 <p>\u8fd9\u6837\uff0c\u5c31\u50cf\u5b57\u5178\u7684\u4f8b\u5b50\u4e00\u6837\uff0c \u65e0\u9700\u8bfb\u53d6\u6210\u5343\u4e0a\u4e07\u7684\u82f1\u96c4\uff0c\u6570\u636e\u5e93\u53ef\u4ee5\u901a\u8fc7 **5\u523010\u6b65**\u5feb\u901f\u627e\u5230\u5305\u542b <code>Spider-Boy</code> \u7684\u7d22\u5f15\u884c\uff0c\u5373\u4f7f\u8868\u683c\uff08\u548c\u7d22\u5f15\uff09\u6709\u6210\u5343\u4e0a\u4e07\u884c\uff1a</p> nameid Deadpond1 Rusty-Man3 \u2728 Spider-Boy \u27282 <p>\u901a\u8fc7\u67e5\u770b \u8fd9\u4e2a\u7d22\u5f15\u884c\uff0c\u6570\u636e\u5e93\u77e5\u9053 <code>Spider-Boy</code> \u5728 <code>hero</code> \u8868\u4e2d\u7684 <code>id</code> \u662f <code>2</code>\u3002</p> <p>\u63a5\u4e0b\u6765\uff0c\u5b83\u5c31\u53ef\u4ee5\u4f7f\u7528 \u76f8\u540c\u7684\u6280\u672f\uff0c\u901a\u8fc7\u67e5\u627e\u8fd9\u4e2a <code>id</code> \u5728 <code>hero</code> \u8868\u4e2d\u627e\u5230\u5bf9\u5e94\u7684\u8bb0\u5f55\u3002</p> <p>\u8fd9\u6837\uff0c\u6700\u7ec8\u6570\u636e\u5e93\u65e0\u9700\u8bfb\u53d6\u6210\u5343\u4e0a\u4e07\u7684\u8bb0\u5f55\uff0c\u53ea\u9700\u8981 **\u51e0\u6b65**\u5c31\u80fd\u627e\u5230\u6211\u4eec\u9700\u8981\u7684\u82f1\u96c4\u3002</p>"},{"location":"tutorial/indexes/#_7","title":"\u66f4\u65b0\u7d22\u5f15","text":"<p>\u6b63\u5982\u4f60\u6240\u60f3\u7684\uff0c\u8981\u4f7f\u8fd9\u4e00\u5207\u6b63\u5e38\u5de5\u4f5c\uff0c\u7d22\u5f15\u9700\u8981\u4e0e\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u4fdd\u6301 \u6700\u65b0\u3002</p> <p>\u5982\u679c\u4f60\u9700\u8981 \u624b\u52a8**\u5728\u4ee3\u7801\u4e2d\u66f4\u65b0\u7d22\u5f15\uff0c\u8fd9\u5c06\u975e\u5e38\u7e41\u7410\u4e14 **\u5bb9\u6613\u51fa\u9519\uff0c\u56e0\u4e3a\u5f88\u5bb9\u6613\u9677\u5165\u7d22\u5f15\u672a\u66f4\u65b0\u3001\u6307\u5411\u9519\u8bef\u6570\u636e\u7684\u72b6\u6001\u3002 \ud83d\ude31</p> <p>\u597d\u6d88\u606f\u662f\uff1a\u5f53\u4f60\u5728 **SQL\u6570\u636e\u5e93**\u4e2d\u521b\u5efa\u4e00\u4e2a\u7d22\u5f15\u65f6\uff0c\u6570\u636e\u5e93\u4f1a\u5728\u9700\u8981\u65f6 **\u81ea\u52a8**\u8d1f\u8d23 **\u66f4\u65b0**\u5b83\u3002 \ud83d\ude0e\ud83c\udf89</p> <p>\u5982\u679c\u4f60\u5411 <code>hero</code> \u8868\u4e2d \u6dfb\u52a0\u65b0\u8bb0\u5f55\uff0c\u6570\u636e\u5e93\u4f1a \u81ea\u52a8**\u66f4\u65b0\u7d22\u5f15\u3002\u5b83\u4f1a\u6267\u884c **\u76f8\u540c\u7684\u8fc7\u7a0b**\u6765 **\u67e5\u627e**\u6b63\u786e\u7684\u4f4d\u7f6e\uff0c\u5c06\u65b0\u7684\u7d22\u5f15\u6570\u636e\u63d2\u5165\u8fdb\u53bb\uff08\u5c31\u50cf\u4e0a\u9762\u63cf\u8ff0\u7684 **5\u523010\u6b65\uff09\uff0c\u7136\u540e\u5c06\u65b0\u7684\u7d22\u5f15\u4fe1\u606f\u4fdd\u5b58\u5230\u90a3\u91cc\u3002\u540c\u6837\u7684\u8fc7\u7a0b\u4e5f\u4f1a\u5728\u4f60 **\u66f4\u65b0**\u6216 **\u5220\u9664**\u6570\u636e\u65f6\u53d1\u751f\u3002</p> <p>\u5728SQL\u6570\u636e\u5e93\u4e2d\uff0c\u5b9a\u4e49\u548c\u521b\u5efa\u7d22\u5f15\u662f\u975e\u5e38 **\u7b80\u5355**\u7684\u3002\u800c\u4e14 **\u4f7f\u7528**\u7d22\u5f15\u5219\u66f4\u52a0\u5bb9\u6613\u2026\u2026\u51e0\u4e4e\u662f\u900f\u660e\u7684\u3002\u6570\u636e\u5e93\u4f1a\u81ea\u52a8\u5224\u65ad\u4f7f\u7528\u54ea\u4e2a\u7d22\u5f15\uff0cSQL\u67e5\u8be2\u751a\u81f3\u4e0d\u9700\u8981\u6539\u53d8\u3002</p> <p>\u6240\u4ee5\uff0c\u5728SQL\u6570\u636e\u5e93\u4e2d\uff0c \u7d22\u5f15\u975e\u5e38\u68d2\uff01\u800c\u4e14\u8d85\u7ea7 \u6613\u4e8e\u4f7f\u7528\u3002\u90a3\u4e3a\u4ec0\u4e48\u4e0d\u4e3a\u6240\u6709\u4e1c\u897f\u90fd\u521b\u5efa\u7d22\u5f15\u5462\uff1f\u2026..\u56e0\u4e3a\u7d22\u5f15\u4e5f\u6709 \u8ba1\u7b97\u548c\u5b58\u50a8\uff08\u78c1\u76d8\u7a7a\u95f4\uff09\u4e0a\u7684\u201c\u6210\u672c\u201d\u3002</p>"},{"location":"tutorial/indexes/#_8","title":"\u7d22\u5f15\u7684\u6210\u672c","text":"<p>\u7d22\u5f15 \u662f\u6709 **\u6210\u672c**\u7684\u3002\ud83d\udcb0</p> <p>\u5f53\u4f60\u6ca1\u6709\u7d22\u5f15\uff0c\u5e76\u5411 <code>hero</code> \u8868\u4e2d\u6dfb\u52a0 \u65b0\u884c**\u65f6\uff0c\u6570\u636e\u5e93\u53ea\u9700\u8981\u6267\u884c **1\u6b21\u64cd\u4f5c\uff0c\u5c06\u65b0\u82f1\u96c4\u8bb0\u5f55\u6dfb\u52a0\u5230\u8868\u7684\u672b\u5c3e\u3002</p> <p>\u4f46\u5982\u679c\u4f60\u6709 \u82f1\u96c4\u540d\u5b57**\u7684 **\u7d22\u5f15\uff0c\u90a3\u4e48\u6570\u636e\u5e93\u5c31\u5fc5\u987b\u6267\u884c\u76f8\u540c\u7684 1\u6b21\u64cd\u4f5c**\u6765\u6dfb\u52a0\u8fd9\u4e00\u884c **\u5916\u52a0**\u5728\u7d22\u5f15\u4e2d\u8fdb\u884c\u989d\u5916\u7684 **5\u523010\u6b21\u64cd\u4f5c\uff0c\u6765\u627e\u5230\u6b63\u786e\u7684\u4f4d\u7f6e\u63d2\u5165\u8fd9\u4e2a\u540d\u5b57\uff0c\u7136\u540e\u5c06\u8be5 **\u7d22\u5f15\u8bb0\u5f55**\u6dfb\u52a0\u5230\u90a3\u91cc\u3002</p> <p>\u5982\u679c\u4f60\u6709\u4e00\u4e2a<code>name</code>\u7684\u7d22\u5f15\u3001\u4e00\u4e2a<code>age</code>\u7684\u7d22\u5f15\u548c\u4e00\u4e2a<code>secret_name</code>\u7684\u7d22\u5f15\uff0c\u90a3\u4e48\u6570\u636e\u5e93\u5c31\u9700\u8981\u6267\u884c\u76f8\u540c\u7684 1\u6b21\u64cd\u4f5c**\u6765\u6dfb\u52a0\u8be5\u884c **\u5916\u52a0**\u5728\u6bcf\u4e2a\u7d22\u5f15\u4e2d\u8fdb\u884c **5\u523010\u6b21\u64cd\u4f5c\uff0c\u8fd9\u6837\u4e00\u6765\uff0c\u6dfb\u52a0\u4e00\u884c\u5c31\u9700\u8981\u5927\u7ea6 31\u6b21\u64cd\u4f5c\u3002</p> <p>\u8fd9\u4e5f\u610f\u5473\u7740\u4f60\u5728 \u8bfb\u53d6**\u6570\u636e\u65f6\u8282\u7701\u7684\u65f6\u95f4\uff0c\u4f1a\u8f6c\u53d8\u4e3a **\u5199\u5165**\u6570\u636e\u6240\u9700\u7684\u65f6\u95f4\uff0c\u518d\u52a0\u4e0a\u4e00\u4e9b\u989d\u5916\u7684 **\u7a7a\u95f4\uff0c\u7528\u4e8e\u5b58\u50a8\u7d22\u5f15\u3002</p> <p>\u5982\u679c\u4f60\u7684\u67e5\u8be2\u9700\u8981\u901a\u8fc7\u6bd4\u8f83\u6bcf\u4e2a\u5b57\u6bb5\u6765\u4ece\u6570\u636e\u5e93\u4e2d\u63d0\u53d6\u6570\u636e\uff08\u4f8b\u5982\u4f7f\u7528 <code>WHERE</code>\uff09\uff0c\u90a3\u4e48\u4e3a\u6bcf\u4e2a\u5b57\u6bb5\u521b\u5efa\u7d22\u5f15\u662f\u975e\u5e38\u6709\u610f\u4e49\u7684\u3002\u56e0\u4e3a\u5728\u521b\u5efa\u6216\u66f4\u65b0\u6570\u636e\u65f6\uff0c\u8fdb\u884c 31\u6b21\u64cd\u4f5c\uff08\u52a0\u4e0a\u7d22\u5f15\u7684\u7a7a\u95f4\uff09\u6bd4\u8fdb\u884c\u53ef\u80fd\u7684 **500\u62161000\u6b21\u64cd\u4f5c**\u6765\u8bfb\u53d6\u6240\u6709\u884c\u5e76\u901a\u8fc7\u6bcf\u4e2a\u5b57\u6bb5\u8fdb\u884c\u6bd4\u8f83\u8981\u597d\u5f97\u591a\u3002</p> <p>\u4f46\u662f\uff0c\u5982\u679c\u4f60 \u4ece\u672a**\u4f7f\u7528 <code>secret_name</code> \u5b57\u6bb5\u8fdb\u884c\u67e5\u8be2\uff08\u4f8b\u5982\u4ece\u672a\u5728 <code>WHERE</code> \u90e8\u5206\u4f7f\u7528 <code>secret_name</code>\uff09\uff0c\u90a3\u4e48\u4e3a <code>secret_name</code> \u5b57\u6bb5/\u5217\u521b\u5efa\u7d22\u5f15\u53ef\u80fd\u5c31\u6ca1\u6709\u610f\u4e49\uff0c\u56e0\u4e3a\u8fd9\u4f1a\u589e\u52a0\u6570\u636e\u5e93\u5199\u5165\u548c\u66f4\u65b0\u7684\u8ba1\u7b97\u548c\u7a7a\u95f4 **\u6210\u672c\u3002</p>"},{"location":"tutorial/indexes/#sql","title":"\u4f7f\u7528 SQL \u521b\u5efa\u7d22\u5f15","text":"<p>\u547c\uff0c\u8fd9\u90e8\u5206\u7406\u8bba\u548c\u89e3\u91ca\u633a\u591a\u7684\u3002 \ud83d\ude05</p> <p>\u7406\u89e3\u7d22\u5f15\u3001\u5982\u4f55\u4f7f\u7528\u4ee5\u53ca\u4f55\u65f6\u4f7f\u7528\u5b83\u4eec\u662f\u6700\u91cd\u8981\u7684\u3002</p> <p>\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u521b\u5efa \u7d22\u5f15 \u7684 SQL \u8bed\u6cd5\u3002\u5b83\u975e\u5e38\u7b80\u5355\uff1a</p> <pre><code>CREATE INDEX ix_hero_name\nON hero (name)\n</code></pre> <p>\u8fd9\u5927\u81f4\u610f\u5473\u7740\uff1a</p> <p>\u563f\uff0cSQL \u6570\u636e\u5e93 \ud83d\udc4b\uff0c\u8bf7\u4e3a\u6211 <code>CREATE</code> \u4e00\u4e2a <code>INDEX</code>\u3002</p> <p>\u6211\u5e0c\u671b\u8fd9\u4e2a\u7d22\u5f15\u7684\u540d\u5b57\u662f <code>ix_hero_name</code>\u3002</p> <p>\u8fd9\u4e2a\u7d22\u5f15\u5e94\u8be5\u662f <code>ON</code> <code>hero</code> \u8868\uff0c\u6307\u5411\u90a3\u4e2a\u8868\u3002</p> <p>\u6211\u5e0c\u671b\u4f60\u4f7f\u7528 <code>name</code> \u8fd9\u4e00\u5217\u6765\u521b\u5efa\u7d22\u5f15\u3002</p>"},{"location":"tutorial/indexes/#sqlmodel","title":"\u4f7f\u7528 SQLModel \u58f0\u660e\u7d22\u5f15","text":"<p>\u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u5728 SQLModel \u4e2d\u5b9a\u4e49\u7d22\u5f15\u3002</p> <p>\u4ee3\u7801\u4e0a\u7684\u53d8\u5316\u975e\u5e38\u7b80\u5355\uff0c\u51e0\u4e4e\u6ca1\u6709\u53d8\u5316\u3002 \ud83d\ude06</p> <p>\u8fd9\u662f\u6211\u4eec\u4e4b\u524d\u7684 <code>Hero</code> \u6a21\u578b\uff1a</p> Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u73b0\u5728\uff0c\u6211\u4eec\u5c06\u5176\u66f4\u65b0\uff0c\u4ee5\u4fbf\u5728\u521b\u5efa\u8868\u65f6\u544a\u8bc9 SQLModel \u4e3a <code>name</code> \u5b57\u6bb5\u521b\u5efa\u4e00\u4e2a\u7d22\u5f15\uff1a</p> Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u6211\u4eec\u518d\u6b21\u4f7f\u7528\u76f8\u540c\u7684 <code>Field()</code>\uff0c\u5e76\u8bbe\u7f6e <code>index=True</code>\u3002\u5c31\u8fd9\u6837\uff01 \ud83d\ude80</p> <p>\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u6ca1\u6709\u8bbe\u7f6e <code>default=None</code> \u6216\u7c7b\u4f3c\u7684\u53c2\u6570\u3002\u8fd9\u610f\u5473\u7740 SQLModel\uff08\u501f\u52a9 Pydantic\uff09\u5c06\u5176\u89c6\u4e3a \u5fc5\u586b \u5b57\u6bb5\u3002</p> <p>Info</p> <p>SQLModel\uff08\u5b9e\u9645\u4e0a\u662f SQLAlchemy\uff09\u4f1a\u4e3a\u4f60**\u81ea\u52a8\u751f\u6210\u7d22\u5f15\u540d\u79f0**\u3002</p> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u751f\u6210\u7684\u540d\u79f0\u5c06\u662f <code>ix_hero_name</code>\u3002</p>"},{"location":"tutorial/indexes/#_9","title":"\u67e5\u8be2\u6570\u636e","text":"<p>\u73b0\u5728\uff0c\u4f7f\u7528\u5b57\u6bb5 <code>name</code> \u548c\u65b0\u7d22\u5f15\u67e5\u8be2\u6570\u636e\u65f6\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u5728\u4ee3\u7801\u4e2d\u505a\u4efb\u4f55\u7279\u6b8a\u6216\u4e0d\u540c\u7684\u5904\u7406\uff0c\u4f9d\u7136\u662f**\u76f8\u540c\u7684\u4ee3\u7801**\u3002</p> <p>SQL \u6570\u636e\u5e93\u4f1a**\u81ea\u52a8**\u5904\u7406\u8fd9\u4e00\u5207\u3002\u2728</p> <p>\u8fd9\u975e\u5e38\u68d2\uff0c\u56e0\u4e3a\u5b83\u610f\u5473\u7740\u7d22\u5f15\u7684\u4f7f\u7528\u975e\u5e38**\u7b80\u5355**\u3002\u4f46\u4e00\u5f00\u59cb\u53ef\u80fd\u4f1a\u611f\u89c9\u6709\u4e9b\u53cd\u76f4\u89c9\uff0c\u56e0\u4e3a\u4f60\u5728\u4ee3\u7801\u4e2d**\u6ca1\u6709\u505a\u4efb\u4f55**\u663e\u5f0f\u64cd\u4f5c\u6765\u8868\u660e\u7d22\u5f15\u662f\u6709\u7528\u7684\uff0c\u5b83\u7684\u4e00\u5207\u90fd\u5728\u6570\u636e\u5e93\u540e\u53f0\u6084\u6084\u53d1\u751f\u3002</p> Python 3.10+Python 3.7+ <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u8fd9\u4e0e\u6211\u4eec\u4e4b\u524d\u7684\u4ee3\u7801\u5b8c\u5168\u76f8\u540c\uff0c\u4f46\u73b0\u5728\u6570\u636e\u5e93\u4f1a\u5728\u540e\u53f0 \u4f7f\u7528\u7d22\u5f15\u3002</p>"},{"location":"tutorial/indexes/#_10","title":"\u8fd0\u884c\u7a0b\u5e8f","text":"<p>\u5982\u679c\u4f60\u73b0\u5728\u8fd0\u884c\u7a0b\u5e8f\uff0c\u4f60\u4f1a\u770b\u5230\u7c7b\u4f3c\u8fd9\u6837\u7684\u8f93\u51fa\uff1a</p> <pre><code>$ python app.py\n\n// \u4e00\u4e9b\u6837\u677f\u8f93\u51fa\u5df2\u7701\u7565 \ud83d\ude09\n\n// \u521b\u5efa\u8868\nCREATE TABLE hero (\n        id INTEGER,\n        name VARCHAR NOT NULL,\n        secret_name VARCHAR NOT NULL,\n        age INTEGER,\n        PRIMARY KEY (id)\n)\n\n// \u521b\u5efa\u7d22\u5f15 \ud83e\udd13\ud83c\udf89\nCREATE INDEX ix_hero_name ON hero (name)\n\n// \u5e26 WHERE \u7684 SELECT \u770b\u8d77\u6765\u4e00\u6837\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.name = ?\nINFO Engine [no key 0.00014s] ('Deadpond',)\n\n// \u7ed3\u679c\u82f1\u96c4\nsecret_name='Dive Wilson' age=None id=1 name='Deadpond'\n</code></pre>"},{"location":"tutorial/indexes/#_11","title":"\u66f4\u591a\u7d22\u5f15","text":"<p>\u6211\u4eec\u5c06\u67e5\u8be2 <code>hero</code> \u8868\uff0c\u5e76\u5bf9 <code>age</code> \u5b57\u6bb5\u8fdb\u884c\u6bd4\u8f83\uff0c\u56e0\u6b64\u6211\u4eec\u4e5f\u5e94\u8be5 \u4e3a\u8be5\u5b57\u6bb5\u5b9a\u4e49\u4e00\u4e2a\u7d22\u5f15\uff1a</p> Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5e0c\u671b <code>age</code> \u7684\u9ed8\u8ba4\u503c\u7ee7\u7eed\u4e3a <code>None</code>\uff0c\u56e0\u6b64\u5728\u4f7f\u7528 <code>Field()</code> \u65f6\uff0c\u6211\u4eec\u8bbe\u7f6e\u4e86 <code>default=None</code>\u3002</p> <p>\u73b0\u5728\uff0c\u5f53\u6211\u4eec\u4f7f\u7528 SQLModel \u521b\u5efa\u6570\u636e\u5e93\u548c\u8868\u65f6\uff0c\u5b83\u4e5f\u4f1a\u4e3a <code>hero</code> \u8868\u4e2d\u7684\u8fd9\u4e24\u5217\u521b\u5efa \u7d22\u5f15\u3002</p> <p>\u56e0\u6b64\uff0c\u5f53\u6211\u4eec\u67e5\u8be2\u6570\u636e\u5e93\u7684 <code>hero</code> \u8868\uff0c\u5e76\u4f7f\u7528\u8fd9 \u4e24\u5217**\u6765\u5b9a\u4e49\u6211\u4eec\u83b7\u53d6\u7684\u6570\u636e\u65f6\uff0c\u6570\u636e\u5e93\u5c06\u80fd\u591f **\u4f7f\u7528\u8fd9\u4e9b\u7d22\u5f15**\u6765\u63d0\u9ad8 **\u8bfb\u53d6\u6027\u80fd\u3002\ud83d\ude80</p>"},{"location":"tutorial/indexes/#_12","title":"\u4e3b\u952e\u548c\u7d22\u5f15","text":"<p>\u4f60\u53ef\u80fd\u6ce8\u610f\u5230\u6211\u4eec\u6ca1\u6709\u4e3a <code>id</code> \u5b57\u6bb5\u8bbe\u7f6e <code>index=True</code>\u3002</p> <p>\u56e0\u4e3a <code>id</code> \u5df2\u7ecf\u662f \u4e3b\u952e\uff0c\u6570\u636e\u5e93\u4f1a\u81ea\u52a8\u4e3a\u5b83\u521b\u5efa\u4e00\u4e2a\u5185\u90e8 \u7d22\u5f15\u3002</p> <p>\u6570\u636e\u5e93\u59cb\u7ec8\u4f1a\u81ea\u52a8\u4e3a **\u4e3b\u952e**\u521b\u5efa\u4e00\u4e2a\u5185\u90e8\u7d22\u5f15\uff0c\u56e0\u4e3a\u4e3b\u952e\u662f\u7ec4\u7ec7\u3001\u5b58\u50a8\u548c\u68c0\u7d22\u6570\u636e\u7684\u4e3b\u8981\u65b9\u5f0f\u3002\ud83e\udd13</p> <p>\u4f46\u662f\uff0c\u5982\u679c\u4f60\u9700\u8981 \u9891\u7e41\u67e5\u8be2**SQL\u6570\u636e\u5e93\u4e2d\u7684\u4efb\u4f55 **\u5176\u4ed6\u5b57\u6bb5\uff08\u4f8b\u5982\u5728 <code>WHERE</code> \u90e8\u5206\u4f7f\u7528\u5176\u4ed6\u5b57\u6bb5\uff09\uff0c\u4f60\u53ef\u80fd\u4f1a\u5e0c\u671b\u4e3a\u8fd9\u4e9b\u5b57\u6bb5\u81f3\u5c11\u521b\u5efa\u4e00\u4e2a \u7d22\u5f15\u3002</p>"},{"location":"tutorial/indexes/#_13","title":"\u603b\u7ed3","text":"<p>\u7d22\u5f15 \u5bf9\u4e8e\u63d0\u9ad8\u67e5\u8be2\u6570\u636e\u5e93\u65f6\u7684 **\u8bfb\u53d6\u6027\u80fd**\u548c\u901f\u5ea6\u975e\u5e38\u91cd\u8981\u3002\ud83c\udfce</p> <p>\u521b\u5efa\u548c\u4f7f\u7528\u7d22\u5f15\u975e\u5e38 \u7b80\u5355**\u548c\u6613\u4e8e\u7406\u89e3\u3002\u6700\u91cd\u8981\u7684\u90e8\u5206\u662f\u7406\u89e3 **\u5b83\u4eec\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c **\u4f55\u65f6**\u521b\u5efa\u5b83\u4eec\uff0c\u4ee5\u53ca\u4e3a **\u54ea\u4e9b\u5217**\u521b\u5efa\u5b83\u4eec\u3002</p>"},{"location":"tutorial/insert/","title":"\u521b\u5efa\u6570\u636e\u884c - \u4f7f\u7528 Session - \u63d2\u5165\uff08INSERT\uff09","text":"<p>\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u6709\u4e86\u6570\u636e\u5e93\u548c\u8868\uff0c\u53ef\u4ee5\u5f00\u59cb\u6dfb\u52a0\u6570\u636e\u4e86\u3002</p> <p>\u4ee5\u4e0b\u662f\u8868\u683c\u7684\u6837\u5b50\uff08\u76ee\u6807\u6570\u636e\uff09\uff1a</p> idnamesecret_nameage 1DeadpondDive Wilsonnull 2Spider-BoyPedro Parqueadornull 3Rusty-ManTommy Sharp48"},{"location":"tutorial/insert/#_1","title":"\u521b\u5efa\u8868\u548c\u6570\u636e\u5e93","text":"<p>\u6211\u4eec\u5c06\u4ece\u4e0a\u4e00\u7ae0\u7684\u5185\u5bb9\u7ee7\u7eed\u3002</p> <p>\u4ee5\u4e0b\u662f\u521b\u5efa\u6570\u636e\u5e93\u548c\u8868\u7684\u4ee3\u7801\uff0c\u8fd9\u90e8\u5206\u6ca1\u6709\u53d8\u5316\uff1a</p> Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, SQLModel, create_engine  # (2)!\n\n\nclass Hero(SQLModel, table=True):  # (3)!\n    id: int | None = Field(default=None, primary_key=True)  # (4)!\n    name: str  # (5)!\n    secret_name: str  # (6)!\n    age: int | None = None  # (7)!\n\n\nsqlite_file_name = \"database.db\"  # (8)!\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"  # (9)!\n\nengine = create_engine(sqlite_url, echo=True)  # (10)!\n\n\ndef create_db_and_tables():  # (11)!\n    SQLModel.metadata.create_all(engine)  # (12)!\n\n# \u4e4b\u540e\u4f1a\u6dfb\u52a0\u66f4\u591a\u4ee3\u7801 \ud83d\udc48\n\nif __name__ == \"__main__\":  # (13)!\n    create_db_and_tables()  # (14)!\n</code></pre> <ol> <li>Import <code>Optional</code> from <code>typing</code> to declare fields that could be <code>None</code>.</li> <li>Import the things we will need from <code>sqlmodel</code>: <code>Field</code>, <code>SQLModel</code>, <code>create_engine</code>.</li> <li> <p>Create the <code>Hero</code> model class, representing the <code>hero</code> table in the database.</p> <p>And also mark this class as a table model with <code>table=True</code>.</p> </li> <li> <p>Create the <code>id</code> field:</p> <p>It could be <code>None</code> until the database assigns a value to it, so we annotate it with <code>Optional</code>.</p> <p>It is a primary key, so we use <code>Field()</code> and the argument <code>primary_key=True</code>.</p> </li> <li> <p>Create the <code>name</code> field.</p> <p>It is required, so there's no default value, and it's not <code>Optional</code>.</p> </li> <li> <p>Create the <code>secret_name</code> field.</p> <p>Also required.</p> </li> <li> <p>Create the <code>age</code> field.</p> <p>It is not required, the default value is <code>None</code>.</p> <p>In the database, the default value will be <code>NULL</code>, the SQL equivalent of <code>None</code>.</p> <p>As this field could be <code>None</code> (and <code>NULL</code> in the database), we annotate it with <code>Optional</code>.</p> </li> <li> <p>Write the name of the database file.</p> </li> <li>Use the name of the database file to create the database URL.</li> <li> <p>Create the engine using the URL.</p> <p>This doesn't create the database yet, no file or table is created at this point, only the engine object that will handle the connections with this specific database, and with specific support for SQLite (based on the URL).</p> </li> <li> <p>Put the code that creates side effects in a function.</p> <p>In this case, only one line that creates the database file with the table.</p> </li> <li> <p>Create all the tables that were automatically registered in <code>SQLModel.metadata</code>.</p> </li> <li> <p>Add a main block, or \"Top-level script environment\".</p> <p>And put some logic to be executed when this is called directly with Python, as in:</p> <pre><code>$ python app.py\n\n// Execute all the stuff and show the output\n</code></pre> <p>...but that is not executed when importing something from this module, like:</p> <pre><code>from app import Hero\n</code></pre> </li> <li> <p>In this main block, call the function that creates the database file and the table.</p> <p>This way when we call it with:</p> <pre><code>$ python app.py\n\n// Doing stuff \u2728\n</code></pre> <p>...it will create the database file and the table.</p> </li> </ol> <pre><code>from typing import Optional  # (1)!\n\nfrom sqlmodel import Field, SQLModel, create_engine  # (2)!\n\n\nclass Hero(SQLModel, table=True):  # (3)!\n    id: Optional[int] = Field(default=None, primary_key=True)  # (4)!\n    name: str  # (5)!\n    secret_name: str  # (6)!\n    age: Optional[int] = None  # (7)!\n\n\nsqlite_file_name = \"database.db\"  # (8)!\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"  # (9)!\n\nengine = create_engine(sqlite_url, echo=True)  # (10)!\n\n\ndef create_db_and_tables():  # (11)!\n    SQLModel.metadata.create_all(engine)  # (12)!\n\n# \u4e4b\u540e\u4f1a\u6dfb\u52a0\u66f4\u591a\u4ee3\u7801 \ud83d\udc48\n\nif __name__ == \"__main__\":  # (13)!\n    create_db_and_tables()  # (14)!\n</code></pre> <ol> <li>Import <code>Optional</code> from <code>typing</code> to declare fields that could be <code>None</code>.</li> <li>Import the things we will need from <code>sqlmodel</code>: <code>Field</code>, <code>SQLModel</code>, <code>create_engine</code>.</li> <li> <p>Create the <code>Hero</code> model class, representing the <code>hero</code> table in the database.</p> <p>And also mark this class as a table model with <code>table=True</code>.</p> </li> <li> <p>Create the <code>id</code> field:</p> <p>It could be <code>None</code> until the database assigns a value to it, so we annotate it with <code>Optional</code>.</p> <p>It is a primary key, so we use <code>Field()</code> and the argument <code>primary_key=True</code>.</p> </li> <li> <p>Create the <code>name</code> field.</p> <p>It is required, so there's no default value, and it's not <code>Optional</code>.</p> </li> <li> <p>Create the <code>secret_name</code> field.</p> <p>Also required.</p> </li> <li> <p>Create the <code>age</code> field.</p> <p>It is not required, the default value is <code>None</code>.</p> <p>In the database, the default value will be <code>NULL</code>, the SQL equivalent of <code>None</code>.</p> <p>As this field could be <code>None</code> (and <code>NULL</code> in the database), we annotate it with <code>Optional</code>.</p> </li> <li> <p>Write the name of the database file.</p> </li> <li>Use the name of the database file to create the database URL.</li> <li> <p>Create the engine using the URL.</p> <p>This doesn't create the database yet, no file or table is created at this point, only the engine object that will handle the connections with this specific database, and with specific support for SQLite (based on the URL).</p> </li> <li> <p>Put the code that creates side effects in a function.</p> <p>In this case, only one line that creates the database file with the table.</p> </li> <li> <p>Create all the tables that were automatically registered in <code>SQLModel.metadata</code>.</p> </li> <li> <p>Add a main block, or \"Top-level script environment\".</p> <p>And put some logic to be executed when this is called directly with Python, as in:</p> <pre><code>$ python app.py\n\n// Execute all the stuff and show the output\n</code></pre> <p>...but that is not executed when importing something from this module, like:</p> <pre><code>from app import Hero\n</code></pre> </li> <li> <p>In this main block, call the function that creates the database file and the table.</p> <p>This way when we call it with:</p> <pre><code>$ python app.py\n\n// Doing stuff \u2728\n</code></pre> <p>...it will create the database file and the table.</p> </li> </ol> <p>\u73b0\u5728\uff0c\u6211\u4eec\u5df2\u7ecf\u80fd\u591f\u521b\u5efa\u6570\u636e\u5e93\u548c\u8868\uff0c\u6211\u4eec\u5c06\u5728\u6b64\u57fa\u7840\u4e0a\u7ee7\u7eed\u6269\u5c55\u4ee3\u7801\uff0c\u5728\u540c\u4e00\u4e2a\u6587\u4ef6\u4e2d\u6dfb\u52a0\u4ee3\u7801\u4ee5\u63d2\u5165\u6570\u636e\u3002</p>"},{"location":"tutorial/insert/#sql","title":"\u4f7f\u7528 SQL \u521b\u5efa\u6570\u636e","text":"<p>\u5728\u7f16\u5199 Python \u4ee3\u7801\u4e4b\u524d\uff0c\u8ba9\u6211\u4eec\u5148\u770b\u770b\u5982\u4f55\u4f7f\u7528 SQL \u521b\u5efa\u6570\u636e\u3002</p> <p>\u5047\u8bbe\u6211\u4eec\u8981\u5411\u6570\u636e\u5e93\u4e2d\u63d2\u5165 <code>Deadpond</code> \u7684\u8bb0\u5f55/\u884c\u3002</p> <p>\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b SQL \u8bed\u53e5\u5b8c\u6210\uff1a</p> <pre><code>INSERT INTO \"hero\" (\"name\", \"secret_name\")\nVALUES (\"Deadpond\", \"Dive Wilson\");\n</code></pre> <p>\u8fd9\u6bb5 SQL \u8bed\u53e5\u7684\u542b\u4e49\u5927\u81f4\u662f\uff1a</p> <p>\u563f\uff0cSQL \u6570\u636e\u5e93 \ud83d\udc4b\uff0c\u8bf7 <code>INSERT</code> \u4e00\u4e9b\u5185\u5bb9\uff08\u521b\u5efa\u4e00\u6761\u8bb0\u5f55/\u884c\uff09\u5230\u8868 <code>\"hero\"</code> \u4e2d\u3002</p> <p>\u6211\u5e0c\u671b\u4f60\u5c06\u8fd9\u4e9b\u503c\u63d2\u5165\u5230\u4ee5\u4e0b\u6307\u5b9a\u7684\u5217\u4e2d\uff1a</p> <ul> <li><code>\"name\"</code></li> <li><code>\"secret_name\"</code></li> </ul> <p>\u6211\u5e0c\u671b\u5728\u8fd9\u4e9b\u5217\u4e2d\u586b\u5199\u7684\u503c\u662f\uff1a</p> <ul> <li><code>\"Deadpond\"</code></li> <li><code>\"Dive Wilson\"</code></li> </ul>"},{"location":"tutorial/insert/#sqlite-db-explorer","title":"\u5728 SQLite \u7684 DB Explorer \u4e2d\u5c1d\u8bd5","text":"<p>\u4f60\u53ef\u4ee5\u5728 DB Explorer for SQLite \u4e2d\u5c1d\u8bd5\u8fd9\u6761 SQL \u8bed\u53e5\u3002</p> <p>\u786e\u4fdd\u70b9\u51fb Open Database \u6253\u5f00\u6211\u4eec\u4e4b\u524d\u521b\u5efa\u7684\u540c\u4e00\u4e2a\u6570\u636e\u5e93\uff0c\u5e76\u9009\u62e9\u540c\u4e00\u4e2a <code>database.db</code> \u6587\u4ef6\u3002</p> <p>Tip</p> <p>\u5982\u679c\u4f60\u6ca1\u6709\u5305\u542b <code>hero</code> \u8868\u7684 <code>database.db</code> \u6587\u4ef6\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fd0\u884c\u4e0a\u65b9\u7684 Python \u7a0b\u5e8f\u91cd\u65b0\u521b\u5efa\u8be5\u6587\u4ef6\u3002\ud83d\udc46</p> <p>\u63a5\u7740\uff0c\u8fdb\u5165 Execute SQL \u9009\u9879\u5361\uff0c\u5e76\u590d\u5236\u4e0a\u8ff0 SQL \u8bed\u53e5\u3002</p> <p>\u770b\u8d77\u6765\u4f1a\u50cf\u8fd9\u6837\uff1a</p> <p></p> <p>\u70b9\u51fb \"Execute all\" \u6309\u94ae \u25b6\u3002</p> <p>\u7136\u540e\uff0c\u8fdb\u5165 Browse Data \u9009\u9879\u5361\uff0c\u4f60\u5c06\u770b\u5230\u65b0\u521b\u5efa\u7684\u8bb0\u5f55/\u884c\uff1a</p> <p></p>"},{"location":"tutorial/insert/#_2","title":"\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u4e0e\u4ee3\u7801\u4e2d\u7684\u6570\u636e","text":"<p>\u5f53\u6211\u4eec\u5728\u7f16\u7a0b\u8bed\u8a00\u4e2d\u64cd\u4f5c\u6570\u636e\u5e93\uff08SQL \u6216\u5176\u4ed6\u7c7b\u578b\uff09\u65f6\uff0c\u6570\u636e\u4f1a\u6709\u4e24\u79cd\u72b6\u6001\uff1a\u4e00\u90e8\u5206\u6570\u636e\u5b58\u5728\u4e8e**\u5185\u5b58\u4e2d**\uff08\u7531\u6211\u4eec\u521b\u5efa\u7684\u5bf9\u8c61\u548c\u53d8\u91cf\u5b58\u50a8\uff09\uff0c\u53e6\u4e00\u90e8\u5206\u6570\u636e\u5219\u4fdd\u5b58\u5728**\u6570\u636e\u5e93\u4e2d**\u3002</p> <p>\u6211\u4eec\u7ecf\u5e38\u4f1a\u4ece\u6570\u636e\u5e93\u4e2d**\u83b7\u53d6**\u4e00\u4e9b\u6570\u636e\uff0c\u653e\u5165\u5185\u5b58\u4e2d\u7684\u53d8\u91cf\u4e2d\u3002</p> <p>\u540c\u6837\u5730\uff0c\u6211\u4eec\u4f1a\u5728\u4ee3\u7801\u4e2d\u521b\u5efa\u4e00\u4e9b\u53d8\u91cf\u548c\u5bf9\u8c61\uff0c\u5e76\u5c06\u8fd9\u4e9b\u6570\u636e\u4fdd\u5b58\u5230\u6570\u636e\u5e93\u4e2d\uff0c\u79f0\u4e4b\u4e3a**\u53d1\u9001**\u3002</p> <p>\u6709\u65f6\u5019\uff0c\u6211\u4eec\u751a\u81f3\u4f1a\u5728\u5185\u5b58\u4e2d\u521b\u5efa\u4e00\u4e9b\u6570\u636e\uff0c\u4fee\u6539\u540e\u518d\u4fdd\u5b58\u5230\u6570\u636e\u5e93\u4e2d\u3002</p> <p>\u4e5f\u53ef\u80fd\u901a\u8fc7\u4ee3\u7801\u4e2d\u7684\u67d0\u4e9b\u903b\u8f91\u51b3\u5b9a\u4e0d\u518d\u5c06\u6570\u636e\u4fdd\u5b58\u5230\u6570\u636e\u5e93\u4e2d\uff0c\u4ec5\u5728\u5185\u5b58\u4e2d\u5904\u7406\u8fd9\u4e9b\u6570\u636e\uff0c\u7136\u540e\u4e22\u5f03\u5b83\u4eec\ud83d\udd25\uff0c\u800c\u65e0\u9700\u4e0e\u6570\u636e\u5e93\u8fdb\u884c\u4ea4\u4e92\u3002</p> <p>SQLModel \uff08\u5b9e\u9645\u4e0a\u662f\u901a\u8fc7 SQLAlchemy \u5b9e\u73b0\u7684\uff09\u5c3d\u53ef\u80fd\u5730\u4f7f\u8fd9\u79cd\u4ea4\u4e92\u53d8\u5f97\u7b80\u5355\u3001\u76f4\u89c2\u4e14\u8d34\u8fd1\u7f16\u7a0b\u4f53\u9a8c \u2728\u3002</p> <p>\u4e0d\u8fc7\uff0c\u8fd9\u79cd\u6570\u636e\u5b58\u5728\u4e8e\u4e24\u79cd\u4f4d\u7f6e\uff08\u5185\u5b58\u6216\u6570\u636e\u5e93\uff09\u7684\u5206\u754c\u59cb\u7ec8\u5b58\u5728\u3002\u8fd9\u4e00\u70b9\u975e\u5e38\u91cd\u8981\uff0c\u9700\u8981\u4f60\u65f6\u523b\u8bb0\u5728\u5fc3\u4e2d\u3002\ud83e\udd13</p>"},{"location":"tutorial/insert/#python-sqlmodel","title":"\u4f7f\u7528 Python \u548c SQLModel \u521b\u5efa\u6570\u636e","text":"<p>\u73b0\u5728\uff0c\u6211\u4eec\u901a\u8fc7 Python \u521b\u5efa\u76f8\u540c\u7684\u884c\u3002</p> <p>\u9996\u5148\uff0c\u5220\u9664 <code>database.db</code> \u6587\u4ef6\uff0c\u786e\u4fdd\u4ece\u96f6\u5f00\u59cb\u3002</p> <p>\u7531\u4e8e\u6211\u4eec\u901a\u8fc7 Python \u4ee3\u7801\u5728\u5185\u5b58\u4e2d\u5904\u7406\u6570\u636e\uff0c\u800c\u6570\u636e\u5e93\u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u7cfb\u7edf\uff08\u5982\u4e00\u4e2a\u72ec\u7acb\u7684 SQLite \u6587\u4ef6\u6216\u5916\u90e8\u7684\u6570\u636e\u5e93\u670d\u52a1\u5668\uff09\uff0c\u56e0\u6b64\u9700\u8981\u6267\u884c\u4ee5\u4e0b\u4e24\u6b65\uff1a</p> <ul> <li>\u5728 Python \u5185\u5b58\u4e2d\uff08\u53d8\u91cf\u4e2d\uff09\u521b\u5efa\u6570\u636e</li> <li>\u5c06\u6570\u636e\u4fdd\u5b58/\u53d1\u9001\u5230\u6570\u636e\u5e93</li> </ul>"},{"location":"tutorial/insert/#_3","title":"\u521b\u5efa\u6a21\u578b\u5b9e\u4f8b","text":"<p>\u4ece\u7b2c\u4e00\u6b65\u5f00\u59cb\uff0c\u5728\u5185\u5b58\u4e2d\u521b\u5efa\u6570\u636e\u3002</p> <p>\u6211\u4eec\u5df2\u7ecf\u521b\u5efa\u4e86\u4e00\u4e2a\u540d\u4e3a <code>Hero</code> \u7684\u7c7b\uff0c\u7528\u4e8e\u8868\u793a\u6570\u636e\u5e93\u4e2d\u7684 <code>hero</code> \u8868\u3002</p> <p>\u6211\u4eec\u521b\u5efa\u7684\u6bcf\u4e2a\u5b9e\u4f8b\u90fd\u5c06\u8868\u793a\u6570\u636e\u5e93\u4e2d\u4e00\u884c\u7684\u6570\u636e\u3002</p> <p>\u56e0\u6b64\uff0c\u7b2c\u4e00\u6b65\u5c31\u662f\u7b80\u5355\u5730\u521b\u5efa\u4e00\u4e2a <code>Hero</code> \u5b9e\u4f8b\u3002</p> <p>\u6211\u4eec\u5c06\u7acb\u5373\u521b\u5efa 3 \u4e2a\u5b9e\u4f8b\uff0c\u5206\u522b\u4ee3\u8868 3 \u4e2a\u82f1\u96c4\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4e0a\u65b9\u7701\u7565\u7684\u4ee3\u7801 \ud83d\udc46\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n# \u540e\u7eed\u5c06\u6dfb\u52a0\u66f4\u591a\u4ee3\u7801 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u65b9\u7701\u7565\u7684\u4ee3\u7801 \ud83d\udc46\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n# \u540e\u7eed\u5c06\u6dfb\u52a0\u66f4\u591a\u4ee3\u7801 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Tip</p> <p>\u6587\u4ef6\u4e2d\u7684\u4e0a\u8ff0\u4ee3\u7801\uff08\u7701\u7565\u90e8\u5206\uff09\u4e0e\u672c\u7ae0\u5f00\u5934\u7684\u4ee3\u7801\u5b8c\u5168\u4e00\u81f4\u3002</p> <p>\u4e5f\u5c31\u662f\u6211\u4eec\u4e4b\u524d\u7528\u4e8e\u521b\u5efa <code>Hero</code> \u6a21\u578b\u7684\u4ee3\u7801\u3002</p> <p>\u6211\u4eec\u5c06\u8fd9\u4e9b\u4ee3\u7801\u653e\u5165\u4e00\u4e2a\u51fd\u6570 <code>create_heroes()</code> \u4e2d\uff0c\u7a0d\u540e\u53ef\u4ee5\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u5b8c\u6210\u64cd\u4f5c\u3002</p> <p>\u5982\u679c\u4f60\u662f\u4ea4\u4e92\u5f0f\u5c1d\u8bd5\u4ee3\u7801\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u7f16\u5199\u8fd9\u4e9b\u4ee3\u7801\u3002</p>"},{"location":"tutorial/insert/#session","title":"\u521b\u5efa Session","text":"<p>\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u53ea\u4f7f\u7528\u4e86 engine \u4e0e\u6570\u636e\u5e93\u4ea4\u4e92\u3002</p> <p>engine \u662f\u4e00\u4e2a\u5168\u5c40\u5171\u4eab\u7684\u5355\u4e00\u5bf9\u8c61\uff0c\u8d1f\u8d23\u4e0e\u6570\u636e\u5e93\u901a\u4fe1\uff0c\u7ba1\u7406\u8fde\u63a5\uff08\u4f8b\u5982\u4f7f\u7528 PostgreSQL \u6216 MySQL \u8fd9\u6837\u7684\u670d\u52a1\u5668\u6570\u636e\u5e93\u65f6\uff09\uff0c\u7b49\u7b49\u3002</p> <p>\u4f46\u5728\u4f7f\u7528 SQLModel \u65f6\uff0c\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u4f1a\u4f7f\u7528\u4e00\u4e2a\u66f4\u9ad8\u7ea7\u7684\u5de5\u5177\u2014\u2014Session\u3002</p> <p>\u4e0e\u5168\u5c40\u552f\u4e00\u7684 engine \u4e0d\u540c\uff0c\u6211\u4eec\u4f1a\u4e3a\u6bcf\u4e00\u7ec4\u76f8\u5173\u7684\u6570\u636e\u5e93\u64cd\u4f5c\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 session\u3002</p> <p>\u5b9e\u9645\u4e0a\uff0csession \u9700\u8981\u5e76\u4f9d\u8d56 engine\u3002</p> <p>\u4f8b\u5982\uff0c\u5728\u6784\u5efa Web \u5e94\u7528\u65f6\uff0c\u901a\u5e38\u4f1a\u4e3a\u6bcf\u4e2a\u8bf7\u6c42\u521b\u5efa\u4e00\u4e2a\u72ec\u7acb\u7684 session\u3002</p> <p>\u5e94\u7528\u4e2d\u7684\u6240\u6709\u4ee3\u7801\u90fd\u4f1a\u5171\u4eab\u540c\u4e00\u4e2a engine\uff08\u88ab\u6240\u6709\u8bf7\u6c42\u590d\u7528\uff09\u3002\u4f46\u5bf9\u4e8e\u6bcf\u4e2a\u8bf7\u6c42\uff0c\u6211\u4eec\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 session\uff0c\u8bf7\u6c42\u5b8c\u6210\u540e\u5173\u95ed\u8be5 session\u3002</p> <p>\u7b2c\u4e00\u6b65\u662f\u5bfc\u5165 <code>Session</code> \u7c7b\uff1a</p> Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n# \u4e0b\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n# \u4e0b\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    session = Session(engine)\n\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n\n    session.commit()\n\n    session.close()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    session = Session(engine)\n\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n\n    session.commit()\n\n    session.close()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u63a5\u7740\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 session\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4e0a\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    session = Session(engine)\n\n# \u540e\u7eed\u5c06\u6dfb\u52a0\u66f4\u591a\u4ee3\u7801 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    session = Session(engine)\n\n# \u540e\u7eed\u5c06\u6dfb\u52a0\u66f4\u591a\u4ee3\u7801 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    session = Session(engine)\n\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n\n    session.commit()\n\n    session.close()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    session = Session(engine)\n\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n\n    session.commit()\n\n    session.close()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u65b0\u7684 <code>Session</code> \u9700\u8981\u4e00\u4e2a engine \u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u4f1a\u5728\u5e95\u5c42\u4f7f\u7528\u8be5 engine\u3002</p> <p>Tip</p> <p>\u7a0d\u540e\u6211\u4eec\u5c06\u5b66\u4e60\u4e00\u79cd\u66f4\u597d\u7684\u65b9\u5f0f\uff0c\u4f7f\u7528 <code>with</code> \u5757\u6765\u521b\u5efa session\u3002</p>"},{"location":"tutorial/insert/#session_1","title":"\u5c06\u6a21\u578b\u5b9e\u4f8b\u6dfb\u52a0\u5230 Session","text":"<p>\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u6709\u4e86\u4e00\u4e9b\u82f1\u96c4\u6a21\u578b\u5b9e\u4f8b\uff08\u5185\u5b58\u4e2d\u7684\u5bf9\u8c61\uff09\u4ee5\u53ca\u4e00\u4e2a session\uff0c\u4e0b\u4e00\u6b65\u662f\u5c06\u5b83\u4eec\u6dfb\u52a0\u5230 session \u4e2d\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4e0a\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc46\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    session = Session(engine)\n\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n\n# \u540e\u7eed\u5c06\u6dfb\u52a0\u66f4\u591a\u4ee3\u7801 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc46\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    session = Session(engine)\n\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n\n# \u540e\u7eed\u5c06\u6dfb\u52a0\u66f4\u591a\u4ee3\u7801 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    session = Session(engine)\n\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n\n    session.commit()\n\n    session.close()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    session = Session(engine)\n\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n\n    session.commit()\n\n    session.close()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u6b64\u65f6\uff0c\u6211\u4eec\u7684\u82f1\u96c4\u6570\u636e\u8fd8**\u6ca1\u6709**\u5b58\u50a8\u5230\u6570\u636e\u5e93\u4e2d\u3002</p> <p>\u8fd9\u6b63\u662f session \u72ec\u7acb\u4e8e engine \u7684\u610f\u4e49\u6240\u5728\u3002</p> <p>session \u4f1a\u5728\u5185\u5b58\u4e2d\u4fdd\u5b58\u6240\u6709\u9700\u8981\u7a0d\u540e\u5b58\u50a8\u5230\u6570\u636e\u5e93\u7684\u5bf9\u8c61\u3002</p> <p>\u4e00\u65e6\u51c6\u5907\u597d\uff0c\u6211\u4eec\u53ef\u4ee5\u6267\u884c commit \u64cd\u4f5c\uff0c\u6b64\u65f6 session \u5c06\u4f7f\u7528\u5e95\u5c42\u7684 engine \u751f\u6210\u76f8\u5e94\u7684 SQL \u5e76\u53d1\u9001\u5230\u6570\u636e\u5e93\u4e2d\uff0c\u4ece\u800c\u4e00\u6b21\u6027\u5c06\u6240\u6709\u884c\u5199\u5165\u6570\u636e\u5e93\u3002</p> <p>\u8fd9\u79cd\u65b9\u5f0f\u4e0d\u4ec5\u63d0\u9ad8\u4e86\u4e0e\u6570\u636e\u5e93\u4ea4\u4e92\u7684\u6548\u7387\uff0c\u8fd8\u5e26\u6765\u4e86\u5176\u4ed6\u989d\u5916\u7684\u597d\u5904\u3002</p> <p>\u6280\u672f\u7ec6\u8282</p> <p>session \u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4e8b\u52a1\uff0c\u5e76\u5728\u8be5\u4e8b\u52a1\u4e2d\u6267\u884c\u6240\u6709 SQL \u4ee3\u7801\u3002</p> <p>\u8fd9\u786e\u4fdd\u4e86\u6240\u6709\u6570\u636e\u4ee5\u5355\u6279\u7684\u65b9\u5f0f\u4fdd\u5b58\uff0c\u5e76\u4e14\u8981\u4e48\u5168\u90e8\u6210\u529f\uff0c\u8981\u4e48\u5168\u90e8\u5931\u8d25\uff0c\u4ece\u800c\u907f\u514d\u4e86\u6570\u636e\u5e93\u5904\u4e8e\u4e0d\u4e00\u81f4\u7684\u72b6\u6001\u3002</p>"},{"location":"tutorial/insert/#session_2","title":"\u63d0\u4ea4 Session \u7684\u66f4\u6539","text":"<p>\u73b0\u5728\uff0c\u6211\u4eec\u5df2\u7ecf\u5c06\u82f1\u96c4\u6570\u636e\u6dfb\u52a0\u5230\u4e86 session \u4e2d\uff0c\u5e76\u51c6\u5907\u5c06\u8fd9\u4e9b\u6570\u636e\u4fdd\u5b58\u5230\u6570\u636e\u5e93\uff0c\u53ef\u4ee5\u901a\u8fc7 commit \u63d0\u4ea4\u8fd9\u4e9b\u66f4\u6539\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4e0a\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc46\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    session = Session(engine)\n\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n\n    session.commit()\n\n# \u540e\u7eed\u5c06\u6dfb\u52a0\u66f4\u591a\u4ee3\u7801 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc46\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    session = Session(engine)\n\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n\n    session.commit()\n\n# \u540e\u7eed\u5c06\u6dfb\u52a0\u66f4\u591a\u4ee3\u7801 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    session = Session(engine)\n\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n\n    session.commit()\n\n    session.close()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    session = Session(engine)\n\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n\n    session.commit()\n\n    session.close()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u6267\u884c\u8fd9\u884c\u4ee3\u7801\u540e\uff0csession \u5c06\u901a\u8fc7 engine \u4e0e\u6570\u636e\u5e93\u4ea4\u4e92\uff0c\u53d1\u9001\u76f8\u5e94\u7684 SQL \u8bed\u53e5\uff0c\u5c06\u6240\u6709\u6570\u636e\u4fdd\u5b58\u5230\u6570\u636e\u5e93\u4e2d\u3002</p>"},{"location":"tutorial/insert/#_4","title":"\u5c06\u82f1\u96c4\u521b\u5efa\u4e3a\u811a\u672c","text":"<p>\u73b0\u5728\uff0c\u7528\u4e8e\u521b\u5efa\u82f1\u96c4\u7684\u51fd\u6570\u5df2\u7ecf\u51c6\u5907\u5c31\u7eea\u3002</p> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u9700\u8981\u786e\u4fdd\u5728\u76f4\u63a5\u4f7f\u7528 Python \u8fd0\u884c\u8fd9\u4e2a\u7a0b\u5e8f\u65f6\u8c03\u7528\u5b83\u3002</p> <p>\u6211\u4eec\u4e4b\u524d\u6709\u4e00\u4e2a\u7c7b\u4f3c\u8fd9\u6837\u7684\u4e3b\u7a0b\u5e8f\u5757\uff1a</p> <pre><code>if __name__ == \"__main__\":\n    create_db_and_tables()\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u5728\u8fd9\u91cc\u6dfb\u52a0\u65b0\u51fd\u6570\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>if __name__ == \"__main__\":\n    create_db_and_tables()\n    create_heroes()\n</code></pre> <p>\u4f46\u662f\u4e3a\u4e86\u8ba9\u4ee3\u7801\u66f4\u6709\u6761\u7406\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u51fd\u6570 <code>main()</code>\uff0c\u7528\u6765\u5305\u542b\u6240\u6709\u5728\u811a\u672c\u72ec\u7acb\u8fd0\u884c\u65f6\u9700\u8981\u6267\u884c\u7684\u4ee3\u7801\u3002\u6211\u4eec\u53ef\u4ee5\u5c06\u4e4b\u524d\u7684\u51fd\u6570 <code>create_db_and_tables()</code> \u653e\u5165\u5176\u4e2d\uff0c\u5e76\u6dfb\u52a0\u65b0\u51fd\u6570 <code>create_heroes()</code>\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4e0a\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc46\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n# \u540e\u7eed\u5c06\u6dfb\u52a0\u66f4\u591a\u4ee3\u7801 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc46\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n# \u540e\u7eed\u5c06\u6dfb\u52a0\u66f4\u591a\u4ee3\u7801 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u4e3b\u7a0b\u5e8f\u5757\u4e2d\u8c03\u7528\u8fd9\u4e2a\u5355\u4e00\u7684 <code>main()</code> \u51fd\u6570\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4e0a\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc46\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code># \u4e0a\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc46\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u901a\u8fc7\u5c06\u811a\u672c\u8fd0\u884c\u65f6\u7684\u6240\u6709\u903b\u8f91\u96c6\u4e2d\u5230\u4e00\u4e2a\u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u66f4\u65b9\u4fbf\u5730\u5728\u540e\u7eed\u6dfb\u52a0\u4ee3\u7801\u3002</p> <p>\u6b64\u5916\uff0c\u5176\u4ed6\u4ee3\u7801\u5728\u9700\u8981\u65f6\u4e5f\u53ef\u4ee5\u5bfc\u5165\u5e76\u8c03\u7528\u8fd9\u4e2a <code>main()</code> \u51fd\u6570\u3002</p>"},{"location":"tutorial/insert/#_5","title":"\u8fd0\u884c\u811a\u672c","text":"<p>\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u4ece\u63a7\u5236\u53f0\u4ee5\u811a\u672c\u65b9\u5f0f\u8fd0\u884c\u7a0b\u5e8f\u4e86\u3002</p> <p>\u7531\u4e8e\u6211\u4eec\u5728\u521b\u5efa engine \u65f6\u8bbe\u7f6e\u4e86 <code>echo=True</code>\uff0c\u7a0b\u5e8f\u5c06\u8f93\u51fa\u6240\u6709\u6b63\u5728\u6267\u884c\u7684 SQL \u4ee3\u7801\uff1a</p> <pre><code>$ python app.py\n// \u4e00\u4e9b\u521d\u59cb\u64cd\u4f5c\uff0c\u68c0\u67e5 hero \u8868\u662f\u5426\u5df2\u7ecf\u5b58\u5728\nINFO Engine BEGIN (implicit)\nINFO Engine PRAGMA main.table_info(\"hero\")\nINFO Engine [raw sql] ()\nINFO Engine COMMIT\n// \u81ea\u52a8\u542f\u52a8\u4e8b\u52a1 \u2728\nINFO Engine BEGIN (implicit)\n// INSERT \u8bed\u53e5\uff0c\u4f7f\u7528 VALUES (?, ?, ?) \u4f5c\u4e3a\u53c2\u6570\nINFO Engine INSERT INTO hero (name, secret_name, age) VALUES (?, ?, ?)\n// ...\u4ee5\u53ca\u53c2\u6570\u503c \ud83d\ude80\nINFO Engine [generated in 0.00013s] ('Deadpond', 'Dive Wilson', None)\n// \u5bf9\u4e8e Spider-Boy \u7684 INSERT\nINFO Engine INSERT INTO hero (name, secret_name, age) VALUES (?, ?, ?)\nINFO Engine [cached since 0.000755s ago] ('Spider-Boy', 'Pedro Parqueador', None)\n// \u7136\u540e\u662f Rusty-Man \u7684 INSERT\nINFO Engine INSERT INTO hero (name, secret_name, age) VALUES (?, ?, ?)\nINFO Engine [cached since 0.001014s ago] ('Rusty-Man', 'Tommy Sharp', 48)\n// \u4e00\u5207\u987a\u5229\uff1f\u662f\u7684\uff0c\u63d0\u4ea4\u4e8b\u52a1\uff01 \ud83c\udf89\nINFO Engine COMMIT\n</code></pre> <p>\u5982\u679c\u4f60\u4f7f\u7528\u8fc7 Git\uff0c\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u8fc7\u7a0b\u5f88\u7c7b\u4f3c\u3002</p> <p>\u6211\u4eec\u901a\u8fc7 <code>session.add()</code> \u5c06\u65b0\u5bf9\u8c61\uff08\u6a21\u578b\u5b9e\u4f8b\uff09\u6dfb\u52a0\u5230 session \u4e2d\uff08\u7c7b\u4f3c\u4e8e <code>git add</code>\uff09\u3002</p> <p>\u6b64\u65f6\u8fd9\u4e9b\u6570\u636e\u5df2\u7ecf\u51c6\u5907\u597d\u4fdd\u5b58\uff0c\u4f46\u8fd8\u672a\u771f\u6b63\u4fdd\u5b58\u3002</p> <p>\u4f60\u53ef\u4ee5\u8fdb\u884c\u66f4\u591a\u4fee\u6539\uff0c\u6dfb\u52a0\u66f4\u591a\u5bf9\u8c61\uff0c\u7b49\u7b49\u3002</p> <p>\u4e00\u65e6\u51c6\u5907\u5c31\u7eea\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 commit \u4e00\u6b65\u63d0\u4ea4\u6240\u6709\u66f4\u6539\uff08\u7c7b\u4f3c\u4e8e <code>git commit</code>\uff09\u3002</p>"},{"location":"tutorial/insert/#session_3","title":"\u5173\u95ed Session","text":"<p>session \u4f1a\u6301\u6709\u4e00\u4e9b\u8d44\u6e90\uff0c\u6bd4\u5982\u6765\u81ea engine \u7684\u8fde\u63a5\u3002</p> <p>\u56e0\u6b64\uff0c\u5f53\u6211\u4eec\u5b8c\u6210 session \u7684\u64cd\u4f5c\u540e\uff0c\u5e94\u8be5 \u5173\u95ed \u5b83\u4ee5\u91ca\u653e\u8fd9\u4e9b\u8d44\u6e90\u5e76\u5b8c\u6210\u6e05\u7406\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4e0a\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    session = Session(engine)\n\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n\n    session.commit()\n\n    session.close()\n\n# \u540e\u7eed\u5c06\u6dfb\u52a0\u66f4\u591a\u4ee3\u7801 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    session = Session(engine)\n\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n\n    session.commit()\n\n    session.close()\n\n# \u540e\u7eed\u5c06\u6dfb\u52a0\u66f4\u591a\u4ee3\u7801 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    session = Session(engine)\n\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n\n    session.commit()\n\n    session.close()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    session = Session(engine)\n\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n\n    session.commit()\n\n    session.close()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u5982\u679c\u6211\u4eec\u5fd8\u8bb0\u5173\u95ed session\uff0c\u6216\u8005\u4ee3\u7801\u4e2d\u53d1\u751f\u5f02\u5e38\uff0c\u5bfc\u81f4 <code>session.close()</code> \u6ca1\u6709\u88ab\u6267\u884c\u4f1a\u600e\u6837\uff1f</p> <p>\u4e3a\u4e86\u89e3\u51b3\u8fd9\u79cd\u60c5\u51b5\uff0c\u53ef\u4ee5\u4f7f\u7528\u66f4\u597d\u7684\u65b9\u5f0f\u6765\u521b\u5efa\u548c\u5173\u95ed session\uff0c\u5373\u4f7f\u7528 <code>with</code> \u5757\u3002\ud83d\udc47</p>"},{"location":"tutorial/insert/#with-session","title":"\u5728 <code>with</code> \u5757\u4e2d\u4f7f\u7528 Session","text":"<p>\u4e86\u89e3\u5982\u4f55\u624b\u52a8\u521b\u5efa\u548c\u5173\u95ed <code>Session</code> \u5f88\u91cd\u8981\uff0c\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u60f3\u5728\u4ea4\u4e92\u5f0f\u73af\u5883\u4e2d\u63a2\u7d22\u4ee3\u7801\uff08\u6bd4\u5982\u4f7f\u7528 Jupyter\uff09\uff0c\u8fd9\u4f1a\u975e\u5e38\u6709\u7528\u3002</p> <p>\u4e0d\u8fc7\uff0c\u5904\u7406 <code>Session</code> \u7684\u66f4\u597d\u65b9\u5f0f\u662f\u4f7f\u7528 <code>with</code> \u5757\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4e0a\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc46\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n</code></pre> <pre><code># \u4e0a\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc46\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u8fd9\u4e0e\u624b\u52a8\u521b\u5efa\u548c\u5173\u95ed <code>Session</code> \u7684\u6548\u679c\u76f8\u540c\u3002\u4f46\u4f7f\u7528 <code>with</code> \u5757\u65f6\uff0c<code>Session</code> \u4f1a\u5728 \u8fdb\u5165 <code>with</code> \u5757\u65f6\u81ea\u52a8\u521b\u5efa\uff0c\u5e76\u8d4b\u503c\u7ed9\u53d8\u91cf <code>session</code>\uff0c\u5728 <code>with</code> \u5757 \u7ed3\u675f \u540e\u81ea\u52a8\u5173\u95ed\u3002</p> <p>\u5373\u4f7f\u4ee3\u7801\u4e2d\u53d1\u751f\u5f02\u5e38\uff0c\u5b83\u4e5f\u80fd\u6b63\u5e38\u5173\u95ed\u3002\ud83d\ude0e</p>"},{"location":"tutorial/insert/#_6","title":"\u56de\u987e\u6240\u6709\u4ee3\u7801","text":"<p>\u8ba9\u6211\u4eec\u518d\u6b21\u67e5\u770b\u6574\u4e2a\u6587\u4ef6\u7684\u4ee3\u7801\u3002\ud83d\udd0d</p> <p>\u4f60\u5df2\u7ecf\u719f\u6089\u4e86\u524d\u9762\u90e8\u5206\u7684\u5185\u5bb9\uff0c\u5305\u62ec\u521b\u5efa <code>Hero</code> \u6a21\u578b\u7c7b\u3001engine\u3001\u6570\u636e\u5e93\u548c\u8868\u7684\u90e8\u5206\u3002</p> <p>\u73b0\u5728\u5173\u6ce8\u65b0\u589e\u7684\u4ee3\u7801\uff1a</p> Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():  # (1)!\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")  # (2)!\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:  # (3)!\n        session.add(hero_1)  # (4)!\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()  # (5)!\n    # (6)!\n\n\ndef main():  # (7)!\n    create_db_and_tables()  # (8)!\n    create_heroes()  # (9)!\n\n\nif __name__ == \"__main__\":  # (10)!\n    main()  # (11)!\n</code></pre> <ol> <li> <p>We use a function <code>create_heroes()</code> to put this logic together.</p> </li> <li> <p>Create each of the objects/instances of the <code>Hero</code> model.</p> <p>Each of them represents the data for one row.</p> </li> <li> <p>Use a <code>with</code> block to create a <code>Session</code> using the <code>engine</code>.</p> <p>The new sesion will be assigned to the variable <code>session</code>.</p> <p>And it will be automatically closed when the <code>with</code> block is finished.</p> </li> <li> <p>Add each of the objects/instances to the session.</p> <p>Each of these objects represents a row in the database.</p> <p>They are all waiting there in the session to be saved.</p> </li> <li> <p>Commit the changes to the database.</p> <p>This will actually send the data to the database.</p> <p>It will start a transaction automatically and save all the data in a single batch.</p> </li> <li> <p>By this point, after the <code>with</code> block is finished, the session is automatically closed.</p> </li> <li> <p>We have a <code>main()</code> function with all the code that should be executed when the program is called as a script from the console.</p> <p>That way we can add more code later to this function.</p> <p>We then put this function <code>main()</code> in the main block below.</p> <p>And as it is a single function, other Python files could import it and call it directly.</p> </li> <li> <p>In this <code>main()</code> function, we are also creating the database and the tables.</p> <p>In the previous version, this function was called directly in the main block.</p> <p>But now it is just called in the <code>main()</code> function.</p> </li> <li> <p>And now we are also creating the heroes in this <code>main()</code> function.</p> </li> <li> <p>We still have a main block to execute some code when the program is run as a script from the command line, like:</p> <pre><code>$ python app.py\n\n// Do whatever is in the main block \ud83d\ude80\n</code></pre> </li> <li> <p>There's a single <code>main()</code> function now that contains all the code that should be executed when running the program from the console.</p> <p>So this is all we need to have in the main block. Just call the <code>main()</code> function.</p> </li> </ol> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():  # (1)!\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")  # (2)!\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:  # (3)!\n        session.add(hero_1)  # (4)!\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()  # (5)!\n    # (6)!\n\n\ndef main():  # (7)!\n    create_db_and_tables()  # (8)!\n    create_heroes()  # (9)!\n\n\nif __name__ == \"__main__\":  # (10)!\n    main()  # (11)!\n</code></pre> <ol> <li> <p>We use a function <code>create_heroes()</code> to put this logic together.</p> </li> <li> <p>Create each of the objects/instances of the <code>Hero</code> model.</p> <p>Each of them represents the data for one row.</p> </li> <li> <p>Use a <code>with</code> block to create a <code>Session</code> using the <code>engine</code>.</p> <p>The new sesion will be assigned to the variable <code>session</code>.</p> <p>And it will be automatically closed when the <code>with</code> block is finished.</p> </li> <li> <p>Add each of the objects/instances to the session.</p> <p>Each of these objects represents a row in the database.</p> <p>They are all waiting there in the session to be saved.</p> </li> <li> <p>Commit the changes to the database.</p> <p>This will actually send the data to the database.</p> <p>It will start a transaction automatically and save all the data in a single batch.</p> </li> <li> <p>By this point, after the <code>with</code> block is finished, the session is automatically closed.</p> </li> <li> <p>We have a <code>main()</code> function with all the code that should be executed when the program is called as a script from the console.</p> <p>That way we can add more code later to this function.</p> <p>We then put this function <code>main()</code> in the main block below.</p> <p>And as it is a single function, other Python files could import it and call it directly.</p> </li> <li> <p>In this <code>main()</code> function, we are also creating the database and the tables.</p> <p>In the previous version, this function was called directly in the main block.</p> <p>But now it is just called in the <code>main()</code> function.</p> </li> <li> <p>And now we are also creating the heroes in this <code>main()</code> function.</p> </li> <li> <p>We still have a main block to execute some code when the program is run as a script from the command line, like:</p> <pre><code>$ python app.py\n\n// Do whatever is in the main block \ud83d\ude80\n</code></pre> </li> <li> <p>There's a single <code>main()</code> function now that contains all the code that should be executed when running the program from the console.</p> <p>So this is all we need to have in the main block. Just call the <code>main()</code> function.</p> </li> </ol> <p>Tip</p> <p>\u70b9\u51fb\u4ee3\u7801\u4e2d\u7684\u6570\u5b57\u6c14\u6ce1\uff0c\u67e5\u770b\u6bcf\u4e00\u884c\u7684\u4f5c\u7528\u3002\ud83d\udc46</p> <p>\u73b0\u5728\u4f60\u53ef\u4ee5\u5c06\u4ee3\u7801\u4fdd\u5b58\u4e3a <code>app.py</code> \u6587\u4ef6\uff0c\u5e76\u4f7f\u7528 Python \u8fd0\u884c\u3002\u4f60\u4f1a\u770b\u5230\u7c7b\u4f3c\u524d\u6587\u5c55\u793a\u7684\u8f93\u51fa\u3002</p> <p>\u4e4b\u540e\uff0c\u5982\u679c\u7528 DB Browser for SQLite \u6253\u5f00\u6570\u636e\u5e93\uff0c\u53ef\u4ee5\u5728 Browse Data \u9009\u9879\u5361\u4e2d\u770b\u5230\u521a\u521b\u5efa\u7684\u6570\u636e\uff1a</p> <p></p>"},{"location":"tutorial/insert/#_7","title":"\u63a5\u4e0b\u6765\u5b66\u4e60\u4ec0\u4e48","text":"<p>\u73b0\u5728\u4f60\u5df2\u7ecf\u77e5\u9053\u5982\u4f55\u5411\u6570\u636e\u5e93\u6dfb\u52a0\u884c\u4e86\u3002\ud83c\udf89</p> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4f1a\u6df1\u5165\u7406\u89e3\u4e3a\u4ec0\u4e48\u6570\u636e\u5e93\u4e2d\u7684 <code>id</code> \u5b57\u6bb5\u4f5c\u4e3a \u4e3b\u952e \u4e0d\u80fd\u4e3a <code>NULL</code>\uff0c\u4f46\u5728 Python \u4ee3\u7801\u4e2d\u5374\u53ef\u4ee5\u662f <code>None</code>\u3002</p> <p>\u4e0b\u4e00\u7ae0\u4f1a\u8be6\u7ec6\u8bb2\u89e3\u8fd9\u4e9b\u5185\u5bb9\u3002\ud83d\ude80</p>"},{"location":"tutorial/limit-and-offset/","title":"\u8bfb\u53d6\u4e00\u8303\u56f4\u6570\u636e - LIMIT \u548c OFFSET","text":"<p>\u73b0\u5728\u4f60\u5df2\u7ecf\u77e5\u9053\u5982\u4f55\u4f7f\u7528 <code>.one()</code>\u3001<code>.first()</code> \u548c <code>session.get()</code> \u83b7\u53d6\u5355\u884c\u6570\u636e\u3002</p> <p>\u4f60\u4e5f\u77e5\u9053\u5982\u4f55\u4f7f\u7528 <code>.where()</code> \u8fdb\u884c\u7b5b\u9009\u6765\u83b7\u53d6\u591a\u884c\u6570\u636e\u3002</p> <p>\u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u53ea\u83b7\u53d6\u4e00\u4e2a \u7ed3\u679c\u8303\u56f4\u3002</p> <p></p>"},{"location":"tutorial/limit-and-offset/#_1","title":"\u521b\u5efa\u6570\u636e","text":"<p>\u6211\u4eec\u5c06\u7ee7\u7eed\u4f7f\u7528\u4e4b\u524d\u7684\u4ee3\u7801\uff0c\u4f46\u4f1a\u7a0d\u5fae\u4fee\u6539 <code>select_heroes()</code> \u51fd\u6570\uff0c\u4ee5\u7b80\u5316\u793a\u4f8b\u5e76\u4e13\u6ce8\u4e8e\u6211\u4eec\u60f3\u8981\u5b9e\u73b0\u7684\u76ee\u6807\u3002</p> <p>\u518d\u6b21\uff0c\u6211\u4eec\u5c06\u521b\u5efa\u51e0\u4e2a\u82f1\u96c4\uff0c\u4ee5\u4fbf\u6709\u4e00\u4e9b\u6570\u636e\u53ef\u4ee5\u9009\u62e9\uff1a</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).limit(3)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).limit(3)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/limit-and-offset/#_2","title":"\u56de\u987e\u9009\u62e9\u6240\u6709\u6570\u636e","text":"<p>\u8fd9\u662f\u6211\u4eec\u5728 <code>select()</code> \u793a\u4f8b\u4e2d\u9009\u62e9\u6240\u6709\u82f1\u96c4\u7684\u4ee3\u7801\uff1a</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u4f46\u8fd9\u5c06\u4e00\u6b21\u6027\u83b7\u53d6 \u6240\u6709 \u82f1\u96c4\uff0c\u5047\u8bbe\u6570\u636e\u5e93\u4e2d\u53ef\u80fd\u6709\u6210\u5343\u4e0a\u4e07\u7684\u6570\u636e\uff0c\u8fd9\u6837\u505a\u53ef\u80fd\u4f1a\u9020\u6210\u95ee\u9898\u3002</p>"},{"location":"tutorial/limit-and-offset/#limit","title":"\u4f7f\u7528 Limit \u9009\u62e9","text":"<p>\u76ee\u524d\uff0c\u6211\u4eec\u7684\u6570\u636e\u5e93\u4e2d\u6709 7 \u4e2a\u82f1\u96c4\u3002\u4f46\u662f\u6211\u4eec\u4e5f\u53ef\u80fd\u6709\u6210\u5343\u4e0a\u4e07\u7684\u82f1\u96c4\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 <code>limit</code> \u9650\u5236\u7ed3\u679c\uff0c\u53ea\u83b7\u53d6\u524d 3 \u4e2a\uff1a</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).limit(3)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).limit(3)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).limit(3)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).limit(3)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u6211\u4eec\u4ece <code>select()</code> \u83b7\u5f97\u7684\u7279\u6b8a select \u5bf9\u8c61\u4e5f\u6709\u4e00\u4e2a <code>.limit()</code> \u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u9650\u5236\u7ed3\u679c\u7684\u6570\u91cf\u3002</p> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4e0d\u518d\u83b7\u53d6\u6240\u6709\u7684 7 \u884c\u6570\u636e\uff0c\u800c\u662f\u5c06\u5176\u9650\u5236\u4e3a\u53ea\u83b7\u53d6\u524d 3 \u884c\u3002 </p> <p></p>"},{"location":"tutorial/limit-and-offset/#_3","title":"\u5728\u547d\u4ee4\u884c\u8fd0\u884c\u7a0b\u5e8f","text":"<p>\u5982\u679c\u6211\u4eec\u5728\u547d\u4ee4\u884c\u4e2d\u8fd0\u884c\u7a0b\u5e8f\uff0c\u5b83\u4f1a\u8f93\u51fa\u5982\u4e0b\uff1a</p> <pre><code>$ python app.py\n\n// \u524d\u9762\u7684\u8f93\u51fa\u5df2\u7701\u7565 \ud83d\ude48\n\n// \u4f7f\u7528 LIMIT \u8fdb\u884c\u9009\u62e9\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\n LIMIT ? OFFSET ?\nINFO Engine [no key 0.00014s] (3, 0)\n\n// \u6253\u5370\u6536\u5230\u7684\u82f1\u96c4\uff0c\u53ea\u6709 3 \u4e2a\n[\n    Hero(age=None, secret_name='Dive Wilson', id=1, name='Deadpond'),\n    Hero(age=None, secret_name='Pedro Parqueador', id=2, name='Spider-Boy'),\n    Hero(age=48, secret_name='Tommy Sharp', id=3, name='Rusty-Man')\n]\n</code></pre> <p>\u592a\u597d\u4e86\uff01\u6211\u4eec\u5f97\u5230\u4e86 3 \u4e2a\u82f1\u96c4\uff0c\u6b63\u5982\u6211\u4eec\u6240\u5e0c\u671b\u7684\u90a3\u6837\u3002</p> <p>Tip</p> <p>\u7a0d\u540e\u6211\u4eec\u5c06\u66f4\u8be6\u7ec6\u5730\u67e5\u770b SQL \u4ee3\u7801\u3002</p>"},{"location":"tutorial/limit-and-offset/#offset-limit","title":"\u4f7f\u7528 Offset \u548c Limit \u8fdb\u884c\u9009\u62e9","text":"<p>\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u9650\u5236\u7ed3\u679c\uff0c\u83b7\u53d6\u524d 3 \u4e2a\u82f1\u96c4\u3002</p> <p>\u4f46\u662f\u5047\u8bbe\u6211\u4eec\u6b63\u5728\u4e00\u4e2a\u7528\u6237\u754c\u9762\u4e2d\u663e\u793a\u7ed3\u679c\uff0c\u6bcf\u6b21\u663e\u793a 3 \u4e2a\u82f1\u96c4\u3002</p> <p>Tip</p> <p>\u8fd9\u79cd\u65b9\u5f0f\u901a\u5e38\u88ab\u79f0\u4e3a\u201c\u5206\u9875\u201d\u3002\u56e0\u4e3a\u7528\u6237\u754c\u9762\u901a\u5e38\u4f1a\u4e00\u6b21\u663e\u793a\u4e00\u201c\u9875\u201d\u9884\u5b9a\u4e49\u6570\u91cf\u7684\u82f1\u96c4\u3002</p> <p>\u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u4e0e\u754c\u9762\u4ea4\u4e92\u6765\u83b7\u53d6\u4e0b\u4e00\u9875\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002</p> <p>\u5982\u4f55\u83b7\u53d6\u63a5\u4e0b\u6765\u7684 3 \u4e2a\u82f1\u96c4\u5462\uff1f</p> <p></p> <p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 <code>.offset()</code> \u65b9\u6cd5\uff1a</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).offset(3).limit(3)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).offset(3).limit(3)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).offset(3).limit(3)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).offset(3).limit(3)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u8fd9\u79cd\u65b9\u6cd5\u7684\u5de5\u4f5c\u539f\u7406\u662f\uff0c\u6211\u4eec\u4ece <code>select()</code> \u5f97\u5230\u7684\u7279\u6b8a select \u5bf9\u8c61\u6709\u4e00\u4e9b\u65b9\u6cd5\uff0c\u4f8b\u5982 <code>.where()</code>\u3001<code>.offset()</code> \u548c <code>.limit()</code>\u3002</p> <p>\u6bcf\u4e2a\u65b9\u6cd5\u90fd\u4f1a\u5728\u5185\u90e8\u7684\u7279\u6b8a\u9009\u62e9\u8bed\u53e5\u5bf9\u8c61\u4e0a\u5e94\u7528\u53d8\u66f4\uff0c\u5e76\u4e14 \u8fd4\u56de\u76f8\u540c\u7684\u5bf9\u8c61 \uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u7ee7\u7eed\u5728\u5176\u4e0a\u4f7f\u7528\u66f4\u591a\u65b9\u6cd5\uff0c\u5c31\u50cf\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u540c\u65f6\u4f7f\u7528\u4e86 <code>.offset()</code> \u548c <code>.limit()</code>\u3002</p> <p>Offset \u610f\u5473\u7740\u201c\u8df3\u8fc7\u8fd9\u4e48\u591a\u884c\u201d\uff0c\u800c\u6211\u4eec\u8981\u8df3\u8fc7\u5df2\u7ecf\u67e5\u770b\u8fc7\u7684\u524d\u4e09\u884c\uff0c\u56e0\u6b64\u6211\u4eec\u4f7f\u7528 <code>.offset(3)</code>\u3002</p>"},{"location":"tutorial/limit-and-offset/#offset","title":"\u5728\u547d\u4ee4\u884c\u4e2d\u4f7f\u7528 Offset \u8fd0\u884c\u7a0b\u5e8f","text":"<p>\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5728\u547d\u4ee4\u884c\u4e2d\u8fd0\u884c\u7a0b\u5e8f\uff0c\u5b83\u4f1a\u8f93\u51fa\u5982\u4e0b\uff1a</p> <pre><code>$ python app.py\n\n// \u524d\u9762\u7684\u8f93\u51fa\u5df2\u7701\u7565 \ud83d\ude48\n\n// \u4f7f\u7528 LIMIT \u548c OFFSET \u8fdb\u884c\u9009\u62e9\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\n LIMIT ? OFFSET ?\nINFO Engine [no key 0.00020s] (3, 3)\n\n// \u6253\u5370\u6536\u5230\u7684 3 \u4e2a\u82f1\u96c4\uff0c\u7b2c\u4e8c\u6279\n[\n    Hero(age=32, secret_name='Natalia Roman-on', id=4, name='Tarantula'),\n    Hero(age=35, secret_name='Trevor Challa', id=5, name='Black Lion'),\n    Hero(age=36, secret_name='Steve Weird', id=6, name='Dr. Weird')\n]\n</code></pre>"},{"location":"tutorial/limit-and-offset/#_4","title":"\u9009\u62e9\u4e0b\u4e00\u6279\u6570\u636e","text":"<p>\u7136\u540e\uff0c\u4e3a\u4e86\u83b7\u53d6\u4e0b\u4e00\u6279 3 \u884c\u6570\u636e\uff0c\u6211\u4eec\u9700\u8981\u8df3\u8fc7\u524d\u9762\u5df2\u7ecf\u770b\u5230\u7684 6 \u884c\uff1a</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).offset(6).limit(3)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).offset(6).limit(3)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).offset(6).limit(3)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).offset(6).limit(3)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u76ee\u524d\u6570\u636e\u5e93\u4e2d\u53ea\u6709 7 \u884c\uff0c\u6240\u4ee5\u8fd9\u4e2a\u67e5\u8be2\u53ea\u80fd\u83b7\u53d6 1 \u884c\u6570\u636e\u3002</p> <p></p> <p>\u4f46\u4e0d\u7528\u62c5\u5fc3\uff0c\u6570\u636e\u5e93\u4e0d\u4f1a\u56e0\u4e3a\u53ea\u5269 1 \u884c\u6570\u636e\u5c31\u629b\u51fa\u9519\u8bef\uff08\u5c31\u50cf\u5728 Python \u5217\u8868\u4e2d\u4f1a\u53d1\u751f\u7684\u60c5\u51b5\uff09\u3002</p> <p>\u6570\u636e\u5e93\u77e5\u9053\u6211\u4eec\u60f3\u8981 \u9650\u5236 \u7ed3\u679c\u7684\u6570\u91cf\uff0c\u4f46\u5b83\u4e0d\u4e00\u5b9a\u9700\u8981\u627e\u5230\u90a3\u4e48\u591a\u7ed3\u679c\u3002</p>"},{"location":"tutorial/limit-and-offset/#_5","title":"\u5728\u547d\u4ee4\u884c\u4e2d\u8fd0\u884c\u6700\u540e\u4e00\u6279\u6570\u636e","text":"<p>\u5982\u679c\u6211\u4eec\u5728\u547d\u4ee4\u884c\u4e2d\u8fd0\u884c\u7a0b\u5e8f\uff0c\u5b83\u4f1a\u8f93\u51fa\u5982\u4e0b\uff1a</p> <pre><code>$ python app.py\n\n// \u524d\u9762\u7684\u8f93\u51fa\u5df2\u7701\u7565 \ud83d\ude48\n\n// \u4f7f\u7528 LIMIT \u548c OFFSET \u9009\u62e9\u6700\u540e\u4e00\u6279\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\n LIMIT ? OFFSET ?\nINFO Engine [no key 0.00038s] (3, 6)\n\n// \u6253\u5370\u6700\u540e\u4e00\u6279\u82f1\u96c4\uff0c\u53ea\u6709 1 \u4e2a\n[\n    Hero(age=93, secret_name='Esteban Rogelios', id=7, name='Captain North America')\n]\n</code></pre>"},{"location":"tutorial/limit-and-offset/#sql-limit-offset","title":"SQL \u4e2d\u7684 LIMIT \u548c OFFSET","text":"<p>\u4f60\u53ef\u80fd\u6ce8\u610f\u5230 SQL \u4e2d\u7684\u65b0\u5173\u952e\u5b57 <code>LIMIT</code> \u548c <code>OFFSET</code>\u3002</p> <p>\u4f60\u53ef\u4ee5\u5728 SQL \u4e2d\u4f7f\u7528\u5b83\u4eec\uff0c\u4f4d\u4e8e\u5176\u4ed6\u90e8\u5206\u7684\u540e\u9762\uff1a</p> <pre><code>SELECT id, name, secret_name, age\nFROM hero\nLIMIT 3 OFFSET 6\n</code></pre> <p>\u5982\u679c\u4f60\u5728 DB Browser for SQLite \u4e2d\u5c1d\u8bd5\u8fd9\u4e2a SQL \u67e5\u8be2\uff0c\u4f60\u4f1a\u5f97\u5230\u76f8\u540c\u7684\u7ed3\u679c\uff1a</p> <p></p>"},{"location":"tutorial/limit-and-offset/#limit-offset-where","title":"\u5c06 Limit \u548c Offset \u4e0e Where \u7ed3\u5408\u4f7f\u7528","text":"<p>\u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5c06 <code>.limit()</code> \u548c <code>.offset()</code> \u4e0e <code>.where()</code> \u4ee5\u53ca\u4f60\u7a0d\u540e\u5c06\u5b66\u5230\u7684\u5176\u4ed6\u65b9\u6cd5\u7ed3\u5408\u4f7f\u7528\uff1a</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &gt; 32).offset(1).limit(2)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &gt; 32).offset(1).limit(2)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &gt; 32).offset(1).limit(2)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &gt; 32).offset(1).limit(2)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/limit-and-offset/#limitoffset-where","title":"\u5728\u547d\u4ee4\u884c\u4e2d\u8fd0\u884c\u5305\u542b Limit\u3001Offset \u548c Where \u7684\u7a0b\u5e8f","text":"<p>\u5982\u679c\u6211\u4eec\u5728\u547d\u4ee4\u884c\u4e2d\u8fd0\u884c\u7a0b\u5e8f\uff0c\u5b83\u5c06\u67e5\u627e\u6570\u636e\u5e93\u4e2d\u6240\u6709\u5e74\u9f84\u5927\u4e8e 32 \u7684\u82f1\u96c4\u3002\u901a\u5e38\u8fd9\u4f1a\u662f 4 \u4e2a\u82f1\u96c4\u3002</p> <p>\u4f46\u662f\u6211\u4eec\u4ece\u504f\u79fb\u91cf\u4e3a 1 \u7684\u4f4d\u7f6e\u5f00\u59cb\uff08\u56e0\u6b64\u4e0d\u8ba1\u7b97\u7b2c\u4e00\u4e2a\uff09\uff0c\u5e76\u5c06\u7ed3\u679c\u9650\u5236\u4e3a\u4ec5\u83b7\u53d6\u540e\u9762\u4e24\u4e2a\u82f1\u96c4\uff1a</p> <pre><code>$ python app.py\n\n// \u524d\u9762\u7684\u8f93\u51fa\u5df2\u7701\u7565 \ud83d\ude48\n\n// \u4f7f\u7528 WHERE\u3001LIMIT \u548c OFFSET \u8fdb\u884c\u9009\u62e9\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.age &gt; ?\n LIMIT ? OFFSET ?\nINFO Engine [no key 0.00022s] (32, 2, 1)\n\n// \u6253\u5370\u6536\u5230\u7684 2 \u4e2a\u82f1\u96c4\n[\n    Hero(age=36, id=6, name='Dr. Weird', secret_name='Steve Weird'),\n    Hero(age=48, id=3, name='Rusty-Man', secret_name='Tommy Sharp')\n]\n</code></pre>"},{"location":"tutorial/limit-and-offset/#_6","title":"\u603b\u7ed3","text":"<p>\u65e0\u8bba\u4f60\u5982\u4f55\u4f7f\u7528 <code>.where()</code> \u6216\u5176\u4ed6\u65b9\u6cd5\u7b5b\u9009\u6570\u636e\uff0c\u4f60\u90fd\u53ef\u4ee5\u4f7f\u7528 <code>.limit()</code> \u6765\u9650\u5236\u67e5\u8be2\u7ed3\u679c\u7684\u6700\u5927\u6570\u91cf\u3002</p> <p>\u540c\u6837\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 <code>.offset()</code> \u8df3\u8fc7\u524d\u9762\u7684\u7ed3\u679c\u3002</p>"},{"location":"tutorial/one/","title":"\u8bfb\u53d6\u5355\u884c\u6570\u636e","text":"<p>\u4f60\u5df2\u7ecf\u77e5\u9053\u5982\u4f55\u4f7f\u7528 <code>.where()</code> \u6765\u7b5b\u9009\u884c\u8fdb\u884c\u9009\u62e9\u3002</p> <p>\u4f60\u4e5f\u770b\u5230\u8fc7\uff0c\u5f53\u6267\u884c <code>select()</code> \u65f6\uff0c\u5b83\u901a\u5e38\u8fd4\u56de\u4e00\u4e2a \u53ef\u8fed\u4ee3 \u5bf9\u8c61\u3002</p> <p>\u6216\u8005\u4f60\u53ef\u4ee5\u8c03\u7528 <code>results.all()</code> \u6765\u7acb\u5373\u83b7\u53d6\u6240\u6709\u884c\u7684 \u5217\u8868 \uff0c\u800c\u4e0d\u662f\u53ef\u8fed\u4ee3\u5bf9\u8c61\u3002</p> <p>\u4f46\u662f\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ea\u60f3\u8bfb\u53d6 \u5355\u884c\u6570\u636e \uff0c\u800c\u5904\u7406\u53ef\u8fed\u4ee3\u5bf9\u8c61\u6216\u5217\u8868\u5e76\u4e0d\u90a3\u4e48\u65b9\u4fbf\u3002</p> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u8bfb\u53d6\u5355\u884c\u6570\u636e\u7684\u5b9e\u7528\u5de5\u5177\u3002</p>"},{"location":"tutorial/one/#_2","title":"\u4ece\u4e0a\u4e00\u4e2a\u4ee3\u7801\u7ee7\u7eed","text":"<p>\u6211\u4eec\u5c06\u7ee7\u7eed\u4f7f\u7528\u524d\u51e0\u7ae0\u4e2d\u7528\u6765\u521b\u5efa\u548c\u9009\u62e9\u6570\u636e\u7684\u76f8\u540c\u793a\u4f8b\uff0c\u5e76\u7ee7\u7eed\u66f4\u65b0\u5b83\u4eec\u3002</p> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u5982\u679c\u4f60\u5df2\u7ecf\u6267\u884c\u4e86\u4e4b\u524d\u7684\u793a\u4f8b\u5e76\u4e14\u6709\u4e00\u4e2a\u6570\u636e\u5e93\u6587\u4ef6\uff0c \u5728\u8fd0\u884c\u6bcf\u4e2a\u793a\u4f8b\u4e4b\u524d\u5220\u9664\u6570\u636e\u5e93\u6587\u4ef6 \uff0c\u8fd9\u6837\u4f60\u5c31\u4e0d\u4f1a\u6709\u91cd\u590d\u6570\u636e\uff0c\u5e76\u4e14\u53ef\u4ee5\u83b7\u5f97\u76f8\u540c\u7684\u7ed3\u679c\u3002</p>"},{"location":"tutorial/one/#_3","title":"\u8bfb\u53d6\u7b2c\u4e00\u884c","text":"<p>\u6211\u4eec\u4e00\u76f4\u5728\u904d\u5386 <code>result</code> \u5bf9\u8c61\u4e2d\u7684\u884c\uff0c\u50cf\u8fd9\u6837\uff1a</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u4f46\u5047\u8bbe\u6211\u4eec\u5e76\u4e0d\u5173\u5fc3\u6240\u6709\u7684\u884c\uff0c\u53ea\u5173\u5fc3 \u7b2c\u4e00\u884c\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u5728 <code>results</code> \u5bf9\u8c61\u4e0a\u8c03\u7528 <code>.first()</code> \u65b9\u6cd5\u6765\u83b7\u53d6\u7b2c\u4e00\u884c\uff1a</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        hero = results.first()\n        print(\"Hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        hero = results.first()\n        print(\"Hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        hero = results.first()\n        print(\"Hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        hero = results.first()\n        print(\"Hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u8fd9\u5c06\u8fd4\u56de <code>results</code> \u4e2d\u7684\u7b2c\u4e00\u884c\u5bf9\u8c61\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u3002</p> <p>\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u4e0d\u9700\u8981\u5904\u7406\u53ef\u8fed\u4ee3\u5bf9\u8c61\u6216\u5217\u8868\u4e86\u3002</p> <p>Tip</p> <p>\u8bf7\u6ce8\u610f\uff0c<code>.first()</code> \u662f <code>results</code> \u5bf9\u8c61\u7684\u65b9\u6cd5\uff0c\u800c\u4e0d\u662f <code>select()</code> \u8bed\u53e5\u7684\u65b9\u6cd5\u3002</p> <p>\u867d\u7136\u8fd9\u4e2a\u67e5\u8be2\u4f1a\u627e\u5230\u4e24\u884c\u6570\u636e\uff0c\u4f46\u901a\u8fc7\u4f7f\u7528 <code>.first()</code> \u6211\u4eec\u53ea\u4f1a\u83b7\u5f97\u7b2c\u4e00\u884c\u3002</p> <p>\u5982\u679c\u6211\u4eec\u5728\u547d\u4ee4\u884c\u4e2d\u8fd0\u884c\u5b83\uff0c\u8f93\u51fa\u5c06\u662f\uff1a</p> <pre><code>$ python app.py\n\n// \u4e00\u4e9b\u521d\u59cb\u5316\u8f93\u51fa\u88ab\u7701\u7565 \ud83d\ude09\n\n// \u5e26\u6709 WHERE \u7684 SELECT \u67e5\u8be2\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.age &lt;= ?\nINFO Engine [no key 0.00021s] (35,)\n\n// \u53ea\u6253\u5370\u7b2c\u4e00\u9879\nHero: secret_name='Natalia Roman-on' age=32 id=4 name='Tarantula'\n</code></pre>"},{"location":"tutorial/one/#none","title":"\u7b2c\u4e00\u4e2a\u6216 <code>None</code>","text":"<p>SQL \u67e5\u8be2\u53ef\u80fd\u4e0d\u4f1a\u627e\u5230\u4efb\u4f55\u884c\u3002</p> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c<code>.first()</code> \u5c06\u8fd4\u56de <code>None</code>\uff1a</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt; 25)\n        results = session.exec(statement)\n        hero = results.first()\n        print(\"Hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt; 25)\n        results = session.exec(statement)\n        hero = results.first()\n        print(\"Hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt; 25)\n        results = session.exec(statement)\n        hero = results.first()\n        print(\"Hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt; 25)\n        results = session.exec(statement)\n        hero = results.first()\n        print(\"Hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7531\u4e8e\u6ca1\u6709\u5e74\u9f84\u5c0f\u4e8e 25 \u7684\u82f1\u96c4\uff0c<code>.first()</code> \u5c06\u8fd4\u56de <code>None</code>\u3002</p> <p>\u5f53\u6211\u4eec\u5728\u547d\u4ee4\u884c\u8fd0\u884c\u5b83\u65f6\uff0c\u8f93\u51fa\u5c06\u662f\uff1a</p> <pre><code>$ python app.py\n\n// \u4e00\u4e9b\u521d\u59cb\u5316\u8f93\u51fa\u88ab\u7701\u7565 \ud83d\ude09\n\n// \u5e26\u6709 WHERE \u7684 SELECT \u67e5\u8be2\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.age &lt;= ?\nINFO Engine [no key 0.00021s] (35,)\n\n// \u6ca1\u6709\u627e\u5230\u884c\uff0c\u7b2c\u4e00\u884c\u662f None\nHero: None\n</code></pre>"},{"location":"tutorial/one/#_4","title":"\u7cbe\u786e\u5339\u914d\u4e00\u884c","text":"<p>\u6709\u65f6\u6211\u4eec\u5e0c\u671b\u786e\u4fdd\u67e5\u8be2\u7ed3\u679c\u4e2d\u53ea\u6709 \u4e00\u884c \u6570\u636e\u3002</p> <p>\u5982\u679c\u67e5\u8be2\u7ed3\u679c\u4e2d\u591a\u4e8e\u4e00\u884c\uff0c\u5219\u610f\u5473\u7740\u7cfb\u7edf\u51fa\u73b0\u4e86\u9519\u8bef\uff0c\u6211\u4eec\u5e94\u8be5\u7ec8\u6b62\u5e76\u629b\u51fa\u4e00\u4e2a\u9519\u8bef\u3002</p> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 <code>.one()</code>\uff0c\u800c\u4e0d\u662f <code>.first()</code>\uff1a</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u77e5\u9053 <code>\"Deadpond\"</code> \u53ea\u6709\u4e00\u884c\uff0c\u800c\u4e14\u4e0d\u5e94\u8be5\u6709\u591a\u4e8e\u4e00\u884c\u7684\u8bb0\u5f55\u3002</p> <p>\u5982\u679c\u6211\u4eec\u8fd0\u884c\u4e00\u6b21\uff0c\u8f93\u51fa\u5c06\u4f1a\u662f\uff1a</p> <pre><code>$ python app.py\n\n// \u4e00\u4e9b\u521d\u59cb\u5316\u8f93\u51fa\u88ab\u7701\u7565 \ud83d\ude09\n\n// \u5e26\u6709 WHERE \u7684 SELECT \u67e5\u8be2\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.name = ?\nINFO Engine [no key 0.00015s] ('Deadpond',)\n\n// \u53ea\u627e\u5230\u4e86\u4e00\u884c\uff0c\u6ca1\u95ee\u9898 \u2705\nHero: secret_name='Dive Wilson' age=None id=1 name='Deadpond'\n</code></pre> <p>\u4f46\u5982\u679c\u6211\u4eec\u518d\u6b21\u8fd0\u884c\uff0c\u7531\u4e8e\u5b83\u4f1a\u91cd\u65b0\u521b\u5efa\u5e76\u63d2\u5165\u6240\u6709\u82f1\u96c4\u8bb0\u5f55\u5230\u6570\u636e\u5e93\u4e2d\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u91cd\u590d\u7684\u8bb0\u5f55\uff0c\u5e76\u4e14\u4f1a\u6709\u591a\u4e2a <code>\"Deadpond\"</code>\u3002 \ud83d\ude31</p> <p>\u56e0\u6b64\uff0c\u5982\u679c\u6211\u4eec\u6ca1\u6709\u5148\u5220\u9664 <code>database.db</code> \u6587\u4ef6\uff0c\u76f4\u63a5\u8fd0\u884c\u5b83\uff0c\u5c06\u4f1a\u8f93\u51fa\uff1a</p> <pre><code>$ python app.py\n\n// \u4e00\u4e9b\u521d\u59cb\u5316\u8f93\u51fa\u88ab\u7701\u7565 \ud83d\ude09\n\n// \u5e26\u6709 WHERE \u7684 SELECT \u67e5\u8be2\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.name = ?\nINFO Engine [no key 0.00015s] ('Deadpond',)\n\n// \u54ce\u5440\uff0c\u6570\u636e\u5e93\u5904\u4e8e\u635f\u574f\u72b6\u6001\uff0c\u6709\u91cd\u590d\u8bb0\u5f55\uff01 \ud83d\udea8\nTraceback (most recent call last):\n\n// \u9519\u8bef\u7684\u8be6\u7ec6\u4fe1\u606f\u7701\u7565\n\nsqlalchemy.exc.MultipleResultsFound: Multiple rows were found when exactly one was required\n</code></pre>"},{"location":"tutorial/one/#_5","title":"\u7cbe\u786e\u5339\u914d\u4e00\u884c\uff08\u6709\u66f4\u591a\u6570\u636e\u65f6\uff09","text":"<p>\u5f53\u7136\uff0c\u5373\u4f7f\u6211\u4eec\u6ca1\u6709\u91cd\u590d\u6570\u636e\uff0c\u5982\u679c\u53d1\u9001\u4e00\u4e2a\u67e5\u8be2\u8fd4\u56de\u591a\u4e8e\u4e00\u884c\u7684\u7ed3\u679c\uff0c\u5e76\u4e14\u4ecd\u7136\u671f\u671b <code>.one()</code> \u8fd4\u56de\u6b63\u597d\u4e00\u884c\uff0c\u6211\u4eec\u4e5f\u4f1a\u9047\u5230\u76f8\u540c\u7684\u9519\u8bef\uff1a</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u8fd9\u4e2a\u67e5\u8be2\u5c06\u4f1a\u627e\u5230 2 \u884c\u6570\u636e\uff0c\u6700\u7ec8\u4e5f\u4f1a\u629b\u51fa\u76f8\u540c\u7684\u9519\u8bef\u3002</p>"},{"location":"tutorial/one/#_6","title":"\u7cbe\u786e\u5339\u914d\u4e00\u884c\uff08\u6ca1\u6709\u6570\u636e\u65f6\uff09","text":"<p>\u5982\u679c\u6211\u4eec\u4f7f\u7528 <code>.one()</code> \u4f46\u67e5\u8be2\u6ca1\u6709\u8fd4\u56de\u4efb\u4f55\u884c\uff0c\u5b83\u4e5f\u4f1a\u629b\u51fa\u4e00\u4e2a\u9519\u8bef\uff1a</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt; 25)\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt; 25)\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt; 25)\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt; 25)\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7531\u4e8e\u6ca1\u6709\u5e74\u9f84\u5c0f\u4e8e 25 \u7684\u82f1\u96c4\uff0c<code>.one()</code> \u4f1a\u629b\u51fa\u4e00\u4e2a\u9519\u8bef\u3002</p> <p>\u5982\u679c\u6211\u4eec\u5728\u547d\u4ee4\u884c\u8fd0\u884c\u5b83\uff0c\u8f93\u51fa\u4f1a\u662f\u8fd9\u6837\u7684\uff1a</p> <pre><code>$ python app.py\n\n// Some boilerplate output omitted \ud83d\ude09\n\n// SELECT with WHERE\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.age &lt; ?\nINFO Engine [no key 0.00014s] (25,)\n\n// \u54ce\u5440\uff0c\u6211\u4eec\u671f\u671b\u6709\u4e00\u884c\u6570\u636e\uff0c\u4f46\u6ca1\u6709\u627e\u5230\u4efb\u4f55\uff01\ud83d\udea8\nTraceback (most recent call last):\n\n// \u4e00\u4e9b\u9519\u8bef\u7684\u8be6\u7ec6\u4fe1\u606f\u88ab\u7701\u7565\n\nsqlalchemy.exc.NoResultFound: No row was found when one was required\n</code></pre>"},{"location":"tutorial/one/#_7","title":"\u7b80\u6d01\u7248\u672c","text":"<p>\u5f53\u7136\uff0c\u4f7f\u7528 <code>.first()</code> \u548c <code>.one()</code> \u65f6\uff0c\u901a\u5e38\u4f60\u4f1a\u5c06\u4ee3\u7801\u5199\u5f97\u66f4\u52a0\u7b80\u6d01\uff0c\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u53ef\u4ee5\u5c06\u5176\u5199\u6210\u4e00\u884c\uff08\u6216\u8005\u81f3\u5c11\u662f\u4e00\u6761 Python \u8bed\u53e5\uff09\uff1a</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        hero = session.exec(select(Hero).where(Hero.name == \"Deadpond\")).one()\n        print(\"Hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        hero = session.exec(select(Hero).where(Hero.name == \"Deadpond\")).one()\n        print(\"Hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        hero = session.exec(select(Hero).where(Hero.name == \"Deadpond\")).one()\n        print(\"Hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        hero = session.exec(select(Hero).where(Hero.name == \"Deadpond\")).one()\n        print(\"Hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u8fd9\u5c06\u4e0e\u4e0a\u9762\u7684\u4f8b\u5b50\u5f97\u5230\u76f8\u540c\u7684\u7ed3\u679c\u3002</p>"},{"location":"tutorial/one/#where-id","title":"\u4f7f\u7528 <code>.where()</code> \u6839\u636e Id \u8fdb\u884c\u9009\u62e9","text":"<p>\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u80fd\u60f3\u901a\u8fc7 \u4e3b\u952e \u7684 Id \u5217\u9009\u62e9\u5355\u884c\u6570\u636e\u3002</p> <p>\u4f60\u53ef\u4ee5\u50cf\u6211\u4eec\u4e4b\u524d\u505a\u7684\u90a3\u6837\uff0c\u4f7f\u7528 <code>.where()</code> \u7136\u540e\u7528 <code>.first()</code> \u83b7\u53d6\u7b2c\u4e00\u9879\uff1a</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.id == 1)\n        results = session.exec(statement)\n        hero = results.first()\n        print(\"Hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.id == 1)\n        results = session.exec(statement)\n        hero = results.first()\n        print(\"Hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.id == 1)\n        results = session.exec(statement)\n        hero = results.first()\n        print(\"Hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.id == 1)\n        results = session.exec(statement)\n        hero = results.first()\n        print(\"Hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u8fd9\u5c06\u6309\u9884\u671f\u6b63\u5e38\u5de5\u4f5c\u3002\u4f46\u5176\u5b9e\u6709\u4e00\u4e2a\u66f4\u7b80\u6d01\u7684\u7248\u672c\u3002\ud83d\udc47</p>"},{"location":"tutorial/one/#get-id","title":"\u4f7f\u7528 <code>.get()</code> \u6839\u636e Id \u8fdb\u884c\u9009\u62e9","text":"<p>\u7531\u4e8e\u6839\u636e \u4e3b\u952e \u7684 Id \u5217\u9009\u62e9\u5355\u884c\u6570\u636e\u662f\u4e00\u4e2a\u5e38\u89c1\u64cd\u4f5c\uff0c\u56e0\u6b64\u6709\u4e00\u4e2a\u7b80\u4fbf\u7684\u65b9\u6cd5\u6765\u5b9e\u73b0\uff1a</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        hero = session.get(Hero, 1)\n        print(\"Hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        hero = session.get(Hero, 1)\n        print(\"Hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        hero = session.get(Hero, 1)\n        print(\"Hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        hero = session.get(Hero, 1)\n        print(\"Hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p><code>session.get(Hero, 1)</code> \u7b49\u6548\u4e8e\u521b\u5efa\u4e00\u4e2a <code>select()</code> \u67e5\u8be2\uff0c\u4f7f\u7528 <code>.where()</code> \u6839\u636e Id \u8fdb\u884c\u7b5b\u9009\uff0c\u7136\u540e\u4f7f\u7528 <code>.first()</code> \u83b7\u53d6\u7b2c\u4e00\u9879\u3002</p> <p>\u5982\u679c\u4f60\u8fd0\u884c\u5b83\uff0c\u8f93\u51fa\u5c06\u662f\uff1a</p> <pre><code>$ python app.py\n\n// \u4e00\u4e9b\u57fa\u672c\u8f93\u51fa\u88ab\u7701\u7565 \ud83d\ude09\n\n// SELECT with WHERE\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [generated in 0.00021s] (1,)\n\n// \u6253\u5370\u7ed3\u679c\nHero: secret_name='Dive Wilson' age=None id=1 name='Deadpond'\n</code></pre>"},{"location":"tutorial/one/#get-id_1","title":"\u4f7f\u7528 <code>.get()</code> \u6839\u636e Id \u8fdb\u884c\u9009\u62e9\uff08\u65e0\u6570\u636e\uff09","text":"<p><code>.get()</code> \u7684\u884c\u4e3a\u7c7b\u4f3c\u4e8e <code>.first()</code>\uff0c\u5982\u679c\u6ca1\u6709\u6570\u636e\uff0c\u5b83\u5c06\u8fd4\u56de <code>None</code>\uff08\u800c\u4e0d\u662f\u629b\u51fa\u9519\u8bef\uff09\uff1a</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        hero = session.get(Hero, 9001)\n        print(\"Hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        hero = session.get(Hero, 9001)\n        print(\"Hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        hero = session.get(Hero, 9001)\n        print(\"Hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        hero = session.get(Hero, 9001)\n        print(\"Hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u8fd0\u884c\u8fd9\u6bb5\u4ee3\u7801\u5c06\u8f93\u51fa\uff1a</p> <pre><code>$ python app.py\n\n// \u4e00\u4e9b\u57fa\u672c\u8f93\u51fa\u88ab\u7701\u7565 \ud83d\ude09\n\n// SELECT with WHERE\nINFO Engine BEGIN (implicit)\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [generated in 0.00024s] (9001,)\n\n// \u6ca1\u6709\u627e\u5230\u6570\u636e\uff0c\u56e0\u6b64\u503c\u4e3a None\nHero: None\n</code></pre>"},{"location":"tutorial/one/#_8","title":"\u603b\u7ed3","text":"<p>\u7531\u4e8e\u67e5\u8be2 SQL \u6570\u636e\u5e93\u4e2d\u7684\u5355\u884c\u6570\u636e\u662f\u4e00\u4e2a\u5e38\u89c1\u64cd\u4f5c\uff0c\u73b0\u5728\u4f60\u6709\u4e86\u51e0\u79cd\u5de5\u5177\uff0c\u53ef\u4ee5\u4ee5\u7b80\u6d01\u7684\u65b9\u5f0f\u5b9e\u73b0\u8fd9\u4e00\u529f\u80fd\u3002\ud83c\udf89</p>"},{"location":"tutorial/select/","title":"\u8bfb\u53d6\u6570\u636e - SELECT","text":"<p>\u6211\u4eec\u5df2\u7ecf\u6709\u4e00\u4e2a\u5305\u542b\u4e00\u4e9b\u6570\u636e\u7684\u6570\u636e\u5e93\u548c\u8868\u683c\uff0c\u770b\u8d77\u6765\u5927\u81f4\u5982\u4e0b\u6240\u793a\uff1a</p> idnamesecret_nameage 1DeadpondDive Wilsonnull 2Spider-BoyPedro Parqueadornull 3Rusty-ManTommy Sharp48 <p>\u4e8b\u60c5\u53d8\u5f97\u8d8a\u6765\u8d8a\u6709\u8da3\u4e86\uff01\u73b0\u5728\u8ba9\u6211\u4eec\u6765\u770b\u770b\u5982\u4f55\u4ece\u6570\u636e\u5e93\u4e2d\u8bfb\u53d6\u6570\u636e\u5427\uff01\ud83e\udd29</p>"},{"location":"tutorial/select/#_1","title":"\u4ece\u4e0a\u4e00\u4e2a\u4ee3\u7801\u7ee7\u7eed","text":"<p>\u6211\u4eec\u4ece\u4e4b\u524d\u521b\u5efa\u6570\u636e\u7684\u4ee3\u7801\u7ee7\u7eed\u3002</p> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u6211\u4eec\u6b63\u5728\u521b\u5efa\u4e00\u4e2a SQLModel <code>Hero</code> \u7c7b\u6a21\u578b\uff0c\u5e76\u63d2\u5165\u4e00\u4e9b\u8bb0\u5f55\u3002</p> <p>\u6211\u4eec\u9700\u8981 <code>Hero</code> \u6a21\u578b\u548c \u5f15\u64ce\uff0c\u4f46\u662f\u6211\u4eec\u5c06\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4f1a\u8bdd\u6765\u67e5\u8be2\u6570\u636e\uff0c\u653e\u5728\u4e00\u4e2a\u65b0\u51fd\u6570\u91cc\u3002</p>"},{"location":"tutorial/select/#sql","title":"\u4f7f\u7528 SQL \u8bfb\u53d6\u6570\u636e","text":"<p>\u5728\u7f16\u5199 Python \u4ee3\u7801\u4e4b\u524d\uff0c\u8ba9\u6211\u4eec\u5feb\u901f\u56de\u987e\u4e00\u4e0b\u5982\u4f55\u7528 SQL \u67e5\u8be2\u6570\u636e\uff1a</p> <pre><code>SELECT id, name, secret_name, age\nFROM hero\n</code></pre> <p>\u5b83\u7684\u610f\u601d\u5927\u81f4\u662f\uff1a</p> <p>\u563f SQL \u6570\u636e\u5e93 \ud83d\udc4b\uff0c\u8bf7\u5e2e\u6211<code>SELECT</code>\u4e00\u4e9b\u6570\u636e\u3002</p> <p>\u6211\u9996\u5148\u544a\u8bc9\u4f60\u6211\u9700\u8981\u54ea\u4e9b\u5217\uff1a</p> <ul> <li><code>id</code></li> <li><code>name</code></li> <li><code>secret_name</code></li> <li><code>age</code></li> </ul> <p>\u7136\u540e\uff0c\u6211\u5e0c\u671b\u4f60\u4ece\u540d\u4e3a <code>\"hero\"</code> \u7684\u8868\u683c\u4e2d\u83b7\u53d6\u8fd9\u4e9b\u6570\u636e\u3002</p> <p>\u63a5\u7740\uff0c\u6570\u636e\u5e93\u4f1a\u53bb\u83b7\u53d6\u6570\u636e\uff0c\u5e76\u4ee5\u7c7b\u4f3c\u4e0b\u8868\u7684\u5f62\u5f0f\u8fd4\u56de\u7ed9\u4f60\uff1a</p> idnamesecret_nameage 1DeadpondDive Wilsonnull 2Spider-BoyPedro Parqueadornull 3Rusty-ManTommy Sharp48 <p>\u4f60\u53ef\u4ee5\u5728 DB Browser for SQLite \u4e2d\u5c1d\u8bd5\u8fd9\u4e2a\u64cd\u4f5c\uff1a</p> <p></p> <p>Warning</p> <p>\u8fd9\u91cc\u6211\u4eec\u662f\u83b7\u53d6\u4e86\u6240\u6709\u7684\u884c\u6570\u636e\u3002</p> <p>\u5982\u679c\u4f60\u7684\u6570\u636e\u8868\u6709\u6210\u5343\u4e0a\u4e07\u884c\uff0c\u90a3\u4e48\u5bf9\u4e8e\u6570\u636e\u5e93\u6765\u8bf4\uff0c\u8ba1\u7b97\u8d77\u6765\u53ef\u80fd\u4f1a\u5f88\u6602\u8d35\u3002</p> <p>\u901a\u5e38\u4f60\u4f1a\u60f3\u8fc7\u6ee4\u884c\u6570\u636e\uff0c\u53ea\u83b7\u53d6\u4f60\u9700\u8981\u7684\u90a3\u90e8\u5206\u3002\u4f46\u662f\u6211\u4eec\u5c06\u5728\u4e0b\u4e00\u7ae0\u5b66\u4e60\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\u3002</p>"},{"location":"tutorial/select/#sql_1","title":"SQL \u5feb\u6377\u65b9\u5f0f","text":"<p>\u5982\u679c\u6211\u4eec\u60f3\u83b7\u53d6\u6240\u6709\u5217\uff0c\u5c31\u50cf\u4e0a\u9762\u90a3\u4e2a\u4f8b\u5b50\uff0c\u5728 SQL \u4e2d\u6709\u4e00\u4e2a\u5feb\u6377\u65b9\u5f0f\uff0c\u76f4\u63a5\u5199\u4e00\u4e2a <code>*</code>\uff0c\u800c\u4e0d\u662f\u6307\u5b9a\u6bcf\u4e2a\u5217\u7684\u540d\u79f0\uff1a</p> <pre><code>SELECT *\nFROM hero\n</code></pre> <p>\u8fd9\u6837\u4f1a\u5f97\u5230\u76f8\u540c\u7684\u7ed3\u679c\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u6211\u4eec\u5728 SQLModel \u4e2d\u4e0d\u4f1a\u4f7f\u7528\u8fd9\u4e2a\u65b9\u5f0f\u3002</p>"},{"location":"tutorial/select/#select","title":"<code>SELECT</code> \u5c11\u91cf\u5217","text":"<p>\u6211\u4eec\u4e5f\u53ef\u4ee5\u53ea\u9009\u62e9\u5c11\u91cf\u5217\uff0c\u4f8b\u5982\uff1a</p> <pre><code>SELECT id, name\nFROM hero\n</code></pre> <p>\u8fd9\u91cc\u6211\u4eec\u53ea\u9009\u62e9\u4e86 <code>id</code> \u548c <code>name</code> \u5217\u3002</p> <p>\u8fd9\u5c06\u4f1a\u8fd4\u56de\u5982\u4e0b\u7684\u8868\u683c\uff1a</p> idname 1Deadpond 2Spider-Boy 3Rusty-Man <p>\u8fd9\u91cc\u6709\u4e00\u4e2a\u6709\u8da3\u7684\u89c2\u5bdf\u3002SQL \u6570\u636e\u5e93\u5c06\u6570\u636e\u5b58\u50a8\u5728\u8868\u4e2d\uff0c\u5e76\u4e14\u603b\u662f\u4ee5 \u8868\u683c \u7684\u5f62\u5f0f\u8fd4\u56de\u7ed3\u679c\u3002</p>"},{"location":"tutorial/select/#select_1","title":"<code>SELECT</code> \u53d8\u4f53","text":"<p>SQL \u8bed\u8a00\u5141\u8bb8\u5728\u591a\u4e2a\u5730\u65b9\u4f7f\u7528\u4e0d\u540c\u7684 \u53d8\u4f53 \u3002</p> <p>\u5176\u4e2d\u4e00\u4e2a\u53d8\u4f53\u662f\uff0c\u5728 <code>SELECT</code> \u8bed\u53e5\u4e2d\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5217\u7684\u540d\u79f0\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u8868\u7684\u540d\u79f0\u52a0\u4e0a\u70b9\u7b26\u53f7\u4f5c\u4e3a\u524d\u7f00\u3002</p> <p>\u4f8b\u5982\uff0c\u4e0a\u9762\u7684 SQL \u4ee3\u7801\u4e5f\u53ef\u4ee5\u5199\u6210\uff1a</p> <pre><code>SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\n</code></pre> <p>\u5f53\u6211\u4eec\u540c\u65f6\u5904\u7406\u591a\u4e2a\u8868\u683c\u65f6\uff0c\u8fd9\u4e00\u70b9\u7279\u522b\u91cd\u8981\uff0c\u56e0\u4e3a\u591a\u4e2a\u8868\u683c\u53ef\u80fd\u4f1a\u6709\u76f8\u540c\u540d\u79f0\u7684\u5217\u3002</p> <p>\u4f8b\u5982 <code>hero.id</code> \u548c <code>team.id</code>\uff0c\u6216\u8005 <code>hero.name</code> \u548c <code>team.name</code>\u3002</p> <p>\u53e6\u4e00\u4e2a\u53d8\u4f53\u662f\uff0c\u5927\u591a\u6570 SQL \u5173\u952e\u5b57\uff0c\u6bd4\u5982 <code>SELECT</code>\uff0c\u4e5f\u53ef\u4ee5\u5c0f\u5199\u4e66\u5199\uff0c\u4f8b\u5982 <code>select</code>\u3002</p>"},{"location":"tutorial/select/#_2","title":"\u7ed3\u679c\u8868\u683c\u4e0d\u4e00\u5b9a\u9700\u8981\u5b58\u5728","text":"<p>\u8fd9\u662f\u4e00\u4e2a\u6709\u8da3\u7684\u90e8\u5206\u3002SQL \u6570\u636e\u5e93\u8fd4\u56de\u7684\u8868\u683c \u4e0d\u9700\u8981 \u4f5c\u4e3a\u72ec\u7acb\u7684\u8868\u683c\u5b58\u5728\u4e8e\u6570\u636e\u5e93\u4e2d\u3002\ud83e\uddd9</p> <p>\u4f8b\u5982\uff0c\u5728\u6211\u4eec\u7684\u6570\u636e\u5e93\u4e2d\uff0c\u53ea\u6709\u4e00\u4e2a\u5305\u542b\u6240\u6709\u5217\u7684\u8868\uff0c\u5373 <code>id</code>\u3001<code>name</code>\u3001<code>secret_name</code>\u3001<code>age</code>\u3002\u800c\u6211\u4eec\u5728\u8fd9\u91cc\u5f97\u5230\u7684\u7ed3\u679c\u8868\u683c\u53ea\u6709\u8f83\u5c11\u7684\u5217\u3002</p> <p>SQL \u7684\u4e00\u4e2a\u4e3b\u8981\u7279\u70b9\u662f\u80fd\u591f\u4fdd\u6301\u6570\u636e\u5728\u4e0d\u540c\u7684\u8868\u4e2d\u7ed3\u6784\u5316\uff0c\u907f\u514d\u6570\u636e\u91cd\u590d\u7b49\uff0c\u7136\u540e\u4ee5\u591a\u79cd\u65b9\u5f0f\u67e5\u8be2\u6570\u636e\u5e93\uff0c\u5e76\u4ee5\u4e0d\u540c\u7684\u8868\u683c\u5f62\u5f0f\u8fd4\u56de\u7ed3\u679c\u3002</p>"},{"location":"tutorial/select/#sqlmodel","title":"\u4f7f\u7528 SQLModel \u8bfb\u53d6\u6570\u636e","text":"<p>\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u7528 SQLModel \u505a\u76f8\u540c\u7684\u67e5\u8be2\uff0c\u8bfb\u53d6\u6240\u6709\u82f1\u96c4\u7684\u6570\u636e\u3002</p>"},{"location":"tutorial/select/#session","title":"\u521b\u5efa Session","text":"<p>\u7b2c\u4e00\u6b65\u662f\u521b\u5efa\u4e00\u4e2a Session\uff0c\u5c31\u50cf\u6211\u4eec\u5728\u521b\u5efa\u6570\u636e\u884c\u65f6\u6240\u505a\u7684\u90a3\u6837\u3002</p> <p>\u6211\u4eec\u5c06\u5728\u4e00\u4e2a\u65b0\u7684\u51fd\u6570 <code>select_heroes()</code> \u4e2d\u5f00\u59cb\u8fd9\u4e2a\u8fc7\u7a0b\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n\n# \u66f4\u591a\u4ee3\u7801\u5c06\u5728\u4e0b\u6587 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n\n# \u66f4\u591a\u4ee3\u7801\u5c06\u5728\u4e0b\u6587 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/select/#select_2","title":"\u521b\u5efa <code>select</code> \u8bed\u53e5","text":"<p>\u63a5\u4e0b\u6765\uff0c\u5c31\u50cf\u6211\u4eec\u4e0a\u9762\u5199 SQL <code>SELECT</code> \u8bed\u53e5\u4e00\u6837\uff0c\u73b0\u5728\u6211\u4eec\u5c06\u521b\u5efa\u4e00\u4e2a SQLModel \u7684 <code>select</code> \u8bed\u53e5\u3002</p> <p>\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u5728\u6587\u4ef6\u9876\u90e8\u4ece <code>sqlmodel</code> \u5bfc\u5165 <code>select</code>\uff1a</p> Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# \u66f4\u591a\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# \u66f4\u591a\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> <p>/// \u8be6\u7ec6\u4fe1\u606f | \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8</p> Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>///</p> <p>\u7136\u540e\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u5b83\u5728 Python \u4ee3\u7801\u4e2d\u521b\u5efa\u4e00\u4e2a <code>SELECT</code> \u8bed\u53e5\uff1a</p> Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# \u66f4\u591a\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc48\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n\n# \u66f4\u591a\u4ee3\u7801\u5c06\u5728\u4e0b\u6587 \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# \u66f4\u591a\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc48\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n\n# \u66f4\u591a\u4ee3\u7801\u5c06\u5728\u4e0b\u6587 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u8fd9\u662f\u4e00\u884c\u975e\u5e38\u7b80\u5355\u7684\u4ee3\u7801\uff0c\u4f46\u5b83\u4f20\u8fbe\u4e86\u5f88\u591a\u4fe1\u606f\uff1a</p> <pre><code>statement = select(Hero)\n</code></pre> <p>\u8fd9\u7b49\u540c\u4e8e\u4e0a\u9762\u7684\u7b2c\u4e00\u4e2a SQL <code>SELECT</code> \u8bed\u53e5\uff1a</p> <pre><code>SELECT id, name, secret_name, age\nFROM hero\n</code></pre> <p>\u6211\u4eec\u5c06\u7c7b\u6a21\u578b <code>Hero</code> \u4f20\u9012\u7ed9 <code>select()</code> \u51fd\u6570\u3002\u8fd9\u544a\u8bc9\u5b83\u6211\u4eec\u60f3\u8981\u9009\u62e9\u6240\u6709\u4e0e <code>Hero</code> \u7c7b\u76f8\u5173\u7684\u5217\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u5728 <code>select()</code> \u51fd\u6570\u4e2d\u6211\u4eec\u5e76\u6ca1\u6709\u660e\u786e\u6307\u5b9a <code>FROM</code> \u90e8\u5206\u3002SQLModel\uff08\u5b9e\u9645\u4e0a\u662f SQLAlchemy\uff09\u5df2\u7ecf\u9ed8\u8ba4\u6211\u4eec\u8981\u4ece <code>hero</code> \u8868\u4e2d\u9009\u62e9\uff0c\u56e0\u4e3a <code>Hero</code> \u7c7b\u6a21\u578b\u4e0e\u8be5\u8868\u76f8\u5173\u8054\u3002</p> <p>Tip</p> <p><code>select()</code> \u8fd4\u56de\u7684 <code>statement</code> \u503c\u662f\u4e00\u4e2a\u7279\u6b8a\u5bf9\u8c61\uff0c\u5b83\u5141\u8bb8\u6211\u4eec\u505a\u5176\u4ed6\u64cd\u4f5c\u3002</p> <p>\u6211\u5c06\u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4e2d\u544a\u8bc9\u4f60\u66f4\u591a\u5173\u4e8e\u5b83\u7684\u4fe1\u606f\u3002</p>"},{"location":"tutorial/select/#_3","title":"\u6267\u884c\u8bed\u53e5","text":"<p>\u73b0\u5728\u6211\u4eec\u6709\u4e86 <code>select</code> \u8bed\u53e5\uff0c\u53ef\u4ee5\u4f7f\u7528 session \u6765\u6267\u884c\u5b83\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n\n# \u66f4\u591a\u4ee3\u7801\u5c06\u5728\u4e0b\u6587 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n\n# \u66f4\u591a\u4ee3\u7801\u5c06\u5728\u4e0b\u6587 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u8fd9\u4f1a\u544a\u8bc9 session \u4f7f\u7528 engine \u6267\u884c\u6570\u636e\u5e93\u4e2d\u7684 <code>SELECT</code> \u8bed\u53e5\uff0c\u5e76\u8fd4\u56de\u7ed3\u679c\u3002</p> <p>\u7531\u4e8e\u6211\u4eec\u5728\u521b\u5efa engine \u65f6\u4f7f\u7528\u4e86 <code>echo=True</code>\uff0c\u5b83\u5c06\u5728\u8f93\u51fa\u4e2d\u663e\u793a\u6240\u6267\u884c\u7684 SQL\u3002</p> <p>\u8fd9\u4e2a <code>session.exec(statement)</code> \u5c06\u4ea7\u751f\u4ee5\u4e0b\u8f93\u51fa\uff1a</p> <pre><code>INFO Engine BEGIN (implicit)\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nINFO Engine [no key 0.00032s] ()\n</code></pre> <p>\u6570\u636e\u5e93\u8fd4\u56de\u4e86\u5305\u542b\u6240\u6709\u6570\u636e\u7684\u8868\u683c\uff0c\u5c31\u50cf\u6211\u4eec\u76f4\u63a5\u7f16\u5199 SQL \u65f6\u4e00\u6837\uff1a</p> idnamesecret_nameage 1DeadpondDive Wilsonnull 2Spider-BoyPedro Parqueadornull 3Rusty-ManTommy Sharp48"},{"location":"tutorial/select/#_4","title":"\u904d\u5386\u7ed3\u679c","text":"<p><code>results</code> \u5bf9\u8c61\u662f\u4e00\u4e2a \u53ef\u8fed\u4ee3\u7684 \u5bf9\u8c61\uff0c\u53ef\u4ee5\u7528\u6765\u904d\u5386\u6bcf\u4e00\u884c\u6570\u636e\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5c06\u5b83\u653e\u5165\u4e00\u4e2a <code>for</code> \u5faa\u73af\u4e2d\uff0c\u6253\u5370\u6bcf\u4e2a\u82f1\u96c4\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u8fd9\u5c06\u6253\u5370\u4ee5\u4e0b\u8f93\u51fa\uff1a</p> <pre><code>id=1 name='Deadpond' age=None secret_name='Dive Wilson'\nid=2 name='Spider-Boy' age=None secret_name='Pedro Parqueador'\nid=3 name='Rusty-Man' age=48 secret_name='Tommy Sharp'\n</code></pre>"},{"location":"tutorial/select/#select_heroes-main","title":"\u5c06 <code>select_heroes()</code> \u6dfb\u52a0\u5230 <code>main()</code> \u51fd\u6570","text":"<p>\u73b0\u5728\uff0c\u5728 <code>main()</code> \u51fd\u6570\u4e2d\u8c03\u7528 <code>select_heroes()</code>\uff0c\u8fd9\u6837\u5f53\u6211\u4eec\u4ece\u547d\u4ee4\u884c\u8fd0\u884c\u7a0b\u5e8f\u65f6\uff0c\u5b83\u4f1a\u88ab\u6267\u884c\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/select/#_5","title":"\u56de\u987e\u4ee3\u7801","text":"<p>\u592a\u597d\u4e86\uff0c\u4f60\u73b0\u5728\u53ef\u4ee5\u4ece\u6570\u636e\u5e93\u4e2d\u8bfb\u53d6\u6570\u636e\u4e86\uff01\ud83c\udf89</p> <p>\u8ba9\u6211\u4eec\u56de\u987e\u4e00\u4e0b\u5230\u76ee\u524d\u4e3a\u6b62\u7684\u4ee3\u7801\uff1a</p> Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select  # (1)!\n\n\nclass Hero(SQLModel, table=True):  # (2)!\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)  # (3)!\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)  # (4)!\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")  # (5)!\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:  # (6)!\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:  # (7)!\n        statement = select(Hero)  # (8)!\n        results = session.exec(statement)  # (9)!\n        for hero in results:  # (10)!\n            print(hero)  # (11)!\n    # (12)!\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()  # (13)!\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <ol> <li> <p>Import from <code>sqlmodel</code> everything we will use, including the new <code>select()</code> function.</p> </li> <li> <p>Create the <code>Hero</code> class model, representing the <code>hero</code> table.</p> </li> <li> <p>Create the engine, we should use a single one shared by all the application code, and that's what we are doing here.</p> </li> <li> <p>Create all the tables for the models registered in <code>SQLModel.metadata</code>.</p> <p>This also creates the database if it doesn't exist already.</p> </li> <li> <p>Create each one of the <code>Hero</code> objects.</p> <p>You might not have this in your version if you had already created the data in the database.</p> </li> <li> <p>Create a new session and use it to <code>add</code> the heroes to the database, and then <code>commit</code> the changes.</p> </li> <li> <p>Create a new session to query data.</p> <p>Tip</p> <p>Notice that this is a new session independent from the one in the other function above.</p> <p>But it still uses the same engine. We still have one engine for the whole application.</p> </li> <li> <p>Use the <code>select()</code> function to create a statement selecting all the <code>Hero</code> objects.</p> <p>This selects all the rows in the <code>hero</code> table.</p> </li> <li> <p>Use <code>session.exec(statement)</code> to make the session use the engine to execute the internal SQL statement.</p> <p>This will go to the database, execute that SQL, and get the results back.</p> <p>It returns a special iterable object that we put in the variable <code>results</code>.</p> <p>This generates the output:</p> <pre><code>INFO Engine BEGIN (implicit)\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nINFO Engine [no key 0.00032s] ()\n</code></pre> </li> <li> <p>Iterate for each <code>Hero</code> object in the <code>results</code>.</p> </li> <li> <p>Print each <code>hero</code>.</p> <p>The 3 iterations in the <code>for</code> loop will generate this output:</p> <pre><code>id=1 name='Deadpond' age=None secret_name='Dive Wilson'\nid=2 name='Spider-Boy' age=None secret_name='Pedro Parqueador'\nid=3 name='Rusty-Man' age=48 secret_name='Tommy Sharp'\n</code></pre> </li> <li> <p>At this point, after the <code>with</code> block, the session is closed.</p> <p>This generates the output:</p> <pre><code>INFO Engine ROLLBACK\n</code></pre> </li> <li> <p>Add this function <code>select_heroes()</code> to the <code>main()</code> function so that it is called when we run this program from the command line.</p> </li> </ol> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select  # (1)!\n\n\nclass Hero(SQLModel, table=True):  # (2)!\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)  # (3)!\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)  # (4)!\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")  # (5)!\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:  # (6)!\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:  # (7)!\n        statement = select(Hero)  # (8)!\n        results = session.exec(statement)  # (9)!\n        for hero in results:  # (10)!\n            print(hero)  # (11)!\n    # (12)!\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()  # (13)!\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <ol> <li> <p>Import from <code>sqlmodel</code> everything we will use, including the new <code>select()</code> function.</p> </li> <li> <p>Create the <code>Hero</code> class model, representing the <code>hero</code> table.</p> </li> <li> <p>Create the engine, we should use a single one shared by all the application code, and that's what we are doing here.</p> </li> <li> <p>Create all the tables for the models registered in <code>SQLModel.metadata</code>.</p> <p>This also creates the database if it doesn't exist already.</p> </li> <li> <p>Create each one of the <code>Hero</code> objects.</p> <p>You might not have this in your version if you had already created the data in the database.</p> </li> <li> <p>Create a new session and use it to <code>add</code> the heroes to the database, and then <code>commit</code> the changes.</p> </li> <li> <p>Create a new session to query data.</p> <p>Tip</p> <p>Notice that this is a new session independent from the one in the other function above.</p> <p>But it still uses the same engine. We still have one engine for the whole application.</p> </li> <li> <p>Use the <code>select()</code> function to create a statement selecting all the <code>Hero</code> objects.</p> <p>This selects all the rows in the <code>hero</code> table.</p> </li> <li> <p>Use <code>session.exec(statement)</code> to make the session use the engine to execute the internal SQL statement.</p> <p>This will go to the database, execute that SQL, and get the results back.</p> <p>It returns a special iterable object that we put in the variable <code>results</code>.</p> <p>This generates the output:</p> <pre><code>INFO Engine BEGIN (implicit)\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nINFO Engine [no key 0.00032s] ()\n</code></pre> </li> <li> <p>Iterate for each <code>Hero</code> object in the <code>results</code>.</p> </li> <li> <p>Print each <code>hero</code>.</p> <p>The 3 iterations in the <code>for</code> loop will generate this output:</p> <pre><code>id=1 name='Deadpond' age=None secret_name='Dive Wilson'\nid=2 name='Spider-Boy' age=None secret_name='Pedro Parqueador'\nid=3 name='Rusty-Man' age=48 secret_name='Tommy Sharp'\n</code></pre> </li> <li> <p>At this point, after the <code>with</code> block, the session is closed.</p> <p>This generates the output:</p> <pre><code>INFO Engine ROLLBACK\n</code></pre> </li> <li> <p>Add this function <code>select_heroes()</code> to the <code>main()</code> function so that it is called when we run this program from the command line.</p> </li> </ol> <p>Tip</p> <p>\u67e5\u770b\u6570\u5b57\u6c14\u6ce1\uff0c\u770b\u770b\u6bcf\u884c\u4ee3\u7801\u505a\u4e86\u4ec0\u4e48\u3002</p> <p>\u8fd9\u91cc\u5f00\u59cb\u66f4\u660e\u663e\u5730\u770b\u51fa\u4e3a\u4ec0\u4e48\u6211\u4eec\u5e94\u8be5\u4e3a\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u4e00\u4e2a engine\uff0c\u4f46\u4e3a\u6bcf\u7ec4\u64cd\u4f5c\u4f7f\u7528\u4e0d\u540c\u7684 session\u3002</p> <p>\u6211\u4eec\u521b\u5efa\u7684\u8fd9\u4e2a\u65b0\u4f1a\u8bdd\u4f7f\u7528\u7684\u662f \u76f8\u540c\u7684 engine\uff0c\u4f46\u5b83\u662f\u4e00\u4e2a\u65b0\u7684\u72ec\u7acb\u7684 session\u3002</p> <p>\u4e0a\u9762\u7684\u521b\u5efa\u6a21\u578b\u7684\u4ee3\u7801\u53ef\u4ee5\uff0c\u4f8b\u5982\uff0c\u653e\u5728\u4e00\u4e2a\u5904\u7406 Web API \u8bf7\u6c42\u5e76\u521b\u5efa\u6a21\u578b\u7684\u51fd\u6570\u4e2d\u3002</p> <p>\u800c\u4ece\u6570\u636e\u5e93\u8bfb\u53d6\u6570\u636e\u7684\u7b2c\u4e8c\u90e8\u5206\u53ef\u4ee5\u653e\u5728\u53e6\u4e00\u4e2a\u51fd\u6570\u4e2d\u5904\u7406\u5176\u4ed6\u8bf7\u6c42\u3002</p> <p>\u56e0\u6b64\uff0c\u8fd9\u4e24\u90e8\u5206\u4ee3\u7801\u53ef\u4ee5\u653e\u5728 \u4e0d\u540c\u7684\u4f4d\u7f6e\uff0c\u5e76\u4e14\u5b83\u4eec\u9700\u8981\u5404\u81ea\u7684\u4f1a\u8bdd\u3002</p> <p>Info</p> <p>\u516c\u5e73\u5730\u8bf4\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6240\u6709\u7684\u4ee3\u7801\u5b9e\u9645\u4e0a\u53ef\u4ee5\u5171\u4eab\u540c\u4e00\u4e2a session\uff0c\u8fd9\u91cc\u5176\u5b9e\u4e0d\u9700\u8981\u6709\u4e24\u4e2a\u4f1a\u8bdd\u3002</p> <p>\u4f46\u8fd9\u6837\u505a\u53ef\u4ee5\u8ba9\u6211\u5411\u4f60\u5c55\u793a\u5b83\u4eec\u662f\u5982\u4f55\u5206\u5f00\u7684\uff0c\u5e76\u5f3a\u8c03\u4f60\u5e94\u8be5\u4e3a\u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528 \u4e00\u4e2a engine\uff0c\u5e76\u4e3a\u6bcf\u7ec4\u64cd\u4f5c\u4f7f\u7528 \u591a\u4e2a session\u3002</p>"},{"location":"tutorial/select/#hero","title":"\u83b7\u53d6 <code>Hero</code> \u5bf9\u8c61\u7684\u5217\u8868","text":"<p>\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u4e00\u76f4\u5728\u4f7f\u7528 <code>results</code> \u6765\u8fdb\u884c\u904d\u5386\u3002</p> <p>\u4f46\u51fa\u4e8e\u4e0d\u540c\u7684\u539f\u56e0\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u7acb\u5373\u83b7\u53d6\u5b8c\u6574\u7684 <code>Hero</code> \u5bf9\u8c61\u5217\u8868\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u4e00\u4e2a \u53ef\u8fed\u4ee3\u5bf9\u8c61\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u60f3\u5728 Web API \u4e2d\u8fd4\u56de\u8fd9\u4e9b\u6570\u636e\u3002</p> <p>\u8fd9\u4e2a\u7279\u6b8a\u7684 <code>results</code> \u5bf9\u8c61\u8fd8\u5177\u6709\u4e00\u4e2a\u65b9\u6cd5 <code>results.all()</code>\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u6240\u6709\u5bf9\u8c61\u7684\u5217\u8868\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u6240\u6709\u7684\u82f1\u96c4\u5b58\u50a8\u5728 <code>heroes</code> \u53d8\u91cf\u4e2d\u7684\u4e00\u4e2a\u5217\u8868\u4e2d\u3002</p> <p>\u6253\u5370\u540e\uff0c\u7ed3\u679c\u4f1a\u662f\u8fd9\u6837\u7684\uff1a</p> <pre><code>[\n    Hero(id=1, name='Deadpond', age=None, secret_name='Dive Wilson'),\n    Hero(id=2, name='Spider-Boy', age=None, secret_name='Pedro Parqueador'),\n    Hero(id=3, name='Rusty-Man', age=48, secret_name='Tommy Sharp')\n]\n</code></pre> <p>Info</p> <p>\u5b9e\u9645\u663e\u793a\u65f6\u4f1a\u66f4\u7d27\u51d1\uff0c\u6211\u4e3a\u4e86\u8ba9\u4f60\u770b\u5230\u5b83\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u5305\u542b\u6240\u6709\u6570\u636e\u7684\u5217\u8868\uff0c\u7a0d\u5fae\u505a\u4e86\u683c\u5f0f\u5316\u3002</p>"},{"location":"tutorial/select/#_6","title":"\u7b80\u6d01\u7248\u672c","text":"<p>\u4e3a\u4e86\u5411\u4f60\u89e3\u91ca\u6bcf\u4e2a\u5bf9\u8c61\u7684\u4f5c\u7528\uff0c\u6211\u521b\u5efa\u4e86\u591a\u4e2a\u53d8\u91cf\u3002</p> <p>\u4f46\u662f\u73b0\u5728\u6211\u4eec\u4e86\u89e3\u4e86\u6bcf\u4e2a\u5bf9\u8c61\u7684\u4f5c\u7528\u4ee5\u53ca\u5b83\u4eec\u7684\u529f\u80fd\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u7b80\u5316\u4e00\u4e0b\uff0c\u5c06\u5b83\u4eec\u5408\u5e76\u6210\u4e00\u4e2a\u66f4\u7b80\u6d01\u7684\u5f62\u5f0f\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        print(heroes)\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        print(heroes)\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        print(heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        print(heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u6240\u6709\u4ee3\u7801\u653e\u5728\u4e00\u884c\uff0c\u5b9e\u9645\u4e0a\u4f60\u4ee5\u540e\u4f1a\u66f4\u9891\u7e41\u5730\u5c06 <code>select</code> \u8bed\u53e5\u5199\u6210\u4e00\u884c\u3002</p>"},{"location":"tutorial/select/#sqlmodel-sqlalchemy-","title":"SQLModel \u6216 SQLAlchemy - \u6280\u672f\u7ec6\u8282","text":"<p>SQLModel \u5b9e\u9645\u4e0a\u662f SQLAlchemy \u548c Pydantic \u7684\u7ed3\u5408\u4f53\u3002</p> <p>\u5b83\u4f7f\u7528\u5e76\u8fd4\u56de\u76f8\u540c\u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u5e76\u4e0e\u8fd9\u4e24\u4e2a\u5e93\u517c\u5bb9\u3002</p> <p>\u7136\u800c\uff0cSQLModel \u5b9a\u4e49\u4e86\u4e00\u4e9b\u81ea\u5df1\u7684\u5185\u90e8\u90e8\u5206\uff0c\u4ee5\u6539\u5584\u5f00\u53d1\u8005\u7684\u4f53\u9a8c\u3002</p> <p>\u5728\u672c\u7ae0\u4e2d\uff0c\u6211\u4eec\u89e6\u53ca\u5230\u4e86\u4e00\u4e9b\u8fd9\u4e9b\u7ec6\u8282\u3002</p>"},{"location":"tutorial/select/#sqlmodel-select","title":"SQLModel \u7684 <code>select</code>","text":"<p>\u5f53\u4f60\u4ece <code>sqlmodel</code> \u5bfc\u5165 <code>select()</code> \u51fd\u6570\u65f6\uff0c\u4f60\u4f7f\u7528\u7684\u662f SQLModel \u7248\u672c\u7684 <code>select</code>\u3002</p> <p>SQLAlchemy \u4e5f\u6709\u5b83\u81ea\u5df1\u7684 <code>select</code>\uff0c\u800c SQLModel \u7684 <code>select</code> \u5728\u5185\u90e8\u4f7f\u7528\u4e86 SQLAlchemy \u7684 <code>select</code>\u3002</p> <p>\u4f46\u662f\uff0cSQLModel \u7248\u672c\u7684 <code>select</code> \u505a\u4e86\u5f88\u591a**\u6280\u5de7**\uff0c\u901a\u8fc7\u7c7b\u578b\u6ce8\u89e3\u786e\u4fdd\u65e0\u8bba\u4f60\u4f7f\u7528 VS Code\u3001PyCharm \u8fd8\u662f\u5176\u4ed6\u5de5\u5177\uff0c\u90fd\u80fd\u83b7\u5f97\u6700\u4f73\u7684 \u7f16\u8f91\u5668\u652f\u6301\u3002\u2728</p> <p>Info</p> <p>\u4e3a\u4e86\u5c3d\u53ef\u80fd\u63d0\u9ad8\u8fd9\u4e00\u70b9\uff0c\u5185\u90e8\u4ee3\u7801\u8fdb\u884c\u4e86\u5927\u91cf\u5de5\u4f5c\u548c\u7814\u7a76\uff0c\u4f7f\u7528\u4e86\u4e0d\u540c\u7248\u672c\u7684\u4ee3\u7801\u3002\ud83e\udd13</p>"},{"location":"tutorial/select/#sqlmodel-sessionexec","title":"SQLModel \u7684 <code>session.exec</code>","text":"<p>\ud83d\udce2 \u8fd9\u4e2a\u90e8\u5206\u9700\u8981\u7279\u522b\u6ce8\u610f\u3002</p> <p>SQLAlchemy \u81ea\u5e26\u7684 <code>Session</code> \u6709\u4e00\u4e2a\u65b9\u6cd5 <code>session.execute()</code>\uff0c\u4f46\u6ca1\u6709 <code>session.exec()</code> \u65b9\u6cd5\u3002</p> <p>\u5982\u679c\u4f60\u67e5\u9605 SQLAlchemy \u7684\u6559\u7a0b\uff0c\u4f60\u4f1a\u770b\u5230\u5b83\u4eec\u603b\u662f\u4f7f\u7528 <code>session.execute()</code>\u3002</p> <p>SQLModel \u81ea\u5e26\u7684 <code>Session</code> \u76f4\u63a5\u7ee7\u627f\u81ea SQLAlchemy \u7684 <code>Session</code>\uff0c\u5e76\u6dfb\u52a0\u4e86\u8fd9\u4e2a\u989d\u5916\u7684\u65b9\u6cd5 <code>session.exec()</code>\u3002\u5728\u5185\u90e8\uff0c\u5b83\u4ecd\u7136\u4f7f\u7528\u76f8\u540c\u7684 <code>session.execute()</code>\u3002</p> <p>\u4f46\u662f\uff0c<code>session.exec()</code> \u505a\u4e86\u5f88\u591a**\u6280\u5de7**\uff0c\u7ed3\u5408\u4e86 <code>session()</code> \u4e2d\u7684\u6280\u5de7\uff0c\u65e8\u5728\u4e3a\u4f60\u63d0\u4f9b**\u6700\u4f73\u7684\u7f16\u8f91\u5668\u652f\u6301**\uff0c\u65e0\u8bba\u662f**\u81ea\u52a8\u5b8c\u6210**\u8fd8\u662f**\u5185\u8054\u9519\u8bef**\uff0c\u5373\u4f7f\u662f\u5728\u4ece <code>select</code> \u83b7\u53d6\u6570\u636e\u4e4b\u540e\uff0c\u4e5f\u80fd\u63d0\u4f9b\u8fd9\u4e9b\u529f\u80fd\u3002\u2728</p> <p>\u4f8b\u5982\uff0c\u5728 SQLAlchemy \u4e2d\uff0c\u4f60\u9700\u8981\u5728\u8fd9\u91cc\u6dfb\u52a0 <code>.scalars()</code>\uff1a</p> <pre><code>heroes = session.execute(select(Hero)).scalars().all()\n</code></pre> <p>\u4f46\u662f\uff0c\u5f53\u4f60\u9009\u62e9\u591a\u4e2a\u9879\u76ee\u65f6\uff08\u7a0d\u540e\u6211\u4eec\u4f1a\u770b\u5230\uff09\uff0c\u4f60\u5fc5\u987b\u79fb\u9664\u5b83\u3002</p> <p>SQLModel \u7684 <code>session.exec()</code> \u4f1a\u4e3a\u4f60\u5904\u7406\u8fd9\u4e9b\u95ee\u9898\uff0c\u56e0\u6b64\u4f60\u65e0\u9700\u6dfb\u52a0 <code>.scalars()</code>\u3002</p> <p>\u8fd9\u662f SQLAlchemy \u5f53\u524d\u65e0\u6cd5\u63d0\u4f9b\u7684\u529f\u80fd\uff0c\u56e0\u4e3a\u5e38\u89c4\u7684 <code>session.execute()</code> \u652f\u6301\u5176\u4ed6\u591a\u79cd\u7528\u4f8b\uff0c\u5305\u62ec\u65e7\u7248\u7528\u6cd5\uff0c\u56e0\u6b64\u5b83\u4e0d\u80fd\u62e5\u6709\u6240\u6709\u7684\u5185\u90e8\u7c7b\u578b\u6ce8\u89e3\u548c\u6280\u5de7\u6765\u652f\u6301\u8fd9\u79cd\u65b9\u5f0f\u3002</p> <p>\u9664\u6b64\u4e4b\u5916\uff0cSQLModel \u7684 <code>session.exec()</code> \u8fd8\u505a\u4e86\u4e00\u4e9b\u4f18\u5316\uff0c\u51cf\u5c11\u4e86\u4f60\u7f16\u5199\u4ee3\u7801\u7684\u6570\u91cf\uff0c\u5e76\u4f7f\u5176\u5c3d\u53ef\u80fd\u76f4\u89c2\u3002</p> <p>\u4f46\u662f SQLModel \u7684 <code>Session</code> \u4ecd\u7136\u53ef\u4ee5\u8bbf\u95ee <code>session.execute()</code>\u3002</p> <p>Tip</p> <p>\u4f60\u7684\u7f16\u8f91\u5668\u5c06\u4e3a <code>session.exec()</code> \u548c <code>session.execute()</code> \u63d0\u4f9b\u81ea\u52a8\u5b8c\u6210\u529f\u80fd\u3002</p> <p>\ud83d\udce2 \u8bb0\u4f4f\uff0c\u59cb\u7ec8\u4f7f\u7528 <code>session.exec()</code>\uff0c\u4ee5\u83b7\u5f97\u6700\u4f73\u7684\u7f16\u8f91\u5668\u652f\u6301\u548c\u5f00\u53d1\u8005\u4f53\u9a8c\u3002</p>"},{"location":"tutorial/select/#sqlmodel_1","title":"SQLModel \u98ce\u683c\u7684\u5c40\u9650\u6027","text":"<p>SQLModel \u8bbe\u8ba1\u7684\u76ee\u6807\u662f\u4e3a\u4e00\u4e9b \u975e\u5e38\u5e38\u89c1\u7684\u7528\u4f8b \u63d0\u4f9b\u6700\u4f73\u7684 \u5f00\u53d1\u8005\u4f53\u9a8c \u3002\u2728</p> <p>\u4f60\u4ecd\u7136\u53ef\u4ee5\u76f4\u63a5\u4e0e SQLAlchemy \u914d\u5408\u4f7f\u7528\uff0c\u5e76\u5728\u9700\u8981\u65f6\u4f7f\u7528 SQLAlchemy \u7684 \u6240\u6709\u529f\u80fd \uff0c\u5305\u62ec\u66f4\u4f4e\u5c42\u6b21\u7684\u3001\u66f4\u52a0\u201c\u7eaf\u7cb9\u201d\u7684 SQL \u6784\u9020\u3001\u590d\u6742\u7684\u6a21\u5f0f\uff0c\u751a\u81f3\u662f\u65e7\u7248\u6a21\u5f0f\u3002\ud83e\udd13</p> <p>\u4f46\u662f\uff0c SQLModel \u7684\u8bbe\u8ba1\uff08\u4f8b\u5982\u7c7b\u578b\u6ce8\u89e3\uff09\u5047\u8bbe\u4f60\u662f\u5728\u6309\u7167\u6211\u5728\u6587\u6863\u4e2d\u6240\u8bb2\u7684\u65b9\u5f0f\u4f7f\u7528\u5b83\u3002</p> <p>\u56e0\u6b64\uff0c\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u4f60\u5c06\u83b7\u5f97\u5c3d\u53ef\u80fd\u591a\u7684 \u81ea\u52a8\u5b8c\u6210 \u548c \u5185\u8054\u9519\u8bef \u3002\ud83d\ude80</p> <p>\u4f46\u8fd9\u4e5f\u610f\u5473\u7740\uff0c\u5982\u679c\u4f60\u4f7f\u7528 SQLModel \u4e0e SQLAlchemy \u4e2d\u7684\u4e00\u4e9b \u590d\u6742\u6a21\u5f0f \uff0c\u7f16\u8f91\u5668\u53ef\u80fd\u4f1a\u544a\u8bc9\u4f60 \u5b58\u5728\u9519\u8bef\uff0c\u4f46\u5b9e\u9645\u4e0a\u4ee3\u7801\u4ecd\u7136\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\u3002</p> <p>\u8fd9\u5c31\u662f\u53d6\u820d\u3002\ud83e\udd37</p> <p>\u4f46\u5bf9\u4e8e\u9700\u8981\u4f7f\u7528\u8fd9\u4e9b\u590d\u6742\u6a21\u5f0f\u7684\u60c5\u51b5\uff0c\u4f60\u603b\u662f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 SQLAlchemy\uff0c\u5e76\u7ed3\u5408 SQLModel\uff08\u4f7f\u7528\u76f8\u540c\u7684\u6a21\u578b\u7b49\uff09\u3002</p>"},{"location":"tutorial/update/","title":"\u66f4\u65b0\u6570\u636e - UPDATE","text":"<p>\u73b0\u5728\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u4f7f\u7528 SQLModel \u66f4\u65b0\u6570\u636e\u3002</p>"},{"location":"tutorial/update/#_1","title":"\u4ece\u4e0a\u4e00\u4e2a\u4ee3\u7801\u7ee7\u7eed","text":"<p>\u5982\u524d\u6240\u8ff0\uff0c\u6211\u4eec\u5c06\u4ece\u4e0a\u6b21\u7684\u4ee3\u7801\u7ee7\u7eed\u3002</p> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u5728\u8fd0\u884c\u793a\u4f8b\u4e4b\u524d\uff0c\u8bb0\u5f97\u5220\u9664 <code>database.db</code> \u6587\u4ef6\uff0c\u4ee5\u786e\u4fdd\u83b7\u5f97\u76f8\u540c\u7684\u7ed3\u679c\u3002</p>"},{"location":"tutorial/update/#sql","title":"\u4f7f\u7528 SQL \u66f4\u65b0","text":"<p>\u8ba9\u6211\u4eec\u5feb\u901f\u67e5\u770b\u5982\u4f55\u4f7f\u7528 SQL \u66f4\u65b0\u6570\u636e\uff1a</p> <pre><code>UPDATE hero\nSET age=16\nWHERE name = \"Spider-Boy\"\n</code></pre> <p>\u8fd9\u5927\u81f4\u610f\u5473\u7740\uff1a</p> <p>\u563f\uff0cSQL \u6570\u636e\u5e93 \ud83d\udc4b\uff0c\u6211\u8981 <code>UPDATE</code> \u540d\u4e3a <code>hero</code> \u7684\u8868\u3002</p> <p>\u8bf7\u5c06 <code>age</code> \u5217\u7684\u503c\u8bbe\u7f6e\u4e3a <code>16</code>...</p> <p>...\u5bf9\u4e8e\u6bcf\u4e00\u884c\uff0c<code>WHERE</code> \u5217 <code>name</code> \u7684\u503c\u7b49\u4e8e <code>\"Spider-Boy\"</code>\u3002</p> <p>\u4e0e <code>SELECT</code> \u8bed\u53e5\u7c7b\u4f3c\uff0c\u7b2c\u4e00\u90e8\u5206\u5b9a\u4e49\u4e86\u8981\u64cd\u4f5c\u7684\u5217\uff1a\u8981\u66f4\u65b0\u54ea\u4e9b\u5217\u4ee5\u53ca\u5c06\u5176\u8bbe\u7f6e\u4e3a\u54ea\u4e2a\u503c\u3002\u5176\u4f59\u5217\u4fdd\u6301\u4e0d\u53d8\u3002</p> <p>\u7b2c\u4e8c\u90e8\u5206\u5219\u901a\u8fc7 <code>WHERE</code> \u5b9a\u4e49\u4e86\u5e94\u8be5\u5e94\u7528\u6b64\u66f4\u65b0\u7684\u884c\u3002</p> <p>\u5728\u6b64\u6848\u4f8b\u4e2d\uff0c\u7531\u4e8e\u53ea\u6709\u4e00\u4e2a\u540d\u5b57\u4e3a <code>\"Spider-Boy\"</code> \u7684\u82f1\u96c4\uff0c\u6240\u4ee5\u66f4\u65b0\u53ea\u4f1a\u5e94\u7528\u4e8e\u8fd9\u4e00\u884c\u3002</p> <p>Info</p> <p>\u8bf7\u6ce8\u610f\uff0c\u5728 <code>UPDATE</code> \u4e2d\uff0c\u5355\u7b49\u53f7\uff08<code>=</code>\uff09\u8868\u793a \u8d4b\u503c \uff0c\u5373\u5c06\u5217\u8bbe\u7f6e\u4e3a\u67d0\u4e2a\u503c\u3002</p> <p>\u800c\u5728 <code>WHERE</code> \u4e2d\uff0c\u76f8\u540c\u7684\u5355\u7b49\u53f7\uff08<code>=</code>\uff09\u7528\u4e8e \u6bd4\u8f83 \u4e24\u4e2a\u503c\uff0c\u4ee5\u67e5\u627e\u5339\u914d\u7684\u884c\u3002</p> <p>\u8fd9\u4e0e Python \u548c\u5927\u591a\u6570\u7f16\u7a0b\u8bed\u8a00\u7684\u7528\u6cd5\u6709\u6240\u4e0d\u540c\uff0c\u5728\u8fd9\u4e9b\u8bed\u8a00\u4e2d\uff0c\u5355\u7b49\u53f7\uff08<code>=</code>\uff09\u7528\u4e8e\u8d4b\u503c\uff0c\u800c\u53cc\u7b49\u53f7\uff08<code>==</code>\uff09\u7528\u4e8e\u6bd4\u8f83\u3002</p> <p>\u4f60\u53ef\u4ee5\u5728 DB Browser for SQLite \u4e2d\u5c1d\u8bd5\u6267\u884c\u8fd9\u4e2a SQL\uff1a</p> <p></p> <p>\u66f4\u65b0\u540e\uff0c\u8868\u4e2d\u7684\u6570\u636e\u5c06\u5982\u4e0b\u6240\u793a\uff0c<code>Spider-Boy</code> \u7684\u5e74\u9f84\u5df2\u66f4\u65b0\u4e3a 16\uff1a</p> idnamesecret_nameage 1DeadpondDive Wilsonnull 2Spider-BoyPedro Parqueador16 \u2728 3Rusty-ManTommy Sharp48 <p>Tip</p> <p>\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4f60\u4f1a\u901a\u8fc7 <code>id</code> \u67e5\u627e\u8981\u66f4\u65b0\u7684\u884c\uff0c\u4f8b\u5982\uff1a</p> <pre><code>UPDATE hero\nSET age=16\nWHERE id = 2\n</code></pre> <p>\u4f46\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4f7f\u7528\u4e86 <code>name</code> \u6765\u4f7f\u64cd\u4f5c\u66f4\u76f4\u89c2\u3002</p> <p>\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u7528 SQLModel \u5728\u4ee3\u7801\u4e2d\u505a\u540c\u6837\u7684\u66f4\u65b0\u3002</p> <p>\u4e3a\u4e86\u83b7\u5f97\u76f8\u540c\u7684\u7ed3\u679c\uff0c\u5728\u8fd0\u884c\u793a\u4f8b\u4e4b\u524d\u5220\u9664 <code>database.db</code> \u6587\u4ef6\u3002</p>"},{"location":"tutorial/update/#_2","title":"\u4ece\u6570\u636e\u5e93\u8bfb\u53d6\u6570\u636e","text":"<p>\u6211\u4eec\u5c06\u4ece\u9009\u62e9\u82f1\u96c4 <code>\"Spider-Boy\"</code> \u5f00\u59cb\uff0c\u8fd9\u4e5f\u662f\u6211\u4eec\u5c06\u8981\u66f4\u65b0\u7684\u6570\u636e\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"Updated hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"Updated hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u522b\u5fd8\u4e86\u5c06 <code>update_heroes()</code> \u51fd\u6570\u6dfb\u52a0\u5230 <code>main()</code> \u51fd\u6570\u4e2d\uff0c\u8fd9\u6837\u5728\u4ece\u547d\u4ee4\u884c\u6267\u884c\u7a0b\u5e8f\u65f6\u4f1a\u8c03\u7528\u5b83\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"Updated hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"Updated hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u5728\u547d\u4ee4\u884c\u8fd0\u884c\u7a0b\u5e8f\u65f6\u5c06\u8f93\u51fa\uff1a</p> <pre><code>$ python app.py\n\n// \u4e00\u4e9b\u6a21\u677f\u4ee3\u7801\u548c\u4e4b\u524d\u7684\u8f93\u51fa\u7701\u7565 \ud83d\ude09\n\n// SELECT with WHERE\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.name = ?\nINFO Engine [no key 0.00017s] ('Spider-Boy',)\n\n// \u6253\u5370\u4ece\u6570\u636e\u5e93\u83b7\u53d6\u7684\u82f1\u96c4\nHero: name='Spider-Boy' secret_name='Pedro Parqueador' age=None id=2\n</code></pre> <p>Tip</p> <p>\u6ce8\u610f\u5230\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u8fd9\u4e2a\u82f1\u96c4\u7684\u5e74\u9f84\u4ecd\u7136\u6ca1\u6709\u8bbe\u7f6e\u3002</p>"},{"location":"tutorial/update/#_3","title":"\u8bbe\u7f6e\u5b57\u6bb5\u503c","text":"<p>\u73b0\u5728\u4f60\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a <code>hero</code> \u5bf9\u8c61\uff0c\u4f60\u53ef\u4ee5\u7b80\u5355\u5730\u8bbe\u7f6e\u4f60\u60f3\u8981\u7684\u5b57\u6bb5\u503c\uff08\u4ee3\u8868\u5217\u7684\u5c5e\u6027\uff09\u3002</p> <p>\u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06 <code>age</code> \u8bbe\u7f6e\u4e3a <code>16</code>\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"Updated hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"Updated hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/update/#_4","title":"\u5c06\u82f1\u96c4\u6dfb\u52a0\u5230\u4f1a\u8bdd\u4e2d","text":"<p>\u73b0\u5728\uff0c\u7531\u4e8e <code>hero</code> \u5bf9\u8c61\u5728\u5185\u5b58\u4e2d\u7684\u503c\u5df2\u7ecf\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u7279\u522b\u662f <code>age</code> \u7684\u65b0\u503c\uff0c\u6211\u4eec\u9700\u8981\u5c06\u5b83\u6dfb\u52a0\u5230\u4f1a\u8bdd\u4e2d\u3002</p> <p>\u8fd9\u4e0e\u6211\u4eec\u5728\u521b\u5efa\u65b0\u7684\u82f1\u96c4\u5b9e\u4f8b\u65f6\u505a\u7684\u64cd\u4f5c\u662f\u4e00\u6837\u7684\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n        session.add(hero)\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n        session.add(hero)\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"Updated hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"Updated hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/update/#_5","title":"\u63d0\u4ea4\u4f1a\u8bdd","text":"<p>\u8981\u4fdd\u5b58\u4f1a\u8bdd\u4e2d\u7684\u5f53\u524d\u66f4\u6539\uff0c\u9700\u8981 \u63d0\u4ea4 \u4f1a\u8bdd\u3002</p> <p>\u8fd9\u5c06\u628a\u66f4\u65b0\u540e\u7684\u82f1\u96c4\u4fdd\u5b58\u5230\u6570\u636e\u5e93\u4e2d\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n        session.add(hero)\n        session.commit()\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n        session.add(hero)\n        session.commit()\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"Updated hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"Updated hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u5b83\u8fd8\u4f1a\u4fdd\u5b58\u4f1a\u8bdd\u4e2d\u4efb\u4f55\u5176\u4ed6\u5df2\u7ecf\u6dfb\u52a0\u7684\u5185\u5bb9\u3002</p> <p>\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u4e4b\u524d\u521b\u5efa\u4e86\u65b0\u7684\u82f1\u96c4\u5e76\u5c06\u8fd9\u4e9b\u5bf9\u8c61\u6dfb\u52a0\u5230\u4f1a\u8bdd\u4e2d\uff0c\u5b83\u4eec\u4e5f\u5c06\u5728\u8fd9\u6b21\u63d0\u4ea4\u4e2d\u4e00\u8d77\u4fdd\u5b58\u3002</p> <p>\u6b64\u63d0\u4ea4\u5c06\u751f\u6210\u4ee5\u4e0b\u8f93\u51fa\uff1a</p> <pre><code>$ python app.py\n\n// \u4e00\u4e9b\u6a21\u677f\u8f93\u51fa\u7701\u7565 \ud83d\ude09\n\n// \u4e0a\u8ff0\u8f93\u51fa\u7701\u7565 \ud83d\ude48\n\n// \u66f4\u65b0\u82f1\u96c4\u6570\u636e\u7684 SQL \u8bed\u53e5\nINFO Engine UPDATE hero SET age=? WHERE hero.id = ?\nINFO Engine [generated in 0.00017s] (16, 2)\nINFO Engine COMMIT\n</code></pre>"},{"location":"tutorial/update/#_6","title":"\u5237\u65b0\u5bf9\u8c61","text":"<p>\u6b64\u65f6\uff0c\u82f1\u96c4\u6570\u636e\u5df2\u5728\u6570\u636e\u5e93\u4e2d\u66f4\u65b0\uff0c\u5e76\u4e14\u65b0\u6570\u636e\u5df2\u7ecf\u4fdd\u5b58\u3002</p> <p>\u5982\u679c\u6211\u4eec\u8bbf\u95ee\u67d0\u4e2a\u5c5e\u6027\uff0c\u4f8b\u5982 <code>hero.name</code>\uff0c\u5bf9\u8c61\u4e2d\u7684\u6570\u636e\u4f1a\u81ea\u52a8\u5237\u65b0\u3002</p> <p>\u4f46\u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5e76\u6ca1\u6709\u8bbf\u95ee\u4efb\u4f55\u5c5e\u6027\uff0c\u6211\u4eec\u53ea\u662f\u6253\u5370\u5bf9\u8c61\u3002\u540c\u65f6\uff0c\u4e3a\u4e86\u66f4\u52a0\u660e\u786e\uff0c\u6211\u4eec\u5c06\u76f4\u63a5\u4f7f\u7528 <code>.refresh()</code> \u6765\u5237\u65b0\u5bf9\u8c61\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"Updated hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"Updated hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u6b64\u5237\u65b0\u64cd\u4f5c\u5c06\u89e6\u53d1\u4e0e\u8bbf\u95ee\u5c5e\u6027\u65f6\u81ea\u52a8\u89e6\u53d1\u7684\u76f8\u540c SQL \u67e5\u8be2\u3002\u56e0\u6b64\uff0c\u5b83\u5c06\u751f\u6210\u4ee5\u4e0b\u8f93\u51fa\uff1a</p> <pre><code>$ python app.py\n\n// \u4e00\u4e9b\u6a21\u677f\u8f93\u51fa\u7701\u7565 \ud83d\ude09\n\n// \u4e0a\u8ff0\u8f93\u51fa\u7701\u7565 \ud83d\ude48\n\n// \u6267\u884c\u9009\u62e9\u6700\u65b0\u82f1\u96c4\u6570\u636e\u7684 SQL \u67e5\u8be2\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [generated in 0.00018s] (2,)\n</code></pre>"},{"location":"tutorial/update/#_7","title":"\u6253\u5370\u66f4\u65b0\u540e\u7684\u5bf9\u8c61","text":"<p>\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u6253\u5370\u51fa\u66f4\u65b0\u540e\u7684\u82f1\u96c4\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"Updated hero:\", hero)\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"Updated hero:\", hero)\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"Updated hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"Updated hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u56e0\u4e3a\u6211\u4eec\u5728\u66f4\u65b0\u4e4b\u540e\u7acb\u5373\u5237\u65b0\u4e86\u5b83\uff0c\u5b83\u73b0\u5728\u5305\u542b\u6700\u65b0\u7684\u6570\u636e\uff0c\u5305\u62ec\u6211\u4eec\u521a\u521a\u66f4\u65b0\u7684 <code>age</code>\u3002</p> <p>\u6240\u4ee5\uff0c\u6253\u5370\u51fa\u6765\u5c06\u663e\u793a\u65b0\u7684 <code>age</code>\uff1a</p> <pre><code>$ python app.py\n\n// \u4e00\u4e9b\u6a21\u677f\u8f93\u51fa\u7701\u7565 \ud83d\ude09\n\n// \u4e0a\u8ff0\u8f93\u51fa\u7701\u7565 \ud83d\ude48\n\n// \u6253\u5370\u66f4\u65b0\u540e\u7684\u82f1\u96c4\uff0c\u5305\u542b\u65b0\u7684\u5e74\u9f84\nUpdated hero: name='Spider-Boy' secret_name='Pedro Parqueador' age=16 id=2\n</code></pre>"},{"location":"tutorial/update/#_8","title":"\u56de\u987e\u4ee3\u7801","text":"<p>\u73b0\u5728\u8ba9\u6211\u4eec\u56de\u987e\u4e00\u4e0b\u6240\u6709\u7684\u4ee3\u7801\uff1a</p> Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")  # (1)!\n        results = session.exec(statement)  # (2)!\n        hero = results.one()  # (3)!\n        print(\"Hero:\", hero)  # (4)!\n\n        hero.age = 16  # (5)!\n        session.add(hero)  # (6)!\n        session.commit()  # (7)!\n        session.refresh(hero)  # (8)!\n        print(\"Updated hero:\", hero)  # (9)!\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <ol> <li> <p>Select the hero we will work with.</p> </li> <li> <p>Execute the query with the select statement object.</p> <p>This generates the output:</p> <pre><code>INFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.name = ?\nINFO Engine [no key 0.00017s] ('Spider-Boy',)\n</code></pre> </li> <li> <p>Get one hero object, expecting exactly one.</p> <p>Tip</p> <p>This ensures there's no more than one, and that there's exactly one, not <code>None</code>.</p> <p>This would never return <code>None</code>, instead it would raise an exception.</p> </li> <li> <p>Print the hero object.</p> <p>This generates the output:</p> <pre><code>Hero: name='Spider-Boy' secret_name='Pedro Parqueador' age=None id=2\n</code></pre> </li> <li> <p>Set the hero's age field to the new value <code>16</code>.</p> <p>Now the <code>hero</code> object in memory has a different value for the age, but it is still not saved to the database.</p> </li> <li> <p>Add the hero to the session.</p> <p>This puts it in that temporary place in the session before committing.</p> <p>But it's still not saved in the database yet.</p> </li> <li> <p>Commit the session.</p> <p>This saves the updated hero to the database.</p> <p>And this generates the output:</p> <pre><code>INFO Engine UPDATE hero SET age=? WHERE hero.id = ?\nINFO Engine [generated in 0.00017s] (16, 2)\nINFO Engine COMMIT\n</code></pre> </li> <li> <p>Refresh the hero object to have the recent data, including the age we just committed.</p> <p>This generates the output:</p> <pre><code>INFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [generated in 0.00018s] (2,)\n</code></pre> </li> <li> <p>Print the updated hero object.</p> <p>This generates the output:</p> <pre><code>Updated hero: name='Spider-Boy' secret_name='Pedro Parqueador' age=16 id=2\n</code></pre> </li> </ol> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")  # (1)!\n        results = session.exec(statement)  # (2)!\n        hero = results.one()  # (3)!\n        print(\"Hero:\", hero)  # (4)!\n\n        hero.age = 16  # (5)!\n        session.add(hero)  # (6)!\n        session.commit()  # (7)!\n        session.refresh(hero)  # (8)!\n        print(\"Updated hero:\", hero)  # (9)!\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <ol> <li> <p>Select the hero we will work with.</p> </li> <li> <p>Execute the query with the select statement object.</p> <p>This generates the output:</p> <pre><code>INFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.name = ?\nINFO Engine [no key 0.00017s] ('Spider-Boy',)\n</code></pre> </li> <li> <p>Get one hero object, expecting exactly one.</p> <p>Tip</p> <p>This ensures there's no more than one, and that there's exactly one, not <code>None</code>.</p> <p>This would never return <code>None</code>, instead it would raise an exception.</p> </li> <li> <p>Print the hero object.</p> <p>This generates the output:</p> <pre><code>Hero: name='Spider-Boy' secret_name='Pedro Parqueador' age=None id=2\n</code></pre> </li> <li> <p>Set the hero's age field to the new value <code>16</code>.</p> <p>Now the <code>hero</code> object in memory has a different value for the age, but it is still not saved to the database.</p> </li> <li> <p>Add the hero to the session.</p> <p>This puts it in that temporary place in the session before committing.</p> <p>But it's still not saved in the database yet.</p> </li> <li> <p>Commit the session.</p> <p>This saves the updated hero to the database.</p> <p>And this generates the output:</p> <pre><code>INFO Engine UPDATE hero SET age=? WHERE hero.id = ?\nINFO Engine [generated in 0.00017s] (16, 2)\nINFO Engine COMMIT\n</code></pre> </li> <li> <p>Refresh the hero object to have the recent data, including the age we just committed.</p> <p>This generates the output:</p> <pre><code>INFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [generated in 0.00018s] (2,)\n</code></pre> </li> <li> <p>Print the updated hero object.</p> <p>This generates the output:</p> <pre><code>Updated hero: name='Spider-Boy' secret_name='Pedro Parqueador' age=16 id=2\n</code></pre> </li> </ol> <p>Tip</p> <p>\u67e5\u770b\u6bcf\u884c\u4ee3\u7801\u65c1\u8fb9\u7684\u6570\u5b57\u6c14\u6ce1\uff0c\u4e86\u89e3\u6bcf\u884c\u4ee3\u7801\u7684\u4f5c\u7528\u3002</p>"},{"location":"tutorial/update/#_9","title":"\u591a\u6b21\u66f4\u65b0","text":"<p>\u4f7f\u7528 SQLModel \u8fdb\u884c\u66f4\u65b0\u7684\u8fc7\u7a0b\u4e0e\u521b\u5efa\u65b0\u5bf9\u8c61\u7684\u8fc7\u7a0b\u5dee\u4e0d\u591a\uff0c\u4f60\u53ea\u9700\u8981\u5c06\u5b83\u4eec\u6dfb\u52a0\u5230\u4f1a\u8bdd\u4e2d\uff0c\u7136\u540e\u63d0\u4ea4\u5b83\u4eec\u3002</p> <p>\u8fd9\u4e5f\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u4e00\u6b21\u66f4\u65b0\u591a\u4e2a\u5b57\u6bb5\uff08\u5c5e\u6027\uff0c\u5217\uff09\uff0c\u5e76\u4e14\u8fd8\u53ef\u4ee5\u4e00\u6b21\u66f4\u65b0\u591a\u4e2a\u5bf9\u8c61\uff08\u82f1\u96c4\uff09\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")  # (1)!\n        results = session.exec(statement)  # (2)!\n        hero_1 = results.one()  # (3)!\n        print(\"Hero 1:\", hero_1)  # (4)!\n\n        statement = select(Hero).where(Hero.name == \"Captain North America\")  # (5)!\n        results = session.exec(statement)  # (6)!\n        hero_2 = results.one()  # (7)!\n        print(\"Hero 2:\", hero_2)  # (8)!\n\n        hero_1.age = 16  # (9)!\n        hero_1.name = \"Spider-Youngster\"  # (10)!\n        session.add(hero_1)  # (11)!\n\n        hero_2.name = \"Captain North America Except Canada\"  # (12)!\n        hero_2.age = 110  # (13)!\n        session.add(hero_2)  # (14)!\n\n        session.commit()  # (15)!\n        session.refresh(hero_1)  # (16)!\n        session.refresh(hero_2)  # (17)!\n\n        print(\"Updated hero 1:\", hero_1)  # (18)!\n        print(\"Updated hero 2:\", hero_2)  # (19)!\n    # (20)!\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <ol> <li> <p>Select the hero <code>Spider-Boy</code>.</p> </li> <li> <p>Execute the select statement.</p> <p>This generates the output:</p> <pre><code>INFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.name = ?\nINFO Engine [no key 0.00018s] ('Spider-Boy',)\n</code></pre> </li> <li> <p>Get one hero object, the only one that should be there for Spider-Boy.</p> </li> <li> <p>Print this hero.</p> <p>This generates the output:</p> <pre><code>Hero 1: name='Spider-Boy' secret_name='Pedro Parqueador' age=None id=2\n</code></pre> </li> <li> <p>Select another hero.</p> </li> <li> <p>Execute the select statement.</p> <p>This generates the output:</p> <pre><code>INFO Engine BEGIN (implicit)\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.name = ?\nINFO Engine [no key 0.00020s] ('Captain North America',)\n</code></pre> <p>Tip</p> <p>See the <code>BEGIN</code> at the top?</p> <p>This is SQLAlchemy automatically starting a transaction for us.</p> <p>This way, we could revert the last changes (if there were some) if we wanted to, even if the SQL to create them was already sent to the database.</p> </li> <li> <p>Get one hero object for this new query.</p> <p>The only one that should be there for Captain North America.</p> </li> <li> <p>Print this second hero.</p> <p>This generates the output:</p> <pre><code>Hero 2: name='Captain North America' secret_name='Esteban Rogelios' age=93 id=7\n</code></pre> </li> <li> <p>Update the age for the first hero.</p> <p>Set the value of the attribute <code>age</code> to <code>16</code>.</p> <p>This updates the hero object in memory, but not yet in the database.</p> </li> <li> <p>Update the name of the first hero.</p> <p>Now the name of the hero will not be <code>\"Spider-Boy\"</code> but <code>\"Spider-Youngster\"</code>.</p> <p>Also, this updates the object in memory, but not yet in the database.</p> </li> <li> <p>Add this first hero to the session.</p> <p>This puts it in the temporary space in the session before committing it to the database.</p> <p>It is not saved yet.</p> </li> <li> <p>Update the name of the second hero.</p> <p>Now the hero has a bit more precision in the name. \ud83d\ude1c</p> <p>This updates the object in memory, but not yet in the database.</p> </li> <li> <p>Update the age of the second hero.</p> <p>This updates the object in memory, but not yet in the database.</p> </li> <li> <p>Add the second hero to the session.</p> <p>This puts it in the temporary space in the session before committing it to the database.</p> </li> <li> <p>Commit all the changes tracked in the session.</p> <p>This commits everything in one single batch.</p> <p>This generates the output:</p> <pre><code>INFO Engine UPDATE hero SET name=?, age=? WHERE hero.id = ?\nINFO Engine [generated in 0.00028s] (('Spider-Youngster', 16, 2), ('Captain North America Except Canada', 110, 7))\nINFO Engine COMMIT\n</code></pre> <p>Tip</p> <p>See how SQLAlchemy (that powers SQLModel) optimizes the SQL to do as much work as possible in a single batch.</p> <p>Here it updates both heroes in a single SQL query.</p> </li> <li> <p>Refresh the first hero.</p> <p>This generates the output:</p> <pre><code>INFO Engine BEGIN (implicit)\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [generated in 0.00023s] (2,)\n</code></pre> <p>Tip</p> <p>Because we just committed a SQL transaction with <code>COMMIT</code>, SQLAlchemy will automatically start a new transaction with <code>BEGIN</code>.</p> </li> <li> <p>Refresh the second hero.</p> <p>This generates the output:</p> <pre><code>INFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.001709s ago] (7,)\n</code></pre> <p>Tip</p> <p>SQLAlchemy is still using the previous transaction, so it doesn't have to create a new one.</p> </li> <li> <p>Print the first hero, now updated.</p> <p>This generates the output:</p> <pre><code>Updated hero 1: name='Spider-Youngster' secret_name='Pedro Parqueador' age=16 id=2\n</code></pre> </li> <li> <p>Print the second hero, now updated.</p> <p>This generates the output:</p> <pre><code>Updated hero 2: name='Captain North America Except Canada' secret_name='Esteban Rogelios' age=110 id=7\n</code></pre> </li> <li> <p>Here is the end of the <code>with</code> block statement, so the session can execute its terminating code.</p> <p>The session will <code>ROLLBACK</code> (undo) any possible changes in the last transaction that were not committed.</p> <p>This generates the output:</p> <pre><code>INFO Engine ROLLBACK\n</code></pre> </li> </ol> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")  # (1)!\n        results = session.exec(statement)  # (2)!\n        hero_1 = results.one()  # (3)!\n        print(\"Hero 1:\", hero_1)  # (4)!\n\n        statement = select(Hero).where(Hero.name == \"Captain North America\")  # (5)!\n        results = session.exec(statement)  # (6)!\n        hero_2 = results.one()  # (7)!\n        print(\"Hero 2:\", hero_2)  # (8)!\n\n        hero_1.age = 16  # (9)!\n        hero_1.name = \"Spider-Youngster\"  # (10)!\n        session.add(hero_1)  # (11)!\n\n        hero_2.name = \"Captain North America Except Canada\"  # (12)!\n        hero_2.age = 110  # (13)!\n        session.add(hero_2)  # (14)!\n\n        session.commit()  # (15)!\n        session.refresh(hero_1)  # (16)!\n        session.refresh(hero_2)  # (17)!\n\n        print(\"Updated hero 1:\", hero_1)  # (18)!\n        print(\"Updated hero 2:\", hero_2)  # (19)!\n    # (20)!\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <ol> <li> <p>Select the hero <code>Spider-Boy</code>.</p> </li> <li> <p>Execute the select statement.</p> <p>This generates the output:</p> <pre><code>INFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.name = ?\nINFO Engine [no key 0.00018s] ('Spider-Boy',)\n</code></pre> </li> <li> <p>Get one hero object, the only one that should be there for Spider-Boy.</p> </li> <li> <p>Print this hero.</p> <p>This generates the output:</p> <pre><code>Hero 1: name='Spider-Boy' secret_name='Pedro Parqueador' age=None id=2\n</code></pre> </li> <li> <p>Select another hero.</p> </li> <li> <p>Execute the select statement.</p> <p>This generates the output:</p> <pre><code>INFO Engine BEGIN (implicit)\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.name = ?\nINFO Engine [no key 0.00020s] ('Captain North America',)\n</code></pre> <p>Tip</p> <p>See the <code>BEGIN</code> at the top?</p> <p>This is SQLAlchemy automatically starting a transaction for us.</p> <p>This way, we could revert the last changes (if there were some) if we wanted to, even if the SQL to create them was already sent to the database.</p> </li> <li> <p>Get one hero object for this new query.</p> <p>The only one that should be there for Captain North America.</p> </li> <li> <p>Print this second hero.</p> <p>This generates the output:</p> <pre><code>Hero 2: name='Captain North America' secret_name='Esteban Rogelios' age=93 id=7\n</code></pre> </li> <li> <p>Update the age for the first hero.</p> <p>Set the value of the attribute <code>age</code> to <code>16</code>.</p> <p>This updates the hero object in memory, but not yet in the database.</p> </li> <li> <p>Update the name of the first hero.</p> <p>Now the name of the hero will not be <code>\"Spider-Boy\"</code> but <code>\"Spider-Youngster\"</code>.</p> <p>Also, this updates the object in memory, but not yet in the database.</p> </li> <li> <p>Add this first hero to the session.</p> <p>This puts it in the temporary space in the session before committing it to the database.</p> <p>It is not saved yet.</p> </li> <li> <p>Update the name of the second hero.</p> <p>Now the hero has a bit more precision in the name. \ud83d\ude1c</p> <p>This updates the object in memory, but not yet in the database.</p> </li> <li> <p>Update the age of the second hero.</p> <p>This updates the object in memory, but not yet in the database.</p> </li> <li> <p>Add the second hero to the session.</p> <p>This puts it in the temporary space in the session before committing it to the database.</p> </li> <li> <p>Commit all the changes tracked in the session.</p> <p>This commits everything in one single batch.</p> <p>This generates the output:</p> <pre><code>INFO Engine UPDATE hero SET name=?, age=? WHERE hero.id = ?\nINFO Engine [generated in 0.00028s] (('Spider-Youngster', 16, 2), ('Captain North America Except Canada', 110, 7))\nINFO Engine COMMIT\n</code></pre> <p>Tip</p> <p>See how SQLAlchemy (that powers SQLModel) optimizes the SQL to do as much work as possible in a single batch.</p> <p>Here it updates both heroes in a single SQL query.</p> </li> <li> <p>Refresh the first hero.</p> <p>This generates the output:</p> <pre><code>INFO Engine BEGIN (implicit)\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [generated in 0.00023s] (2,)\n</code></pre> <p>Tip</p> <p>Because we just committed a SQL transaction with <code>COMMIT</code>, SQLAlchemy will automatically start a new transaction with <code>BEGIN</code>.</p> </li> <li> <p>Refresh the second hero.</p> <p>This generates the output:</p> <pre><code>INFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.001709s ago] (7,)\n</code></pre> <p>Tip</p> <p>SQLAlchemy is still using the previous transaction, so it doesn't have to create a new one.</p> </li> <li> <p>Print the first hero, now updated.</p> <p>This generates the output:</p> <pre><code>Updated hero 1: name='Spider-Youngster' secret_name='Pedro Parqueador' age=16 id=2\n</code></pre> </li> <li> <p>Print the second hero, now updated.</p> <p>This generates the output:</p> <pre><code>Updated hero 2: name='Captain North America Except Canada' secret_name='Esteban Rogelios' age=110 id=7\n</code></pre> </li> <li> <p>Here is the end of the <code>with</code> block statement, so the session can execute its terminating code.</p> <p>The session will <code>ROLLBACK</code> (undo) any possible changes in the last transaction that were not committed.</p> <p>This generates the output:</p> <pre><code>INFO Engine ROLLBACK\n</code></pre> </li> </ol> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")  # (1)!\n        results = session.exec(statement)  # (2)!\n        hero_1 = results.one()  # (3)!\n        print(\"Hero 1:\", hero_1)  # (4)!\n\n        statement = select(Hero).where(Hero.name == \"Captain North America\")  # (5)!\n        results = session.exec(statement)  # (6)!\n        hero_2 = results.one()  # (7)!\n        print(\"Hero 2:\", hero_2)  # (8)!\n\n        hero_1.age = 16  # (9)!\n        hero_1.name = \"Spider-Youngster\"  # (10)!\n        session.add(hero_1)  # (11)!\n\n        hero_2.name = \"Captain North America Except Canada\"  # (12)!\n        hero_2.age = 110  # (13)!\n        session.add(hero_2)  # (14)!\n\n        session.commit()  # (15)!\n        session.refresh(hero_1)  # (16)!\n        session.refresh(hero_2)  # (17)!\n\n        print(\"Updated hero 1:\", hero_1)  # (18)!\n        print(\"Updated hero 2:\", hero_2)  # (19)!\n    # (20)!\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")  # (1)!\n        results = session.exec(statement)  # (2)!\n        hero_1 = results.one()  # (3)!\n        print(\"Hero 1:\", hero_1)  # (4)!\n\n        statement = select(Hero).where(Hero.name == \"Captain North America\")  # (5)!\n        results = session.exec(statement)  # (6)!\n        hero_2 = results.one()  # (7)!\n        print(\"Hero 2:\", hero_2)  # (8)!\n\n        hero_1.age = 16  # (9)!\n        hero_1.name = \"Spider-Youngster\"  # (10)!\n        session.add(hero_1)  # (11)!\n\n        hero_2.name = \"Captain North America Except Canada\"  # (12)!\n        hero_2.age = 110  # (13)!\n        session.add(hero_2)  # (14)!\n\n        session.commit()  # (15)!\n        session.refresh(hero_1)  # (16)!\n        session.refresh(hero_2)  # (17)!\n\n        print(\"Updated hero 1:\", hero_1)  # (18)!\n        print(\"Updated hero 2:\", hero_2)  # (19)!\n    # (20)!\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Tip</p> <p>\u70b9\u51fb\u6bcf\u4e2a\u6570\u5b57\u6c14\u6ce1\uff0c\u56de\u987e\u6bcf\u884c\u4ee3\u7801\u7684\u4f5c\u7528\u3002\ud83d\udc46</p>"},{"location":"tutorial/update/#_10","title":"\u603b\u7ed3","text":"<p>\u66f4\u65b0 SQLModel \u5bf9\u8c61\u7684\u65b9\u5f0f\u4e0e\u66f4\u65b0\u5176\u4ed6 Python \u5bf9\u8c61\u76f8\u540c\u3002\ud83d\udc0d</p> <p>\u53ea\u9700\u8981\u8bb0\u5f97\u5c06\u5b83\u4eec <code>add</code> \u5230 \u4f1a\u8bdd \u4e2d\uff0c\u7136\u540e\u6267\u884c <code>commit</code>\u3002\u5982\u679c\u9700\u8981\uff0c\u8fd8\u53ef\u4ee5\u6267\u884c <code>refresh</code> \u6765\u5237\u65b0\u5b83\u4eec\u3002</p>"},{"location":"tutorial/where/","title":"\u8fc7\u6ee4\u6570\u636e - WHERE","text":"<p>\u5728\u4e0a\u4e00\u7ae0\u4e2d\uff0c\u6211\u4eec\u5b66\u4e60\u4e86\u5982\u4f55\u4ece\u6570\u636e\u5e93\u4e2d <code>SELECT</code> \u6570\u636e\u3002</p> <p>\u6211\u4eec\u4f7f\u7528\u4e86\u7eaf SQL \u548c SQLModel\u3002</p> <p>\u4f46\u6211\u4eec\u59cb\u7ec8\u662f\u83b7\u53d6\u4e86\u6240\u6709\u7684\u884c\uff0c\u5373\u6574\u4e2a\u8868\uff1a</p> idnamesecret_nameage 1DeadpondDive Wilsonnull 2Spider-BoyPedro Parqueadornull 3Rusty-ManTommy Sharp48 <p>\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ea\u60f3\u83b7\u53d6\u4e00\u884c\u6570\u636e\uff0c\u6216\u8005\u4ec5\u83b7\u53d6\u4e00\u7ec4\u884c\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u5c06\u5b66\u4e60\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u901a\u8fc7\u8fc7\u6ee4\u6570\u636e\uff0c\u53ea\u83b7\u53d6 \u6ee1\u8db3\u6761\u4ef6 \u7684\u884c\u3002</p>"},{"location":"tutorial/where/#_1","title":"\u4ece\u4e4b\u524d\u7684\u4ee3\u7801\u7ee7\u7eed","text":"<p>\u6211\u4eec\u5c06\u7ee7\u7eed\u4f7f\u7528\u4e4b\u524d\u7ae0\u8282\u4e2d\u521b\u5efa\u548c\u9009\u62e9\u6570\u636e\u65f6\u4f7f\u7528\u7684\u76f8\u540c\u793a\u4f8b\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u5c06\u66f4\u65b0 <code>select_heroes()</code> \u6765\u8fc7\u6ee4\u6570\u636e\u3002</p> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u5982\u679c\u4f60\u5df2\u7ecf\u6267\u884c\u4e86\u4e4b\u524d\u7684\u793a\u4f8b\u5e76\u4e14\u6709\u4e00\u4e2a\u5305\u542b\u6570\u636e\u7684\u6570\u636e\u5e93\uff0c\u5728\u8fd0\u884c\u6bcf\u4e2a\u793a\u4f8b\u4e4b\u524d \u5220\u9664\u6570\u636e\u5e93\u6587\u4ef6\uff0c\u8fd9\u6837\u4f60\u5c31\u4e0d\u4f1a\u6709\u91cd\u590d\u7684\u6570\u636e\uff0c\u5e76\u4e14\u80fd\u591f\u5f97\u5230\u76f8\u540c\u7684\u7ed3\u679c\u3002</p>"},{"location":"tutorial/where/#sql","title":"\u4f7f\u7528 SQL \u8fc7\u6ee4\u6570\u636e","text":"<p>\u9996\u5148\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u4f7f\u7528 SQL \u548c <code>WHERE</code> \u5173\u952e\u5b57\u6765\u8fc7\u6ee4\u6570\u636e\u3002</p> <pre><code>SELECT id, name, secret_name, age\nFROM hero\nWHERE name = \"Deadpond\"\n</code></pre> <p>\u7b2c\u4e00\u90e8\u5206\u7684\u542b\u4e49\u4e0e\u4e4b\u524d\u76f8\u540c\uff1a</p> <p>\u563f\uff0cSQL \u6570\u636e\u5e93 \ud83d\udc4b\uff0c\u8bf7\u5e2e\u6211 <code>SELECT</code> \u4e00\u4e9b\u6570\u636e\u3002</p> <p>\u6211\u5148\u544a\u8bc9\u4f60\u6211\u60f3\u8981\u54ea\u4e9b\u5217\uff1a</p> <ul> <li><code>id</code></li> <li><code>name</code></li> <li><code>secret_name</code></li> <li><code>age</code></li> </ul> <p>\u5e76\u4e14\u6211\u5e0c\u671b\u4f60\u4ece\u540d\u4e3a <code>\"hero\"</code> \u7684\u8868\u4e2d\u83b7\u53d6\u8fd9\u4e9b\u5217\u3002</p> <p>\u7136\u540e\uff0c<code>WHERE</code> \u5173\u952e\u5b57\u52a0\u5165\u4e86\u4ee5\u4e0b\u6761\u4ef6\uff1a</p> <p>\u6240\u4ee5\uff0cSQL \u6570\u636e\u5e93\uff0c\u6211\u5df2\u7ecf\u544a\u8bc9\u4f60\u8981 <code>SELECT</code> \u54ea\u4e9b\u5217\uff0c\u4ee5\u53ca\u4ece\u54ea\u91cc\u9009\u62e9\u3002 \u4f46\u6211\u4e0d\u5e0c\u671b\u4f60\u8fd4\u56de\u6240\u6709\u7684\u884c\uff0c\u6211\u53ea\u60f3\u8981\u90a3\u4e9b <code>name</code> \u5217\u7684\u503c\u4e3a <code>\"Deadpond\"</code> \u7684\u884c\u3002</p> <p>\u7136\u540e\uff0c\u6570\u636e\u5e93\u5c06\u8fd4\u56de\u5982\u4e0b\u8868\u683c\uff1a</p> idnamesecret_nameage 1DeadpondDive Wilsonnull <p>Tip</p> <p>\u5373\u4f7f\u7ed3\u679c\u53ea\u6709\u4e00\u884c\uff0c\u6570\u636e\u5e93\u4ecd\u7136\u4f1a\u8fd4\u56de\u4e00\u4e2a \u8868\u683c\u3002</p> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8868\u683c\u53ea\u6709\u4e00\u884c\u3002</p> <p>\u4f60\u53ef\u4ee5\u5728 DB Browser for SQLite \u4e2d\u8bd5\u4e00\u4e0b\uff1a</p> <p></p>"},{"location":"tutorial/where/#where-from","title":"<code>WHERE</code> \u548c <code>FROM</code> \u662f\u201c\u5b50\u53e5\u201d","text":"<p>\u8fd9\u4e9b\u9644\u52a0\u7684\u5173\u952e\u5b57\uff0c\u5982 <code>WHERE</code> \u548c <code>FROM</code>\uff0c\u662f\u7d27\u8ddf\u5728 <code>SELECT</code>\uff08\u6216\u5176\u4ed6\u5173\u952e\u5b57\uff09\u540e\u9762\u7684\u90e8\u5206\uff0c\u5b83\u4eec\u6709\u4e00\u4e2a\u6280\u672f\u540d\u8bcd\uff0c\u53eb\u505a \u5b50\u53e5\u3002</p> <p>\u8fd8\u6709\u5176\u4ed6\u7684\u5b50\u53e5\uff0c\u5b83\u4eec\u6709\u81ea\u5df1\u7684 SQL \u5173\u952e\u5b57\u3002</p> <p>\u5728\u8fd9\u91cc\u6211\u4e0d\u4f1a\u8fc7\u591a\u4f7f\u7528 \u5b50\u53e5 \u8fd9\u4e2a\u672f\u8bed\uff0c\u4f46\u4e86\u89e3\u5b83\u5bf9\u4f60\u6709\u5e2e\u52a9\uff0c\u56e0\u4e3a\u5b83\u53ef\u80fd\u4f1a\u51fa\u73b0\u5728\u4f60\u4ee5\u540e\u9605\u8bfb\u7684\u5176\u4ed6\u6559\u7a0b\u4e2d\u3002\ud83e\udd13</p>"},{"location":"tutorial/where/#select-where","title":"<code>SELECT</code> \u548c <code>WHERE</code>","text":"<p>\u8fd9\u662f\u4e00\u4e2a\u5e2e\u52a9\u6211\u7406\u89e3\u7684\u5feb\u901f\u6280\u5de7\u3002</p> <ul> <li><code>SELECT</code> \u7528\u6765\u544a\u8bc9 SQL \u6570\u636e\u5e93\u8fd4\u56de\u54ea\u4e9b \u5217\u3002</li> <li><code>WHERE</code> \u7528\u6765\u544a\u8bc9 SQL \u6570\u636e\u5e93\u8fd4\u56de\u54ea\u4e9b \u884c\u3002</li> </ul> <p>\u8868\u683c\u7684\u4e24\u79cd\u7ef4\u5ea6\u7684\u5927\u5c0f\u4e3b\u8981\u53d6\u51b3\u4e8e\u8fd9\u4e24\u4e2a\u5173\u952e\u5b57\u3002</p>"},{"location":"tutorial/where/#select","title":"<code>SELECT</code> \u533a\u57df","text":"<p>\u5982\u679c\u8868\u683c\u6709\u592a\u591a\u6216\u592a\u5c11\u7684 \u5217\uff0c\u90a3\u662f\u5728 <code>SELECT</code> \u90e8\u5206\u4fee\u6539\u7684\u3002</p> <p>\u5047\u8bbe\u6709\u4e00\u4e2a\u8868\u683c\uff1a</p> idnamesecret_nameage 1DeadpondDive Wilsonnull 2Spider-BoyPedro Parqueadornull 3Rusty-ManTommy Sharp48 <p>...\u5982\u679c\u6539\u53d8 \u5217 \u7684\u6570\u91cf\uff1a</p> name Deadpond Spider-Boy Rusty-Man <p>...\u8fd9\u5c31\u662f <code>SELECT</code> \u533a\u57df\u3002</p>"},{"location":"tutorial/where/#where","title":"<code>WHERE</code> \u533a\u57df","text":"<p>\u5982\u679c\u8868\u683c\u6709\u592a\u591a\u6216\u592a\u5c11\u7684 \u884c\uff0c\u90a3\u662f\u5728 <code>WHERE</code> \u90e8\u5206\u4fee\u6539\u7684\u3002</p> <p>\u5047\u8bbe\u6709\u4e00\u4e2a\u8868\u683c\uff1a</p> idnamesecret_nameage 1DeadpondDive Wilsonnull 2Spider-BoyPedro Parqueadornull 3Rusty-ManTommy Sharp48 <p>...\u5982\u679c\u6539\u53d8 \u884c \u7684\u6570\u91cf\uff1a</p> idnamesecret_nameage 2Spider-BoyPedro Parqueadornull <p>...\u8fd9\u5c31\u662f <code>WHERE</code> \u533a\u57df\u3002</p>"},{"location":"tutorial/where/#sqlmodel-select","title":"\u56de\u987e\u4f7f\u7528 SQLModel \u7684 <code>SELECT</code>","text":"<p>\u8ba9\u6211\u4eec\u56de\u987e\u4e00\u4e0b\u6211\u4eec\u7528\u6765\u8bfb\u53d6\u6570\u636e\u7684\u90e8\u5206\u4ee3\u7801\uff0c\u91cd\u70b9\u5173\u6ce8 select \u8bed\u53e5\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u7701\u7565\u4e0a\u9762\u7684\u4ee3\u7801 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# \u7701\u7565\u4e0b\u9762\u7684\u4ee3\u7801 \ud83d\udc47\n</code></pre> <pre><code># \u7701\u7565\u4e0a\u9762\u7684\u4ee3\u7801 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# \u7701\u7565\u4e0b\u9762\u7684\u4ee3\u7801 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/where/#sqlmodel-where","title":"\u4f7f\u7528 SQLModel \u7684 <code>WHERE</code> \u8fc7\u6ee4\u884c","text":"<p>\u73b0\u5728\uff0c\u5c31\u50cf\u6211\u4eec\u5728 SQL \u8bed\u53e5\u4e2d\u6dfb\u52a0 <code>WHERE</code> \u6765\u8fc7\u6ee4\u884c\u4e00\u6837\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5728 SQLModel \u7684 <code>select()</code> \u8bed\u53e5\u4e2d\u6dfb\u52a0 <code>.where()</code> \u6765\u8fc7\u6ee4\u884c\uff0c\u4ece\u800c\u8fc7\u6ee4\u8fd4\u56de\u7684\u5bf9\u8c61\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u7701\u7565\u4e0a\u9762\u7684\u4ee3\u7801 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# \u7701\u7565\u4e0b\u9762\u7684\u4ee3\u7801 \ud83d\udc47\n</code></pre> <pre><code># \u7701\u7565\u4e0a\u9762\u7684\u4ee3\u7801 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# \u7701\u7565\u4e0b\u9762\u7684\u4ee3\u7801 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u8fd9\u53ea\u662f\u4e00\u4e2a\u975e\u5e38\u5c0f\u7684\u6539\u53d8\uff0c\u4f46\u5176\u4e2d\u5305\u542b\u4e86\u8bb8\u591a\u7ec6\u8282\u3002\u8ba9\u6211\u4eec\u6765\u63a2\u8ba8\u4e00\u4e0b\u3002</p>"},{"location":"tutorial/where/#select_1","title":"<code>select()</code> \u5bf9\u8c61","text":"<p><code>select(Hero)</code> \u8fd4\u56de\u7684\u5bf9\u8c61\u662f\u4e00\u4e2a\u5177\u6709\u4e00\u4e9b\u65b9\u6cd5\u7684\u7279\u6b8a\u7c7b\u578b\u5bf9\u8c61\u3002</p> <p>\u5176\u4e2d\u4e00\u4e2a\u65b9\u6cd5\u662f <code>.where()</code>\uff0c\u7528\u4e8e\uff08\u4e0d\u51fa\u6240\u6599\uff09\u5411 SQL \u8bed\u53e5\u4e2d\u6dfb\u52a0 <code>WHERE</code> \u6761\u4ef6\uff0c\u5728\u8be5 select \u5bf9\u8c61\u4e2d\u8fdb\u884c\u8fc7\u6ee4\u3002</p> <p>\u6211\u4eec\u5c06\u7a0d\u540e\u63a2\u7d22\u5176\u4ed6\u65b9\u6cd5\u3002\ud83d\udca1</p> <p>\u8fd9\u4e9b\u65b9\u6cd5\u4e2d\u7684\u5927\u591a\u6570\u5728\u4fee\u6539\u5bf9\u8c61\u540e\u4f1a\u8fd4\u56de\u76f8\u540c\u7684\u5bf9\u8c61\u3002</p> <p>\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4e00\u4e2a\u63a5\u4e00\u4e2a\u5730\u8c03\u7528\u5b83\u4eec\uff1a</p> <pre><code>statement = select(Hero).where(Hero.name == \"Deadpond\").where(Hero.age == 48)\n</code></pre>"},{"location":"tutorial/where/#where_1","title":"\u8c03\u7528 <code>.where()</code>","text":"<p>\u73b0\u5728\uff0c\u8fd9\u4e2a <code>.where()</code> \u65b9\u6cd5\u662f\u7279\u522b\u4e14\u975e\u5e38\u5f3a\u5927\u7684\u3002\u5b83\u4e0e SQLModel\uff08\u5b9e\u9645\u4e0a\u662f SQLAlchemy\uff09\u7d27\u5bc6\u96c6\u6210\uff0c\u8ba9\u4f60\u53ef\u4ee5\u4f7f\u7528\u975e\u5e38\u719f\u6089\u7684 Python \u8bed\u6cd5\u548c\u4ee3\u7801\u3002</p> <p>\u6ce8\u610f\uff0c\u6211\u4eec\u6ca1\u6709\u4f7f\u7528\u5355\u4e2a\u7b49\u53f7 (<code>=</code>) \u6765\u8c03\u7528\u5b83\uff0c\u4e5f\u6ca1\u6709\u50cf\u8fd9\u6837\u5199\uff1a</p> <pre><code># \u4e0d\u652f\u6301 \ud83d\udea8\nselect(Hero).where(name=\"Deadpond\")\n</code></pre> <p>\u8fd9\u6837\u5f53\u7136\u4f1a\u66f4\u7b80\u6d01\uff0c\u4f46\u4f1a\u66f4\u52a0\u5bb9\u6613\u51fa\u9519\u4e14\u6709\u9650\u5236\u3002\u7a0d\u540e\u6211\u4f1a\u5411\u4f60\u5c55\u793a\u539f\u56e0\u3002</p> <p>\u76f8\u53cd\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u4e24\u4e2a <code>==</code>\uff1a</p> <pre><code>select(Hero).where(Hero.name == \"Deadpond\")\n</code></pre> <p>\u90a3\u4e48\uff0c\u8fd9\u91cc\u5230\u5e95\u53d1\u751f\u4e86\u4ec0\u4e48\uff1f</p>"},{"location":"tutorial/where/#where_2","title":"<code>.where()</code> \u548c\u8868\u8fbe\u5f0f","text":"<p>\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u4e24\u4e2a\u7b49\u53f7 (<code>==</code>)\u3002\u8fd9\u53eb\u505a \"\u7b49\u4e8e\u8fd0\u7b97\u7b26\"\u3002</p> <p>/// \u63d0\u793a</p> <p>\u8fd0\u7b97\u7b26 \u53ea\u662f\u4e00\u4e2a\u7b26\u53f7\uff0c\u5b83\u653e\u5728\u4e00\u4e2a\u503c\u65c1\u8fb9\uff0c\u6216\u8005\u4e24\u4e2a\u503c\u4e4b\u95f4\uff0c\u7528\u6765\u5bf9\u5b83\u4eec\u8fdb\u884c\u64cd\u4f5c\u3002</p> <p><code>==</code> \u88ab\u79f0\u4e3a \u7b49\u4e8e \u8fd0\u7b97\u7b26\uff0c\u56e0\u4e3a\u5b83\u68c0\u67e5\u4e24\u4e2a\u4e1c\u897f\u662f\u5426 \u76f8\u7b49\u3002</p> <p>///</p> <p>\u5728\u7f16\u5199 Python \u4ee3\u7801\u65f6\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u8fd9\u4e2a\u7b49\u4e8e\u8fd0\u7b97\u7b26 (<code>==</code>) \u8fd9\u6837\u5199\uff1a</p> <pre><code>some_name == \"Deadpond\"\n</code></pre> <p>...\u8fd9\u53eb\u505a \u76f8\u7b49\u6bd4\u8f83\uff0c\u901a\u5e38\u7ed3\u679c\u662f\uff1a</p> <pre><code>True\n</code></pre> <p>...\u6216\u8005\uff1a</p> <pre><code>False\n</code></pre> <p>/// \u63d0\u793a</p> <p><code>&lt;</code>, <code>&gt;</code>, <code>==</code>, <code>&gt;=</code>, <code>&lt;=</code>, \u548c <code>!=</code> \u90fd\u662f\u7528\u4e8e \u6bd4\u8f83 \u7684 \u8fd0\u7b97\u7b26\u3002</p> <p>///</p> <p>\u4f46\u662f\uff0cSQLAlchemy \u7ed9\u6a21\u578b\u7c7b\u4e2d\u7684\u5217/\u5b57\u6bb5\u6dfb\u52a0\u4e86\u4e00\u4e9b\u9b54\u6cd5\uff0c\u4f7f\u5f97\u8fd9\u4e9b Python \u6bd4\u8f83\u5177\u6709\u8d85\u7ea7\u80fd\u529b\u3002</p> <p>\u6240\u4ee5\uff0c\u5982\u679c\u4f60\u5199\u51fa\u7c7b\u4f3c\u4e8e\uff1a</p> <pre><code>Hero.name == \"Deadpond\"\n</code></pre> <p>...\u8fd9\u5e76\u4e0d\u4f1a\u8fd4\u56de <code>True</code> \u6216 <code>False</code>\u3002\ud83e\udd2f</p> <p>\u76f8\u53cd\uff0c\u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u7279\u6b8a\u7c7b\u578b\u7684\u5bf9\u8c61\u3002\u5982\u679c\u4f60\u5728\u4ea4\u4e92\u5f0f Python \u4f1a\u8bdd\u4e2d\u5c1d\u8bd5\u8fd9\u4e2a\uff0c\u4f60\u4f1a\u770b\u5230\u7c7b\u4f3c\u8fd9\u6837\u7684\u8f93\u51fa\uff1a</p> <pre><code>&gt;&gt;&gt; Hero.name == \"Deadpond\"\n&lt;sqlalchemy.sql.elements.BinaryExpression object at 0x7f4aec0d6c90&gt;\n</code></pre> <p>\u6240\u4ee5\uff0c\u7ed3\u679c\u503c\u662f\u4e00\u4e2a \u8868\u8fbe\u5f0f \u5bf9\u8c61\u3002\ud83d\udca1</p> <p>\u800c <code>.where()</code> \u65b9\u6cd5\u5219\u63a5\u53d7\u4e00\u4e2a\uff08\u6216\u591a\u4e2a\uff09\u8fd9\u79cd \u8868\u8fbe\u5f0f \u5bf9\u8c61\u6765\u66f4\u65b0 SQL \u8bed\u53e5\u3002</p>"},{"location":"tutorial/where/#_2","title":"\u6a21\u578b\u7c7b\u5c5e\u6027\u3001\u8868\u8fbe\u5f0f\u548c\u5b9e\u4f8b","text":"<p>\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u505c\u4e0b\u6765\u505a\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u4e14\u5bb9\u6613\u5ffd\u89c6\u7684\u6e05\u6670\u533a\u5206\u3002</p> <p>\u6a21\u578b\u7c7b\u5c5e\u6027 \u5bf9\u4e8e\u6bcf\u4e2a\u5217/\u5b57\u6bb5\u6765\u8bf4\u662f\u7279\u522b\u7684\uff0c\u53ef\u4ee5\u7528\u4e8e\u8868\u8fbe\u5f0f\u3002</p> <p>\u4f46\u8fd9\u4ec5\u9002\u7528\u4e8e \u6a21\u578b\u7c7b\u5c5e\u6027\u3002\ud83d\udea8</p> <p>\u5b9e\u4f8b \u5c5e\u6027\u5219\u50cf\u666e\u901a\u7684 Python \u503c\u4e00\u6837\u8868\u73b0\u3002\u2705</p> <p>\u56e0\u6b64\uff0c\u5728 Python \u6bd4\u8f83\u4e2d\u4f7f\u7528\u7c7b\uff08<code>Hero</code>\uff0c\u9996\u5b57\u6bcd\u5927\u5199\uff09\uff1a</p> <pre><code>Hero.name == \"Deadpond\"\n</code></pre> <p>...\u7ed3\u679c\u662f\u4e00\u4e2a \u8868\u8fbe\u5f0f \u5bf9\u8c61\uff0c\u7528\u4e8e <code>.where()</code>\uff1a</p> <pre><code>&lt;sqlalchemy.sql.elements.BinaryExpression object at 0x7f4aec0d6c90&gt;\n</code></pre> <p>\u4f46\u662f\uff0c\u5982\u679c\u4f60\u521b\u5efa\u4e00\u4e2a\u5b9e\u4f8b\uff1a</p> <pre><code>some_hero = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n</code></pre> <p>...\u5e76\u5728\u6bd4\u8f83\u4e2d\u4f7f\u7528\u5b83\uff1a</p> <pre><code>some_hero.name == \"Deadpond\"\n</code></pre> <p>...\u8fd9\u5c06\u8fd4\u56de\u4e00\u4e2a Python \u503c\uff1a</p> <pre><code>True\n</code></pre> <p>...\u6216\u8005\u5982\u679c\u5b83\u662f\u4e00\u4e2a\u5177\u6709\u4e0d\u540c\u540d\u79f0\u7684\u5bf9\u8c61\uff0c\u5b83\u53ef\u80fd\u662f\uff1a</p> <pre><code>False\n</code></pre> <p>\u533a\u522b\u5728\u4e8e\uff0c\u4e00\u4e2a\u662f\u4f7f\u7528 \u6a21\u578b\u7c7b\uff0c\u53e6\u4e00\u4e2a\u662f\u4f7f\u7528 \u5b9e\u4f8b\u3002</p>"},{"location":"tutorial/where/#_3","title":"\u7c7b\u8fd8\u662f\u5b9e\u4f8b","text":"<p>\u4f60\u5f88\u53ef\u80fd\u6700\u7ec8\u4f1a\u6709\u4e00\u4e2a\u540d\u4e3a <code>hero</code>\uff08\u5c0f\u5199 <code>h</code>\uff09\u7684\u53d8\u91cf\uff0c\u5982\uff1a</p> <pre><code>hero = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n</code></pre> <p>\u73b0\u5728\u7c7b\u662f <code>Hero</code>\uff08\u5927\u5199 <code>H</code>\uff09\uff0c\u5b9e\u4f8b\u662f <code>hero</code>\uff08\u5c0f\u5199 <code>h</code>\uff09\u3002</p> <p>\u56e0\u6b64\uff0c\u73b0\u5728\u4f60\u6709 <code>Hero.name</code> \u548c <code>hero.name</code>\uff0c\u5b83\u4eec\u770b\u8d77\u6765\u975e\u5e38\u76f8\u4f3c\uff0c\u4f46\u5374\u662f\u4e24\u4e2a\u4e0d\u540c\u7684\u4e1c\u897f\uff1a</p> <pre><code>&gt;&gt;&gt; Hero.name == \"Deadpond\"\n&lt;sqlalchemy.sql.elements.BinaryExpression object at 0x7f4aec0d6c90&gt;\n\n&gt;&gt;&gt; hero.name == \"Deadpond\"\nTrue\n</code></pre> <p>\u8fd9\u53ea\u662f\u4e00\u4e2a\u9700\u8981\u6ce8\u610f\u7684\u70b9\u3002\ud83e\udd13</p> <p>\u4f46\u5728\u7406\u89e3\u4e86\u7c7b\u548c\u5b9e\u4f8b\u4e4b\u95f4\u7684\u533a\u522b\u540e\uff0c\u5b83\u4f1a\u53d8\u5f97\u5f88\u81ea\u7136\uff0c\u4f60\u53ef\u4ee5\u505a\u51fa\u975e\u5e38\u5f3a\u5927\u7684\u64cd\u4f5c\u3002\ud83d\ude80</p> <p>\u4f8b\u5982\uff0c\u7531\u4e8e <code>hero.name</code> \u50cf\u4e00\u4e2a <code>str</code> \u7c7b\u578b\uff0c<code>Hero.name</code> \u50cf\u4e00\u4e2a\u7528\u4e8e\u6bd4\u8f83\u7684\u7279\u6b8a\u5bf9\u8c61\uff0c\u4f60\u53ef\u4ee5\u5199\u51fa\u5982\u4e0b\u4ee3\u7801\uff1a</p> <pre><code>select(Hero).where(Hero.name == hero.name)\n</code></pre> <p>\u8fd9\u610f\u5473\u7740\uff1a</p> <p>\u563f\uff0cSQL \u6570\u636e\u5e93 \ud83d\udc4b\uff0c\u8bf7 <code>SELECT</code> \u6240\u6709\u5217</p> <p><code>FROM</code> \u6a21\u578b\u7c7b <code>Hero</code> \u7684\u8868\uff08\u8868 <code>\"hero\"</code>\uff09</p> <p><code>WHERE</code> \u5217 <code>\"name\"</code> \u7b49\u4e8e\u6211\u8fd9\u91cc\u7684\u8fd9\u4e2a\u82f1\u96c4\u5b9e\u4f8b\u7684\u540d\u5b57\uff1a<code>hero.name</code>\uff08\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u503c\u4e3a <code>\"Deadpond\"</code>\uff09\u3002</p>"},{"location":"tutorial/where/#where_3","title":"<code>.where()</code> \u548c\u8868\u8fbe\u5f0f\u4ee3\u66ff\u5173\u952e\u5b57\u53c2\u6570","text":"<p>\u73b0\u5728\uff0c\u8ba9\u6211\u544a\u8bc9\u4f60\u4e3a\u4ec0\u4e48\u6211\u8ba4\u4e3a\u5728\u4e0e SQL \u6570\u636e\u5e93\u4ea4\u4e92\u7684\u8fd9\u4e2a\u7528\u4f8b\u4e2d\uff0c\u4f7f\u7528\u8fd9\u4e9b\u8868\u8fbe\u5f0f\u6bd4\u4f7f\u7528\u5173\u952e\u5b57\u53c2\u6570\u66f4\u597d\uff1a</p> <pre><code># \u8868\u8fbe\u5f0f \u2728\nselect(Hero).where(Hero.name == \"Deadpond\")\n</code></pre> <p>...\u800c\u4e0d\u662f\u50cf\u8fd9\u6837\u4f7f\u7528\u5173\u952e\u5b57\u53c2\u6570\uff1a</p> <pre><code># \u4e0d\u652f\u6301\uff0c\u5173\u952e\u5b57\u53c2\u6570 \ud83d\udea8\nselect(Hero).where(name=\"Deadpond\")\n</code></pre> <p>\u5f53\u7136\uff0c\u4f7f\u7528\u5173\u952e\u5b57\u53c2\u6570\u4f1a\u7a0d\u5fae\u7b80\u6d01\u4e00\u70b9\u3002</p> <p>\u4f46\u662f\uff0c\u4f7f\u7528 \u8868\u8fbe\u5f0f \u65f6\uff0c\u4f60\u7684\u7f16\u8f91\u5668\u53ef\u4ee5\u901a\u8fc7\u81ea\u52a8\u8865\u5168\u548c\u5185\u8054\u9519\u8bef\u68c0\u67e5\u4e3a\u4f60\u63d0\u4f9b\u5f88\u591a\u5e2e\u52a9\u3002\u2728</p> <p>\u8ba9\u6211\u4e3e\u4e2a\u4f8b\u5b50\u3002\u5047\u8bbe SQLModel \u652f\u6301\u5173\u952e\u5b57\u53c2\u6570\uff0c\u5e76\u4e14\u4f60\u60f3\u4f7f\u7528 Spider-Boy \u7684\u79d8\u5bc6\u8eab\u4efd\u6765\u8fdb\u884c\u7b5b\u9009\u3002</p> <p>\u4f60\u53ef\u80fd\u4f1a\u5199\uff1a</p> <pre><code># \u4e0d\u8981\u590d\u5236\u8fd9\u4e2a \ud83d\udea8\nselect(Hero).where(secret_identity=\"Pedro Parqueador\")\n</code></pre> <p>\u7f16\u8f91\u5668\u4f1a\u770b\u5230\u8fd9\u6bb5\u4ee3\u7801\uff0c\u7531\u4e8e\u5b83\u6ca1\u6709\u4efb\u4f55\u4fe1\u606f\u6765\u544a\u8bc9\u4f60\u54ea\u4e9b\u5173\u952e\u5b57\u53c2\u6570\u662f\u5141\u8bb8\u7684\uff0c\u54ea\u4e9b\u662f\u4e0d\u5141\u8bb8\u7684\uff0c\u5b83\u5c31\u65e0\u6cd5\u5e2e\u52a9\u4f60 \u68c0\u6d4b\u5230\u9519\u8bef\u3002</p> <p>\u4e5f\u8bb8\u4f60\u7684\u4ee3\u7801\u751a\u81f3\u53ef\u4ee5\u8fd0\u884c\uff0c\u770b\u8d77\u6765\u4e00\u5207\u6b63\u5e38\uff0c\u7136\u540e\u51e0\u4e2a\u6708\u540e\u4f60\u4f1a\u60f3\u77e5\u9053\u4e3a\u4ec0\u4e48\u4f60\u7684\u5e94\u7528 \u4ece\u672a\u627e\u5230\u4efb\u4f55\u884c\uff0c\u5c3d\u7ba1\u4f60\u786e\u4fe1\u6709\u4e00\u4e2a\u540d\u4e3a <code>\"Pedro Parqueador\"</code> \u7684\u8bb0\u5f55\u3002\ud83d\ude31</p> <p>\u6700\u540e\uff0c\u4e5f\u8bb8\u4f60\u624d\u4f1a\u610f\u8bc6\u5230\uff0c\u6211\u4eec\u5199\u7684\u4ee3\u7801\u4f7f\u7528\u4e86 <code>secret_identity</code>\uff0c\u800c\u8fd9\u4e2a\u5e76\u4e0d\u662f\u8868\u4e2d\u7684\u5217\u3002\u6211\u4eec\u5e94\u8be5\u5199 <code>secret_name</code>\u3002</p> <p>\u73b0\u5728\uff0c\u4f7f\u7528\u8868\u8fbe\u5f0f\u65f6\uff0c\u5982\u679c\u4f60\u5c1d\u8bd5\u8fd9\u6837\u5199\uff1a</p> <pre><code># \u8868\u8fbe\u5f0f \u2728\nselect(Hero).where(Hero.secret_identity == \"Pedro Parqueador\")\n</code></pre> <p>\u7f16\u8f91\u5668\u4f1a\u7acb\u523b\u663e\u793a\u9519\u8bef\u3002</p> <p>\u66f4\u597d\u7684\u662f\uff0c\u5b83\u4f1a\u4e3a\u4f60\u81ea\u52a8\u8865\u5168\u6b63\u786e\u7684\u5217\u540d\uff0c\u53d8\u6210\uff1a</p> <pre><code>select(Hero).where(Hero.secret_name == \"Pedro Parqueador\")\n</code></pre> <p>\u6211\u8ba4\u4e3a\uff0c\u4ec5\u4ec5\u662f\u62e5\u6709\u66f4\u597d\u7684\u7f16\u8f91\u5668\u652f\u6301\u3001\u81ea\u52a8\u8865\u5168\u548c\u5185\u8054\u9519\u8bef\u68c0\u67e5\uff0c\u5c31\u8db3\u4ee5\u8ba9\u4f7f\u7528\u8868\u8fbe\u5f0f\u6bd4\u4f7f\u7528\u5173\u952e\u5b57\u53c2\u6570\u66f4\u5177\u4f18\u52bf\u3002\u2728</p> <p>Tip</p> <p>\u8868\u8fbe\u5f0f \u8fd8\u63d0\u4f9b\u4e86\u66f4\u591a\u7528\u4e8e\u5176\u4ed6\u7c7b\u578b\u6bd4\u8f83\u7684\u529f\u80fd\uff0c\u5982\u4e0b\u6240\u793a\u3002\ud83d\udc47</p>"},{"location":"tutorial/where/#_4","title":"\u6267\u884c\u8bed\u53e5","text":"<p>\u73b0\u5728\u6211\u4eec\u77e5\u9053\u4e86 <code>.where()</code> \u7684\u5de5\u4f5c\u539f\u7406\uff0c\u8ba9\u6211\u4eec\u5b8c\u6210\u4ee3\u7801\u3002</p> <p>\u5b9e\u9645\u4e0a\uff0c\u8fd9\u4e0e\u4e4b\u524d\u7ae0\u8282\u4e2d\u9009\u62e9\u6570\u636e\u7684\u65b9\u5f0f\u662f\u4e00\u6837\u7684\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u6211\u4eec\u83b7\u53d6\u5305\u542b <code>WHERE</code> \u7684\u8bed\u53e5\uff0c\u5e76\u901a\u8fc7 <code>exec()</code> \u6267\u884c\u5b83\u6765\u83b7\u53d6\u7ed3\u679c\u3002</p> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u7ed3\u679c\u5c06\u53ea\u6709\u4e00\u884c\uff1a</p> <pre><code>$ python app.py\n\n// \u4e00\u4e9b\u6837\u677f\u8f93\u51fa\u88ab\u7701\u7565 \ud83d\ude09\n\n// \u73b0\u5728\u662f\u5173\u952e\u90e8\u5206\uff0c\u5e26\u6709 WHERE \u7684 SELECT \ud83d\udca1\n\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.name = ?\nINFO Engine [no key 0.00014s] ('Deadpond',)\n\n// \u8fd9\u662f\u552f\u4e00\u6253\u5370\u7684\u82f1\u96c4\nsecret_name='Dive Wilson' age=None id=1 name='Deadpond'\n</code></pre> <p>Tip</p> <p><code>results</code> \u5bf9\u8c61\u662f\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u53ef\u4ee5\u5728 <code>for</code> \u5faa\u73af\u4e2d\u4f7f\u7528\u3002</p> <p>\u5373\u4f7f\u6211\u4eec\u53ea\u5f97\u5230\u4e86\u4e00\u4e2a\u884c\uff0c\u6211\u4eec\u4ecd\u7136\u4f1a\u8fed\u4ee3 <code>results</code> \u5bf9\u8c61\uff0c\u5c31\u50cf\u5b83\u662f\u4e00\u4e2a\u5305\u542b\u4e00\u4e2a\u5143\u7d20\u7684\u5217\u8868\u4e00\u6837\u3002</p> <p>\u6211\u4eec\u7a0d\u540e\u4f1a\u770b\u5230\u83b7\u53d6\u6570\u636e\u7684\u5176\u4ed6\u65b9\u5f0f\u3002</p>"},{"location":"tutorial/where/#_5","title":"\u5176\u4ed6\u6bd4\u8f83","text":"<p>\u8fd9\u662f\u5c06\u8fd9\u4e9b\u7279\u6b8a\u7684 \u8868\u8fbe\u5f0f \u4f20\u9012\u7ed9 <code>.where()</code> \u7684\u53e6\u4e00\u4e2a\u5de8\u5927\u4f18\u52bf\u3002</p> <p>\u5728\u4e0a\u9762\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u201c\u7b49\u4e8e\u201d\u6bd4\u8f83\uff08\u4f7f\u7528 <code>==</code>\uff09\uff0c\u4ec5\u68c0\u67e5\u4e24\u4e2a\u4e8b\u7269\u7684\u503c\u662f\u5426\u76f8\u540c\u3002</p> <p>\u4f46\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u6807\u51c6\u7684 Python \u6bd4\u8f83\u3002\u2728</p>"},{"location":"tutorial/where/#_6","title":"\u4e0d\u7b49\u4e8e","text":"<p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 <code>!=</code> \u6765\u83b7\u53d6\u5217\u503c \u4e0d\u7b49\u4e8e \u67d0\u4e2a\u503c\u7684\u884c\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name != \"Deadpond\")\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name != \"Deadpond\")\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name != \"Deadpond\")\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name != \"Deadpond\")\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u8fd9\u5c06\u8f93\u51fa\uff1a</p> <pre><code>secret_name='Pedro Parqueador' age=None id=2 name='Spider-Boy'\nsecret_name='Tommy Sharp' age=48 id=3 name='Rusty-Man'\n</code></pre>"},{"location":"tutorial/where/#_7","title":"\u6682\u505c\u4ee5\u6dfb\u52a0\u6570\u636e","text":"<p>\u8ba9\u6211\u4eec\u66f4\u65b0 <code>create_heroes()</code> \u51fd\u6570\uff0c\u6dfb\u52a0\u66f4\u591a\u884c\u6570\u636e\uff0c\u4ee5\u4f7f\u63a5\u4e0b\u6765\u7684\u6bd4\u8f83\u793a\u4f8b\u66f4\u6e05\u6670\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &gt; 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &gt; 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u73b0\u5728\u6211\u4eec\u6709\u4e86\u591a\u4e2a\u4e0d\u540c\u5e74\u9f84\u7684\u82f1\u96c4\uff0c\u63a5\u4e0b\u6765\u7684\u6bd4\u8f83\u64cd\u4f5c\u5c06\u53d8\u5f97\u66f4\u52a0\u76f4\u89c2\u3002</p>"},{"location":"tutorial/where/#_8","title":"\u5927\u4e8e","text":"<p>\u73b0\u5728\u6211\u4eec\u4f7f\u7528 <code>&gt;</code> \u6765\u83b7\u53d6\u67d0\u5217\u503c \u5927\u4e8e \u67d0\u4e2a\u503c\u7684\u884c\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &gt; 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &gt; 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &gt; 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &gt; 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u8fd9\u5c06\u8f93\u51fa\uff1a</p> <pre><code>age=48 id=3 name='Rusty-Man' secret_name='Tommy Sharp'\nage=36 id=6 name='Dr. Weird' secret_name='Steve Weird'\nage=93 id=7 name='Captain North America' secret_name='Esteban Rogelios'\n</code></pre> <p>Tip</p> <p>\u6ce8\u610f\uff0c\u5b83\u6ca1\u6709\u9009\u62e9 <code>Black Lion</code>\uff0c\u56e0\u4e3a\u5e74\u9f84\u6ca1\u6709**\u4e25\u683c**\u5927\u4e8e <code>35</code>\u3002</p>"},{"location":"tutorial/where/#_9","title":"\u5927\u4e8e\u6216\u7b49\u4e8e","text":"<p>\u8ba9\u6211\u4eec\u518d\u505a\u4e00\u6b21\uff0c\u4f46\u662f\u8fd9\u6b21\u4f7f\u7528 <code>&gt;=</code> \u6765\u83b7\u53d6\u67d0\u5217\u503c \u5927\u4e8e\u6216\u7b49\u4e8e \u67d0\u4e2a\u503c\u7684\u884c\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &gt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &gt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &gt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &gt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u7531\u4e8e\u6211\u4eec\u4f7f\u7528\u4e86 <code>&gt;=</code>\uff0c\u6240\u4ee5\u5e74\u9f84\u4e3a <code>35</code> \u7684\u884c\u4e5f\u4f1a\u88ab\u5305\u62ec\u5728\u8f93\u51fa\u4e2d\uff1a</p> <pre><code>age=48 id=3 name='Rusty-Man' secret_name='Tommy Sharp'\nage=35 id=5 name='Black Lion' secret_name='Trevor Challa'\nage=36 id=6 name='Dr. Weird' secret_name='Steve Weird'\nage=93 id=7 name='Captain North America' secret_name='Esteban Rogelios'\n</code></pre> <p>Tip</p> <p>\u8fd9\u6b21\u6211\u4eec\u4e5f\u5f97\u5230\u4e86 <code>Black Lion</code>\uff0c\u56e0\u4e3a\u5c3d\u7ba1\u5e74\u9f84\u4e0d \u4e25\u683c \u5927\u4e8e <code>35</code>\uff0c\u5b83 \u7b49\u4e8e <code>35</code>\u3002</p>"},{"location":"tutorial/where/#_10","title":"\u5c0f\u4e8e","text":"<p>\u7c7b\u4f3c\u5730\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 <code>&lt;</code> \u6765\u83b7\u53d6\u67d0\u5217\u503c \u5c0f\u4e8e \u67d0\u4e2a\u503c\u7684\u884c\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt; 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt; 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt; 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt; 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u8f93\u51fa\u7684\u7ed3\u679c\u662f\u6570\u636e\u5e93\u4e2d\u5e74\u9f84\u66f4\u5c0f\u7684\u4e00\u884c\uff1a</p> <pre><code>age=32 id=4 name='Tarantula' secret_name='Natalia Roman-on'\n</code></pre> <p>Tip</p> <p>\u6211\u4eec\u53ef\u4ee5\u5047\u8bbe Spider-Boy \u66f4\u5e74\u8f7b\u3002\u4f46\u7531\u4e8e\u6211\u4eec\u4e0d\u77e5\u9053\u4ed6\u7684\u5e74\u9f84\uff0c\u5b83\u5728\u6570\u636e\u5e93\u4e2d\u662f <code>NULL</code>\uff08\u5728 Python \u4e2d\u662f <code>None</code>\uff09\uff0c\u6240\u4ee5\u5b83\u4e0d\u4f1a\u4e0e\u8fd9\u4e9b\u6570\u5b57\u7684\u5e74\u9f84\u6bd4\u8f83\u5339\u914d\u3002</p>"},{"location":"tutorial/where/#_11","title":"\u5c0f\u4e8e\u6216\u7b49\u4e8e","text":"<p>\u6700\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 <code>&lt;=</code> \u6765\u83b7\u53d6\u67d0\u5217\u503c \u5c0f\u4e8e\u6216\u7b49\u4e8e \u67d0\u4e2a\u503c\u7684\u884c\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u6211\u4eec\u5f97\u5230\u4e86\u5e74\u9f84\u5c0f\u4e8e\u6216\u7b49\u4e8e <code>35</code> \u7684\u884c\uff1a</p> <pre><code>age=32 id=4 name='Tarantula' secret_name='Natalia Roman-on'\nage=35 id=5 name='Black Lion' secret_name='Trevor Challa'\n</code></pre> <p>Tip</p> <p>\u6211\u4eec\u4e5f\u5f97\u5230\u4e86 <code>Black Lion</code>\uff0c\u56e0\u4e3a\u867d\u7136\u5e74\u9f84\u4e0d*\u4e25\u683c*\u5c0f\u4e8e <code>35</code>\uff0c\u4f46\u5b83\u662f*\u7b49\u4e8e* <code>35</code>\u3002</p>"},{"location":"tutorial/where/#_12","title":"\u8868\u8fbe\u5f0f\u7684\u597d\u5904","text":"<p>\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u65f6\u673a\uff0c\u5c55\u793a\u4f7f\u7528\u8fd9\u4e9b\u7eaf Python \u8868\u8fbe\u5f0f\u800c\u4e0d\u662f\u5173\u952e\u5b57\u53c2\u6570\u53ef\u4ee5\u63d0\u4f9b\u7684\u5e2e\u52a9\u3002\u2728</p> <p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u7684\u6807\u51c6 Python \u6bd4\u8f83\u8fd0\u7b97\u7b26\uff0c\u5982 <code>&lt;</code>\u3001<code>&lt;=</code>\u3001<code>&gt;</code>\u3001<code>&gt;=</code>\u3001<code>==</code> \u7b49\u7b49\u3002</p>"},{"location":"tutorial/where/#where_4","title":"\u591a\u91cd <code>.where()</code>","text":"<p>\u56e0\u4e3a <code>.where()</code> \u8fd4\u56de\u7684\u662f\u76f8\u540c\u7684\u7279\u6b8a\u9009\u62e9\u5bf9\u8c61\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5176\u4e0a\u6dfb\u52a0\u66f4\u591a\u7684 <code>.where()</code> \u8c03\u7528\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &gt;= 35).where(Hero.age &lt; 40)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &gt;= 35).where(Hero.age &lt; 40)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &gt;= 35).where(Hero.age &lt; 40)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &gt;= 35).where(Hero.age &lt; 40)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u8fd9\u5c06\u9009\u62e9 <code>age</code> \u5927\u4e8e\u6216\u7b49\u4e8e <code>35</code> \u4e14 <code>age</code> \u5c0f\u4e8e <code>40</code> \u7684\u884c\u3002</p> <p>\u7b49\u6548\u7684 SQL \u8bed\u53e5\u662f\uff1a</p> <pre><code>SELECT id, name, secret_name, age\nFROM hero\nWHERE age &gt;= 35 AND age &lt; 40\n</code></pre> <p>\u8fd9\u91cc\u4f7f\u7528 <code>AND</code> \u5c06\u4e24\u4e2a\u6bd4\u8f83\u6761\u4ef6\u7ed3\u5408\u5728\u4e00\u8d77\u3002</p> <p>\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u8fd0\u884c\u5b83\uff0c\u67e5\u770b\u7a0b\u5e8f\u8f93\u51fa\uff1a</p> <pre><code>$ python app.py\n\n// \u4e00\u4e9b\u5197\u4f59\u8f93\u51fa\u88ab\u7701\u7565 \ud83d\ude09\n\n// \u4f7f\u7528 WHERE \u8bed\u53e5\u548c AND \u8fde\u63a5\u7684 SELECT \u8bed\u53e5\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.age &gt;= ? AND hero.age &lt; ?\nINFO Engine [no key 0.00014s] (35, 40)\n\n// \u8f93\u51fa\u7684\u4e24\u4e2a\u82f1\u96c4\nage=35 id=5 name='Black Lion' secret_name='Trevor Challa'\nage=36 id=6 name='Dr. Weird' secret_name='Steve Weird'\n</code></pre>"},{"location":"tutorial/where/#where_5","title":"\u4f7f\u7528\u591a\u4e2a\u8868\u8fbe\u5f0f\u7684 <code>.where()</code>","text":"<p>\u4f5c\u4e3a\u4f7f\u7528\u591a\u4e2a <code>.where()</code> \u7684\u66ff\u4ee3\u65b9\u6848\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u5c06\u591a\u4e2a\u8868\u8fbe\u5f0f\u4f20\u9012\u7ed9\u5355\u4e2a <code>.where()</code>\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &gt;= 35, Hero.age &lt; 40)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &gt;= 35, Hero.age &lt; 40)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &gt;= 35, Hero.age &lt; 40)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &gt;= 35, Hero.age &lt; 40)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u8fd9\u4e0e\u4e0a\u9762\u7684\u65b9\u6cd5\u76f8\u540c\uff0c\u7ed3\u679c\u5c06\u8f93\u51fa\u4e24\u4e2a\u82f1\u96c4\uff1a</p> <pre><code>age=35 id=5 name='Black Lion' secret_name='Trevor Challa'\nage=36 id=6 name='Dr. Weird' secret_name='Steve Weird'\n</code></pre>"},{"location":"tutorial/where/#or-where","title":"\u4f7f\u7528 <code>OR</code> \u7684\u591a\u4e2a <code>.where()</code>","text":"<p>\u5728\u4e4b\u524d\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 <code>.where()</code> \u548c\u591a\u4e2a\u8868\u8fbe\u5f0f\u3002\u8fd9\u4e9b\u8868\u8fbe\u5f0f\u901a\u8fc7 <code>AND</code> \u5728\u6700\u7ec8\u7684 SQL \u4e2d\u7ec4\u5408\uff0c\u610f\u5473\u7740\u53ea\u6709\u5f53\u4e00\u884c\u4e2d\u7684 \u6240\u6709 \u8868\u8fbe\u5f0f\u90fd\u4e3a\u771f\u65f6\uff0c\u624d\u4f1a\u5305\u542b\u8be5\u884c\u7ed3\u679c\u3002</p> <p>\u4f46\u662f\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528 <code>OR</code> \u6765\u7ec4\u5408\u8868\u8fbe\u5f0f\u3002\u8fd9\u6837\uff0c\u4efb\u4f55\uff08\u4f46\u4e0d\u4e00\u5b9a\u662f\u6240\u6709\uff09\u8868\u8fbe\u5f0f\u4e3a\u771f\u65f6\uff0c\u884c\u5c31\u4f1a\u88ab\u5305\u542b\u5728\u7ed3\u679c\u4e2d\u3002</p> <p>\u8981\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u53ef\u4ee5\u5bfc\u5165 <code>or_</code>\uff1a</p> Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, or_, select\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, or_, select\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, or_, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(or_(Hero.age &lt;= 35, Hero.age &gt; 90))\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, or_, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(or_(Hero.age &lt;= 35, Hero.age &gt; 90))\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u7136\u540e\u5c06\u4e24\u4e2a\u8868\u8fbe\u5f0f\u4f20\u9012\u7ed9 <code>or_()</code> \u5e76\u5c06\u5176\u653e\u5165 <code>.where()</code> \u4e2d\u3002</p> <p>\u4f8b\u5982\uff0c\u8fd9\u91cc\u6211\u4eec\u9009\u62e9\u5e74\u9f84\u6700\u5c0f\u6216\u6700\u5927\uff08\u5373\uff0c\u9009\u62e9\u6700\u5e74\u8f7b\u6216\u6700\u5e74\u8001\u7684\u82f1\u96c4\uff09\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(or_(Hero.age &lt;= 35, Hero.age &gt; 90))\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(or_(Hero.age &lt;= 35, Hero.age &gt; 90))\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, or_, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(or_(Hero.age &lt;= 35, Hero.age &gt; 90))\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, or_, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(or_(Hero.age &lt;= 35, Hero.age &gt; 90))\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u8fd0\u884c\u5b83\u65f6\uff0c\u4f1a\u751f\u6210\u5982\u4e0b\u8f93\u51fa\uff1a</p> <pre><code>$ python app.py\n\n// \u7701\u7565\u4e00\u4e9b\u6837\u677f\u8f93\u51fa \ud83d\ude09\n\n// \u4f7f\u7528 WHERE \u548c OR \u7684 SELECT \u8bed\u53e5 \ud83d\udd0d\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.age &lt;= ? OR hero.age &gt; ?\nINFO Engine [no key 0.00021s] (35, 90)\n\n// \u7ed3\u679c\u5305\u62ec\u6700\u5e74\u8f7b\u548c\u6700\u5e74\u957f\u7684\u82f1\u96c4 \u2728\nsecret_name='Natalia Roman-on' age=32 id=4 name='Tarantula'\nsecret_name='Trevor Challa' age=35 id=5 name='Black Lion'\nsecret_name='Esteban Rogelios' age=93 id=7 name='Captain North America'\n</code></pre>"},{"location":"tutorial/where/#_13","title":"\u7c7b\u578b\u6ce8\u89e3\u548c\u9519\u8bef","text":"<p>\u5728\u4f7f\u7528\u8fd9\u4e9b\u6bd4\u8f83\u65f6\uff0c\u53ef\u80fd\u4f1a\u9047\u5230\u7f16\u8f91\u5668\u7ed9\u51fa\u9519\u8bef\u63d0\u793a\uff0c\u4f8b\u5982\uff1a</p> <pre><code>Hero.age &gt; 35\n</code></pre> <p>\u7f16\u8f91\u5668\u4f1a\u63d0\u793a\u9519\u8bef\uff1a</p> <p><code>Hero.age</code> \u53ef\u80fd\u662f <code>None</code>\uff0c\u4e0d\u80fd\u4e0e <code>&gt;</code> \u8fdb\u884c\u6bd4\u8f83</p> <p>\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u4f7f\u7528\u4e86\u7b80\u5355\u7684 Python \u7c7b\u578b\u6ce8\u89e3\uff0c<code>age</code> \u88ab\u6ce8\u89e3\u4e3a <code>int | None</code>\uff08\u6216 <code>Optional[int]</code>\uff09\u3002</p> <p>\u901a\u8fc7\u4f7f\u7528\u8fd9\u79cd\u7b80\u5355\u4e14\u6807\u51c6\u7684 Python \u7c7b\u578b\u6ce8\u89e3\uff0c\u6211\u4eec\u80fd\u591f\u4eab\u53d7\u989d\u5916\u7684\u7b80\u6d01\u6027\u548c\u521b\u5efa\u6216\u4f7f\u7528\u5b9e\u4f8b\u65f6\u7684\u5185\u8054\u9519\u8bef\u68c0\u67e5\u7684\u597d\u5904\u3002\u2728</p> <p>\u5f53\u6211\u4eec\u5728 <code>.where()</code> \u4e2d\u4f7f\u7528\u8fd9\u4e9b\u7279\u6b8a\u7684 \u7c7b\u5c5e\u6027 \u65f6\uff0c\u5728\u7a0b\u5e8f\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u8fd9\u4e9b\u7c7b\u5c5e\u6027\u4f1a\u77e5\u9053\u6bd4\u8f83\u4ec5\u9002\u7528\u4e8e\u6570\u636e\u5e93\u4e2d\u975e <code>NULL</code> \u7684\u503c\uff0c\u56e0\u6b64\u5b83\u4f1a\u6b63\u786e\u5de5\u4f5c\u3002</p> <p>\u4f46\u662f\uff0c\u7f16\u8f91\u5668\u5e76\u4e0d\u77e5\u9053\u5b83\u662f\u4e00\u4e2a\u7279\u6b8a\u7684 \u7c7b\u5c5e\u6027\uff0c\u6240\u4ee5\u5b83\u4f1a\u5c1d\u8bd5\u5e2e\u52a9\u6211\u4eec\u907f\u514d\u9519\u8bef\uff08\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fd9\u662f\u4e00\u4e2a\u8bef\u62a5\uff09\u3002</p> <p>\u4e0d\u8fc7\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\ud83c\udf89</p> <p>\u6211\u4eec\u53ef\u4ee5\u544a\u8bc9\u7f16\u8f91\u5668\uff0c\u8fd9\u4e2a\u7c7b\u5c5e\u6027\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u7279\u6b8a\u7684 SQLModel \u5217\uff08\u800c\u4e0d\u662f\u4e00\u4e2a\u666e\u901a\u503c\u7684\u5b9e\u4f8b\u5c5e\u6027\uff09\u3002</p> <p>\u4e3a\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5bfc\u5165 <code>col()</code>\uff08\u4ee3\u8868\u201c\u5217\u201d\uff09\uff1a</p> Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, col, create_engine, select\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, col, create_engine, select\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, col, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(col(Hero.age) &gt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, col, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(col(Hero.age) &gt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u7136\u540e\uff0c\u5728 <code>.where()</code> \u4e2d\u4f7f\u7528\u65f6\uff0c\u5c06 \u7c7b\u5c5e\u6027 \u653e\u5165 <code>col()</code> \u4e2d\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(col(Hero.age) &gt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(col(Hero.age) &gt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, col, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(col(Hero.age) &gt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, col, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(col(Hero.age) &gt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u56e0\u6b64\uff0c\u73b0\u5728\u7684\u6bd4\u8f83\u4e0d\u518d\u662f\uff1a</p> <pre><code>Hero.age &gt; 35\n</code></pre> <p>\u800c\u662f\uff1a</p> <pre><code>col(Hero.age) &gt; 35\n</code></pre> <p>\u8fd9\u6837\uff0c\u7f16\u8f91\u5668\u5c31\u77e5\u9053\u8fd9\u6bb5\u4ee3\u7801\u5b9e\u9645\u4e0a\u662f\u6b63\u786e\u7684\uff0c\u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u7279\u6b8a\u7684 SQLModel \u5217\u3002</p> <p>/// \u63d0\u793a</p> <p><code>col()</code> \u5728\u540e\u7eed\u4f1a\u6d3e\u4e0a\u7528\u573a\uff0c\u5b83\u4f1a\u4e3a\u6211\u4eec\u63d0\u4f9b\u81ea\u52a8\u8865\u5168\uff0c\u5e2e\u52a9\u6211\u4eec\u505a\u66f4\u591a\u7684\u4e8b\u60c5\uff0c\u5229\u7528\u8fd9\u4e9b\u7279\u6b8a\u7684 \u7c7b\u5c5e\u6027 \u5217\u3002</p> <p>\u4f46\u6211\u4eec\u4f1a\u5728\u540e\u9762\u8be6\u7ec6\u8ba8\u8bba\u3002</p> <p>///</p>"},{"location":"tutorial/where/#_14","title":"\u603b\u7ed3","text":"<p>\u4f60\u53ef\u4ee5\u4f7f\u7528 <code>.where()</code> \u548c\u5f3a\u5927\u7684\u8868\u8fbe\u5f0f\uff0c\u901a\u8fc7 SQLModel \u5217\uff08\u7279\u6b8a\u7684\u7c7b\u5c5e\u6027\uff09\u6765\u8fc7\u6ee4\u4f60\u60f3\u8981\u7684\u884c\u3002\ud83d\ude80</p> <p>\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6570\u636e\u5e93\u4f1a \u9010\u884c\u68c0\u67e5\u6bcf\u4e00\u6761\u8bb0\u5f55\uff0c\u627e\u5230\u7b26\u5408\u6761\u4ef6\u7684\u8bb0\u5f55\u3002\u5982\u679c\u4f60\u6709\u6210\u5343\u4e0a\u4e07\u6761\u8bb0\u5f55\uff0c\u8fd9\u53ef\u80fd\u4f1a\u975e\u5e38 \u6162\u3002\ud83d\ude31</p> <p>\u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4e2d\uff0c\u6211\u5c06\u544a\u8bc9\u4f60\u5982\u4f55\u4e3a\u6570\u636e\u5e93\u6dfb\u52a0 \u7d22\u5f15\uff0c\u8fd9\u5c06\u4f7f\u67e5\u8be2\u53d8\u5f97 \u975e\u5e38\u9ad8\u6548\u3002\ud83d\ude0e</p>"},{"location":"tutorial/connect/","title":"\u8fde\u63a5\u8868\u683c - JOIN - \u7b80\u4ecb","text":"<p>\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u4f60\u5df2\u7ecf\u77e5\u9053\u5982\u4f55\u4f7f\u7528 SQLModel \u5728\u5355\u4e2a\u8868\u683c\u4e0a\u6267\u884c\u4e3b\u8981\u7684 CRUD \u64cd\u4f5c\u4e86\u3002\ud83c\udf89</p> <p>\u4f46 SQL \u6570\u636e\u5e93\u7684\u4e3b\u8981\u4f18\u52bf\u548c\u7279\u6027\u662f\u80fd\u591f\u5904\u7406\u5173\u8054\u6570\u636e\uff0c\u8fde\u63a5 \u6216 \u201c\u8fde\u63a5\u201d \u4e0d\u540c\u7684\u8868\u683c\u3002\u5c06\u4e00\u4e2a\u8868\u683c\u4e2d\u7684\u884c\u4e0e\u53e6\u4e00\u4e2a\u8868\u683c\u4e2d\u7684\u884c\u8fde\u63a5\u8d77\u6765\u3002</p> <p>\u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u4f7f\u7528 SQLModel \u6765\u7ba1\u7406\u8fde\u63a5\u7684\u6570\u636e\u3002\ud83e\udd1d</p> <p>Tip</p> <p>\u6211\u4eec\u5c06\u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4e2d\u8fdb\u4e00\u6b65\u6269\u5c55\u8fd9\u4e00\u90e8\u5206\uff0c\u4f7f\u5176\u5728 Python \u4ee3\u7801\u4e2d\u66f4\u4fbf\u4e8e\u4f7f\u7528\uff0c\u5229\u7528 \u5173\u7cfb\u5c5e\u6027(relationship attributes)\u3002</p> <p>\u4f46\u4f60\u5e94\u8be5\u5148\u4ece\u8fd9\u4e00\u7ec4\u7ae0\u8282\u5f00\u59cb\u3002\ud83e\udd13</p>"},{"location":"tutorial/connect/create-connected-rows/","title":"\u521b\u5efa\u5e76\u8fde\u63a5\u6570\u636e\u884c","text":"<p>\u73b0\u5728\u6211\u4eec\u5c06\u4e3a\u6bcf\u4e2a\u8868\u683c \u521b\u5efa\u6570\u636e\u884c\u3002\u2728</p> <p><code>team</code> \u8868\u683c\u5c06\u5982\u4e0b\u6240\u793a\uff1a</p> idnameheadquarters 1PreventersSharp Tower 2Z-ForceSister Margaret's Bar <p>\u5728\u6211\u4eec\u5b8c\u6210\u672c\u7ae0\u4e2d\u7684\u6570\u636e\u64cd\u4f5c\u540e\uff0c<code>hero</code> \u8868\u683c\u5c06\u5982\u4e0b\u6240\u793a\uff1a</p> idnamesecret_nameageteam_id 1DeadpondDive Wilsonnull2 2Rusty-ManTommy Sharp481 3Spider-BoyPedro Parqueadornullnull <p><code>hero</code> \u8868\u683c\u4e2d\u7684\u6bcf\u4e00\u884c\u90fd\u5c06\u6307\u5411 <code>team</code> \u8868\u683c\u4e2d\u7684\u4e00\u884c\uff1a</p> <p></p> <p>Info</p> <p>\u6211\u4eec\u7a0d\u540e\u4f1a\u66f4\u65b0 Spider-Boy\uff0c\u5c06\u4ed6\u4e5f\u6dfb\u52a0\u5230 Preventers \u56e2\u961f\uff0c\u4f46\u73b0\u5728\u8fd8\u4e0d\u8fdb\u884c\u3002</p> <p>\u6211\u4eec\u5c06\u7ee7\u7eed\u4f7f\u7528\u524d\u9762\u793a\u4f8b\u4e2d\u7684\u4ee3\u7801\uff0c\u5e76\u5728\u6b64\u57fa\u7840\u4e0a\u8fdb\u884c\u6269\u5c55\u3002</p> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef main():\n    create_db_and_tables()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef main():\n    create_db_and_tables()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u5728\u8fd0\u884c\u793a\u4f8b\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u5220\u9664 <code>database.db</code> \u6587\u4ef6\uff0c\u4ee5\u786e\u4fdd\u5f97\u5230\u76f8\u540c\u7684\u7ed3\u679c\u3002</p>"},{"location":"tutorial/connect/create-connected-rows/#sqlmodel","title":"\u4f7f\u7528 SQLModel \u4e3a\u56e2\u961f\u521b\u5efa\u6570\u636e\u884c","text":"<p>\u8ba9\u6211\u4eec\u505a\u548c\u4e4b\u524d\u4e00\u6837\u7684\u64cd\u4f5c\uff0c\u5b9a\u4e49\u4e00\u4e2a <code>create_heroes()</code> \u51fd\u6570\uff0c\u5728\u5176\u4e2d\u521b\u5efa\u6211\u4eec\u7684\u82f1\u96c4\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u4e5f\u5c06\u5728\u8fd9\u91cc\u521b\u5efa\u56e2\u961f\u3002\ud83c\udf89</p> <p>\u9996\u5148\uff0c\u521b\u5efa\u4e24\u4e2a\u56e2\u961f\uff1a</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u8fd9\u5e94\u8be5\u5df2\u7ecf\u770b\u8d77\u6765\u5f88\u719f\u6089\u4e86\u3002</p> <p>\u6211\u4eec\u5728\u4e00\u4e2a <code>with</code> \u5757\u4e2d\u542f\u52a8\u4e00\u4e2a session\uff0c\u4f7f\u7528\u4e4b\u524d\u521b\u5efa\u7684 engine\u3002</p> <p>\u7136\u540e\u6211\u4eec\u521b\u5efa <code>Team</code> \u6a21\u578b\u7c7b\u7684\u4e24\u4e2a\u5b9e\u4f8b\u3002</p> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u8fd9\u4e9b\u5bf9\u8c61\u6dfb\u52a0\u5230 session \u4e2d\u3002</p> <p>\u6700\u540e\uff0c\u6211\u4eec commit \u8be5 session\uff0c\u5c06\u66f4\u6539\u4fdd\u5b58\u5230\u6570\u636e\u5e93\u4e2d\u3002</p>"},{"location":"tutorial/connect/create-connected-rows/#main","title":"\u5c06\u5176\u6dfb\u52a0\u5230 Main \u51fd\u6570","text":"<p>\u522b\u5fd8\u4e86\u5c06\u8fd9\u4e2a\u51fd\u6570 <code>create_heroes()</code> \u6dfb\u52a0\u5230 <code>main()</code> \u51fd\u6570\u4e2d\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u80fd\u5728\u4ece\u547d\u4ee4\u884c\u8c03\u7528\u7a0b\u5e8f\u65f6\u8fd0\u884c\u5b83\uff1a</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/connect/create-connected-rows/#_2","title":"\u8fd0\u884c\u4ee3\u7801","text":"<p>\u5982\u679c\u6211\u4eec\u8fd0\u884c\u5230\u76ee\u524d\u4e3a\u6b62\u7684\u4ee3\u7801\uff0c\u5b83\u5c06\u8f93\u51fa\uff1a</p> <pre><code>$ python app.py\n\n// Previous output omitted \ud83d\ude09\n\n// \u81ea\u52a8\u542f\u52a8\u4e8b\u52a1\nINFO Engine BEGIN (implicit)\n// \u5c06\u56e2\u961f\u6dfb\u52a0\u5230\u6570\u636e\u5e93\nINFO Engine INSERT INTO team (name, headquarters) VALUES (?, ?)\nINFO Engine [generated in 0.00050s] ('Preventers', 'Sharp Tower')\nINFO Engine INSERT INTO team (name, headquarters) VALUES (?, ?)\nINFO Engine [cached since 0.002324s ago] ('Z-Force', 'Sister Margaret's Bar')\nINFO Engine COMMIT\n</code></pre> <p>\u4f60\u53ef\u4ee5\u5728\u8f93\u51fa\u4e2d\u770b\u5230\uff0c\u5b83\u4f7f\u7528\u4e86\u5e38\u89c1\u7684 SQL <code>INSERT</code> \u8bed\u53e5\u6765\u521b\u5efa\u6570\u636e\u884c\u3002</p>"},{"location":"tutorial/connect/create-connected-rows/#_3","title":"\u5728\u4ee3\u7801\u4e2d\u521b\u5efa\u82f1\u96c4\u884c","text":"<p>\u73b0\u5728\u6211\u4eec\u5f00\u59cb\u521b\u5efa\u4e00\u4e2a\u82f1\u96c4\u5bf9\u8c61\u3002</p> <p>\u7531\u4e8e <code>Hero</code> \u7c7b\u6a21\u578b\u73b0\u5728\u6709\u4e00\u4e2a\u5b57\u6bb5\uff08\u5217\uff0c\u5c5e\u6027\uff09<code>team_id</code>\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u4e4b\u524d\u521b\u5efa\u7684 <code>Team</code> \u5bf9\u8c61\u7684 ID \u5b57\u6bb5\u6765\u8bbe\u7f6e\u5b83\uff1a</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u8fd8\u6ca1\u6709\u5c06\u8fd9\u4e2a\u82f1\u96c4\u63d0\u4ea4\u5230\u6570\u636e\u5e93\uff0c\u4f46\u5df2\u7ecf\u6709\u51e0\u4e2a\u9700\u8981**\u6ce8\u610f**\u7684\u5730\u65b9\u3002</p> <p>\u5982\u679c\u6570\u636e\u5e93\u4e2d\u5df2\u7ecf\u6709\u4e00\u4e9b\u56e2\u961f\uff0c\u6211\u4eec\u751a\u81f3\u4e0d\u77e5\u9053**\u54ea\u4e2a ID**\u4f1a\u88ab\u6570\u636e\u5e93\u81ea\u52a8\u5206\u914d\u7ed9\u6bcf\u4e2a\u56e2\u961f\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u4e0d\u80fd\u4ec5\u4ec5\u731c\u6d4b\u662f <code>1</code> \u8fd8\u662f <code>2</code>\u3002</p> <p>\u4f46\u662f\u4e00\u65e6\u56e2\u961f\u521b\u5efa\u5e76\u63d0\u4ea4\u5230\u6570\u636e\u5e93\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u8bbf\u95ee\u5bf9\u8c61\u7684 <code>id</code> \u5b57\u6bb5\u6765\u83b7\u53d6\u8be5 ID\u3002</p> <p>\u8bbf\u95ee\u521a\u521a\u63d0\u4ea4\u7684\u6a21\u578b\u4e2d\u7684\u5c5e\u6027\uff0c\u4f8b\u5982 <code>team_z_force.id</code>\uff0c\u4f1a\u81ea\u52a8**\u89e6\u53d1\u6570\u636e\u7684\u5237\u65b0**\uff0c\u5e76\u4ece\u6570\u636e\u5e93\u4e2d\u83b7\u53d6\u8be5\u56e2\u961f\u7684\u6570\u636e\uff0c\u7136\u540e\u5c06\u5b57\u6bb5\u503c\u66b4\u9732\u51fa\u6765\u3002</p> <p>\u56e0\u6b64\uff0c\u5373\u4f7f\u6211\u4eec\u8fd8\u6ca1\u6709\u63d0\u4ea4\u8fd9\u4e2a\u82f1\u96c4\uff0c\u53ea\u662f\u56e0\u4e3a\u6211\u4eec\u4f7f\u7528\u4e86 <code>team_z_force.id</code>\uff0c\u8fd9\u5c06\u89e6\u53d1 SQL \u67e5\u8be2\u6765\u83b7\u53d6\u8be5\u56e2\u961f\u7684\u6570\u636e\u3002</p> <p>\u5355\u5355\u8fd9\u4e00\u884c\u5c31\u4f1a\u751f\u6210\u5982\u4e0b\u8f93\u51fa\uff1a</p> <pre><code>INFO Engine BEGIN (implicit)\nINFO Engine SELECT team.id AS team_id, team.name AS team_name, team.headquarters AS team_headquarters\nFROM team\nWHERE team.id = ?\nINFO Engine [generated in 0.00025s] (2,)\n</code></pre> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u518d\u521b\u5efa\u4e24\u4e2a\u82f1\u96c4\uff1a</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u5728\u521b\u5efa <code>hero_rusty_man</code> \u65f6\uff0c\u6211\u4eec\u8bbf\u95ee\u4e86 <code>team_preventers.id</code>\uff0c\u56e0\u6b64\u4e5f\u4f1a\u89e6\u53d1\u6570\u636e\u7684\u5237\u65b0\uff0c\u751f\u6210\u5982\u4e0b\u8f93\u51fa\uff1a</p> <pre><code>INFO Engine SELECT team.id AS team_id, team.name AS team_name, team.headquarters AS team_headquarters\nFROM team\nWHERE team.id = ?\nINFO Engine [cached since 0.001795s ago] (1,)\n</code></pre> <p>\u8fd8\u6709\u4e00\u4e9b\u503c\u5f97\u6ce8\u610f\u7684\u5730\u65b9\u3002\u6211\u4eec\u5c06 <code>team_id</code> \u6807\u8bb0\u4e3a <code>Optional[int]</code>\uff0c\u610f\u5473\u7740\u5b83\u5728\u6570\u636e\u5e93\u4e2d\u53ef\u4ee5\u662f <code>NULL</code>\uff08\u5728 Python \u4e2d\u662f <code>None</code>\uff09\u3002</p> <p>\u8fd9\u610f\u5473\u7740\u4e00\u4e2a\u82f1\u96c4\u4e0d\u5fc5\u5c5e\u4e8e\u4efb\u4f55\u56e2\u961f\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0cSpider-Boy \u5c31\u6ca1\u6709\u6240\u5c5e\u7684\u56e2\u961f\u3002</p> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u53ea\u9700\u63d0\u4ea4\u8fd9\u4e9b\u66f4\u6539\u4ee5\u4fdd\u5b58\u5230\u6570\u636e\u5e93\uff0c\u8fd9\u5c06\u751f\u6210\u5982\u4e0b\u8f93\u51fa\uff1a</p> <pre><code>INFO Engine INSERT INTO hero (name, secret_name, age, team_id) VALUES (?, ?, ?, ?)\nINFO Engine [generated in 0.00022s] ('Deadpond', 'Dive Wilson', None, 2)\nINFO Engine INSERT INTO hero (name, secret_name, age, team_id) VALUES (?, ?, ?, ?)\nINFO Engine [cached since 0.0007987s ago] ('Rusty-Man', 'Tommy Sharp', 48, 1)\nINFO Engine INSERT INTO hero (name, secret_name, age, team_id) VALUES (?, ?, ?, ?)\nINFO Engine [cached since 0.001095s ago] ('Spider-Boy', 'Pedro Parqueador', None, None)\nINFO Engine COMMIT\n</code></pre>"},{"location":"tutorial/connect/create-connected-rows/#_4","title":"\u5237\u65b0\u5e76\u6253\u5370\u82f1\u96c4","text":"<p>\u73b0\u5728\u8ba9\u6211\u4eec\u5237\u65b0\u5e76\u6253\u5370\u8fd9\u4e9b\u65b0\u521b\u5efa\u7684\u82f1\u96c4\uff0c\u4ee5\u67e5\u770b\u5b83\u4eec\u6307\u5411\u56e2\u961f\u7684\u65b0 ID\uff1a</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u5982\u679c\u6211\u4eec\u5728\u547d\u4ee4\u884c\u4e2d\u6267\u884c\u5b83\uff0c\u5b83\u5c06\u8f93\u51fa\uff1a</p> <pre><code>$ python app.py\n\n// Previous output omitted \ud83d\ude09\n\n// Automatically start a transaction\nINFO Engine BEGIN (implicit)\n\n// Refresh the first hero\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age, hero.team_id\nFROM hero\nWHERE hero.id = ?\nINFO Engine [generated in 0.00021s] (1,)\n// Refresh the second hero\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age, hero.team_id\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.001575s ago] (2,)\n// Refresh the third hero\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age, hero.team_id\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.002518s ago] (3,)\n\n// Print the heroes\nCreated hero: id=1 secret_name='Dive Wilson' team_id=2 name='Deadpond' age=None\nCreated hero: id=2 secret_name='Tommy Sharp' team_id=1 name='Rusty-Man' age=48\nCreated hero: id=3 secret_name='Pedro Parqueador' team_id=None name='Spider-Boy' age=None\n</code></pre> <p>\u5b83\u4eec\u73b0\u5728\u5df2\u7ecf\u6709\u4e86 <code>team_id</code>\uff0c\u592a\u597d\u4e86\uff01</p>"},{"location":"tutorial/connect/create-connected-rows/#_5","title":"\u5173\u7cfb","text":"<p>SQL \u6570\u636e\u5e93\u4e2d\u7684\u5173\u7cfb\u5c31\u662f\u901a\u8fc7\u5728 \u4e00\u5f20\u8868\u4e2d\u7684\u5217 \u5f15\u7528 \u53e6\u4e00\u5f20\u8868\u4e2d\u7684\u5217 \u7684\u503c\u6765\u5efa\u7acb\u7684\u3002</p> <p>\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u628a\u5b83\u4eec\u5f53\u4f5c \u5217\u5b57\u6bb5 \u6765\u5904\u7406\uff0c\u8fd9\u5176\u5b9e\u5c31\u662f\u5b83\u4eec\u5728 SQL \u6570\u636e\u5e93\u4e2d\u7684\u5b9e\u9645\u8868\u73b0\u3002</p> <p>\u4f46\u662f\uff0c\u5728\u672c\u6559\u7a0b\u7684\u540e\u9762\u7ae0\u8282\u4e2d\uff0c\u60a8\u5c06\u5b66\u4e60\u5230\u5173\u4e8e \u5173\u7cfb\u5c5e\u6027 \u7684\u5185\u5bb9\uff0c\u8fd9\u5c06\u4f7f\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528\u8fd9\u4e9b\u5173\u7cfb\u53d8\u5f97\u66f4\u52a0\u7b80\u5355\u3002\u2728</p>"},{"location":"tutorial/connect/create-connected-tables/","title":"\u521b\u5efa\u8fde\u63a5\u8868\u683c","text":"<p>\u73b0\u5728\u6211\u4eec\u5c06\u5904\u7406\u5b58\u50a8\u5728\u4e0d\u540c\u8868\u683c\u4e2d\u7684 \u8fde\u63a5 \u6570\u636e\u3002</p> <p>\u7b2c\u4e00\u6b65\u662f\u521b\u5efa\u591a\u4e2a\u8868\u683c\u5e76\u5c06\u5b83\u4eec\u8fde\u63a5\u8d77\u6765\uff0c\u8fd9\u6837\u4e00\u4e2a\u8868\u683c\u4e2d\u7684\u6bcf\u4e00\u884c\u5c31\u53ef\u4ee5\u5f15\u7528\u53e6\u4e00\u4e2a\u8868\u683c\u4e2d\u7684\u67d0\u4e00\u884c\u3002</p> <p>\u6211\u4eec\u4e4b\u524d\u4e00\u76f4\u5728\u5904\u7406\u5355\u4e00\u8868\u683c <code>hero</code> \u4e2d\u7684\u82f1\u96c4\u6570\u636e\u3002\u73b0\u5728\uff0c\u6211\u4eec\u6765\u6dfb\u52a0\u4e00\u4e2a\u8868\u683c <code>team</code>\u3002</p> <p><code>team</code> \u8868\u683c\u7684\u7ed3\u6784\u5982\u4e0b\u6240\u793a\uff1a</p> idnameheadquarters 1PreventersSharp Tower 2Z-ForceSister Margaret's Bar <p>\u4e3a\u4e86\u5c06\u5b83\u4eec\u8fde\u63a5\u8d77\u6765\uff0c\u6211\u4eec\u5c06\u5728 <code>hero</code> \u8868\u4e2d\u6dfb\u52a0\u53e6\u4e00\u4e2a\u5217 <code>team_id</code>\uff0c\u901a\u8fc7\u8be5 ID \u6307\u5411\u6bcf\u4e2a\u56e2\u961f\uff1a</p> idnamesecret_nameageteam_id \u2728 1DeadpondDive Wilsonnull2 \u2728 2Spider-BoyPedro Parqueadornull1 \u2728 3Rusty-ManTommy Sharp481 \u2728 <p>\u8fd9\u6837\uff0c<code>hero</code> \u8868\u4e2d\u7684\u6bcf\u4e00\u884c\u5c31\u53ef\u4ee5\u6307\u5411 <code>team</code> \u8868\u4e2d\u7684\u67d0\u4e00\u884c\uff1a</p> <p></p>"},{"location":"tutorial/connect/create-connected-tables/#_2","title":"\u4e00\u5bf9\u591a\u548c\u591a\u5bf9\u4e00","text":"<p>\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u8fde\u63a5\u7684\u6570\u636e\u5173\u7cfb\uff0c\u5176\u4e2d \u4e00\u4e2a \u56e2\u961f\u53ef\u4ee5\u62e5\u6709 \u591a\u4e2a \u82f1\u96c4\u3002\u6240\u4ee5\uff0c\u8fd9\u901a\u5e38\u88ab\u79f0\u4e3a \u4e00\u5bf9\u591a \u6216 \u591a\u5bf9\u4e00 \u5173\u7cfb\u3002</p> <p>\u4ece\u82f1\u96c4\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u591a\u4e2a \u82f1\u96c4\u53ef\u4ee5\u5c5e\u4e8e \u4e00\u4e2a \u56e2\u961f\uff0c\u8fd9\u5c31\u662f \u591a\u5bf9\u4e00 \u5173\u7cfb\u3002</p> <p>\u8fd9\u662f\u6700\u5e38\u89c1\u7684\u5173\u7cfb\u7c7b\u578b\uff0c\u56e0\u6b64\u6211\u4eec\u4ece\u8fd9\u4e00\u79cd\u5173\u7cfb\u5f00\u59cb\u3002\u4f46\u4e5f\u6709 \u591a\u5bf9\u591a \u548c \u4e00\u5bf9\u4e00 \u5173\u7cfb\u3002</p>"},{"location":"tutorial/connect/create-connected-tables/#_3","title":"\u5728\u4ee3\u7801\u4e2d\u521b\u5efa\u8868\u683c","text":""},{"location":"tutorial/connect/create-connected-tables/#team","title":"\u521b\u5efa <code>team</code> \u8868\u683c","text":"<p>\u8ba9\u6211\u4eec\u4ece\u5728\u4ee3\u7801\u4e2d\u521b\u5efa\u8868\u683c\u5f00\u59cb\u3002</p> <p>\u5bfc\u5165\u6211\u4eec\u9700\u8981\u7684 <code>sqlmodel</code> \u6a21\u5757\uff0c\u5e76\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 <code>Team</code> \u6a21\u578b\uff1a</p> Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef main():\n    create_db_and_tables()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef main():\n    create_db_and_tables()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u8fd9\u4e0e\u6211\u4eec\u4e4b\u524d\u5bf9 <code>Hero</code> \u6a21\u578b\u7684\u64cd\u4f5c\u975e\u5e38\u76f8\u4f3c\u3002</p> <p><code>Team</code> \u6a21\u578b\u4f1a\u81ea\u52a8\u5bf9\u5e94\u4e00\u4e2a\u540d\u4e3a <code>\"team\"</code> \u7684\u8868\uff0c\u5e76\u4e14\u4f1a\u5305\u542b\u4ee5\u4e0b\u5217\uff1a</p> <ul> <li><code>id</code>\uff1a\u4e3b\u952e\uff0c\u7531\u6570\u636e\u5e93\u81ea\u52a8\u751f\u6210</li> <li><code>name</code>\uff1a\u56e2\u961f\u7684\u540d\u79f0<ul> <li>\u6211\u4eec\u8fd8\u544a\u8bc9 SQLModel \u4e3a\u8be5\u5217\u521b\u5efa\u7d22\u5f15</li> </ul> </li> <li><code>headquarters</code>\uff1a\u56e2\u961f\u7684\u603b\u90e8</li> </ul> <p>\u6700\u540e\uff0c\u6211\u4eec\u5728\u914d\u7f6e\u4e2d\u5c06\u5176\u6807\u8bb0\u4e3a\u4e00\u4e2a\u8868\u683c\u3002</p>"},{"location":"tutorial/connect/create-connected-tables/#hero","title":"\u521b\u5efa\u65b0\u7684 <code>hero</code> \u8868\u683c","text":"<p>\u73b0\u5728\u6211\u4eec\u6765\u521b\u5efa <code>hero</code> \u8868\u683c\u3002</p> <p>\u8fd9\u4e0e\u6211\u4eec\u4e4b\u524d\u4f7f\u7528\u7684\u6a21\u578b\u76f8\u540c\uff0c\u53ea\u662f\u6211\u4eec\u6dfb\u52a0\u4e86\u65b0\u7684 <code>team_id</code> \u5217\uff1a</p> Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef main():\n    create_db_and_tables()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef main():\n    create_db_and_tables()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u5927\u90e8\u5206\u5185\u5bb9\u5e94\u8be5\u90fd\u5f88\u719f\u6089\uff1a</p> <p>\u5217\u7684\u540d\u79f0\u5c06\u662f <code>team_id</code>\u3002\u5b83\u5c06\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u5e76\u4e14\u5728\u6570\u636e\u5e93\u4e2d\u53ef\u80fd\u662f <code>NULL</code>\uff08\u5728 Python \u4e2d\u662f <code>None</code>\uff09\uff0c\u56e0\u4e3a\u53ef\u80fd\u6709\u4e9b\u82f1\u96c4\u4e0d\u5c5e\u4e8e\u4efb\u4f55\u56e2\u961f\u3002</p> <p>\u6211\u4eec\u5728 <code>Field()</code> \u4e2d\u4e3a <code>team_id</code> \u6dfb\u52a0\u4e86\u9ed8\u8ba4\u503c <code>None</code>\uff0c\u8fd9\u6837\u5728\u521b\u5efa\u82f1\u96c4\u65f6\u5c31\u4e0d\u9700\u8981\u663e\u5f0f\u5730\u4f20\u9012 <code>team_id=None</code>\u3002</p> <p>\u73b0\u5728\uff0c\u8fd9\u91cc\u662f\u65b0\u7684\u90e8\u5206\uff1a</p> <p>\u5728 <code>Field()</code> \u4e2d\uff0c\u6211\u4eec\u4f20\u9012\u4e86 <code>foreign_key=\"team.id\"</code> \u53c2\u6570\u3002\u8fd9\u544a\u8bc9\u6570\u636e\u5e93\uff0c<code>team_id</code> \u5217\u662f\u6307\u5411 <code>team</code> \u8868\u7684\u5916\u952e\u3002 \u5916\u952e \u610f\u5473\u7740\u8fd9\u4e2a\u5217\u5c06\u5305\u542b\u7528\u6765\u6807\u8bc6 \u5916\u90e8 \u8868\u4e2d\u67d0\u884c\u7684 \u4e3b\u952e \u3002</p> <p>\u8be5\u5217 <code>team_id</code> \u4e2d\u7684\u503c\u5c06\u662f <code>team</code> \u8868\u4e2d <code>id</code> \u5217\u7684\u67d0\u4e00\u884c\u7684\u6574\u6570\u503c\u3002\u6b63\u662f\u8fd9\u4e2a\u503c\u5c06\u8fde\u63a5\u4e24\u4e2a\u8868\u683c\u3002</p>"},{"location":"tutorial/connect/create-connected-tables/#foreign_key","title":"<code>foreign_key</code> \u7684\u503c","text":"<p>\u6ce8\u610f\uff0c<code>foreign_key</code> \u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002</p> <p>\u5b57\u7b26\u4e32\u4e2d\u5305\u542b\u4e86 \u8868\u540d\uff0c\u7136\u540e\u662f\u4e00\u4e2a\u70b9\uff0c\u518d\u63a5\u7740\u662f \u5217\u540d\u3002</p> <p>\u8fd9\u8868\u793a\u6570\u636e\u5e93\u4e2d\u7684 \u8868\u540d\uff0c\u56e0\u6b64\u662f <code>\"team\"</code>\uff0c\u800c\u4e0d\u662f \u6a21\u578b \u7c7b <code>Team</code>\uff08\u5927\u5199\u5b57\u6bcd <code>T</code>\uff09\u3002</p> <p>\u5982\u679c\u4f60\u4f7f\u7528\u4e86\u81ea\u5b9a\u4e49\u7684\u8868\u540d\uff0c\u5c31\u5e94\u8be5\u4f7f\u7528\u90a3\u4e2a\u81ea\u5b9a\u4e49\u7684\u8868\u540d\u3002</p> <p>Tip</p> <p>\u4f60\u53ef\u4ee5\u5728\u9ad8\u7ea7\u7528\u6237\u6307\u5357\u4e2d\u4e86\u89e3\u5982\u4f55\u4e3a\u6a21\u578b\u8bbe\u7f6e\u81ea\u5b9a\u4e49\u8868\u540d\u3002</p>"},{"location":"tutorial/connect/create-connected-tables/#_4","title":"\u521b\u5efa\u8868\u683c","text":"<p>\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u50cf\u4e4b\u524d\u4e00\u6837\u6dfb\u52a0\u4ee3\u7801\u6765\u521b\u5efa\u5f15\u64ce\uff0c\u5e76\u521b\u5efa\u4e00\u4e2a\u51fd\u6570\u6765\u521b\u5efa\u8868\u683c\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef main():\n    create_db_and_tables()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef main():\n    create_db_and_tables()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u4e0e\u4e4b\u524d\u4e00\u6837\uff0c\u6211\u4eec\u5c06\u4ece\u53e6\u4e00\u4e2a\u51fd\u6570 <code>main()</code> \u8c03\u7528\u6b64\u51fd\u6570\uff0c\u5e76\u5c06 <code>main()</code> \u51fd\u6570\u6dfb\u52a0\u5230\u6587\u4ef6\u7684\u4e3b\u5757\u4e2d\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef main():\n    create_db_and_tables()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef main():\n    create_db_and_tables()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef main():\n    create_db_and_tables()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef main():\n    create_db_and_tables()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/connect/create-connected-tables/#_5","title":"\u8fd0\u884c\u4ee3\u7801","text":"<p>Tip</p> <p>\u5728\u8fd0\u884c\u4ee3\u7801\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u5220\u9664\u6587\u4ef6 <code>database.db</code>\uff0c\u4ee5\u786e\u4fdd\u4ece\u5934\u5f00\u59cb\u3002</p> <p>\u5982\u679c\u6211\u4eec\u8fd0\u884c\u5230\u76ee\u524d\u4e3a\u6b62\u7684\u4ee3\u7801\uff0c\u5b83\u5c06\u521b\u5efa\u6570\u636e\u5e93\u6587\u4ef6 <code>database.db</code>\uff0c\u5e76\u5728\u5176\u4e2d\u521b\u5efa\u6211\u4eec\u521a\u521a\u5b9a\u4e49\u7684 <code>team</code> \u548c <code>hero</code> \u8868\uff1a</p> <pre><code>$ python app.py\n\n// \u81ea\u52a8\u5f00\u59cb\u4e00\u4e2a\u65b0\u7684\u4e8b\u52a1\nINFO Engine BEGIN (implicit)\n\n// \u68c0\u67e5\u8868\u683c\u662f\u5426\u5df2\u7ecf\u5b58\u5728\nINFO Engine PRAGMA main.table_info(\"team\")\nINFO Engine [raw sql] ()\nINFO Engine PRAGMA temp.table_info(\"team\")\nINFO Engine [raw sql] ()\nINFO Engine PRAGMA main.table_info(\"hero\")\nINFO Engine [raw sql] ()\nINFO Engine PRAGMA temp.table_info(\"hero\")\nINFO Engine [raw sql] ()\n\n// \u521b\u5efa\u8868\u683c\nINFO Engine\nCREATE TABLE team (\n        id INTEGER,\n        name VARCHAR NOT NULL,\n        headquarters VARCHAR NOT NULL,\n        PRIMARY KEY (id)\n)\n\n\nINFO Engine [no key 0.00010s] ()\nINFO Engine\nCREATE TABLE hero (\n        id INTEGER,\n        name VARCHAR NOT NULL,\n        secret_name VARCHAR NOT NULL,\n        age INTEGER,\n        team_id INTEGER,\n        PRIMARY KEY (id),\n        FOREIGN KEY(team_id) REFERENCES team (id)\n)\n\n\nINFO Engine [no key 0.00026s] ()\nINFO Engine COMMIT\n</code></pre>"},{"location":"tutorial/connect/create-connected-tables/#sql","title":"\u5728 SQL \u4e2d\u521b\u5efa\u8868\u683c","text":"<p>\u8ba9\u6211\u4eec\u770b\u770b\u751f\u6210\u7684 SQL \u4ee3\u7801\u3002</p> <p>\u5982\u6211\u4eec\u4e4b\u524d\u6240\u89c1\uff0c\u8fd9\u4e9b <code>VARCHAR</code> \u5217\u5728 SQLite \u4e2d\u4f1a\u88ab\u8f6c\u6362\u4e3a <code>TEXT</code> \u7c7b\u578b\uff0c\u8fd9\u662f\u6211\u4eec\u7528\u6765\u8fdb\u884c\u5b9e\u9a8c\u7684\u6570\u636e\u5e93\u3002</p> <p>\u6240\u4ee5\uff0c\u7b2c\u4e00\u6761 SQL \u8bed\u53e5\u4e5f\u53ef\u4ee5\u5199\u6210\uff1a</p> <pre><code>CREATE TABLE team (\n    id INTEGER,\n    name TEXT NOT NULL,\n    headquarters TEXT NOT NULL,\n    PRIMARY KEY (id)\n)\n</code></pre> <p>\u7b2c\u4e8c\u4e2a\u8868\u683c\u5219\u53ef\u4ee5\u5199\u6210\uff1a</p> <pre><code>CREATE TABLE hero (\n    id INTEGER,\n    name TEXT NOT NULL,\n    secret_name TEXT NOT NULL,\n    age INTEGER,\n    team_id INTEGER,\n    PRIMARY KEY (id),\n    FOREIGN KEY(team_id) REFERENCES team (id)\n)\n</code></pre> <p>\u552f\u4e00\u7684\u65b0\u90e8\u5206\u662f <code>FOREIGN KEY</code> \u8fd9\u4e00\u884c\uff0c\u5982\u4f60\u6240\u89c1\uff0c\u5b83\u544a\u8bc9\u6570\u636e\u5e93\u8be5\u8868\u4e2d\u7684\u54ea\u4e2a\u5217\u662f\u5916\u952e\uff08<code>team_id</code>\uff09\uff0c\u5b83\u5f15\u7528\u4e86\u54ea\u4e2a\uff08\u5916\u90e8\uff09\u8868\uff08<code>team</code>\uff09\uff0c\u4ee5\u53ca\u90a3\u4e2a\u8868\u4e2d\u7684\u54ea\u4e2a\u5217\u662f\u8fde\u63a5\u884c\u7684\u5173\u952e\uff08<code>id</code>\uff09\u3002</p> <p>\u4f60\u53ef\u4ee5\u5728 DB Browser for SQLite \u4e2d\u81ea\u7531\u5730\u8fdb\u884c\u5b9e\u9a8c\u3002</p>"},{"location":"tutorial/connect/create-connected-tables/#_6","title":"\u5c0f\u7ed3","text":"<p>\u4f7f\u7528 SQLModel \u65f6\uff0c\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ea\u9700\u8981\u5728 <code>Field()</code> \u4e2d\u6dfb\u52a0\u4e00\u4e2a\u5b57\u6bb5\uff08\u5217\uff09\u5e76\u6307\u5b9a\u4e00\u4e2a <code>foreign_key</code>\uff0c\u5b83\u6307\u5411\u53e6\u4e00\u4e2a\u8868\u548c\u5217\uff0c\u4ece\u800c\u8fde\u63a5\u4e24\u4e2a\u8868\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u521b\u5efa\u5e76\u8fde\u63a5\u4e86\u8868\u683c\uff0c\u63a5\u4e0b\u6765\u8ba9\u6211\u4eec\u5728\u4e0b\u4e00\u7ae0\u8282\u4e2d\u521b\u5efa\u4e00\u4e9b\u6570\u636e\u884c\u3002\ud83d\ude80</p>"},{"location":"tutorial/connect/read-connected-data/","title":"\u8bfb\u53d6\u5173\u8054\u6570\u636e","text":"<p>\u73b0\u5728\u6211\u4eec\u5728\u4e24\u4e2a\u8868\u4e2d\u90fd\u6709\u4e86\u4e00\u4e9b\u6570\u636e\uff0c\u8ba9\u6211\u4eec\u6765\u9009\u62e9\u90a3\u4e9b\u5df2\u5173\u8054\u7684\u6570\u636e\u3002</p> <p><code>team</code> \u8868\u5305\u542b\u4ee5\u4e0b\u6570\u636e\uff1a</p> idnameheadquarters 1PreventersSharp Tower 2Z-ForceSister Margaret's Bar <p>\u800c <code>hero</code> \u8868\u5305\u542b\u4ee5\u4e0b\u6570\u636e\uff1a</p> idnamesecret_nameageteam_id 1DeadpondDive Wilsonnull2 2Rusty-ManTommy Sharp481 3Spider-BoyPedro Parqueadornullnull <p>\u6211\u4eec\u5c06\u7ee7\u7eed\u4f7f\u7528\u524d\u9762\u793a\u4f8b\u4e2d\u7684\u4ee3\u7801\uff0c\u5e76\u5728\u5176\u57fa\u7840\u4e0a\u6dfb\u52a0\u66f4\u591a\u5185\u5bb9\u3002</p> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/connect/read-connected-data/#sql","title":"\u4f7f\u7528 SQL \u9009\u62e9\u5173\u8054\u6570\u636e","text":"<p>\u8ba9\u6211\u4eec\u5148\u6765\u770b\u4e00\u4e0b\u5728\u9009\u62e9\u5173\u8054\u6570\u636e\u65f6 SQL \u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002\u8fd9\u4e5f\u662f SQL \u6570\u636e\u5e93\u771f\u6b63\u5f3a\u5927\u7684\u5730\u65b9\u3002</p> <p>\u5982\u679c\u60a8\u6ca1\u6709 <code>database.db</code> \u6587\u4ef6\uff0c\u53ef\u4ee5\u8fd0\u884c\u6211\u4eec\u4e4b\u524d\u7f16\u5199\u7684\u7a0b\u5e8f\uff08\u6216\u8005\u4ece\u4e0a\u9762\u7684\u9884\u89c8\u4e2d\u590d\u5236\u5b83\uff09\u6765\u521b\u5efa\u5b83\u3002</p> <p>\u73b0\u5728\u6253\u5f00 DB Browser for SQLite \u5e76\u6253\u5f00 <code>database.db</code> \u6587\u4ef6\u3002</p> <p>\u8981\u9009\u62e9\u5173\u8054\u6570\u636e\uff0c\u6211\u4eec\u4f7f\u7528\u4e0e\u4e4b\u524d\u76f8\u540c\u7684\u5173\u952e\u8bcd\uff0c\u4f46\u73b0\u5728\u6211\u4eec\u8981\u8fde\u63a5\u4e24\u4e2a\u8868\u3002</p> <p>\u8ba9\u6211\u4eec\u83b7\u53d6\u6bcf\u4e2a\u82f1\u96c4\u7684 <code>id</code>\u3001<code>name</code> \u548c\u6240\u5728\u56e2\u961f\u7684 <code>name</code>\uff1a</p> <pre><code>SELECT hero.id, hero.name, team.name\nFROM hero, team\nWHERE hero.team_id = team.id\n</code></pre> <p>Info</p> <p>\u7531\u4e8e\u6211\u4eec\u6709\u4e24\u4e2a\u540d\u4e3a <code>name</code> \u7684\u5217\uff0c\u4e00\u4e2a\u5c5e\u4e8e <code>hero</code>\uff0c\u53e6\u4e00\u4e2a\u5c5e\u4e8e <code>team</code>\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8868\u540d\u524d\u7f00\u52a0\u70b9\u7b26\u53f7\u6765\u663e\u5f0f\u6307\u5b9a\u5b83\u4eec\u7684\u6765\u6e90\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u73b0\u5728\u5728 <code>WHERE</code> \u90e8\u5206\uff0c\u6211\u4eec\u4e0d\u662f\u5c06\u67d0\u4e2a\u5217\u4e0e\u5b57\u9762\u503c\u8fdb\u884c\u6bd4\u8f83\uff08\u4f8b\u5982 <code>hero.name = \"Deadpond\"</code>\uff09\uff0c\u800c\u662f\u5c06\u4e24\u4e2a\u5217\u8fdb\u884c\u6bd4\u8f83\u3002</p> <p>\u8fd9\u610f\u5473\u7740\u5927\u81f4\u5982\u4e0b\uff1a</p> <p>\u563f\uff0cSQL \u6570\u636e\u5e93 \ud83d\udc4b\uff0c\u8bf7\u5e2e\u6211\u9009\u62e9\u4e00\u4e9b\u6570\u636e\u3002</p> <p>\u6211\u5148\u544a\u8bc9\u4f60\u6211\u9700\u8981\u54ea\u4e9b\u5217\uff1a</p> <ul> <li><code>hero</code> \u8868\u7684 <code>id</code></li> <li><code>hero</code> \u8868\u7684 <code>name</code></li> <li><code>team</code> \u8868\u7684 <code>name</code></li> </ul> <p>\u6211\u8981\u4f60\u4ece <code>hero</code> \u548c <code>team</code> \u4e24\u4e2a\u8868\u4e2d\u83b7\u53d6\u8fd9\u4e9b\u6570\u636e\u3002</p> <p>\u5e76\u4e14\uff0c\u6211\u4e0d\u5e0c\u671b\u4f60\u5c06\u6bcf\u4e2a\u82f1\u96c4\u548c\u6240\u6709\u56e2\u961f\u8fdb\u884c\u7ec4\u5408\u3002\u76f8\u53cd\uff0c\u8bf7\u4e3a\u6bcf\u4e2a\u82f1\u96c4\u68c0\u67e5\u6240\u6709\u53ef\u80fd\u7684\u56e2\u961f\uff0c\u4f46\u662f\u53ea\u8fd4\u56de <code>WHERE</code> \u6761\u4ef6\u5339\u914d\u7684\u8bb0\u5f55\uff0c\u4e5f\u5c31\u662f <code>hero.team_id</code> \u548c <code>team.id</code> \u76f8\u7b49\u7684\u8bb0\u5f55\u3002</p> <p>\u5982\u679c\u6211\u4eec\u6267\u884c\u8fd9\u4e2a SQL\uff0c\u5b83\u5c06\u8fd4\u56de\u5982\u4e0b\u8868\u683c\uff1a</p> idnamename 1DeadpondZ-Force 2Rusty-ManPreventers <p>\u4f60\u53ef\u4ee5\u5728 DB Browser for SQLite \u4e2d\u5c1d\u8bd5\u6267\u884c\u8fd9\u4e2a\u67e5\u8be2\uff1a</p> <p></p> <p>Note</p> <p>\u7b49\u4e00\u4e0b\uff0cSpider-Boy \u600e\u4e48\u4e86\uff1f\ud83d\ude31</p> <p>\u4ed6\u6ca1\u6709\u56e2\u961f\uff0c\u56e0\u6b64\u4ed6\u7684 <code>team_id</code> \u5728\u6570\u636e\u5e93\u4e2d\u662f <code>NULL</code>\u3002\u800c\u8fd9\u4e2a SQL \u67e5\u8be2\u662f\u5728\u5c06 <code>team_id</code> \u4e2d\u7684 <code>NULL</code> \u4e0e <code>team</code> \u8868\u4e2d\u7684\u6240\u6709 <code>id</code> \u5b57\u6bb5\u8fdb\u884c\u6bd4\u8f83\u3002</p> <p>\u7531\u4e8e\u6ca1\u6709 <code>id</code> \u4e3a <code>NULL</code> \u7684\u56e2\u961f\uff0c\u5b83\u6ca1\u6709\u627e\u5230\u5339\u914d\u9879\u3002</p> <p>\u4e0d\u8fc7\uff0c\u6211\u4eec\u7a0d\u540e\u5c06\u770b\u5230\u5982\u4f55\u4f7f\u7528 <code>LEFT JOIN</code> \u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002</p>"},{"location":"tutorial/connect/read-connected-data/#sqlmodel","title":"\u4f7f\u7528 SQLModel \u9009\u62e9\u5173\u8054\u6570\u636e","text":"<p>\u73b0\u5728\u8ba9\u6211\u4eec\u4f7f\u7528 SQLModel \u6765\u505a\u76f8\u540c\u7684\u9009\u62e9\u64cd\u4f5c\u3002</p> <p>\u6211\u4eec\u5c06\u521b\u5efa\u4e00\u4e2a\u51fd\u6570 <code>select_heroes()</code>\uff0c\u5c31\u50cf\u4e4b\u524d\u90a3\u6837\uff0c\u4f46\u8fd9\u6b21\u6211\u4eec\u5c06\u64cd\u4f5c\u4e24\u4e2a\u8868\u3002</p> <p>\u8fd8\u8bb0\u5f97 SQLModel \u7684 <code>select()</code> \u51fd\u6570\u5417\uff1f\u5b83\u53ef\u4ee5\u63a5\u53d7\u591a\u4e2a\u53c2\u6570\u3002</p> <p>\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4f20\u9012 <code>Hero</code> \u548c <code>Team</code> \u6a21\u578b\u7c7b\u3002\u540c\u65f6\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u5728 <code>.where()</code> \u90e8\u5206\u4f7f\u7528\u5b83\u4eec\u7684\u5217\uff1a</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero, Team).where(Hero.team_id == Team.id)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero, Team).where(Hero.team_id == Team.id)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero, Team).where(Hero.team_id == Team.id)\n        results = session.exec(statement)\n        for hero, team in results:\n            print(\"Hero:\", hero, \"Team:\", team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero, Team).where(Hero.team_id == Team.id)\n        results = session.exec(statement)\n        for hero, team in results:\n            print(\"Hero:\", hero, \"Team:\", team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u5728\u4f7f\u7528 <code>==</code> \u8fdb\u884c\u6bd4\u8f83\u65f6\uff0c\u6211\u4eec\u6b63\u5728\u4f7f\u7528 <code>Hero.team_id</code> \u548c <code>Team.id</code> \u7684\u7c7b\u5c5e\u6027\u3002</p> <p>\u8fd9\u5c06\u751f\u6210\u9002\u5f53\u7684 \u8868\u8fbe\u5f0f \u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u5c06\u8f6c\u6362\u4e3a\u6b63\u786e\u7684 SQL\uff0c\u7b49\u540c\u4e8e\u6211\u4eec\u4e4b\u524d\u770b\u5230\u7684 SQL \u793a\u4f8b\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u6267\u884c\u5b83\u5e76\u83b7\u53d6 <code>results</code> \u5bf9\u8c61\u3002</p> <p>\u7531\u4e8e\u6211\u4eec\u4f7f\u7528\u4e86\u5e26\u6709\u4e24\u4e2a\u6a21\u578b\u7684 <code>select</code>\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u6536\u5230\u8fd9\u4e24\u4e2a\u6a21\u578b\u7684\u5b9e\u4f8b\u5143\u7ec4\uff0c\u56e0\u6b64\u53ef\u4ee5\u81ea\u7136\u5730\u5728 <code>for</code> \u5faa\u73af\u4e2d\u8fed\u4ee3\u5b83\u4eec\uff1a</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero, Team).where(Hero.team_id == Team.id)\n        results = session.exec(statement)\n        for hero, team in results:\n            print(\"Hero:\", hero, \"Team:\", team)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero, Team).where(Hero.team_id == Team.id)\n        results = session.exec(statement)\n        for hero, team in results:\n            print(\"Hero:\", hero, \"Team:\", team)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero, Team).where(Hero.team_id == Team.id)\n        results = session.exec(statement)\n        for hero, team in results:\n            print(\"Hero:\", hero, \"Team:\", team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero, Team).where(Hero.team_id == Team.id)\n        results = session.exec(statement)\n        for hero, team in results:\n            print(\"Hero:\", hero, \"Team:\", team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u5728 <code>for</code> \u5faa\u73af\u4e2d\u7684\u6bcf\u4e00\u6b21\u8fed\u4ee3\uff0c\u6211\u4eec\u90fd\u4f1a\u5f97\u5230\u4e00\u4e2a\u5305\u542b <code>Hero</code> \u7c7b\u5b9e\u4f8b\u548c <code>Team</code> \u7c7b\u5b9e\u4f8b\u7684\u5143\u7ec4\u3002</p> <p>\u5728\u8fd9\u4e2a <code>for</code> \u5faa\u73af\u4e2d\uff0c\u6211\u4eec\u5c06\u5b83\u4eec\u5206\u522b\u8d4b\u503c\u7ed9\u53d8\u91cf <code>hero</code> \u548c <code>team</code>\u3002</p> <p>Info</p> <p>\u5728 SQLModel \u7684\u80cc\u540e\u6709\u5927\u91cf\u7684\u7814\u7a76\u3001\u8bbe\u8ba1\u548c\u5de5\u4f5c\uff0c\u76ee\u7684\u662f\u63d0\u4f9b\u6700\u4f73\u7684\u5f00\u53d1\u8005\u4f53\u9a8c\u3002</p> <p>\u5728\u7f16\u8f91\u5668\u4e2d\uff0c\u60a8\u5e94\u8be5\u80fd\u591f\u5bf9 <code>hero</code> \u548c <code>team</code> \u90fd\u83b7\u5f97\u81ea\u52a8\u8865\u5168\u548c\u5185\u8054\u9519\u8bef\u63d0\u793a\u3002 \ud83c\udf89</p>"},{"location":"tutorial/connect/read-connected-data/#_2","title":"\u6dfb\u52a0\u5230\u4e3b\u51fd\u6570","text":"<p>\u548c\u5f80\u5e38\u4e00\u6837\uff0c\u6211\u4eec\u5fc5\u987b\u8bb0\u5f97\u5c06\u8fd9\u4e2a\u65b0\u7684 <code>select_heroes()</code> \u51fd\u6570\u6dfb\u52a0\u5230 <code>main()</code> \u51fd\u6570\u4e2d\uff0c\u4ee5\u786e\u4fdd\u5728\u4ece\u547d\u4ee4\u884c\u8c03\u7528\u7a0b\u5e8f\u65f6\uff0c\u5b83\u4f1a\u88ab\u6267\u884c\u3002</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero, Team).where(Hero.team_id == Team.id)\n        results = session.exec(statement)\n        for hero, team in results:\n            print(\"Hero:\", hero, \"Team:\", team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero, Team).where(Hero.team_id == Team.id)\n        results = session.exec(statement)\n        for hero, team in results:\n            print(\"Hero:\", hero, \"Team:\", team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/connect/read-connected-data/#_3","title":"\u8fd0\u884c\u7a0b\u5e8f","text":"<p>\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u8fd0\u884c\u7a0b\u5e8f\uff0c\u770b\u770b\u5b83\u662f\u5982\u4f55\u663e\u793a\u6bcf\u4e2a\u82f1\u96c4\u53ca\u5176\u5bf9\u5e94\u7684\u961f\u4f0d\u7684\uff1a</p> <pre><code>$ python app.py\n\n// Previous output omitted \ud83d\ude09\n\n// Get the heroes with their teams\n2021-08-09 08:55:50,682 INFO sqlalchemy.engine.Engine SELECT hero.id, hero.name, hero.secret_name, hero.age, hero.team_id, team.id AS id_1, team.name AS name_1, team.headquarters\nFROM hero, team\nWHERE hero.team_id = team.id\n2021-08-09 08:55:50,682 INFO sqlalchemy.engine.Engine [no key 0.00015s] ()\n\n// Print the first hero and team\nHero: id=1 secret_name='Dive Wilson' team_id=2 name='Deadpond' age=None Team: headquarters='Sister Margaret's Bar' id=2 name='Z-Force'\n\n// Print the second hero and team\nHero: id=2 secret_name='Tommy Sharp' team_id=1 name='Rusty-Man' age=48 Team: headquarters='Sharp Tower' id=1 name='Preventers'\n2021-08-09 08:55:50,682 INFO sqlalchemy.engine.Engine ROLLBACK\n</code></pre>"},{"location":"tutorial/connect/read-connected-data/#sql-join","title":"\u4f7f\u7528 SQL \u7684 <code>JOIN</code> \u8fde\u63a5\u8868","text":"<p>\u4e0a\u9762\u63d0\u5230\u7684 SQL \u67e5\u8be2\u6709\u4e00\u79cd\u66ff\u4ee3\u8bed\u6cd5\uff0c\u4f7f\u7528 <code>JOIN</code> \u5173\u952e\u5b57\u800c\u4e0d\u662f <code>WHERE</code>\u3002</p> <p>\u8fd9\u662f\u4f7f\u7528 <code>WHERE</code> \u7684\u7248\u672c\uff1a</p> <pre><code>SELECT hero.id, hero.name, team.name\nFROM hero, team\nWHERE hero.team_id = team.id\n</code></pre> <p>\u8fd9\u662f\u4f7f\u7528 <code>JOIN</code> \u7684\u66ff\u4ee3\u7248\u672c\uff1a</p> <pre><code>SELECT hero.id, hero.name, team.name\nFROM hero\nJOIN team\nON hero.team_id = team.id\n</code></pre> <p>\u4e24\u8005\u662f\u7b49\u4ef7\u7684\u3002SQL \u4ee3\u7801\u7684\u5dee\u5f02\u5728\u4e8e\uff0c\u66ff\u4ee3\u7248\u672c\u4e2d\uff0c\u6211\u4eec\u6ca1\u6709\u5c06 <code>team</code> \u76f4\u63a5\u653e\u5230 <code>FROM</code> \u90e8\u5206\uff08\u4e5f\u53eb\u505a <code>FROM</code> \u5b50\u53e5\uff09\uff0c\u800c\u662f\u6dfb\u52a0\u4e86\u4e00\u4e2a <code>JOIN</code>\uff0c\u5e76\u5c06 <code>team</code> \u8868\u653e\u5728\u90a3\u91cc\u3002</p> <p>\u7136\u540e\uff0c\u6211\u4eec\u6ca1\u6709\u4f7f\u7528 <code>WHERE</code> \u6765\u6307\u5b9a\u6761\u4ef6\uff0c\u800c\u662f\u4f7f\u7528\u4e86 <code>ON</code> \u5173\u952e\u5b57\uff0c\u56e0\u4e3a <code>ON</code> \u662f\u4e0e <code>JOIN</code> \u4e00\u8d77\u4f7f\u7528\u7684\u3002\ud83e\udd37</p> <p>\u56e0\u6b64\uff0c\u8fd9\u7b2c\u4e8c\u79cd\u7248\u672c\u7684\u610f\u601d\u662f\uff1a</p> <p>\u563f\uff0cSQL \u6570\u636e\u5e93 \ud83d\udc4b\uff0c\u8bf7\u5e2e\u6211 <code>SELECT</code> \u4e00\u4e9b\u6570\u636e\u5427\u3002</p> <p>\u6211\u4f1a\u5148\u544a\u8bc9\u4f60\u6211\u9700\u8981\u54ea\u4e9b\u5217\uff1a</p> <ul> <li><code>hero</code> \u8868\u7684 <code>id</code></li> <li><code>hero</code> \u8868\u7684 <code>name</code></li> <li><code>team</code> \u8868\u7684 <code>name</code></li> </ul> <p>\u5230\u8fd9\u91cc\u548c\u4e4b\u524d\u4e00\u6837\uff0c\u54c8\u54c8\u3002</p> <p>\u73b0\u5728\uff0c\u6211\u5e0c\u671b\u4f60\u4ece <code>hero</code> \u8868\u5f00\u59cb\u83b7\u53d6\u6570\u636e\u3002</p> <p>\u7136\u540e\uff0c\u4e3a\u4e86\u83b7\u53d6\u5269\u4f59\u7684\u6570\u636e\uff0c\u6211\u5e0c\u671b\u4f60 <code>JOIN</code> \u4e0a <code>team</code> \u8868\u3002</p> <p>\u6211\u5e0c\u671b\u4f60\u5c06\u8fd9\u4e24\u4e2a\u8868\u901a\u8fc7 <code>ON</code> \u8fde\u63a5\uff0c\u8fde\u63a5\u6761\u4ef6\u662f <code>hero.team_id</code> \u7684\u503c\u4e0e <code>team.id</code> \u7684\u503c\u76f8\u7b49\u3002</p> <p>\u6211\u662f\u4e0d\u662f\u5df2\u7ecf\u8bf4\u8fc7\u8fd9\u4e9b\u4e86\uff1f\u611f\u89c9\u6211\u5728\u91cd\u590d\u81ea\u5df1 \ud83e\udd14</p> <p>\u8fd9\u5c06\u8fd4\u56de\u4e0e\u4e4b\u524d\u76f8\u540c\u7684\u8868\uff1a</p> idnamename 1DeadpondZ-Force 2Rusty-ManPreventers <p>\u540c\u6837\u7684\u7ed3\u679c\uff0c\u5728 DB Browser for SQLite \u4e2d\u4e5f\u53ef\u4ee5\u770b\u5230\uff1a</p> <p></p> <p>Tip</p> <p>\u5982\u679c\u7ed3\u679c\u662f\u4e00\u6837\u7684\uff0c\u4e3a\u4ec0\u4e48\u8fd8\u8981\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\u5462\uff1f</p> <p>\u8fd9\u4e2a <code>JOIN</code> \u5728\u7a0d\u540e\u4f1a\u53d8\u5f97\u975e\u5e38\u6709\u7528\uff0c\u5c24\u5176\u662f\u5728\u6211\u4eec\u9700\u8981\u83b7\u53d6 Spider-Boy \u7684\u6570\u636e\u65f6\uff0c\u5373\u4f7f\u4ed6\u6ca1\u6709\u961f\u4f0d\u3002</p>"},{"location":"tutorial/connect/read-connected-data/#sqlmodel_1","title":"\u5728 SQLModel \u4e2d\u8fde\u63a5\u8868","text":"<p>\u548c\u4f7f\u7528 <code>select()</code> \u65f6\u53ef\u4ee5\u7528 <code>.where()</code> \u4e00\u6837\uff0cSQLModel \u4e5f\u63d0\u4f9b\u4e86 <code>.join()</code>\u3002</p> <p>\u5728 SQLModel\uff08\u5b9e\u9645\u4e0a\u662f SQLAlchemy\uff09\u4e2d\uff0c\u5f53\u4f7f\u7528 <code>.join()</code> \u65f6\uff0c\u7531\u4e8e\u6211\u4eec\u5728\u521b\u5efa\u6a21\u578b\u65f6\u5df2\u7ecf\u58f0\u660e\u4e86\u5916\u952e\uff08<code>foreign_key</code>\uff09\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u624b\u52a8\u6307\u5b9a <code>ON</code> \u90e8\u5206\uff0cSQLModel \u4f1a\u81ea\u52a8\u63a8\u65ad\u51fa\u6765\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4ee3\u7801\u4e0a\u65b9\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero, Team).join(Team)\n        results = session.exec(statement)\n        for hero, team in results:\n            print(\"Hero:\", hero, \"Team:\", team)\n\n# \u4ee3\u7801\u4e0b\u65b9\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u4e0a\u65b9\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero, Team).join(Team)\n        results = session.exec(statement)\n        for hero, team in results:\n            print(\"Hero:\", hero, \"Team:\", team)\n\n# \u4ee3\u7801\u4e0b\u65b9\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero, Team).join(Team)\n        results = session.exec(statement)\n        for hero, team in results:\n            print(\"Hero:\", hero, \"Team:\", team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero, Team).join(Team)\n        results = session.exec(statement)\n        for hero, team in results:\n            print(\"Hero:\", hero, \"Team:\", team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u4ecd\u7136\u5728 <code>select(Hero, Team)</code> \u4e2d\u5305\u62ec\u4e86 <code>Team</code>\uff0c\u56e0\u4e3a\u6211\u4eec\u4ecd\u7136\u5e0c\u671b\u8bbf\u95ee\u8fd9\u4e9b\u6570\u636e\u3002</p> <p>\u8fd9\u4e0e\u4e4b\u524d\u7684\u793a\u4f8b\u662f\u7b49\u4ef7\u7684\u3002</p> <p>\u5982\u679c\u6211\u4eec\u5728\u547d\u4ee4\u884c\u4e2d\u8fd0\u884c\u5b83\uff0c\u8f93\u51fa\u5c06\u662f\uff1a</p> <pre><code>$ python app.py\n\n// \u4e0a\u65b9\u7684\u8f93\u51fa\u7701\u7565 \ud83d\ude09\n\n// \u4f7f\u7528\u81ea\u52a8 `ON` \u7684 `JOIN` \u8fdb\u884c\u67e5\u8be2\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age, hero.team_id, team.id AS id_1, team.name AS name_1, team.headquarters\nFROM hero JOIN team ON team.id = hero.team_id\nINFO Engine [no key 0.00032s] ()\n\n// \u6253\u5370\u7b2c\u4e00\u4e2a\u82f1\u96c4\u548c\u56e2\u961f\nHero: id=1 secret_name='Dive Wilson' team_id=2 name='Deadpond' age=None Team: headquarters='Sister Margaret's Bar' id=2 name='Z-Force'\n\n// \u6253\u5370\u7b2c\u4e8c\u4e2a\u82f1\u96c4\u548c\u56e2\u961f\nHero: id=2 secret_name='Tommy Sharp' team_id=1 name='Rusty-Man' age=48 Team: headquarters='Sharp Tower' id=1 name='Preventers'\n</code></pre>"},{"location":"tutorial/connect/read-connected-data/#sql-left-outer-join","title":"\u4f7f\u7528 SQL \u548c <code>LEFT OUTER</code>\uff08\u53ef\u80fd\u662f <code>JOIN</code>\uff09\u8fde\u63a5\u8868","text":"<p>\u5728\u4f7f\u7528 <code>JOIN</code> \u65f6\uff0c\u4f60\u53ef\u4ee5\u60f3\u8c61\u4ece <code>FROM</code> \u90e8\u5206\u5f00\u59cb\uff0c\u4f60\u5c06\u4e00\u4e2a\u8868\u653e\u5728 \u5de6 \u4fa7\u7684\u4e00\u4e2a\u5047\u60f3\u7a7a\u95f4\u4e2d\u3002</p> <p>\u7136\u540e\uff0c\u4f60\u5e0c\u671b\u53e6\u4e00\u4e2a\u8868\u6765\u8fde\u63a5\u7ed3\u679c\u3002</p> <p>\u4f60\u5c06\u7b2c\u4e8c\u4e2a\u8868\u653e\u5728\u90a3\u4e2a\u5047\u60f3\u7a7a\u95f4\u7684 \u53f3 \u4fa7\u3002</p> <p>\u63a5\u7740\uff0c\u4f60\u544a\u8bc9\u6570\u636e\u5e93\u7528\u54ea\u4e2a\u6761\u4ef6\u6765\u8fde\u63a5\u8fd9\u4e24\u4e2a\u8868\u5e76\u8fd4\u56de\u7ed3\u679c\u3002</p> <p>\u4f46\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u53ea\u6709\u6ee1\u8db3\u6761\u4ef6\u7684\u5de6\u4fa7\u548c\u53f3\u4fa7\u7684\u884c\u624d\u4f1a\u88ab\u8fd4\u56de\u3002</p> <p></p> <p>\u5728\u4e0a\u9762\u7684\u8fd9\u4e2a\u8868\u7684\u4f8b\u5b50 \ud83d\udc46\uff0c\u5b83\u4f1a\u8fd4\u56de\u6240\u6709\u82f1\u96c4\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u82f1\u96c4\u90fd\u6709\u4e00\u4e2a <code>team_id</code>\uff0c\u6240\u4ee5\u6bcf\u4e2a\u82f1\u96c4\u90fd\u53ef\u4ee5\u548c <code>team</code> \u8868\u8fde\u63a5\uff1a</p> idnamename 1DeadpondZ-Force 2Rusty-ManPreventers 3Spider-BoyPreventers"},{"location":"tutorial/connect/read-connected-data/#null","title":"\u5916\u952e\u4e3a <code>NULL</code>","text":"<p>\u4f46\u662f\uff0c\u5728\u6211\u4eec\u4e0a\u9762\u4ee3\u7801\u4e2d\u4f7f\u7528\u7684\u6570\u636e\u5e93\u91cc\uff0cSpider-Boy \u6ca1\u6709\u56e2\u961f\uff0c<code>team_id</code> \u7684\u503c\u662f <code>NULL</code>\u3002</p> <p>\u56e0\u6b64\uff0c\u65e0\u6cd5\u5c06 Spider-Boy \u7684\u884c\u4e0e <code>team</code> \u8868\u4e2d\u7684\u4efb\u4f55\u884c\u8fde\u63a5\uff1a</p> <p></p> <p>\u8fd0\u884c\u6211\u4eec\u4e4b\u524d\u4f7f\u7528\u7684\u76f8\u540c SQL\uff0c\u7ed3\u679c\u8868\u683c\u5c06\u4e0d\u5305\u62ec Spider-Boy \ud83d\ude31\uff1a</p> idnamename 1DeadpondZ-Force 2Rusty-ManPreventers"},{"location":"tutorial/connect/read-connected-data/#left-outer","title":"\u5728 <code>LEFT OUTER</code> \u4e2d\u5305\u542b\u6240\u6709\u5185\u5bb9","text":"<p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u6211\u4eec\u5e0c\u671b\u5373\u4f7f\u6ca1\u6709\u56e2\u961f\u7684\u82f1\u96c4\u4e5f\u80fd\u5305\u542b\u5728\u7ed3\u679c\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u6269\u5c55\u4e4b\u524d\u7684 SQL\uff0c\u4f7f\u7528 <code>JOIN</code> \u5e76\u5728 <code>JOIN</code> \u524d\u52a0\u4e0a <code>LEFT OUTER</code>\uff1a</p> <pre><code>SELECT hero.id, hero.name, team.name\nFROM hero\nLEFT OUTER JOIN team\nON hero.team_id = team.id\n</code></pre> <p>\u8fd9\u4e2a <code>LEFT OUTER</code> \u90e8\u5206\u544a\u8bc9\u6570\u636e\u5e93\uff0c\u5373\u4f7f\u90a3\u4e9b\u884c\u4f1a\u88ab\u6392\u9664\u5728\u5916\uff0c\u4e5f\u8981\u4fdd\u7559\u7b2c\u4e00\u4e2a\u8868\u4e2d\u7684\u6240\u6709\u5185\u5bb9\uff0c\u5373\u653e\u5728 \u5de6 \u4fa7\u7684\u8868\u3002\u6240\u4ee5\u6211\u4eec\u5e0c\u671b\u5b83\u5305\u542b\u90a3\u4e9b OUTER \u884c\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5c31\u662f\u6240\u6709\u6709\u6216\u6ca1\u6709\u56e2\u961f\u7684\u82f1\u96c4\u3002</p> <p>\u8fd9\u6837\u5c31\u80fd\u8fd4\u56de\u4ee5\u4e0b\u7ed3\u679c\uff0c\u5305\u62ec Spider-Boy \ud83c\udf89\uff1a</p> idnamename 1DeadpondZ-Force 2Rusty-ManPreventers 3Spider-Boynull <p>Tip</p> <p>\u8fd9\u4e2a\u67e5\u8be2\u548c\u4e4b\u524d\u7684\u67e5\u8be2\u552f\u4e00\u4e0d\u540c\u7684\u5c31\u662f\u90a3\u4e2a\u989d\u5916\u7684 <code>LEFT OUTER</code>\u3002</p> <p>\u53e6\u5916\uff0c\u8fd9\u91cc\u6709\u4e00\u79cd SQL \u53d8\u4f53\uff0c\u4f60\u53ef\u4ee5\u5199\u6210 <code>LEFT OUTER JOIN</code> \u6216\u8005\u76f4\u63a5\u5199 <code>LEFT JOIN</code>\uff0c\u5b83\u4eec\u662f\u4e00\u6837\u7684\u3002</p>"},{"location":"tutorial/connect/read-connected-data/#sqlmodel-left-outer","title":"\u5728 SQLModel \u4e2d\u4f7f\u7528 <code>LEFT OUTER</code> \u8fde\u63a5\u8868","text":"<p>\u73b0\u5728\u8ba9\u6211\u4eec\u5728 SQLModel \u4e2d\u590d\u73b0\u76f8\u540c\u7684\u67e5\u8be2\u3002</p> <p><code>.join()</code> \u65b9\u6cd5\u6709\u4e00\u4e2a\u53c2\u6570 <code>isouter=True</code>\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u4f7f <code>JOIN</code> \u6210\u4e3a <code>LEFT OUTER JOIN</code>\uff1a</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero, Team).join(Team, isouter=True)\n        results = session.exec(statement)\n        for hero, team in results:\n            print(\"Hero:\", hero, \"Team:\", team)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero, Team).join(Team, isouter=True)\n        results = session.exec(statement)\n        for hero, team in results:\n            print(\"Hero:\", hero, \"Team:\", team)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero, Team).join(Team, isouter=True)\n        results = session.exec(statement)\n        for hero, team in results:\n            print(\"Hero:\", hero, \"Team:\", team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero, Team).join(Team, isouter=True)\n        results = session.exec(statement)\n        for hero, team in results:\n            print(\"Hero:\", hero, \"Team:\", team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u5982\u679c\u6211\u4eec\u8fd0\u884c\u5b83\uff0c\u8f93\u51fa\u5c06\u662f\uff1a</p> <pre><code>$ python app.py\n\n// \u4e4b\u524d\u7684\u8f93\u51fa\u7701\u7565 \ud83d\ude09\n\n// \u4f7f\u7528 LEFT OUTER JOIN \u8fdb\u884c SELECT\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age, hero.team_id, team.id AS id_1, team.name AS name_1, team.headquarters\nFROM hero LEFT OUTER JOIN team ON team.id = hero.team_id\n\nINFO Engine [no key 0.00051s] ()\n\n// \u6253\u5370\u7b2c\u4e00\u4e2a\u82f1\u96c4\u548c\u56e2\u961f\nHero: id=1 secret_name='Dive Wilson' team_id=2 name='Deadpond' age=None Team: headquarters='Sister Margaret's Bar' id=2 name='Z-Force'\n// \u6253\u5370\u7b2c\u4e8c\u4e2a\u82f1\u96c4\u548c\u56e2\u961f\nHero: id=2 secret_name='Tommy Sharp' team_id=1 name='Rusty-Man' age=48 Team: headquarters='Sharp Tower' id=1 name='Preventers'\n// \u6253\u5370\u7b2c\u4e09\u4e2a\u82f1\u96c4\u548c\u56e2\u961f\uff0c\u6211\u4eec\u5305\u62ec\u4e86 Spider-Boy \ud83c\udf89\nHero: id=3 secret_name='Pedro Parqueador' team_id=None name='Spider-Boy' age=None Team: None\n</code></pre>"},{"location":"tutorial/connect/read-connected-data/#select","title":"<code>select()</code> \u4e2d\u7684\u5185\u5bb9","text":"<p>\u4f60\u53ef\u80fd\u4f1a\u60f3\uff0c\u4e3a\u4ec0\u4e48\u6211\u4eec\u5c06 <code>Team</code> \u653e\u5728 <code>select()</code> \u4e2d\uff0c\u800c\u4e0d\u662f\u4ec5\u4ec5\u653e\u5728 <code>.join()</code> \u4e2d\uff1f</p> <p>\u7136\u540e\uff0c\u4e3a\u4ec0\u4e48\u6211\u4eec\u6ca1\u6709\u5728 <code>.join()</code> \u4e2d\u5305\u62ec <code>Hero</code> \u5462\uff1f\ud83e\udd14</p> <p>\u5728 SQLModel\uff08\u5b9e\u9645\u4e0a\u662f SQLAlchemy\uff09\u4e2d\uff0c\u6240\u6709\u8fd9\u4e9b\u51fd\u6570\u548c\u5de5\u5177\u90fd\u8bd5\u56fe**\u6a21\u62df**\u5982\u4f55\u4f7f\u7528 SQL \u8bed\u8a00\u8fdb\u884c\u64cd\u4f5c\u3002</p> <p>\u8bb0\u5f97 <code>SELECT</code> \u5b9a\u4e49\u4e86\u83b7\u53d6\u7684\u5217\uff0c<code>WHERE</code> \u5b9a\u4e49\u4e86\u5982\u4f55\u8fc7\u6ee4\u5b83\u4eec\u5417\uff1f\u3002</p> <p>\u8fd9\u540c\u6837\u9002\u7528\u4e8e\u8fd9\u91cc\uff0c\u4f46\u4f7f\u7528\u7684\u662f <code>JOIN</code> \u548c <code>ON</code>\u3002</p>"},{"location":"tutorial/connect/read-connected-data/#_4","title":"\u4ec5\u9009\u62e9\u82f1\u96c4\u6570\u636e\u4f46\u8fde\u63a5\u56e2\u961f\u6570\u636e","text":"<p>\u5982\u679c\u6211\u4eec\u53ea\u628a <code>Team</code> \u653e\u5728 <code>.join()</code> \u4e2d\uff0c\u800c\u4e0d\u653e\u5728 <code>select()</code> \u51fd\u6570\u4e2d\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u65e0\u6cd5\u83b7\u53d6 <code>team</code> \u6570\u636e\u3002</p> <p>\u4f46\u662f\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765**\u8fc7\u6ee4**\u884c\u6570\u636e\u3002\ud83e\udd13</p> <p>\u6211\u4eec\u751a\u81f3\u53ef\u4ee5\u5728 <code>.join()</code> \u540e\u6dfb\u52a0\u4e00\u4e9b\u989d\u5916\u7684 <code>.where()</code> \u6765\u8fdb\u4e00\u6b65\u8fc7\u6ee4\u6570\u636e\uff0c\u4f8b\u5982\u53ea\u8fd4\u56de\u67d0\u4e2a\u56e2\u961f\u7684\u82f1\u96c4\uff1a</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).join(Team).where(Team.name == \"Preventers\")\n        results = session.exec(statement)\n        for hero in results:\n            print(\"Preventer Hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).join(Team).where(Team.name == \"Preventers\")\n        results = session.exec(statement)\n        for hero in results:\n            print(\"Preventer Hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).join(Team).where(Team.name == \"Preventers\")\n        results = session.exec(statement)\n        for hero in results:\n            print(\"Preventer Hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).join(Team).where(Team.name == \"Preventers\")\n        results = session.exec(statement)\n        for hero in results:\n            print(\"Preventer Hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4f7f\u7528 <code>.where()</code> \u8fdb\u884c**\u8fc7\u6ee4**\uff0c\u53ea\u83b7\u53d6\u5c5e\u4e8e Preventers \u56e2\u961f\u7684\u82f1\u96c4\u3002</p> <p>\u4f46\u6211\u4eec\u4ecd\u7136\u53ea\u8bf7\u6c42\u82f1\u96c4\u7684\u6570\u636e\uff0c\u800c\u4e0d\u662f\u4ed6\u4eec\u7684\u56e2\u961f\u6570\u636e\u3002</p> <p>\u5982\u679c\u6211\u4eec\u8fd0\u884c\u8fd9\u6bb5\u4ee3\u7801\uff0c\u8f93\u51fa\u5c06\u662f\uff1a</p> <pre><code>$ python app.py\n\n// \u4ec5\u9009\u62e9\u82f1\u96c4\u6570\u636e\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age, hero.team_id\n// \u4f46\u4ecd\u7136\u4e0e\u56e2\u961f\u8868\u8fde\u63a5\nFROM hero JOIN team ON team.id = hero.team_id\n// \u5e76\u4f7f\u7528 WHERE \u8fdb\u884c\u8fc7\u6ee4\uff0c\u53ea\u83b7\u53d6 Preventers \u56e2\u961f\u7684\u82f1\u96c4\nWHERE team.name = ?\nINFO Engine [no key 0.00066s] ('Preventers',)\n\n// \u6211\u4eec\u4f7f\u7528\u56e2\u961f\u8fdb\u884c\u8fc7\u6ee4\uff0c\u4f46\u53ea\u83b7\u53d6\u82f1\u96c4\u6570\u636e\nPreventer Hero: id=2 secret_name='Tommy Sharp' team_id=1 name='Rusty-Man' age=48\n</code></pre>"},{"location":"tutorial/connect/read-connected-data/#team","title":"\u5305\u62ec <code>Team</code>","text":"<p>\u901a\u8fc7\u5c06 <code>Team</code> \u653e\u5165 <code>select()</code> \u4e2d\uff0c\u6211\u4eec\u544a\u8bc9 SQLModel \u548c\u6570\u636e\u5e93\uff0c\u6211\u4eec\u4e5f\u5e0c\u671b\u83b7\u53d6\u56e2\u961f\u6570\u636e\u3002</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero, Team).join(Team).where(Team.name == \"Preventers\")\n        results = session.exec(statement)\n        for hero, team in results:\n            print(\"Preventer Hero:\", hero, \"Team:\", team)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero, Team).join(Team).where(Team.name == \"Preventers\")\n        results = session.exec(statement)\n        for hero, team in results:\n            print(\"Preventer Hero:\", hero, \"Team:\", team)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero, Team).join(Team).where(Team.name == \"Preventers\")\n        results = session.exec(statement)\n        for hero, team in results:\n            print(\"Preventer Hero:\", hero, \"Team:\", team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero, Team).join(Team).where(Team.name == \"Preventers\")\n        results = session.exec(statement)\n        for hero, team in results:\n            print(\"Preventer Hero:\", hero, \"Team:\", team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u5982\u679c\u6211\u4eec\u8fd0\u884c\u8fd9\u6bb5\u4ee3\u7801\uff0c\u5b83\u5c06\u8f93\u51fa\uff1a</p> <pre><code>$ python app.py\n\n// \u9009\u62e9\u82f1\u96c4\u548c\u56e2\u961f\u6570\u636e\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age, hero.team_id, team.id AS id_1, team.name AS name_1, team.headquarters\n// \u5c06\u82f1\u96c4\u4e0e\u56e2\u961f\u8868\u8fde\u63a5\nFROM hero JOIN team ON team.id = hero.team_id\n// \u4f7f\u7528 WHERE \u8fc7\u6ee4\uff0c\u4ec5\u83b7\u53d6 Preventers \u56e2\u961f\u7684\u82f1\u96c4\nWHERE team.name = ?\nINFO Engine [no key 0.00018s] ('Preventers',)\n\n// \u6253\u5370\u82f1\u96c4\u548c\u56e2\u961f\nPreventer Hero: id=2 secret_name='Tommy Sharp' team_id=1 name='Rusty-Man' age=48 Team: headquarters='Sharp Tower' id=1 name='Preventers'\n</code></pre> <p>\u6211\u4eec\u4ecd\u7136\u9700\u8981\u4f7f\u7528 <code>.join()</code>\uff0c\u56e0\u4e3a\u5982\u679c\u4e0d\u8fd9\u6837\u505a\uff0c\u5b83\u4f1a\u8ba1\u7b97\u6240\u6709\u53ef\u80fd\u7684\u82f1\u96c4\u548c\u56e2\u961f\u7684\u7ec4\u5408\uff0c\u4f8b\u5982\u5c06 Rusty-Man \u548c Preventers \u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u4e5f\u4f1a\u5c06 Rusty-Man \u548c Z-Force \u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u8fd9\u663e\u7136\u662f\u9519\u8bef\u7684\u3002</p>"},{"location":"tutorial/connect/read-connected-data/#_5","title":"\u5173\u7cfb\u5c5e\u6027","text":"<p>\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4e00\u76f4\u5728\u76f4\u63a5\u4f7f\u7528\u7eaf\u7cb9\u7684\u7c7b\u6a21\u578b\uff0c\u4f46\u5728\u540e\u9762\u7684\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u8fd8\u5c06\u770b\u5230\u5982\u4f55\u4f7f\u7528 \u5173\u7cfb\u5c5e\u6027 \uff0c\u8fd9\u4f7f\u6211\u4eec\u80fd\u591f\u4ee5\u66f4\u63a5\u8fd1 Python \u5bf9\u8c61\u4ee3\u7801\u7684\u65b9\u5f0f\u4e0e\u6570\u636e\u5e93\u4ea4\u4e92\u3002</p> <p>\u6211\u4eec\u8fd8\u5c06\u770b\u5230\u5982\u4f55\u4ee5\u4e0d\u540c\u7684\u3001\u66f4\u52a0\u7b80\u6d01\u7684\u65b9\u5f0f\u52a0\u8f7d\u5b83\u4eec\u7684\u6570\u636e\uff0c\u4ece\u800c\u5b9e\u73b0\u4e0e\u8fd9\u91cc\u76f8\u540c\u7684\u6548\u679c\u3002 \u2728</p>"},{"location":"tutorial/connect/remove-data-connections/","title":"\u79fb\u9664\u6570\u636e\u8fde\u63a5","text":"<p>\u5f53\u524d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a <code>team</code> \u8868\uff1a</p> idnameheadquarters 1PreventersSharp Tower 2Z-ForceSister Margaret's Bar <p>\u4ee5\u53ca\u4e00\u4e2a <code>hero</code> \u8868\uff1a</p> idnamesecret_nameageteam_id 1DeadpondDive Wilsonnull2 2Rusty-ManTommy Sharp481 3Spider-BoyPedro Parqueadornull1 <p>\u73b0\u5728\u6211\u4eec\u6765\u770b\u5982\u4f55**\u79fb\u9664**\u8868\u4e4b\u95f4\u884c\u7684\u8fde\u63a5\u3002</p> <p>\u6211\u4eec\u5c06\u7ee7\u7eed\u4f7f\u7528\u524d\u4e00\u7ae0\u8282\u7684\u4ee3\u7801\u3002</p> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team_id = team_preventers.id\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team_id = team_preventers.id\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/connect/remove-data-connections/#_2","title":"\u65ad\u5f00\u8fde\u63a5","text":"<p>\u6211\u4eec\u4e0d\u9700\u8981\u771f\u6b63\u5220\u9664\u4efb\u4f55\u6570\u636e\u6765\u65ad\u5f00\u8fde\u63a5\u3002\u6211\u4eec\u53ef\u4ee5\u53ea\u5c06\u5916\u952e\u5b57\u6bb5\u7684\u503c\u8bbe\u4e3a <code>None</code>\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u662f\u5c06 <code>team_id</code> \u8bbe\u4e3a <code>None</code>\u3002</p> <p>\u5047\u8bbe Spider-Boy \u5bf9\u4e8e Preventers \u56e2\u961f\u7f3a\u4e4f\u53cb\u597d\u7684\u90bb\u5c45\u611f\u5230\u538c\u70e6\uff0c\u60f3\u8981\u9000\u51fa\u8fd9\u4e2a\u56e2\u961f\u3002</p> <p>\u6211\u4eec\u53ea\u9700\u8981\u5c06 <code>team_id</code> \u8bbe\u7f6e\u4e3a <code>None</code>\uff0c\u8fd9\u6837\u5b83\u5c31\u4e0d\u518d\u4e0e\u8be5\u56e2\u961f\u6709\u8fde\u63a5\u4e86\uff1a</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n\n        # Previous code here omitted \ud83d\udc48\n\n        hero_spider_boy.team_id = None\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"No longer Preventer:\", hero_spider_boy)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n\n        # Previous code here omitted \ud83d\udc48\n\n        hero_spider_boy.team_id = None\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"No longer Preventer:\", hero_spider_boy)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team_id = team_preventers.id\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_spider_boy.team_id = None\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"No longer Preventer:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team_id = team_preventers.id\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_spider_boy.team_id = None\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"No longer Preventer:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u540c\u6837\uff0c\u6211\u4eec\u53ea\u662f**\u8d4b\u503c**\u7ed9\u5b57\u6bb5\u5c5e\u6027 <code>team_id</code>\uff0c\u5c06\u5176\u8bbe\u7f6e\u4e3a <code>None</code>\uff0c\u5728\u6570\u636e\u5e93\u4e2d\u8fd9\u610f\u5473\u7740 <code>NULL</code>\u3002\u7136\u540e\u6211\u4eec\u5c06\u82f1\u96c4\u5bf9\u8c61 <code>add()</code> \u5230\u4f1a\u8bdd\u4e2d\uff0c\u518d\u901a\u8fc7 <code>commit()</code> \u63d0\u4ea4\u3002</p> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4f7f\u7528 <code>refresh()</code> \u6765\u83b7\u53d6\u6700\u65b0\u7684\u6570\u636e\uff0c\u5e76\u6253\u5370\u51fa\u6765\u3002</p> <p>\u5728\u547d\u4ee4\u884c\u4e2d\u8fd0\u884c\u540e\u5c06\u8f93\u51fa\uff1a</p> <pre><code>$ python app.py\n\n// \u4e4b\u524d\u7684\u8f93\u51fa\u7701\u7565 \ud83d\ude09\n\n// \u66f4\u65b0\u82f1\u96c4\nINFO Engine UPDATE hero SET team_id=? WHERE hero.id = ?\nINFO Engine [cached since 0.07753s ago] (None, 3)\n// \u63d0\u4ea4\u4f1a\u8bdd\nINFO Engine COMMIT\n// \u81ea\u52a8\u542f\u52a8\u4e00\u4e2a\u65b0\u4e8b\u52a1\nINFO Engine BEGIN (implicit)\n// \u5237\u65b0\u82f1\u96c4\u6570\u636e\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age, hero.team_id\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.1661s ago] (3,)\n\n// \u6253\u5370\u6ca1\u6709\u56e2\u961f\u7684\u82f1\u96c4\nNo longer Preventer: id=3 secret_name='Pedro Parqueador' team_id=None name='Spider-Boy' age=None\n</code></pre> <p>\u5c31\u8fd9\u6837\uff0c\u6211\u4eec\u901a\u8fc7\u5c06\u5916\u952e\u5217\u7684\u503c\u8bbe\u4e3a <code>None</code>\uff0c\u6210\u529f\u79fb\u9664\u4e86\u4e0d\u540c\u8868\u4e4b\u95f4\u7684\u8fde\u63a5\u3002\ud83d\udca5</p>"},{"location":"tutorial/connect/update-data-connections/","title":"\u66f4\u65b0\u6570\u636e\u8fde\u63a5","text":"<p>\u6b64\u65f6\uff0c\u6211\u4eec\u6709\u4e00\u4e2a <code>team</code> \u8868\uff1a</p> idnameheadquarters 1PreventersSharp Tower 2Z-ForceSister Margaret's Bar <p>\u4ee5\u53ca\u4e00\u4e2a <code>hero</code> \u8868\uff1a</p> idnamesecret_nameageteam_id 1DeadpondDive Wilsonnull2 2Rusty-ManTommy Sharp481 3Spider-BoyPedro Parqueadornullnull <p>\u5176\u4e2d\u4e00\u4e9b\u82f1\u96c4\u5c5e\u4e8e\u67d0\u4e2a\u56e2\u961f\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u5c06\u770b\u5230\u5982\u4f55 \u66f4\u65b0 \u8fd9\u4e9b\u884c\u4e4b\u95f4\u7684\u8fde\u63a5\u3002</p> <p>\u6211\u4eec\u5c06\u7ee7\u7eed\u4f7f\u7528\u521b\u5efa\u82f1\u96c4\u7684\u4ee3\u7801\uff0c\u5e76\u5bf9\u5176\u8fdb\u884c\u66f4\u65b0\u3002</p> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/connect/update-data-connections/#_2","title":"\u4e3a\u82f1\u96c4\u5206\u914d\u4e00\u4e2a\u56e2\u961f","text":"<p>\u5047\u8bbe Tommy Sharp \u5229\u7528\u4ed6\u201c\u5bcc\u6709\u7684\u53d4\u53d4\u201d\u7684\u9b45\u529b\u62db\u52df Spider-Boy \u52a0\u5165 Preventers \u56e2\u961f\uff0c\u73b0\u5728\u6211\u4eec\u9700\u8981\u66f4\u65b0 Spider-Boy \u82f1\u96c4\u5bf9\u8c61\uff0c\u5c06\u5176\u8fde\u63a5\u5230 Preventers \u56e2\u961f\u3002</p> <p>\u8fd9\u6837\u505a\u5c31\u50cf\u66f4\u65b0\u4efb\u4f55\u5176\u4ed6\u5b57\u6bb5\u4e00\u6837\uff1a</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n\n        # Previous code here omitted \ud83d\udc48\n\n        hero_spider_boy.team_id = team_preventers.id\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n\n        # Previous code here omitted \ud83d\udc48\n\n        hero_spider_boy.team_id = team_preventers.id\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team_id = team_preventers.id\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team_id = team_preventers.id\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5730 \u5206\u914d \u4e00\u4e2a\u503c\u7ed9\u5b57\u6bb5\u5c5e\u6027 <code>team_id</code>\uff0c\u7136\u540e\u5c06\u82f1\u96c4\u5bf9\u8c61 <code>add()</code> \u5230\u4f1a\u8bdd\u4e2d\uff0c\u518d\u901a\u8fc7 <code>commit()</code> \u63d0\u4ea4\u3002</p> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4f7f\u7528 <code>refresh()</code> \u6765\u83b7\u53d6\u6700\u65b0\u7684\u6570\u636e\uff0c\u5e76\u6253\u5370\u5b83\u3002</p> <p>\u5728\u547d\u4ee4\u884c\u4e2d\u8fd0\u884c\u540e\u5c06\u8f93\u51fa\uff1a</p> <pre><code>$ python app.py\n\n// \u4e4b\u524d\u7684\u8f93\u51fa\u7701\u7565 \ud83d\ude09\n\n// \u66f4\u65b0\u82f1\u96c4\nINFO Engine UPDATE hero SET team_id=? WHERE hero.id = ?\nINFO Engine [generated in 0.00014s] (1, 3)\n// \u63d0\u4ea4\u4f1a\u8bdd\u4fdd\u5b58\u66f4\u6539\nINFO Engine COMMIT\n// \u81ea\u52a8\u542f\u52a8\u4e00\u4e2a\u65b0\u4e8b\u52a1\nINFO Engine BEGIN (implicit)\n// \u5237\u65b0\u82f1\u96c4\u6570\u636e\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age, hero.team_id\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.08837s ago] (3,)\n\n// \u6253\u5370\u66f4\u65b0\u540e\u7684\u82f1\u96c4\nUpdated hero: id=3 secret_name='Pedro Parqueador' team_id=1 name='Spider-Boy' age=None\n</code></pre> <p>\u73b0\u5728 Spider-Boy \u7684 <code>team_id=1</code>\uff0c\u8fd9\u662f Preventers \u56e2\u961f\u7684 ID\u3002\ud83c\udf89</p> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u770b\u5230\u5982\u4f55\u5728\u4e0b\u4e00\u7ae0\u8282\u4e2d\u5220\u9664\u8fde\u63a5\u3002\ud83d\udca5</p>"},{"location":"tutorial/fastapi/","title":"FastAPI \u548c Pydantic - \u7b80\u4ecb","text":"<p>SQLModel \u6700\u7a81\u51fa\u7684\u5e94\u7528\u573a\u666f\u4e4b\u4e00\uff0c\u4e5f\u662f\u5b83\u521b\u5efa\u7684\u4e3b\u8981\u539f\u56e0\uff0c\u5c31\u662f\u4e0e FastAPI \u7ed3\u5408\u4f7f\u7528\u3002\u2728</p> <p>FastAPI \u662f\u4e00\u4e2a\u7528\u4e8e\u6784\u5efa Web API \u7684 Python Web \u6846\u67b6\uff0c\u7531 SQLModel \u7684\u4f5c\u8005\u521b\u5efa\u3002FastAPI \u4e5f\u6784\u5efa\u5728 Pydantic \u4e4b\u4e0a\u3002</p> <p>\u5728\u8fd9\u4e00\u7ec4\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u770b\u5230\u5982\u4f55\u5c06 SQLModel \u8868\u6a21\u578b\uff08\u8868\u793a SQL \u6570\u636e\u5e93\u4e2d\u7684\u8868\uff0c\u548c\u6211\u4eec\u5230\u76ee\u524d\u4e3a\u6b62\u770b\u5230\u7684\u6240\u6709\u6a21\u578b\u4e00\u6837\uff09\u4e0e \u6570\u636e\u6a21\u578b\uff08\u4ec5\u8868\u793a\u6570\u636e\uff0c\u5b9e\u9645\u4e0a\u662f\u5728\u5e55\u540e\u4f7f\u7528 Pydantic \u6a21\u578b\uff09\u7ed3\u5408\u4f7f\u7528\u3002</p> <p>\u80fd\u591f\u5c06 SQLModel \u8868 \u6a21\u578b\u4e0e\u7eaf \u6570\u636e \u6a21\u578b\u7ed3\u5408\u4f7f\u7528\u672c\u8eab\u5c31\u5f88\u6709\u7528\uff0c\u4f46\u4e3a\u4e86\u8ba9\u6240\u6709\u793a\u4f8b\u66f4\u52a0\u5177\u4f53\uff0c\u6211\u4eec\u5c06\u4e0e FastAPI \u4e00\u8d77\u4f7f\u7528\u5b83\u4eec\u3002</p> <p>\u5230\u6700\u540e\uff0c\u6211\u4eec\u5c06\u62e5\u6709\u4e00\u4e2a \u7b80\u5355 \u4f46 \u5b8c\u6574 \u7684 Web API\uff0c\u7528\u4e8e\u4e0e\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u8fdb\u884c\u4ea4\u4e92\u3002\ud83c\udf89</p>"},{"location":"tutorial/fastapi/#fastapi","title":"\u5b66\u4e60 FastAPI","text":"<p>\u5982\u679c\u4f60\u4ece\u672a\u4f7f\u7528\u8fc7 FastAPI\uff0c\u53ef\u80fd\u5728\u7ee7\u7eed\u4e4b\u524d\u5148\u53bb\u4e86\u89e3\u4e00\u4e0b\u5b83\u4f1a\u662f\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002</p> <p>\u53ea\u9700\u9605\u8bfb\u5e76\u5c1d\u8bd5\u4e00\u4e0b FastAPI \u5b98\u65b9\u9875\u9762 \u4e0a\u7684\u793a\u4f8b\u5c31\u8db3\u591f\u4e86\uff0c\u5e94\u8be5\u4e0d\u4f1a\u82b1\u8d39\u4f60\u8d85\u8fc7 10 \u5206\u949f\u3002</p>"},{"location":"tutorial/fastapi/delete/","title":"\u4f7f\u7528 FastAPI \u5220\u9664\u6570\u636e","text":"<p>\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u6dfb\u52a0\u4e00\u4e2a \u8def\u5f84\u64cd\u4f5c \u6765\u5220\u9664\u4e00\u4e2a\u82f1\u96c4\u3002</p> <p>\u8fd9\u975e\u5e38\u7b80\u5355\u3002\ud83d\ude01</p>"},{"location":"tutorial/fastapi/delete/#_1","title":"\u5220\u9664\u8def\u5f84\u64cd\u4f5c","text":"<p>\u56e0\u4e3a\u6211\u4eec\u8981 \u5220\u9664 \u6570\u636e\uff0c\u6240\u4ee5\u4f7f\u7528 HTTP \u7684 <code>DELETE</code> \u64cd\u4f5c\u3002</p> <p>\u6211\u4eec\u4ece\u8def\u5f84\u53c2\u6570\u4e2d\u83b7\u53d6 <code>hero_id</code>\uff0c\u5e76\u9a8c\u8bc1\u5b83\u662f\u5426\u5b58\u5728\uff0c\u6b63\u5982\u6211\u4eec\u5728\u8bfb\u53d6\u5355\u4e2a\u82f1\u96c4\u6216\u66f4\u65b0\u82f1\u96c4\u65f6\u6240\u505a\u7684\u90a3\u6837\uff0c\u53ef\u80fd\u4f1a\u629b\u51fa\u4e00\u4e2a <code>404</code> \u9519\u8bef\u54cd\u5e94\u3002</p> <p>\u5982\u679c\u786e\u5b9e\u627e\u5230\u8be5\u82f1\u96c4\uff0c\u6211\u4eec\u53ea\u9700\u4f7f\u7528 session \u5c06\u5176\u5220\u9664\u3002</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        session.delete(hero)\n        session.commit()\n        return {\"ok\": True}\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        session.delete(hero)\n        session.commit()\n        return {\"ok\": True}\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        session.delete(hero)\n        session.commit()\n        return {\"ok\": True}\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        for key, value in hero_data.items():\n            setattr(db_hero, key, value)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        session.delete(hero)\n        session.commit()\n        return {\"ok\": True}\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        for key, value in hero_data.items():\n            setattr(db_hero, key, value)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        session.delete(hero)\n        session.commit()\n        return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        for key, value in hero_data.items():\n            setattr(db_hero, key, value)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        session.delete(hero)\n        session.commit()\n        return {\"ok\": True}\n</code></pre> <p>\u5220\u9664\u6210\u529f\u540e\uff0c\u6211\u4eec\u53ea\u9700\u8fd4\u56de\u4ee5\u4e0b\u54cd\u5e94\uff1a</p> <pre><code>{\n    \"ok\": true\n}\n</code></pre>"},{"location":"tutorial/fastapi/delete/#_2","title":"\u5c0f\u7ed3","text":"<p>\u5c31\u662f\u8fd9\u6837\uff0c\u6b22\u8fce\u5728\u4ea4\u4e92\u5f0f\u6587\u6863 UI \u4e2d\u5c1d\u8bd5\u5220\u9664\u4e00\u4e9b\u82f1\u96c4\u3002\ud83d\udca5</p> <p>\u4f7f\u7528 FastAPI \u6765\u8bfb\u53d6\u6570\u636e\u5e76\u7ed3\u5408 SQLModel \u4f7f\u5f97\u4ece\u6570\u636e\u5e93\u4e2d\u5220\u9664\u6570\u636e\u53d8\u5f97\u975e\u5e38\u7b80\u5355\u3002</p>"},{"location":"tutorial/fastapi/limit-and-offset/","title":"\u4f7f\u7528 FastAPI \u83b7\u53d6\u5e26\u9650\u5236\u548c\u504f\u79fb\u91cf\u7684\u82f1\u96c4\u5217\u8868","text":"<p>\u5f53\u5ba2\u6237\u7aef\u53d1\u9001\u8bf7\u6c42\u83b7\u53d6\u6240\u6709\u82f1\u96c4\u65f6\uff0c\u6211\u4eec\u4e4b\u524d\u8fd4\u56de\u7684\u662f\u6240\u6709\u82f1\u96c4\u3002</p> <p>\u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u6709 \u6210\u5343\u4e0a\u4e07 \u7684\u82f1\u96c4\uff0c\u8fd9\u53ef\u80fd\u4f1a\u6d88\u8017\u5927\u91cf\u7684 \u8ba1\u7b97\u8d44\u6e90\u3001\u7f51\u7edc\u5e26\u5bbd\u7b49\u3002</p> <p>\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u5bf9\u6b64\u8fdb\u884c\u9650\u5236\u3002</p> <p>\u8ba9\u6211\u4eec\u4f7f\u7528\u524d\u9762\u6559\u7a0b\u7ae0\u8282\u4e2d\u5b66\u5230\u7684 \u504f\u79fb\u91cf\uff08offset\uff09\u548c \u9650\u5236\uff08limit\uff09\u6765\u5904\u7406 API \u8bf7\u6c42\u3002</p> <p>Info</p> <p>\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e5f\u53eb\u505a \u5206\u9875\u3002</p>"},{"location":"tutorial/fastapi/limit-and-offset/#_1","title":"\u5c06\u9650\u5236\u548c\u504f\u79fb\u91cf\u6dfb\u52a0\u5230\u67e5\u8be2\u53c2\u6570","text":"<p>\u6211\u4eec\u5c06 <code>limit</code> \u548c <code>offset</code> \u6dfb\u52a0\u5230\u67e5\u8be2\u53c2\u6570\u4e2d\u3002</p> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5c06\u8fd4\u56de\u6570\u636e\u5e93\u4e2d\u7684\u524d\u51e0\u6761\u7ed3\u679c\uff0c\u56e0\u6b64 <code>offset</code> \u7684\u9ed8\u8ba4\u503c\u4e3a <code>0</code>\u3002</p> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5c06\u8fd4\u56de\u6700\u591a <code>100</code> \u4e2a\u82f1\u96c4\uff0c\u56e0\u6b64 <code>limit</code> \u7684\u9ed8\u8ba4\u503c\u4e3a <code>100</code>\u3002</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# \u8fd9\u91cc\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# \u8fd9\u91cc\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# \u8fd9\u91cc\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n</code></pre> <p>\u6211\u4eec\u5e0c\u671b\u5141\u8bb8\u5ba2\u6237\u7aef\u8bbe\u7f6e\u4e0d\u540c\u7684 <code>offset</code> \u548c <code>limit</code> \u503c\u3002</p> <p>\u4f46\u6211\u4eec\u4e0d\u5e0c\u671b\u4ed6\u4eec\u8bbe\u7f6e\u4e00\u4e2a\u50cf <code>9999</code> \u8fd9\u6837\u7684 <code>limit</code>\uff0c\u90a3\u7b80\u76f4\u592a\u591a\u4e86\uff01 \ud83d\ude31</p> <p>\u6240\u4ee5\uff0c\u4e3a\u4e86\u9632\u6b62\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u5728 <code>limit</code> \u67e5\u8be2\u53c2\u6570\u4e2d\u6dfb\u52a0\u4e86\u989d\u5916\u7684\u9a8c\u8bc1\uff0c\u58f0\u660e\u5b83\u5fc5\u987b\u5c0f\u4e8e\u6216\u7b49\u4e8e <code>100</code>\uff0c\u4f7f\u7528 <code>le=100</code>\u3002</p> <p>\u8fd9\u6837\uff0c\u5ba2\u6237\u7aef\u53ef\u4ee5\u51b3\u5b9a\u83b7\u53d6\u66f4\u5c11\u7684\u82f1\u96c4\uff0c\u4f46\u4e0d\u80fd\u8d85\u8fc7\u8fd9\u4e2a\u9650\u5236\u3002</p> <p>Info</p> <p>\u5982\u679c\u4f60\u9700\u8981\u5237\u65b0\u67e5\u8be2\u53c2\u6570\u53ca\u5176\u9a8c\u8bc1\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u53ef\u4ee5\u67e5\u770b FastAPI \u6587\u6863\uff1a</p> <ul> <li>\u67e5\u8be2\u53c2\u6570</li> <li>\u67e5\u8be2\u53c2\u6570\u548c\u5b57\u7b26\u4e32\u9a8c\u8bc1</li> <li>\u8def\u5f84\u53c2\u6570\u548c\u6570\u503c\u9a8c\u8bc1</li> </ul>"},{"location":"tutorial/fastapi/limit-and-offset/#ui","title":"\u67e5\u770b\u6587\u6863 UI","text":"<p>\u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6587\u6863 UI \u663e\u793a\u4e86\u65b0\u7684\u53c2\u6570\uff0c\u7528\u4e8e\u63a7\u5236\u6570\u636e\u7684 limit \u548c offset\u3002</p> <p></p>"},{"location":"tutorial/fastapi/limit-and-offset/#_2","title":"\u603b\u7ed3","text":"<p>\u4f60\u53ef\u4ee5\u4f7f\u7528 FastAPI \u7684\u81ea\u52a8\u6570\u636e\u9a8c\u8bc1\u6765\u83b7\u53d6 <code>limit</code> \u548c <code>offset</code> \u7684\u53c2\u6570\uff0c\u7136\u540e\u4f7f\u7528\u5b83\u4eec\u4e0e session \u4e00\u8d77\u63a7\u5236\u54cd\u5e94\u4e2d\u53d1\u9001\u7684\u6570\u636e\u8303\u56f4\u3002</p>"},{"location":"tutorial/fastapi/multiple-models/","title":"FastAPI \u4e2d\u7684\u591a\u4e2a\u6a21\u578b","text":"<p>\u6211\u4eec\u4e00\u76f4\u5728\u4f7f\u7528\u76f8\u540c\u7684 <code>Hero</code> \u6a21\u578b\u6765\u58f0\u660e\u6211\u4eec\u5728 API \u4e2d\u63a5\u6536\u7684\u6570\u636e\u7684 schema\u3001\u6570\u636e\u5e93\u4e2d\u7684\u8868\u6a21\u578b\u4ee5\u53ca\u6211\u4eec\u5728\u54cd\u5e94\u4e2d\u53d1\u9001\u56de\u7684\u6570\u636e\u7684 schema\u3002</p> <p>\u4f46\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u6a21\u578b\u4e4b\u95f4\u4f1a\u6709\u4e00\u4e9b\u7ec6\u5fae\u7684\u5dee\u522b\u3002\u6211\u4eec\u5c06\u4f7f\u7528\u591a\u4e2a\u6a21\u578b\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002</p> <p>\u5728\u8fd9\u91cc\uff0c\u4f60\u5c06\u770b\u5230 SQLModel \u7684\u4e3b\u8981\u548c\u6700\u5f3a\u5927\u7684\u7279\u6027\u3002\ud83d\ude0e</p>"},{"location":"tutorial/fastapi/multiple-models/#schema","title":"\u5ba1\u67e5\u521b\u5efa schema","text":"<p>\u8ba9\u6211\u4eec\u4ece\u5ba1\u67e5\u6587\u6863 UI \u4e2d\u81ea\u52a8\u751f\u6210\u7684 schema \u5f00\u59cb\u3002</p> <p>\u5bf9\u4e8e\u8f93\u5165\uff0c\u6211\u4eec\u6709\uff1a</p> <p></p> <p>\u5982\u679c\u6211\u4eec\u4ed4\u7ec6\u89c2\u5bdf\uff0c\u4f1a\u770b\u5230\u5b83\u663e\u793a\u5ba2\u6237\u7aef \u53ef\u80fd \u4f1a\u5728\u8bf7\u6c42\u7684 JSON \u6b63\u6587\u4e2d\u53d1\u9001\u4e00\u4e2a <code>id</code> \u5b57\u6bb5\u3002</p> <p>\u8fd9\u610f\u5473\u7740\u5ba2\u6237\u7aef\u53ef\u80fd\u4f1a\u5c1d\u8bd5\u4f7f\u7528\u6570\u636e\u5e93\u4e2d\u5df2\u7ecf\u5b58\u5728\u7684\u53e6\u4e00\u4e2a\u82f1\u96c4\u7684 ID\u3002</p> <p>\u8fd9\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\u3002</p> <p>\u6211\u4eec\u5e0c\u671b\u5ba2\u6237\u7aef\u53ea\u53d1\u9001\u521b\u5efa\u65b0\u82f1\u96c4\u6240\u9700\u7684\u6570\u636e\uff1a</p> <ul> <li><code>name</code></li> <li><code>secret_name</code></li> <li>\u53ef\u9009\u7684 <code>age</code></li> </ul> <p>\u6211\u4eec\u5e0c\u671b <code>id</code> \u7531\u6570\u636e\u5e93\u81ea\u52a8\u751f\u6210\uff0c\u56e0\u6b64\u6211\u4eec\u4e0d\u5e0c\u671b\u5ba2\u6237\u7aef\u53d1\u9001\u8be5\u5b57\u6bb5\u3002</p> <p>\u7a0d\u540e\u6211\u4eec\u5c06\u770b\u5230\u5982\u4f55\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002</p>"},{"location":"tutorial/fastapi/multiple-models/#schema_1","title":"\u5ba1\u67e5\u54cd\u5e94 schema","text":"<p>\u73b0\u5728\u8ba9\u6211\u4eec\u5ba1\u67e5\u6587\u6863 UI \u4e2d\u6211\u4eec\u53d1\u9001\u7ed9\u5ba2\u6237\u7aef\u7684\u54cd\u5e94 schema\u3002</p> <p>\u5982\u679c\u4f60\u70b9\u51fb\u5c0f\u6807\u7b7e Schema\uff0c\u800c\u4e0d\u662f Example Value\uff0c\u4f60\u5c06\u770b\u5230\u5982\u4e0b\u5185\u5bb9\uff1a</p> <p></p> <p>\u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u8be6\u7ec6\u5185\u5bb9\u3002</p> <p>\u5e26\u6709\u7ea2\u8272\u661f\u53f7\uff08*\uff09\u7684\u5b57\u6bb5\u662f\u201c\u5fc5\u586b\u9879\u201d\u3002</p> <p>\u8fd9\u610f\u5473\u7740\u6211\u4eec\u7684 API \u5e94\u7528\u5fc5\u987b\u5728\u54cd\u5e94\u4e2d\u8fd4\u56de\u8fd9\u4e9b\u5b57\u6bb5\uff1a</p> <ul> <li><code>name</code></li> <li><code>secret_name</code></li> </ul> <p><code>age</code> \u662f\u53ef\u9009\u7684\uff0c\u6211\u4eec\u4e0d\u5fc5\u8fd4\u56de\u5b83\uff0c\u6216\u8005\u5b83\u53ef\u4ee5\u662f <code>None</code>\uff08\u5728 JSON \u4e2d\u662f <code>null</code>\uff09\uff0c\u4f46 <code>name</code> \u548c <code>secret_name</code> \u662f\u5fc5\u586b\u7684\u3002</p> <p>\u8fd9\u91cc\u6709\u4e2a\u5947\u602a\u7684\u5730\u65b9\uff0c<code>id</code> \u76ee\u524d\u4f3c\u4e4e\u4e5f\u662f\u201c\u53ef\u9009\u7684\u201d\u3002\ud83e\udd14</p> <p>\u8fd9\u662f\u56e0\u4e3a\u5728\u6211\u4eec\u7684 SQLModel \u7c7b\u4e2d\uff0c\u6211\u4eec\u58f0\u660e <code>id</code> \u4e3a <code>Optional[int]</code>\uff0c\u56e0\u4e3a\u5b83\u5728\u5185\u5b58\u4e2d\u53ef\u4ee5\u662f <code>None</code>\uff0c\u76f4\u5230\u6211\u4eec\u5c06\u5176\u4fdd\u5b58\u5230\u6570\u636e\u5e93\u4e2d\uff0c\u6700\u7ec8\u83b7\u53d6\u5b9e\u9645\u7684 ID\u3002</p> <p>\u4f46\u5728\u54cd\u5e94\u4e2d\uff0c\u6211\u4eec\u59cb\u7ec8\u53d1\u9001\u6765\u81ea\u6570\u636e\u5e93\u7684\u6a21\u578b\uff0c\u56e0\u6b64\u5b83 \u603b\u662f\u6709\u4e00\u4e2a ID\u3002\u6240\u4ee5\u54cd\u5e94\u4e2d\u7684 <code>id</code> \u5e94\u8be5\u58f0\u660e\u4e3a\u5fc5\u586b\u9879\u3002</p> <p>\u8fd9\u610f\u5473\u7740\u6211\u4eec\u7684\u5e94\u7528\u627f\u8bfa\uff0c\u5982\u679c\u5b83\u53d1\u9001\u4e00\u4e2a\u82f1\u96c4\uff0c\u5b83\u80af\u5b9a\u4f1a\u6709\u4e00\u4e2a\u5e26\u6709\u503c\u7684 <code>id</code>\uff0c\u800c\u4e0d\u4f1a\u662f <code>None</code>\u3002</p>"},{"location":"tutorial/fastapi/multiple-models/#_1","title":"\u4e3a\u4ec0\u4e48\u4e3a\u54cd\u5e94\u5b9a\u4e49\u5951\u7ea6\u5f88\u91cd\u8981","text":"<p>API \u7684\u6700\u7ec8\u76ee\u6807\u662f\u8ba9\u4e00\u4e9b \u5ba2\u6237\u7aef\u4f7f\u7528\u5b83\u3002</p> <p>\u8fd9\u4e9b\u5ba2\u6237\u7aef\u53ef\u4ee5\u662f\u524d\u7aef\u5e94\u7528\u3001\u547d\u4ee4\u884c\u7a0b\u5e8f\u3001\u56fe\u5f62\u7528\u6237\u754c\u9762\u3001\u79fb\u52a8\u5e94\u7528\u3001\u5176\u4ed6\u540e\u7aef\u5e94\u7528\u7b49\u3002</p> <p>\u8fd9\u4e9b\u5ba2\u6237\u7aef\u7f16\u5199\u7684\u4ee3\u7801\u4f9d\u8d56\u4e8e\u6211\u4eec API \u544a\u8bc9\u4ed6\u4eec\u4ed6\u4eec \u9700\u8981\u53d1\u9001 \u4ec0\u4e48\uff0c\u4ee5\u53ca\u4ed6\u4eec \u53ef\u4ee5\u671f\u5f85\u63a5\u6536\u5230 \u4ec0\u4e48\u3002</p> <p>\u8ba9\u53cc\u65b9\u975e\u5e38\u6e05\u695a\uff0c\u5c06\u4f7f\u4e0e API \u4ea4\u4e92\u53d8\u5f97\u66f4\u52a0\u5bb9\u6613\u3002</p> <p>\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u5f00\u53d1\u8be5 API \u5ba2\u6237\u7aef\u7684\u5f00\u53d1\u8005 \u4e5f\u5c06\u662f\u4f60\u81ea\u5df1\uff0c\u6240\u4ee5\u901a\u8fc7\u58f0\u660e\u8fd9\u4e9b\u8bf7\u6c42\u548c\u54cd\u5e94\u7684 schema\uff0c\u4f60\u662f\u5728 \u4e3a\u672a\u6765\u7684\u81ea\u5df1\u505a\u597d\u51c6\u5907\u3002\ud83d\ude09</p>"},{"location":"tutorial/fastapi/multiple-models/#id","title":"\u90a3\u4e48\uff0c\u4e3a\u4ec0\u4e48\u9700\u8981 <code>id</code> \u5b57\u6bb5\u662f\u5fc5\u586b\u7684\u5462\uff1f","text":"<p>\u73b0\u5728\uff0c\u4e3a\u4ec0\u4e48\u5728\u54cd\u5e94\u4e2d\u5c06 <code>id</code> \u5b57\u6bb5\u6807\u8bb0\u4e3a\u201c\u53ef\u9009\u201d\uff0c\u800c\u5b9e\u9645\u4e0a\u5b83\u603b\u662f\u5fc5\u9700\u7684\u5462\uff1f</p> <p>\u4f8b\u5982\uff0c\u81ea\u52a8\u751f\u6210\u7684\u5ba2\u6237\u7aef\uff08\u65e0\u8bba\u662f\u5176\u4ed6\u8bed\u8a00\u8fd8\u662f Python \u4e2d\u7684\u5ba2\u6237\u7aef\uff09\u4f1a\u58f0\u660e\u8be5\u5b57\u6bb5 <code>id</code> \u662f\u53ef\u9009\u7684\u3002</p> <p>\u7136\u540e\uff0c\u4f7f\u7528\u8fd9\u4e9b\u5ba2\u6237\u7aef\u7684\u5f00\u53d1\u8005\u5c06\u4e0d\u5f97\u4e0d\u5728\u4ed6\u4eec\u7684\u4ee3\u7801\u4e2d\u968f\u65f6\u68c0\u67e5 <code>id</code> \u662f\u5426\u4e3a <code>None</code>\uff0c\u7136\u540e\u624d\u80fd\u5728\u4efb\u4f55\u5730\u65b9\u4f7f\u7528\u5b83\u3002</p> <p>\u8fd9\u5c06\u5bfc\u81f4\u8bb8\u591a\u4e0d\u5fc5\u8981\u7684\u68c0\u67e5\u548c \u4e0d\u5fc5\u8981\u7684\u4ee3\u7801\uff0c\u8fd9\u4e9b\u672c\u53ef\u4ee5\u901a\u8fc7\u6b63\u786e\u58f0\u660e schema \u6765\u907f\u514d\u3002\ud83d\ude14</p> <p>\u8981\u8ba9\u8fd9\u4e9b\u4ee3\u7801\u77e5\u9053\u54cd\u5e94\u4e2d\u7684 <code>id</code> \u662f\u5fc5\u9700\u7684\uff0c\u5e76\u4e14 \u6c38\u8fdc\u6709\u4e00\u4e2a\u503c\uff0c\u4f1a\u7b80\u5355\u5f97\u591a\u3002</p> <p>\u8ba9\u6211\u4eec\u4e5f\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\ud83e\udd13</p>"},{"location":"tutorial/fastapi/multiple-models/#_2","title":"\u591a\u4e2a\u82f1\u96c4\u6a21\u578b","text":"<p>\u56e0\u6b64\uff0c\u6211\u4eec\u5e0c\u671b\u62e5\u6709\u4e00\u4e2a <code>Hero</code> \u6a21\u578b\u6765\u58f0\u660e \u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\uff1a</p> <ul> <li><code>id</code>\uff0c\u521b\u5efa\u65f6\u53ef\u9009\uff0c\u6570\u636e\u5e93\u4e2d\u5fc5\u586b</li> <li><code>name</code>\uff0c\u5fc5\u586b</li> <li><code>secret_name</code>\uff0c\u5fc5\u586b</li> <li><code>age</code>\uff0c\u53ef\u9009</li> </ul> <p>\u4f46\u6211\u4eec\u8fd8\u5e0c\u671b\u6709\u4e00\u4e2a <code>HeroCreate</code> \u6a21\u578b\uff0c\u7528\u4e8e\u58f0\u660e\u6211\u4eec\u5728 \u521b\u5efa \u65b0\u82f1\u96c4\u65f6\u5e0c\u671b\u63a5\u6536\u7684\u6570\u636e\uff0c\u51e0\u4e4e\u4e0e <code>Hero</code> \u76f8\u540c\uff0c\u552f\u4e00\u7684\u533a\u522b\u662f <code>id</code>\uff0c\u56e0\u4e3a <code>id</code> \u662f\u7531\u6570\u636e\u5e93\u81ea\u52a8\u751f\u6210\u7684\uff1a</p> <ul> <li><code>name</code>\uff0c\u5fc5\u586b</li> <li><code>secret_name</code>\uff0c\u5fc5\u586b</li> <li><code>age</code>\uff0c\u53ef\u9009</li> </ul> <p>\u53e6\u5916\uff0c\u6211\u4eec\u8fd8\u60f3\u6709\u4e00\u4e2a <code>HeroPublic</code> \u6a21\u578b\uff0c\u5305\u542b <code>id</code> \u5b57\u6bb5\uff0c\u4f46\u8fd9\u6b21\u6211\u4eec\u5c06\u5176\u6ce8\u89e3\u4e3a <code>id: int</code>\uff0c\u800c\u4e0d\u662f <code>id: Optional[int]</code>\uff0c\u4ee5\u660e\u786e\u8868\u793a\u5728\u4ece\u5ba2\u6237\u7aef \u8bfb\u53d6 \u54cd\u5e94\u65f6 <code>id</code> \u5b57\u6bb5\u662f\u5fc5\u586b\u7684\uff1a</p> <ul> <li><code>id</code>\uff0c\u5fc5\u586b</li> <li><code>name</code>\uff0c\u5fc5\u586b</li> <li><code>secret_name</code>\uff0c\u5fc5\u586b</li> <li><code>age</code>\uff0c\u53ef\u9009</li> </ul>"},{"location":"tutorial/fastapi/multiple-models/#_3","title":"\u5177\u6709\u91cd\u590d\u5b57\u6bb5\u7684\u591a\u4e2a\u6a21\u578b","text":"<p>\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u53ef\u80fd\u662f\u521b\u5efa \u591a\u4e2a\u6a21\u578b\uff0c\u6bcf\u4e2a\u6a21\u578b\u5305\u542b\u6240\u6709\u76f8\u5e94\u7684\u5b57\u6bb5\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u8fd9\u80fd\u89e3\u51b3\u95ee\u9898\uff0c\u4f46\u4e0b\u9762\u6709\u66f4\u597d\u7684\u9009\u62e9 \ud83d\udea8\n\n# \u4ee5\u4e0a\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass HeroCreate(SQLModel):\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nclass HeroPublic(SQLModel):\n    id: int\n    name: str\n    secret_name: str\n    age: int | None = None\n\n# \u4ee5\u4e0b\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u8fd9\u80fd\u89e3\u51b3\u95ee\u9898\uff0c\u4f46\u4e0b\u9762\u6709\u66f4\u597d\u7684\u9009\u62e9 \ud83d\udea8\n\n# \u4ee5\u4e0a\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass HeroCreate(SQLModel):\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nclass HeroPublic(SQLModel):\n    id: int\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n# \u4ee5\u4e0b\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u8fd9\u80fd\u89e3\u51b3\u95ee\u9898\uff0c\u4f46\u4e0b\u9762\u6709\u66f4\u597d\u7684\u9009\u62e9 \ud83d\udea8\n\n# \u4ee5\u4e0a\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass HeroCreate(SQLModel):\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nclass HeroPublic(SQLModel):\n    id: int\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n# \u4ee5\u4e0b\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass HeroCreate(SQLModel):\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nclass HeroPublic(SQLModel):\n    id: int\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass HeroCreate(SQLModel):\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nclass HeroPublic(SQLModel):\n    id: int\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass HeroCreate(SQLModel):\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nclass HeroPublic(SQLModel):\n    id: int\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <p>\u8fd9\u91cc\u6709\u4e00\u4e2a\u91cd\u8981\u7684\u7ec6\u8282\uff0c\u4e5f\u8bb8\u662f SQLModel \u4e2d\u6700\u91cd\u8981\u7684\u7279\u6027\uff1a\u53ea\u6709 <code>Hero</code> \u6a21\u578b\u58f0\u660e\u4e86 <code>table = True</code>\u3002</p> <p>\u8fd9\u610f\u5473\u7740\u7c7b <code>Hero</code> \u4ee3\u8868\u6570\u636e\u5e93\u4e2d\u7684 \u8868\u3002\u5b83\u65e2\u662f\u4e00\u4e2a Pydantic \u6a21\u578b\uff0c\u4e5f\u662f\u4e00\u4e2a SQLAlchemy \u6a21\u578b\u3002</p> <p>\u4f46 <code>HeroCreate</code> \u548c <code>HeroPublic</code> \u6ca1\u6709 <code>table = True</code>\u3002\u5b83\u4eec\u53ea\u662f \u6570\u636e\u6a21\u578b\uff0c\u4ec5\u4ec5\u662f Pydantic \u6a21\u578b\u3002\u5b83\u4eec\u4e0d\u4f1a\u4e0e\u6570\u636e\u5e93\u4e00\u8d77\u4f7f\u7528\uff0c\u800c\u4ec5\u7528\u4e8e\u58f0\u660e API \u7684\u6570\u636e schema\uff08\u6216\u5176\u4ed6\u7528\u9014\uff09\u3002</p> <p>\u8fd9\u4e5f\u610f\u5473\u7740 <code>SQLModel.metadata.create_all()</code> \u4e0d\u4f1a\u4e3a <code>HeroCreate</code> \u548c <code>HeroPublic</code> \u521b\u5efa\u6570\u636e\u5e93\u8868\uff0c\u56e0\u4e3a\u5b83\u4eec\u6ca1\u6709 <code>table = True</code>\uff0c\u8fd9\u6b63\u662f\u6211\u4eec\u60f3\u8981\u7684\u3002\ud83d\ude80</p> <p>Tip</p> <p>\u6211\u4eec\u5c06\u6539\u8fdb\u6b64\u4ee3\u7801\uff0c\u4ee5\u907f\u514d\u91cd\u590d\u5b57\u6bb5\uff0c\u4f46\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u7ee7\u7eed\u4f7f\u7528\u8fd9\u4e9b\u6a21\u578b\u8fdb\u884c\u5b66\u4e60\u3002</p>"},{"location":"tutorial/fastapi/multiple-models/#_4","title":"\u4f7f\u7528\u591a\u4e2a\u6a21\u578b\u521b\u5efa\u82f1\u96c4","text":"<p>\u73b0\u5728\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u5728 FastAPI \u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u8fd9\u4e9b\u65b0\u6a21\u578b\u3002</p> <p>\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u68c0\u67e5\u73b0\u5728\u521b\u5efa\u82f1\u96c4\u7684\u8fc7\u7a0b\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass HeroCreate(SQLModel):\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nclass HeroPublic(SQLModel):\n    id: int\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass HeroCreate(SQLModel):\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nclass HeroPublic(SQLModel):\n    id: int\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass HeroCreate(SQLModel):\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nclass HeroPublic(SQLModel):\n    id: int\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <p>\u8ba9\u6211\u4eec\u8be6\u7ec6\u770b\u770b\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u4f7f\u7528\u7c7b\u578b\u6ce8\u89e3 <code>HeroCreate</code> \u6765\u8868\u793a\u8bf7\u6c42 JSON \u6570\u636e\u4e2d\u7684 <code>hero</code> \u53c2\u6570\uff0c\u8fd9\u662f\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u4f7f\u7528\u7684\u3002</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\ndef create_hero(hero: HeroCreate):\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\ndef create_hero(hero: HeroCreate):\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\ndef create_hero(hero: HeroCreate):\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> <p>\u7136\u540e\uff0c\u6211\u4eec\u4f7f\u7528 <code>Hero.model_validate()</code> \u521b\u5efa\u4e00\u4e2a\u65b0\u7684 <code>Hero</code> \u5b9e\u4f8b\uff08\u8fd9\u662f\u5b9e\u9645\u7684 \u8868 \u6a21\u578b\uff0c\u7528\u4e8e\u5c06\u6570\u636e\u4fdd\u5b58\u5230\u6570\u636e\u5e93\uff09\u3002</p> <p><code>.model_validate()</code> \u65b9\u6cd5\u4ece\u53e6\u4e00\u4e2a\u5bf9\u8c61\uff08\u5177\u6709\u5c5e\u6027\u6216\u5b57\u5178\uff09\u8bfb\u53d6\u6570\u636e\uff0c\u5e76\u521b\u5efa\u8be5\u7c7b\u7684\u65b0\u5b9e\u4f8b\uff0c\u5728\u8fd9\u91cc\u662f <code>Hero</code>\u3002</p> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u6709\u4e00\u4e2a <code>HeroCreate</code> \u5b9e\u4f8b\uff0c\u5b83\u5b58\u50a8\u5728 <code>hero</code> \u53d8\u91cf\u4e2d\u3002\u8fd9\u662f\u4e00\u4e2a\u5177\u6709\u5c5e\u6027\u7684\u5bf9\u8c61\uff0c\u56e0\u6b64\u6211\u4eec\u4f7f\u7528 <code>.model_validate()</code> \u6765\u8bfb\u53d6\u8fd9\u4e9b\u5c5e\u6027\u3002</p> <p>Tip</p> <p>\u5728 SQLModel \u7684 <code>0.0.14</code> \u7248\u672c\u4e4b\u524d\uff0c\u4f60\u4f1a\u4f7f\u7528 <code>.from_orm()</code> \u65b9\u6cd5\uff0c\u4f46\u8be5\u65b9\u6cd5\u73b0\u5728\u5df2\u88ab\u5f03\u7528\uff0c\u5e94\u8be5\u4f7f\u7528 <code>.model_validate()</code> \u4ee3\u66ff\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 <code>Hero</code> \u5b9e\u4f8b\uff08\u5373\u6570\u636e\u5e93\u4e2d\u7684\u5b9e\u4f8b\uff09\uff0c\u5e76\u4f7f\u7528 <code>HeroCreate</code> \u5b9e\u4f8b\u4e2d\u7684\u6570\u636e\u5c06\u5176\u5b58\u5165\u53d8\u91cf <code>db_hero</code>\u3002</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\n        db_hero = Hero.model_validate(hero)\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\n        db_hero = Hero.model_validate(hero)\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\n        db_hero = Hero.model_validate(hero)\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> <p>\u7136\u540e\u6211\u4eec\u53ea\u9700\u5c06\u5176 <code>add</code> \u5230 session \u4e2d\uff0c<code>commit</code> \u5e76 <code>refresh</code> \u5b83\uff0c\u6700\u540e\u8fd4\u56de\u521a\u521a\u5237\u65b0\u7684 <code>db_hero</code> \u53d8\u91cf\uff0c\u5b83\u5305\u542b\u521a\u5237\u65b0\u8fc7\u7684 <code>Hero</code> \u5b9e\u4f8b\u3002</p> <p>\u7531\u4e8e\u5b83\u521a\u521a\u88ab\u5237\u65b0\uff0c\u56e0\u6b64\u5b83\u7684 <code>id</code> \u5b57\u6bb5\u5df2\u8bbe\u7f6e\u4e3a\u4ece\u6570\u636e\u5e93\u4e2d\u83b7\u53d6\u7684\u65b0 ID\u3002</p> <p>\u73b0\u5728\uff0c\u5f53\u6211\u4eec\u8fd4\u56de\u5b83\u65f6\uff0cFastAPI \u4f1a\u4f7f\u7528 <code>response_model</code>\uff08\u5373 <code>HeroPublic</code>\uff09\u5bf9\u6570\u636e\u8fdb\u884c\u9a8c\u8bc1\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> <p>\u8fd9\u5c06\u9a8c\u8bc1\u6211\u4eec\u627f\u8bfa\u8fd4\u56de\u7684\u6240\u6709\u6570\u636e\uff0c\u5e76\u5220\u9664\u6211\u4eec\u672a\u58f0\u660e\u7684\u4efb\u4f55\u6570\u636e\u3002</p> <p>Tip</p> <p>\u8fd9\u79cd\u8fc7\u6ee4\u53ef\u80fd\u975e\u5e38\u91cd\u8981\uff0c\u5e76\u4e14\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u5b89\u5168\u529f\u80fd\uff0c\u4f8b\u5982\u786e\u4fdd\u8fc7\u6ee4\u6389\u79c1\u4eba\u6570\u636e\u3001\u52a0\u5bc6\u5bc6\u7801\u7b49\u3002</p> <p>\u4f60\u53ef\u4ee5\u5728 FastAPI \u5173\u4e8e\u54cd\u5e94\u6a21\u578b\u7684\u6587\u6863 \u4e2d\u4e86\u89e3\u66f4\u591a\u3002</p> <p>\u7279\u522b\u5730\uff0c\u5b83\u5c06\u786e\u4fdd <code>id</code> \u5b57\u6bb5\u5b58\u5728\u5e76\u4e14\u786e\u5b9e\u662f\u4e00\u4e2a\u6574\u6570\uff08\u800c\u4e0d\u662f <code>None</code>\uff09\u3002</p>"},{"location":"tutorial/fastapi/multiple-models/#_5","title":"\u5171\u4eab\u5b57\u6bb5","text":"<p>\u4f46\u4ed4\u7ec6\u89c2\u5bdf\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u8fd9\u4e9b\u6a21\u578b\u6709\u5f88\u591a \u91cd\u590d\u7684\u4fe1\u606f\u3002</p> <p>\u6240\u6709 \u8fd9\u4e09\u4e2a\u6a21\u578b \u90fd\u58f0\u660e\u4e86\u5b83\u4eec\u5171\u4eab\u4e00\u4e9b \u516c\u5171\u5b57\u6bb5\uff0c\u8fd9\u4e9b\u5b57\u6bb5\u770b\u8d77\u6765\u5b8c\u5168\u4e00\u6837\uff1a</p> <ul> <li><code>name</code>\uff0c\u5fc5\u586b</li> <li><code>secret_name</code>\uff0c\u5fc5\u586b</li> <li><code>age</code>\uff0c\u53ef\u9009</li> </ul> <p>\u7136\u540e\u5b83\u4eec\u58f0\u660e\u4e86\u5176\u4ed6\u4e00\u4e9b\u5b57\u6bb5\uff0c\u5176\u4e2d\u6709\u4e00\u4e9b\u5dee\u5f02\uff08\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ea\u6709\u5173\u4e8e <code>id</code> \u7684\u5dee\u5f02\uff09\u3002</p> <p>\u6211\u4eec\u5e0c\u671b \u5c3d\u53ef\u80fd\u907f\u514d\u91cd\u590d\u7684\u4fe1\u606f\u3002</p> <p>\u8fd9\u5f88\u91cd\u8981\uff0c\u6bd4\u5982\uff0c\u672a\u6765\u5982\u679c\u6211\u4eec\u51b3\u5b9a \u91cd\u6784\u4ee3\u7801 \u5e76\u91cd\u547d\u540d\u67d0\u4e2a\u5b57\u6bb5\uff08\u5217\uff09\u3002\u4f8b\u5982\uff0c\u5c06 <code>secret_name</code> \u6539\u4e3a <code>secret_identity</code>\u3002</p> <p>\u5982\u679c\u8fd9\u4e9b\u5b57\u6bb5\u5728\u591a\u4e2a\u6a21\u578b\u4e2d\u90fd\u6709\u91cd\u590d\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u5fd8\u8bb0\u66f4\u65b0\u5176\u4e2d\u7684\u4e00\u4e2a\u3002\u4f46\u5982\u679c\u6211\u4eec \u907f\u514d\u91cd\u590d\uff0c\u5c31\u53ea\u6709\u4e00\u4e2a\u5730\u65b9\u9700\u8981\u66f4\u65b0\u3002\u2728</p> <p>\u73b0\u5728\u8ba9\u6211\u4eec\u6765\u6539\u8fdb\u8fd9\u4e00\u70b9\u3002\ud83e\udd13</p>"},{"location":"tutorial/fastapi/multiple-models/#_6","title":"\u4f7f\u7528\u7ee7\u627f\u7684\u591a\u4e2a\u6a21\u578b","text":"<p>\u8fd9\u5c31\u662f\u4f60\u53d1\u73b0\u7684 SQLModel \u4e2d\u7684\u6700\u5927\u7279\u70b9\u3002\ud83d\udc8e</p> <p>\u8fd9\u4e9b\u6a21\u578b\u4e2d\u7684\u6bcf\u4e00\u4e2a\uff0c\u90fd\u662f \u6570\u636e\u6a21\u578b\uff0c\u6216\u8005\u662f\u6570\u636e\u6a21\u578b\u548c \u8868\u6a21\u578b \u7684\u7ed3\u5408\u4f53\u3002</p> <p>\u56e0\u6b64\uff0c\u4f7f\u7528 SQLModel \u521b\u5efa\u4e0d\u4ee3\u8868\u6570\u636e\u5e93\u8868\u7684\u6a21\u578b\u662f\u5b8c\u5168\u53ef\u80fd\u7684\u3002</p> <p>\u66f4\u91cd\u8981\u7684\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7ee7\u627f\u6765\u907f\u514d\u8fd9\u4e9b\u6a21\u578b\u4e2d\u7684\u91cd\u590d\u4fe1\u606f\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5b83\u4eec\u90fd\u5171\u4eab\u4e00\u4e9b \u57fa\u7840 \u5b57\u6bb5\uff1a</p> <ul> <li><code>name</code>\uff0c\u5fc5\u586b</li> <li><code>secret_name</code>\uff0c\u5fc5\u586b</li> <li><code>age</code>\uff0c\u53ef\u9009</li> </ul> <p>\u6240\u4ee5\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a \u57fa\u7840 \u6a21\u578b <code>HeroBase</code>\uff0c\u8ba9\u5176\u4ed6\u6a21\u578b\u53ef\u4ee5\u7ee7\u627f\u5b83\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <p>\u6b63\u5982\u4f60\u6240\u770b\u5230\u7684\uff0c\u8fd9\u4e0d\u662f\u4e00\u4e2a \u8868\u6a21\u578b\uff0c\u5b83\u6ca1\u6709 <code>table = True</code> \u914d\u7f6e\u3002</p> <p>\u4f46\u662f\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u521b\u5efa \u7ee7\u627f\u5b83\u7684\u5176\u4ed6\u6a21\u578b\uff0c\u5b83\u4eec\u5c06\u5171\u4eab\u8fd9\u4e9b\u5b57\u6bb5\uff0c\u5c31\u597d\u50cf\u5b83\u4eec\u5728\u5404\u81ea\u7684\u6a21\u578b\u4e2d\u58f0\u660e\u8fc7\u4e00\u6837\u3002</p>"},{"location":"tutorial/fastapi/multiple-models/#hero","title":"<code>Hero</code> \u8868\u6a21\u578b","text":"<p>\u8ba9\u6211\u4eec\u4ece\u552f\u4e00\u7684 \u8868\u6a21\u578b <code>Hero</code> \u5f00\u59cb\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c<code>Hero</code> \u73b0\u5728\u4e0d\u662f\u7ee7\u627f\u81ea <code>SQLModel</code>\uff0c\u800c\u662f\u7ee7\u627f\u81ea <code>HeroBase</code>\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u53ea\u76f4\u63a5\u58f0\u660e\u4e00\u4e2a\u5b57\u6bb5\uff0c\u5373 <code>id</code>\uff0c\u5b83\u662f <code>Optional[int]</code> \u7c7b\u578b\uff0c\u5e76\u4e14\u662f\u4e00\u4e2a <code>primary_key</code>\u3002</p> <p>\u5c3d\u7ba1\u6211\u4eec\u6ca1\u6709 \u663e\u5f0f\u58f0\u660e \u5176\u4ed6\u5b57\u6bb5\uff0c\u56e0\u4e3a\u5b83\u4eec\u662f\u7ee7\u627f\u800c\u6765\u7684\uff0c\u6240\u4ee5\u5b83\u4eec\u4e5f\u5c5e\u4e8e\u8fd9\u4e2a <code>Hero</code> \u6a21\u578b\u7684\u4e00\u90e8\u5206\u3002</p> <p>\u5f53\u7136\uff0c\u6240\u6709\u8fd9\u4e9b\u5b57\u6bb5\u5c06\u6210\u4e3a\u6570\u636e\u5e93\u4e2d\u751f\u6210\u7684 <code>hero</code> \u8868\u7684\u5217\u3002</p> <p>\u8fd9\u4e9b\u7ee7\u627f\u7684\u5b57\u6bb5\u4e5f\u5c06\u51fa\u73b0\u5728 \u81ea\u52a8\u8865\u5168 \u548c \u5185\u8054\u9519\u8bef \u4e2d\uff0c\u4f8b\u5982\u5728\u7f16\u8f91\u5668\u91cc\u7b49\u3002</p>"},{"location":"tutorial/fastapi/multiple-models/#_7","title":"\u5217\u548c\u591a\u6a21\u578b\u7ee7\u627f","text":"<p>\u8bf7\u6ce8\u610f\uff0c\u7236\u6a21\u578b <code>HeroBase</code> \u4e0d\u662f \u8868\u6a21\u578b\uff0c\u4f46\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528 <code>Field(index=True)</code> \u6765\u58f0\u660e <code>name</code> \u548c <code>age</code> \u5b57\u6bb5\u3002</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <p>\u8fd9\u4e0d\u4f1a\u5f71\u54cd\u7236 \u6570\u636e\u6a21\u578b <code>HeroBase</code>\u3002</p> <p>\u4f46\u662f\uff0c\u4e00\u65e6\u5b50\u6a21\u578b <code>Hero</code>\uff08\u5b9e\u9645\u7684 \u8868\u6a21\u578b\uff09\u7ee7\u627f\u4e86\u8fd9\u4e9b\u5b57\u6bb5\uff0c\u5b83\u5c06\u5728\u6570\u636e\u5e93\u4e2d\u521b\u5efa\u8868\u65f6\u4f7f\u7528\u8fd9\u4e9b\u5b57\u6bb5\u914d\u7f6e\u6765\u521b\u5efa\u7d22\u5f15\u3002</p>"},{"location":"tutorial/fastapi/multiple-models/#herocreate","title":"<code>HeroCreate</code> \u6570\u636e\u6a21\u578b","text":"<p>\u73b0\u5728\u8ba9\u6211\u4eec\u770b\u770b <code>HeroCreate</code> \u6a21\u578b\uff0c\u5b83\u5c06\u7528\u4e8e\u5b9a\u4e49\u5728 API \u4e2d\u521b\u5efa\u65b0\u82f1\u96c4\u65f6\u6211\u4eec\u60f3\u8981\u63a5\u6536\u7684\u6570\u636e\u3002</p> <p>\u8fd9\u90e8\u5206\u6bd4\u8f83\u6709\u8da3\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <p>\u8fd9\u91cc\u53d1\u751f\u4e86\u4ec0\u4e48\uff1f</p> <p>\u6211\u4eec\u9700\u8981\u521b\u5efa\u7684\u5b57\u6bb5\u4e0e <code>HeroBase</code> \u6a21\u578b\u4e2d\u7684\u5b57\u6bb5 \u5b8c\u5168\u76f8\u540c\u3002\u6240\u4ee5\u6211\u4eec\u4e0d\u9700\u8981\u6dfb\u52a0\u4efb\u4f55\u5185\u5bb9\u3002</p> <p>\u56e0\u4e3a\u5728\u521b\u5efa\u65b0\u7c7b\u65f6\u6211\u4eec\u4e0d\u80fd\u7559\u4e0b\u7a7a\u767d\uff0c\u4f46\u662f\u6211\u4eec\u53c8\u4e0d\u60f3\u6dfb\u52a0\u4efb\u4f55\u5b57\u6bb5\uff0c\u6240\u4ee5\u6211\u4eec\u4f7f\u7528\u4e86 <code>pass</code>\u3002</p> <p>\u8fd9\u610f\u5473\u7740\u9664\u4e86\u5b83\u88ab\u547d\u540d\u4e3a <code>HeroCreate</code> \u5e76\u7ee7\u627f\u81ea <code>HeroBase</code> \u4e4b\u5916\uff0c\u8fd9\u4e2a\u7c7b\u6ca1\u6709\u5176\u4ed6\u7279\u6b8a\u7684\u5730\u65b9\u3002</p> <p>\u4f5c\u4e3a\u66ff\u4ee3\u65b9\u6848\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5728 API \u4ee3\u7801\u4e2d\u4f7f\u7528 <code>HeroBase</code>\uff0c\u800c\u4e0d\u662f <code>HeroCreate</code>\uff0c\u4f46\u662f\u5b83\u4f1a\u5728\u81ea\u52a8\u6587\u6863 UI \u4e2d\u663e\u793a\u4e3a \"<code>HeroBase</code>\" \u540d\u79f0\uff0c\u8fd9\u53ef\u80fd\u4f1a\u8ba9\u5ba2\u6237\u7aef \u56f0\u60d1\u3002\u76f8\u53cd\uff0c\"<code>HeroCreate</code>\" \u66f4\u660e\u786e\u5730\u8868\u660e\u4e86\u5b83\u7684\u7528\u9014\u3002</p> <p>\u6b64\u5916\uff0c\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u5730\u51b3\u5b9a\u672a\u6765\u5728\u521b\u5efa\u65b0\u82f1\u96c4\u65f6\u5e0c\u671b\u63a5\u6536 \u66f4\u591a\u6570\u636e\uff0c\u9664\u4e86 <code>HeroBase</code> \u4e2d\u7684\u6570\u636e\uff08\u4f8b\u5982\uff0c\u5bc6\u7801\uff09\uff0c\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u6709\u4e86\u8fd9\u4e2a\u7c7b\u6765\u6dfb\u52a0\u8fd9\u4e9b\u989d\u5916\u5b57\u6bb5\u3002</p>"},{"location":"tutorial/fastapi/multiple-models/#heropublic","title":"<code>HeroPublic</code> \u6570\u636e\u6a21\u578b","text":"<p>\u73b0\u5728\u8ba9\u6211\u4eec\u770b\u770b <code>HeroPublic</code> \u6a21\u578b\u3002</p> <p>\u8fd9\u4e2a\u6a21\u578b\u53ea\u662f\u58f0\u660e\u4e86\u5728\u4ece API \u8bfb\u53d6\u82f1\u96c4\u6570\u636e\u65f6\uff0c<code>id</code> \u5b57\u6bb5\u662f\u5fc5\u9700\u7684\uff0c\u56e0\u4e3a\u4ece API \u8bfb\u53d6\u7684\u82f1\u96c4\u6570\u636e\u4f1a\u6765\u81ea\u6570\u636e\u5e93\uff0c\u800c\u5728\u6570\u636e\u5e93\u4e2d\uff0c\u82f1\u96c4\u6570\u636e\u5c06\u59cb\u7ec8\u5177\u6709 ID\u3002</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre>"},{"location":"tutorial/fastapi/multiple-models/#ui","title":"\u56de\u987e\u66f4\u65b0\u540e\u7684\u6587\u6863 UI","text":"<p>FastAPI \u4ee3\u7801\u4e0e\u4e4b\u524d\u76f8\u540c\uff0c\u6211\u4eec\u4ecd\u7136\u4f7f\u7528 <code>Hero</code>\u3001<code>HeroCreate</code> \u548c <code>HeroPublic</code>\u3002\u4f46\u73b0\u5728\uff0c\u6211\u4eec\u901a\u8fc7\u7ee7\u627f\u5b9a\u4e49\u5b83\u4eec\uff0c\u4f7f\u4ee3\u7801\u66f4\u52a0\u667a\u80fd\u3002</p> <p>\u6240\u4ee5\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8df3\u8f6c\u5230\u6587\u6863 UI\uff0c\u770b\u770b\u5b83\u4eec\u5728\u66f4\u65b0\u540e\u7684\u6570\u636e\u4e0b\u662f\u600e\u6837\u5c55\u793a\u7684\u3002</p>"},{"location":"tutorial/fastapi/multiple-models/#ui_1","title":"\u521b\u5efa\u82f1\u96c4\u7684\u6587\u6863 UI","text":"<p>\u8ba9\u6211\u4eec\u770b\u770b\u521b\u5efa\u82f1\u96c4\u7684\u65b0 UI\uff1a</p> <p></p> <p>\u5f88\u68d2\uff01\u73b0\u5728\u5b83\u663e\u793a\u521b\u5efa\u4e00\u4e2a\u82f1\u96c4\u65f6\uff0c\u6211\u4eec\u53ea\u9700\u4f20\u5165 <code>name</code>\u3001<code>secret_name</code> \u548c\u53ef\u9009\u7684 <code>age</code>\u3002</p> <p>\u6211\u4eec\u4e0d\u518d\u4f20\u5165 <code>id</code>\u3002</p>"},{"location":"tutorial/fastapi/multiple-models/#ui_2","title":"\u542b\u6709\u82f1\u96c4\u54cd\u5e94\u7684\u6587\u6863 UI","text":"<p>\u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u7a0d\u5fae\u5411\u4e0b\u6eda\u52a8\uff0c\u67e5\u770b\u54cd\u5e94\u6a21\u5f0f\uff1a</p> <p></p> <p>\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c<code>id</code> \u662f\u5fc5\u9700\u5b57\u6bb5\uff0c\u5b83\u6709\u4e00\u4e2a\u7ea2\u8272\u7684\u661f\u53f7\uff08*\uff09\u3002</p> <p>\u5982\u679c\u6211\u4eec\u67e5\u770b \u8bfb\u53d6\u82f1\u96c4 \u7684 \u8def\u5f84\u64cd\u4f5c \u6a21\u5f0f\uff0c\u5b83\u4e5f\u4f1a\u663e\u793a\u66f4\u65b0\u540e\u7684\u6a21\u5f0f\u3002</p>"},{"location":"tutorial/fastapi/multiple-models/#_8","title":"\u7ee7\u627f\u548c\u8868\u6a21\u578b","text":"<p>\u6211\u4eec\u521a\u521a\u770b\u5230\u8fd9\u4e9b\u6a21\u578b\u7684\u7ee7\u627f\u529f\u80fd\u6709\u591a\u5f3a\u5927\u3002</p> <p>\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u53ef\u80fd\u770b\u8d77\u6765\u6709\u70b9\u2026\u2026 meh\u3002\ud83d\ude05</p> <p>\u4f46\u73b0\u5728\u60f3\u8c61\u4e00\u4e0b\uff0c\u4f60\u7684\u8868\u4e2d\u6709 10 \u6216 20 \u5217\u3002\u800c\u4e14\u4f60\u5fc5\u987b\u4e3a\u6240\u6709\u7684 \u6570\u636e\u6a21\u578b \u590d\u5236\u6240\u6709\u8fd9\u4e9b\u4fe1\u606f\u2026\u2026\u8fd9\u65f6\u5c31\u66f4\u80fd\u660e\u663e\u770b\u51fa\uff0c\u901a\u8fc7\u7ee7\u627f\u907f\u514d\u4fe1\u606f\u91cd\u590d\u662f\u591a\u4e48\u6709\u7528\u3002</p> <p>\u73b0\u5728\uff0c\u8fd9\u79cd\u7075\u6d3b\u6027\u53ef\u80fd\u8ba9\u4eba\u89c9\u5f97\u4e0d\u592a\u6e05\u695a \u4f55\u65f6\u4f7f\u7528\u7ee7\u627f\uff0c\u4ee5\u53ca\u8be5\u7528\u7ee7\u627f\u505a\u4ec0\u4e48\u3002</p> <p>\u8fd9\u91cc\u6709\u51e0\u4e2a\u7ecf\u9a8c\u6cd5\u5219\uff0c\u53ef\u4ee5\u5e2e\u52a9\u4f60\u505a\u51fa\u5224\u65ad\u3002</p>"},{"location":"tutorial/fastapi/multiple-models/#_9","title":"\u4ec5\u4ece\u6570\u636e\u6a21\u578b\u7ee7\u627f","text":"<p>\u53ea\u4ece \u6570\u636e\u6a21\u578b \u7ee7\u627f\uff0c\u4e0d\u8981\u4ece \u8868\u6a21\u578b \u7ee7\u627f\u3002</p> <p>\u8fd9\u6709\u52a9\u4e8e\u907f\u514d\u6df7\u6dc6\uff0c\u5e76\u4e14\u6ca1\u6709\u4efb\u4f55\u7406\u7531\u9700\u8981\u4ece \u8868\u6a21\u578b \u7ee7\u627f\u3002</p> <p>\u5982\u679c\u4f60\u89c9\u5f97\u9700\u8981\u4ece \u8868\u6a21\u578b \u7ee7\u627f\uff0c\u90a3\u4e48\u4e0d\u5982\u521b\u5efa\u4e00\u4e2a\u4ec5\u4f5c\u4e3a \u6570\u636e\u6a21\u578b \u5e76\u5305\u542b\u6240\u6709\u5b57\u6bb5\u7684 \u57fa\u7c7b\uff0c\u4f8b\u5982 <code>HeroBase</code>\u3002</p> <p>\u7136\u540e\u4ece\u90a3\u4e2a\u4ec5\u4f5c\u4e3a \u6570\u636e\u6a21\u578b \u7684 \u57fa\u7c7b \u7ee7\u627f\uff0c\u7528\u4e8e\u5176\u4ed6\u4efb\u4f55 \u6570\u636e\u6a21\u578b \u548c \u8868\u6a21\u578b\u3002</p>"},{"location":"tutorial/fastapi/multiple-models/#-","title":"\u907f\u514d\u91cd\u590d - \u4fdd\u6301\u7b80\u6d01","text":"<p>\u4f60\u53ef\u80fd\u4f1a\u89c9\u5f97\u9700\u8981\u6709\u4e00\u4e2a\u6df1\u523b\u7684\u7406\u7531\u6765\u51b3\u5b9a\u4ece\u67d0\u4e2a\u6a21\u578b\u7ee7\u627f\uff0c\u56e0\u4e3a\u201c\u67d0\u79cd\u795e\u79d8\u7684\u65b9\u5f0f\u201d\u5b83\u4eec\u533a\u5206\u4e86\u4e0d\u540c\u7684\u6982\u5ff5\u2026\u2026\u4e4b\u7c7b\u7684\u3002</p> <p>\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e9b \u7b80\u5355\u7684\u533a\u5206\uff0c\u6bd4\u5982\u521b\u5efa\u6570\u636e\u3001\u8bfb\u53d6\u3001\u66f4\u65b0\u7b49\u6a21\u578b\u3002\u5982\u679c\u8fd9\u4e9b\u533a\u5206\u5feb\u901f\u800c\u76f4\u89c2\uff0c\u90a3\u5c31\u597d\uff0c\u76f4\u63a5\u4f7f\u7528\u5b83\u4eec\u3002\ud83d\udcaf</p> <p>\u5426\u5219\uff0c\u4e0d\u7528\u8fc7\u4e8e\u62c5\u5fc3\u6df1\u523b\u7684\u6982\u5ff5\u7406\u7531\u6765\u533a\u5206\u6a21\u578b\uff0c\u53ea\u9700\u5c3d\u91cf \u907f\u514d\u91cd\u590d \u5e76\u4fdd\u6301\u4ee3\u7801\u8db3\u591f\u7b80\u6d01\uff0c\u6613\u4e8e\u7406\u89e3\u5373\u53ef\u3002</p> <p>\u5982\u679c\u4f60\u53d1\u73b0\u4e24\u4e2a\u6a21\u578b\u4e4b\u95f4\u6709\u5f88\u591a \u91cd\u53e0\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u901a\u8fc7\u57fa\u7c7b\u6765 \u907f\u514d\u4e00\u4e9b\u91cd\u590d\u3002</p> <p>\u4f46\u662f\uff0c\u5982\u679c\u4e3a\u4e86\u907f\u514d\u4e00\u4e9b\u91cd\u590d\uff0c\u6700\u7ec8\u5374\u5f62\u6210\u4e86\u4e00\u4e2a\u590d\u6742\u7684\u7ee7\u627f\u6811\uff0c\u90a3\u4e48\u53ef\u80fd \u66f4\u7b80\u5355 \u7684\u505a\u6cd5\u662f\u76f4\u63a5\u91cd\u590d\u5176\u4e2d\u4e00\u4e9b\u5b57\u6bb5\uff0c\u8fd9\u6837\u53ef\u80fd\u66f4\u5bb9\u6613\u7406\u89e3\u548c\u7ef4\u62a4\u3002</p> <p>\u505a\u4efb\u4f55\u4f60\u8ba4\u4e3a\u66f4\u5bb9\u6613 \u7406\u89e3\u3001\u7f16\u7a0b\u3001\u7ef4\u62a4 \u548c \u672a\u6765\u91cd\u6784 \u7684\u4e8b\u60c5\u3002\ud83e\udd13</p> <p>\u8bb0\u4f4f\uff0c\u7ee7\u627f\u548c SQLModel \u4ee5\u53ca\u5176\u4ed6\u4efb\u4f55\u5de5\u5177\uff0c\u90fd\u662f\u4e3a\u4e86 \u5e2e\u52a9\u4f60\u63d0\u9ad8\u751f\u4ea7\u529b\uff0c\u8fd9\u662f\u5b83\u4eec\u7684\u4e3b\u8981\u76ee\u6807\u4e4b\u4e00\u3002\u5982\u679c\u67d0\u6837\u4e1c\u897f\u6ca1\u6709\u8fbe\u5230\u8fd9\u4e2a\u76ee\u7684\uff08\u4f8b\u5982\uff1a\u91cd\u590d\u8fc7\u591a\u3001\u590d\u6742\u5ea6\u8fc7\u9ad8\uff09\uff0c\u90a3\u4e48\u5c31\u6539\u53d8\u5b83\u3002\ud83d\ude80</p>"},{"location":"tutorial/fastapi/multiple-models/#_10","title":"\u603b\u7ed3","text":"<p>\u4f60\u53ef\u4ee5\u4f7f\u7528 SQLModel \u6765\u58f0\u660e\u591a\u4e2a\u6a21\u578b\uff1a</p> <ul> <li>\u6709\u4e9b\u6a21\u578b\u53ef\u4ee5\u4ec5\u662f \u6570\u636e\u6a21\u578b\u3002\u5b83\u4eec\u4e5f\u4f1a\u662f Pydantic \u6a21\u578b\u3002</li> <li>\u6709\u4e9b\u6a21\u578b \u4e5f \u53ef\u4ee5\u662f \u8868\u6a21\u578b\uff08\u9664\u4e86\u5df2\u7ecf\u662f \u6570\u636e\u6a21\u578b\uff09\u901a\u8fc7\u914d\u7f6e <code>table = True</code>\u3002\u5b83\u4eec\u4e5f\u4f1a\u662f Pydantic \u6a21\u578b\u548c SQLAlchemy \u6a21\u578b\u3002</li> </ul> <p>\u53ea\u6709 \u8868\u6a21\u578b \u4f1a\u5728\u6570\u636e\u5e93\u4e2d\u521b\u5efa\u8868\u3002</p> <p>\u6240\u4ee5\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u6240\u6709\u5176\u4ed6\u7684 \u6570\u636e\u6a21\u578b \u6765\u9a8c\u8bc1\u3001\u8f6c\u6362\u3001\u8fc7\u6ee4\u548c\u8bb0\u5f55\u5e94\u7528\u7a0b\u5e8f\u6570\u636e\u7684\u6a21\u5f0f\u3002\u2728</p> <p>\u4f60\u53ef\u4ee5\u4f7f\u7528\u7ee7\u627f\u6765 \u907f\u514d\u4fe1\u606f\u548c\u4ee3\u7801\u91cd\u590d\u3002\ud83d\ude0e</p> <p>\u5e76\u4e14\u4f60\u53ef\u4ee5\u76f4\u63a5\u5728 FastAPI \u4e2d\u4f7f\u7528\u6240\u6709\u8fd9\u4e9b\u6a21\u578b\u3002\ud83d\ude80</p>"},{"location":"tutorial/fastapi/read-one/","title":"\u4f7f\u7528 FastAPI \u8bfb\u53d6\u5355\u4e2a\u6a21\u578b","text":"<p>\u73b0\u5728\u6211\u4eec\u5411 FastAPI \u5e94\u7528\u7a0b\u5e8f\u6dfb\u52a0\u4e00\u4e2a \u8def\u5f84\u64cd\u4f5c \u6765\u8bfb\u53d6\u5355\u4e2a\u6a21\u578b\u3002</p>"},{"location":"tutorial/fastapi/read-one/#_1","title":"\u8bfb\u53d6\u5355\u4e2a\u82f1\u96c4\u7684\u8def\u5f84\u64cd\u4f5c","text":"<p>\u6211\u4eec\u5c06\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684 \u8def\u5f84\u64cd\u4f5c \u6765\u8bfb\u53d6\u5355\u4e2a\u82f1\u96c4\u3002</p> <p>\u6211\u4eec\u5e0c\u671b\u6839\u636e <code>id</code> \u83b7\u53d6\u82f1\u96c4\uff0c\u6240\u4ee5\u6211\u4eec\u5c06\u4f7f\u7528\u4e00\u4e2a \u8def\u5f84\u53c2\u6570 <code>hero_id</code>\u3002</p> <p>/// \u4fe1\u606f</p> <p>\u5982\u679c\u4f60\u9700\u8981\u5237\u65b0\u4e00\u4e0b \u8def\u5f84\u53c2\u6570 \u7684\u5de5\u4f5c\u539f\u7406\uff0c\u5305\u62ec\u5b83\u4eec\u7684\u6570\u636e\u9a8c\u8bc1\uff0c\u8bf7\u67e5\u9605 FastAPI \u6587\u6863\u4e2d\u7684\u8def\u5f84\u53c2\u6570\u90e8\u5206\u3002</p> <p>///</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI, HTTPException\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# \u8fd9\u91cc\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI, HTTPException\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# \u8fd9\u91cc\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI, HTTPException\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# \u8fd9\u91cc\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI, HTTPException\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI, HTTPException\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI, HTTPException\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n</code></pre> <p>\u4f8b\u5982\uff0c\u8981\u83b7\u53d6 ID \u4e3a <code>2</code> \u7684\u82f1\u96c4\uff0c\u6211\u4eec\u4f1a\u53d1\u9001\u4e00\u4e2a <code>GET</code> \u8bf7\u6c42\u5230\uff1a</p> <pre><code>/heroes/2\n</code></pre>"},{"location":"tutorial/fastapi/read-one/#_2","title":"\u9519\u8bef\u5904\u7406","text":"<p>\u7136\u540e\uff0c\u56e0\u4e3a FastAPI \u5df2\u7ecf\u786e\u4fdd <code>hero_id</code> \u662f\u4e00\u4e2a\u6709\u6548\u7684\u6574\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5b83\u4e0e <code>Hero.get()</code> \u6765\u5c1d\u8bd5\u6839\u636e\u8be5 ID \u83b7\u53d6\u4e00\u4e2a\u82f1\u96c4\u3002</p> <p>\u4f46\u5982\u679c\u8be5\u6574\u6570\u4e0d\u662f\u6570\u636e\u5e93\u4e2d\u4efb\u4f55\u82f1\u96c4\u7684 ID\uff0c\u5b83\u5c06\u627e\u4e0d\u5230\u4efb\u4f55\u5185\u5bb9\uff0c\u5e76\u4e14\u53d8\u91cf <code>hero</code> \u5c06\u662f <code>None</code>\u3002</p> <p>\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u5728 <code>if</code> \u8bed\u53e5\u4e2d\u68c0\u67e5\u5b83\uff0c\u5982\u679c\u662f <code>None</code>\uff0c\u5219\u629b\u51fa\u4e00\u4e2a <code>HTTPException</code>\uff0c\u5e76\u8fd4\u56de <code>404</code> \u72b6\u6001\u7801\u3002</p> <p>\u4e3a\u4e86\u4f7f\u7528\u5b83\uff0c\u6211\u4eec\u9996\u5148\u4ece <code>fastapi</code> \u5bfc\u5165 <code>HTTPException</code>\u3002</p> <p>\u8fd9\u5c06\u8ba9\u5ba2\u6237\u7aef\u77e5\u9053\u4ed6\u4eec\u53ef\u80fd\u5728\u8bf7\u6c42\u65f6\u72af\u4e86\u4e00\u4e2a\u9519\u8bef\uff0c\u8bf7\u6c42\u4e86\u4e00\u4e2a\u4e0d\u5b58\u5728\u4e8e\u6570\u636e\u5e93\u4e2d\u7684\u82f1\u96c4\u3002</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI, HTTPException\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# Code here omitted \ud83d\udc48\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI, HTTPException\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# Code here omitted \ud83d\udc48\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI, HTTPException\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# Code here omitted \ud83d\udc48\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI, HTTPException\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI, HTTPException\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI, HTTPException\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n</code></pre>"},{"location":"tutorial/fastapi/read-one/#_3","title":"\u8fd4\u56de\u82f1\u96c4","text":"<p>\u7136\u540e\uff0c\u5982\u679c\u8be5\u82f1\u96c4\u5b58\u5728\uff0c\u6211\u4eec\u5c31\u8fd4\u56de\u5b83\u3002</p> <p>\u7531\u4e8e\u6211\u4eec\u4f7f\u7528\u4e86 <code>response_model</code> \u5e76\u6307\u5b9a\u4e86 <code>HeroPublic</code>\uff0c\u6240\u4ee5\u5b83\u4f1a\u88ab\u9a8c\u8bc1\u3001\u6587\u6863\u5316\u7b49\u3002</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI, HTTPException\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# \u8fd9\u91cc\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI, HTTPException\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# \u8fd9\u91cc\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI, HTTPException\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# \u8fd9\u91cc\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI, HTTPException\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI, HTTPException\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI, HTTPException\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n</code></pre>"},{"location":"tutorial/fastapi/read-one/#ui","title":"\u67e5\u770b\u6587\u6863 UI","text":"<p>\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u8fdb\u5165\u6587\u6863 UI\uff0c\u67e5\u770b\u65b0\u7684 \u8def\u5f84\u64cd\u4f5c\u3002</p> <p></p>"},{"location":"tutorial/fastapi/read-one/#_4","title":"\u603b\u7ed3","text":"<p>\u4f60\u53ef\u4ee5\u7ed3\u5408 FastAPI \u7684\u529f\u80fd\uff0c\u5982\u81ea\u52a8\u8def\u5f84\u53c2\u6570\u9a8c\u8bc1\uff0c\u901a\u8fc7 ID \u83b7\u53d6\u6a21\u578b\u3002</p>"},{"location":"tutorial/fastapi/relationships/","title":"FastAPI \u4e2d\u5177\u6709\u5173\u7cfb\u7684\u6a21\u578b","text":"<p>\u5982\u679c\u6211\u4eec\u73b0\u5728\u901a\u8fc7 ID \u67e5\u8be2\u5355\u4e2a \u82f1\u96c4\uff0c\u6211\u4eec\u4f1a\u5f97\u5230\u5305\u542b\u56e2\u961f ID \u7684\u82f1\u96c4\u6570\u636e\u3002</p> <p>\u4f46\u662f\u6211\u4eec\u5e76\u6ca1\u6709\u5f97\u5230\u4efb\u4f55\u5173\u4e8e\u8be5\u56e2\u961f\u7684\u5177\u4f53\u4fe1\u606f\uff1a</p> <p></p> <p>\u6211\u4eec\u5f97\u5230\u7684\u54cd\u5e94\u662f\uff1a</p> <pre><code>{\n    \"name\": \"Deadpond\",\n    \"secret_name\": \"Dive Wilson\",\n    \"age\": null,\n    \"team_id\": 1,\n    \"id\": 1\n}\n</code></pre> <p>\u540c\u6837\u5730\uff0c\u5982\u679c\u6211\u4eec\u901a\u8fc7 ID \u67e5\u8be2 \u56e2\u961f\uff0c\u6211\u4eec\u4f1a\u5f97\u5230\u56e2\u961f\u6570\u636e\uff0c\u4f46\u6ca1\u6709\u5173\u4e8e\u8fd9\u4e2a\u56e2\u961f\u82f1\u96c4\u7684\u4efb\u4f55\u4fe1\u606f\uff1a</p> <p></p> <p>\u6211\u4eec\u5f97\u5230\u7684\u54cd\u5e94\u662f\uff1a</p> <pre><code>{\n    \"name\": \"Preventers\",\n    \"headquarters\": \"Sharp Tower\",\n    \"id\": 2\n}\n</code></pre> <p>...\u4f46\u662f\u6ca1\u6709\u5173\u4e8e\u82f1\u96c4\u7684\u4fe1\u606f\u3002</p> <p>\u8ba9\u6211\u4eec\u6765\u66f4\u65b0\u4e00\u4e0b\u3002\ud83e\udd13</p>"},{"location":"tutorial/fastapi/relationships/#_1","title":"\u4e3a\u4ec0\u4e48\u6211\u4eec\u6ca1\u6709\u83b7\u53d6\u66f4\u591a\u6570\u636e\uff1f","text":"<p>\u9996\u5148\uff0c\u4e3a\u4ec0\u4e48\u6211\u4eec\u6ca1\u6709\u83b7\u53d6\u6bcf\u4e2a\u82f1\u96c4\u548c\u6bcf\u4e2a\u56e2\u961f\u7684\u76f8\u5173\u6570\u636e\u5462\uff1f</p> <p>\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u5728\u58f0\u660e <code>HeroPublic</code> \u65f6\u53ea\u5305\u62ec\u4e86 <code>HeroBase</code> \u7684\u57fa\u672c\u5b57\u6bb5\u4ee5\u53ca <code>id</code>\uff0c\u4f46\u6ca1\u6709\u5305\u62ec <code>team</code> \u4f5c\u4e3a \u5173\u7cfb\u5c5e\u6027\u3002</p> <p>\u540c\u6837\u5730\uff0c\u6211\u4eec\u5728\u58f0\u660e <code>TeamPublic</code> \u65f6\u53ea\u5305\u62ec\u4e86 <code>TeamBase</code> \u7684\u57fa\u672c\u5b57\u6bb5\u548c <code>id</code>\uff0c\u4f46\u6ca1\u6709\u5305\u62ec <code>heroes</code> \u4f5c\u4e3a \u5173\u7cfb\u5c5e\u6027\u3002</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n# \u8fd9\u91cc\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\nclass TeamPublic(TeamBase):\n    id: int\n\n# \u8fd9\u91cc\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n# \u8fd9\u91cc\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\nclass HeroPublic(HeroBase):\n    id: int\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n# \u8fd9\u91cc\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\nclass TeamPublic(TeamBase):\n    id: int\n\n# \u8fd9\u91cc\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n# \u8fd9\u91cc\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\nclass HeroPublic(HeroBase):\n    id: int\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n# \u8fd9\u91cc\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\nclass TeamPublic(TeamBase):\n    id: int\n\n# \u8fd9\u91cc\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n# \u8fd9\u91cc\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\nclass HeroPublic(HeroBase):\n    id: int\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: str | None = None\n    headquarters: str | None = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n    team_id: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=list[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: Optional[str] = None\n    headquarters: Optional[str] = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    team_id: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=list[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: Optional[str] = None\n    headquarters: Optional[str] = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    team_id: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=List[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>\u73b0\u5728\uff0c\u8bb0\u4f4f FastAPI \u4f7f\u7528 <code>response_model</code> \u6765\u9a8c\u8bc1\u548c \u8fc7\u6ee4 \u54cd\u5e94\u6570\u636e\uff0c\u5bf9\u5427\uff1f</p> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 <code>response_model=TeamPublic</code> \u548c <code>response_model=HeroPublic</code>\uff0c\u56e0\u6b64 FastAPI \u4f1a\u4f7f\u7528\u5b83\u4eec\u6765\u8fc7\u6ee4\u54cd\u5e94\u6570\u636e\uff0c\u5373\u4f7f\u6211\u4eec\u8fd4\u56de\u7684\u662f\u5305\u542b \u5173\u7cfb\u5c5e\u6027 \u7684 \u8868\u6a21\u578b\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n# \u8fd9\u91cc\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n# \u8fd9\u91cc\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n# \u8fd9\u91cc\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: str | None = None\n    headquarters: str | None = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n    team_id: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=list[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: Optional[str] = None\n    headquarters: Optional[str] = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    team_id: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=list[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: Optional[str] = None\n    headquarters: Optional[str] = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    team_id: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=List[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/fastapi/relationships/#_2","title":"\u4e0d\u5305\u542b\u6240\u6709\u6570\u636e","text":"<p>\u73b0\u5728\u8ba9\u6211\u4eec\u6682\u505c\u4e00\u4e0b\uff0c\u601d\u8003\u4e00\u4e0b\u8fd9\u4e2a\u95ee\u9898\u3002</p> <p>\u6211\u4eec\u4e0d\u80fd\u7b80\u5355\u5730\u5305\u542b \u6240\u6709 \u6570\u636e\uff0c\u5305\u62ec\u6240\u6709\u7684\u5185\u90e8\u5173\u7cfb\uff0c\u56e0\u4e3a\u6bcf\u4e2a \u82f1\u96c4 \u90fd\u6709\u4e00\u4e2a <code>team</code> \u5c5e\u6027\u6307\u5411\u4ed6\u4eec\u7684\u56e2\u961f\uff0c\u800c\u8fd9\u4e2a \u56e2\u961f \u4e5f\u6709\u4e00\u4e2a <code>heroes</code> \u5c5e\u6027\u5305\u542b\u8be5\u56e2\u961f\u7684\u6240\u6709 \u82f1\u96c4\uff0c\u5305\u62ec\u8fd9\u4e2a\u82f1\u96c4\u672c\u8eab\u3002</p> <p>\u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u5305\u542b\u6240\u6709\u5185\u5bb9\uff0c\u670d\u52a1\u5668\u5e94\u7528\u53ef\u80fd\u4f1a \u5d29\u6e83\uff0c\u56e0\u4e3a\u5b83\u4f1a\u5c1d\u8bd5\u63d0\u53d6 \u65e0\u9650\u6570\u636e\uff0c\u4e0d\u65ad\u5730\u91cd\u590d\u904d\u5386\u76f8\u540c\u7684\u82f1\u96c4\u548c\u56e2\u961f\uff0c\u50cf\u8fd9\u6837\uff1a</p> <pre><code>{\n    \"name\": \"Rusty-Man\",\n    \"secret_name\": \"Tommy Sharp\",\n    \"age\": 48,\n    \"team_id\": 1,\n    \"id\": 1,\n    \"team\": {\n        \"name\": \"Preventers\",\n        \"headquarters\": \"Sharp Tower\",\n        \"id\": 2,\n        \"heroes\": [\n            {\n                \"name\": \"Rusty-Man\",\n                \"secret_name\": \"Tommy Sharp\",\n                \"age\": 48,\n                \"team_id\": 1,\n                \"id\": 1,\n                \"team\": {\n                    \"name\": \"Preventers\",\n                    \"headquarters\": \"Sharp Tower\",\n                    \"id\": 2,\n                    \"heroes\": [\n                        {\n                            \"name\": \"Rusty-Man\",\n                            \"secret_name\": \"Tommy Sharp\",\n                            \"age\": 48,\n                            \"team_id\": 1,\n                            \"id\": 1,\n                            \"team\": {\n                                \"name\": \"Preventers\",\n                                \"headquarters\": \"Sharp Tower\",\n                                \"id\": 2,\n                                \"heroes\": [\n                                    ...\u8fd9\u91cc\u662f\u65e0\u9650\u6570\u636e... \ud83d\ude31\n                                ]\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}\n</code></pre> <p>\u6b63\u5982\u4f60\u6240\u770b\u5230\u7684\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4f1a\u5f97\u5230\u82f1\u96c4 Rusty-Man\uff0c\u7136\u540e\u4ece\u8fd9\u4e2a\u82f1\u96c4\u6211\u4eec\u4f1a\u5f97\u5230\u56e2\u961f Preventers\uff0c\u63a5\u7740\u4ece\u8fd9\u4e2a\u56e2\u961f\u6211\u4eec\u4f1a\u5f97\u5230\u5b83\u7684\u82f1\u96c4\uff0c\u5f53\u7136\uff0c\u5305\u62ec Rusty-Man... \ud83d\ude31</p> <p>\u7136\u540e\u6211\u4eec\u53c8\u5f00\u59cb\u4e86\uff0c\u6700\u7ec8\u670d\u52a1\u5668\u4f1a\u56e0\u4e3a\u5c1d\u8bd5\u83b7\u53d6\u6240\u6709\u6570\u636e\u800c \u5d29\u6e83\uff0c\u51fa\u73b0 <code>\"Maximum recursion error\"</code>\uff0c\u6211\u4eec\u751a\u81f3\u4e0d\u4f1a\u5f97\u5230\u50cf\u4e0a\u9762\u90a3\u6837\u7684\u54cd\u5e94\u3002</p> <p>\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u8c28\u614e\u9009\u62e9\u5728\u4ec0\u4e48\u60c5\u51b5\u4e0b\u5305\u542b\u6570\u636e\uff0c\u5728\u4ec0\u4e48\u60c5\u51b5\u4e0b\u4e0d\u5305\u542b\u6570\u636e\u3002</p>"},{"location":"tutorial/fastapi/relationships/#_3","title":"\u5e94\u8be5\u5305\u542b\u54ea\u4e9b\u6570\u636e\uff1f","text":"<p>\u8fd9\u662f\u4e00\u4e2a\u4f9d\u8d56\u4e8e \u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f \u7684\u51b3\u7b56\u3002</p> <p>\u5728\u6211\u4eec\u7684\u60c5\u51b5\u4e0b\uff0c\u5047\u8bbe\u5982\u679c\u6211\u4eec\u83b7\u53d6\u4e00\u4e2a \u82f1\u96c4\u5217\u8868\uff0c\u6211\u4eec\u4e0d\u60f3\u5728\u6bcf\u4e2a\u82f1\u96c4\u4e2d\u5305\u542b\u4ed6\u4eec\u5404\u81ea\u7684\u56e2\u961f\u4fe1\u606f\u3002</p> <p>\u5982\u679c\u6211\u4eec\u83b7\u53d6\u4e00\u4e2a \u56e2\u961f\u5217\u8868\uff0c\u6211\u4eec\u4e5f\u4e0d\u5e0c\u671b\u83b7\u53d6\u6bcf\u4e2a\u56e2\u961f\u7684\u82f1\u96c4\u5217\u8868\u3002</p> <p>\u4f46\u5982\u679c\u6211\u4eec\u83b7\u53d6\u4e00\u4e2a \u5355\u4e2a\u82f1\u96c4\uff0c\u6211\u4eec\u5e0c\u671b\u5305\u542b\u56e2\u961f\u6570\u636e\uff08\u4f46\u4e0d\u5305\u62ec\u56e2\u961f\u7684\u82f1\u96c4\uff09\u3002</p> <p>\u5982\u679c\u6211\u4eec\u83b7\u53d6\u4e00\u4e2a \u5355\u4e2a\u56e2\u961f\uff0c\u6211\u4eec\u5e0c\u671b\u5305\u542b\u82f1\u96c4\u5217\u8868\uff08\u4f46\u4e0d\u5305\u62ec\u6bcf\u4e2a\u82f1\u96c4\u7684\u56e2\u961f\uff09\u3002</p> <p>\u8ba9\u6211\u4eec\u6dfb\u52a0\u51e0\u4e2a\u65b0\u7684 \u6570\u636e\u6a21\u578b\uff0c\u6765\u58f0\u660e\u8fd9\u4e9b\u6570\u636e\uff0c\u4ee5\u4fbf\u5728\u8fd9\u4e24\u4e2a\u7279\u5b9a\u7684 \u8def\u5f84\u64cd\u4f5c \u4e2d\u4f7f\u7528\u5b83\u4eec\u3002</p>"},{"location":"tutorial/fastapi/relationships/#_4","title":"\u5177\u6709\u5173\u7cfb\u7684\u6a21\u578b","text":"<p>\u6211\u4eec\u5c06\u6dfb\u52a0 <code>HeroPublicWithTeam</code> \u548c <code>TeamPublicWithHeroes</code> \u6a21\u578b\u3002</p> <p>\u6211\u4eec\u5c06\u5728 \u5176\u4ed6\u6a21\u578b\u4e4b\u540e \u6dfb\u52a0\u5b83\u4eec\uff0c\u4ee5\u4fbf\u53ef\u4ee5\u8f7b\u677e\u5f15\u7528\u4e4b\u524d\u7684\u6a21\u578b\u3002</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\nclass HeroPublicWithTeam(HeroPublic):\n    team: TeamPublic | None = None\n\n\nclass TeamPublicWithHeroes(TeamPublic):\n    heroes: list[HeroPublic] = []\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\nclass HeroPublicWithTeam(HeroPublic):\n    team: Optional[TeamPublic] = None\n\n\nclass TeamPublicWithHeroes(TeamPublic):\n    heroes: list[HeroPublic] = []\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\nclass HeroPublicWithTeam(HeroPublic):\n    team: Optional[TeamPublic] = None\n\n\nclass TeamPublicWithHeroes(TeamPublic):\n    heroes: List[HeroPublic] = []\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    id: int | None = None\n    name: str | None = None\n    headquarters: str | None = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n    team_id: int | None = None\n\n\nclass HeroPublicWithTeam(HeroPublic):\n    team: TeamPublic | None = None\n\n\nclass TeamPublicWithHeroes(TeamPublic):\n    heroes: list[HeroPublic] = []\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublicWithTeam)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=list[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublicWithHeroes)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    id: Optional[int] = None\n    name: Optional[str] = None\n    headquarters: Optional[str] = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    team_id: Optional[int] = None\n\n\nclass HeroPublicWithTeam(HeroPublic):\n    team: Optional[TeamPublic] = None\n\n\nclass TeamPublicWithHeroes(TeamPublic):\n    heroes: list[HeroPublic] = []\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublicWithTeam)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=list[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublicWithHeroes)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    id: Optional[int] = None\n    name: Optional[str] = None\n    headquarters: Optional[str] = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    team_id: Optional[int] = None\n\n\nclass HeroPublicWithTeam(HeroPublic):\n    team: Optional[TeamPublic] = None\n\n\nclass TeamPublicWithHeroes(TeamPublic):\n    heroes: List[HeroPublic] = []\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublicWithTeam)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=List[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublicWithHeroes)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>\u8fd9\u4e24\u4e2a\u6a21\u578b\u7684\u4ee3\u7801\u975e\u5e38 \u7b80\u5355\uff0c\u4f46\u5b9e\u9645\u4e0a\u8fd9\u91cc\u6709\u5f88\u591a\u5185\u5bb9\u53d1\u751f\u3002\u8ba9\u6211\u4eec\u6765\u770b\u770b\u3002</p>"},{"location":"tutorial/fastapi/relationships/#_5","title":"\u7ee7\u627f\u4e0e\u7c7b\u578b\u6ce8\u89e3","text":"<p><code>HeroPublicWithTeam</code> \u7ee7\u627f \u81ea <code>HeroPublic</code>\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u5c06\u62e5\u6709 <code>HeroPublic</code> \u4e2d\u58f0\u660e\u7684 \u7528\u4e8e\u8bfb\u53d6\u7684\u5e38\u89c4\u5b57\u6bb5\uff0c\u5305\u62ec\u5fc5\u9700\u7684 <code>id</code> \u5b57\u6bb5\u3002</p> <p>\u7136\u540e\uff0c\u5b83\u6dfb\u52a0\u4e86\u4e00\u4e2a \u65b0\u5b57\u6bb5 <code>team</code>\uff0c\u8be5\u5b57\u6bb5\u53ef\u80fd\u662f <code>None</code>\uff0c\u5e76\u4e14\u88ab\u58f0\u660e\u4e3a\u7c7b\u578b <code>TeamPublic</code>\uff0c\u8be5\u7c7b\u578b\u5305\u542b\u8bfb\u53d6\u56e2\u961f\u7684\u57fa\u7840\u5b57\u6bb5\u3002</p> <p>\u5bf9\u4e8e <code>TeamPublicWithHeroes</code>\uff0c\u6211\u4eec\u505a\u4e86\u76f8\u540c\u7684\u64cd\u4f5c\uff0c\u5b83 \u7ee7\u627f \u81ea <code>TeamPublic</code>\uff0c\u5e76\u58f0\u660e\u4e86 \u65b0\u5b57\u6bb5 <code>heroes</code>\uff0c\u8be5\u5b57\u6bb5\u662f <code>HeroPublic</code> \u7c7b\u578b\u7684\u5217\u8868\u3002</p>"},{"location":"tutorial/fastapi/relationships/#_6","title":"\u6ca1\u6709\u5173\u7cfb\u5c5e\u6027\u7684\u6570\u636e\u6a21\u578b","text":"<p>\u73b0\u5728\uff0c\u8bf7\u6ce8\u610f\u8fd9\u4e9b\u65b0\u5b57\u6bb5 <code>team</code> \u548c <code>heroes</code> \u5e76\u672a\u4f7f\u7528 <code>Relationship()</code> \u58f0\u660e\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u5e76\u4e0d\u662f \u8868\u6a21\u578b\uff0c\u5b83\u4eec\u65e0\u6cd5\u50cf\u6570\u636e\u5e93\u4e2d\u7684\u6a21\u578b\u90a3\u6837\u901a\u8fc7\u9b54\u672f\u65b9\u6cd5\u8bbf\u95ee\u6570\u636e\u3002</p> <p>\u76f8\u53cd\uff0c\u8fd9\u4e9b\u53ea\u662f \u6570\u636e\u6a21\u578b\uff0c\u7528\u6765\u544a\u8bc9 FastAPI \u5e94\u8be5\u4ece\u54ea\u4e9b\u5c5e\u6027 \u83b7\u53d6\u6570\u636e\uff0c\u4ee5\u53ca \u4ece\u8fd9\u4e9b\u5c5e\u6027\u4e2d\u83b7\u53d6\u54ea\u4e9b\u6570\u636e\u3002</p>"},{"location":"tutorial/fastapi/relationships/#_7","title":"\u5bf9\u5176\u4ed6\u6a21\u578b\u7684\u5f15\u7528","text":"<p>\u6b64\u5916\uff0c\u8bf7\u6ce8\u610f\u5b57\u6bb5 <code>team</code> \u5e76\u672a\u58f0\u660e\u4e3a <code>TeamPublicWithHeroes</code>\uff0c\u56e0\u4e3a\u90a3\u6837\u4f1a\u518d\u6b21\u5bfc\u81f4\u6570\u636e\u7684\u65e0\u9650\u9012\u5f52\u3002\u76f8\u53cd\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u666e\u901a\u7684 <code>TeamPublic</code> \u6a21\u578b\u6765\u58f0\u660e\u5b83\u3002</p> <p>\u5bf9\u4e8e <code>TeamPublicWithHeroes</code> \u4e5f\u662f\u4e00\u6837\uff0c\u65b0\u7684\u5b57\u6bb5 <code>heroes</code> \u4f7f\u7528\u7684\u662f <code>HeroPublic</code> \u6a21\u578b\uff0c\u4ee5\u4fbf\u4ec5\u83b7\u53d6\u6bcf\u4e2a\u82f1\u96c4\u7684\u6570\u636e\u3002</p> <p>\u8fd9\u4e5f\u610f\u5473\u7740\uff0c\u5c3d\u7ba1\u6211\u4eec\u6709\u4e86\u8fd9\u4e24\u4e2a\u65b0\u6a21\u578b\uff0c\u6211\u4eec\u4ecd\u7136\u9700\u8981\u4e4b\u524d\u7684\u6a21\u578b\uff0c\u5373 <code>HeroPublic</code> \u548c <code>TeamPublic</code>\uff0c\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u5728\u8fd9\u91cc\u5f15\u7528\u5b83\u4eec\uff08\u5e76\u4e14\u5728\u5176\u4f59\u7684 \u8def\u5f84\u64cd\u4f5c \u4e2d\u4e5f\u5728\u4f7f\u7528\u5b83\u4eec\uff09\u3002</p>"},{"location":"tutorial/fastapi/relationships/#_8","title":"\u66f4\u65b0\u8def\u5f84\u64cd\u4f5c","text":"<p>\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u66f4\u65b0 \u8def\u5f84\u64cd\u4f5c\uff0c\u4f7f\u7528\u65b0\u6a21\u578b\u3002</p> <p>\u8fd9\u5c06\u544a\u8bc9 FastAPI \u4ece \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u8fd4\u56de\u7684\u5bf9\u8c61\uff08\u4e00\u4e2a \u8868\u6a21\u578b\uff09\u4e2d \u8bbf\u95ee\u9644\u52a0\u5c5e\u6027\uff0c\u5e76\u63d0\u53d6\u5b83\u4eec\u7684\u6570\u636e\u3002</p> <p>\u5bf9\u4e8e\u82f1\u96c4\u6765\u8bf4\uff0c\u8fd9\u4f1a\u544a\u8bc9 FastAPI \u4e5f\u63d0\u53d6 <code>team</code>\u3002\u5bf9\u4e8e\u56e2\u961f\u6765\u8bf4\uff0c\u4e5f\u4f1a\u63d0\u53d6 <code>heroes</code> \u5217\u8868\u3002</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublicWithTeam)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n# \u8fd9\u91cc\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublicWithHeroes)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublicWithTeam)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n# \u8fd9\u91cc\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublicWithHeroes)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublicWithTeam)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n# \u8fd9\u91cc\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublicWithHeroes)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    id: int | None = None\n    name: str | None = None\n    headquarters: str | None = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n    team_id: int | None = None\n\n\nclass HeroPublicWithTeam(HeroPublic):\n    team: TeamPublic | None = None\n\n\nclass TeamPublicWithHeroes(TeamPublic):\n    heroes: list[HeroPublic] = []\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublicWithTeam)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=list[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublicWithHeroes)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    id: Optional[int] = None\n    name: Optional[str] = None\n    headquarters: Optional[str] = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    team_id: Optional[int] = None\n\n\nclass HeroPublicWithTeam(HeroPublic):\n    team: Optional[TeamPublic] = None\n\n\nclass TeamPublicWithHeroes(TeamPublic):\n    heroes: list[HeroPublic] = []\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublicWithTeam)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=list[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublicWithHeroes)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    id: Optional[int] = None\n    name: Optional[str] = None\n    headquarters: Optional[str] = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    team_id: Optional[int] = None\n\n\nclass HeroPublicWithTeam(HeroPublic):\n    team: Optional[TeamPublic] = None\n\n\nclass TeamPublicWithHeroes(TeamPublic):\n    heroes: List[HeroPublic] = []\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublicWithTeam)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=List[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublicWithHeroes)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/fastapi/relationships/#ui","title":"\u5728\u6587\u6863 UI \u4e2d\u67e5\u770b","text":"<p>\u73b0\u5728\u6211\u4eec\u518d\u6b21\u5728 \u6587\u6863 UI \u4e2d\u5c1d\u8bd5\u4e00\u4e0b\u3002</p> <p>\u6211\u4eec\u518d\u8bd5\u4e00\u6b21\u83b7\u53d6 ID \u4e3a <code>1</code> \u7684 \u82f1\u96c4\uff1a</p> <p></p> <p>\u73b0\u5728\u6211\u4eec\u5f97\u5230\u4e86 \u56e2\u961f \u6570\u636e\uff1a</p> <pre><code>{\n    \"name\": \"Deadpond\",\n    \"secret_name\": \"Dive Wilson\",\n    \"age\": null,\n    \"team_id\": 1,\n    \"id\": 1,\n    \"team\": {\n        \"name\": \"Z-Force\",\n        \"headquarters\": \"Sister Margaret's Bar\",\n        \"id\": 1\n    }\n}\n</code></pre> <p>\u73b0\u5728\uff0c\u5982\u679c\u6211\u4eec\u83b7\u53d6 ID \u4e3a <code>2</code> \u7684 \u56e2\u961f\uff1a</p> <p></p> <p>\u73b0\u5728\u6211\u4eec\u5f97\u5230\u4e86 \u82f1\u96c4 \u7684\u5217\u8868\uff1a</p> <pre><code>{\n    \"name\": \"Preventers\",\n    \"headquarters\": \"Sharp Tower\",\n    \"id\": 2,\n    \"heroes\": [\n        {\n            \"name\": \"Rusty-Man\",\n            \"secret_name\": \"Tommy Sharp\",\n            \"age\": 48,\n            \"team_id\": 2,\n            \"id\": 2\n        },\n        {\n            \"name\": \"Spider-Boy\",\n            \"secret_name\": \"Pedro Parqueador\",\n            \"age\": null,\n            \"team_id\": 2,\n            \"id\": 3\n        },\n        {\n            \"name\": \"Tarantula\",\n            \"secret_name\": \"Natalia Roman-on\",\n            \"age\": 32,\n            \"team_id\": 2,\n            \"id\": 6\n        },\n        {\n            \"name\": \"Dr. Weird\",\n            \"secret_name\": \"Steve Weird\",\n            \"age\": 36,\n            \"team_id\": 2,\n            \"id\": 7\n        },\n        {\n            \"name\": \"Captain North America\",\n            \"secret_name\": \"Esteban Rogelios\",\n            \"age\": 93,\n            \"team_id\": 2,\n            \"id\": 8\n        }\n    ]\n}\n</code></pre>"},{"location":"tutorial/fastapi/relationships/#_9","title":"\u603b\u7ed3","text":"<p>\u901a\u8fc7\u58f0\u660e\u989d\u5916\u7684 \u6570\u636e\u6a21\u578b\uff0c\u6211\u4eec\u53ef\u4ee5\u544a\u8bc9 FastAPI \u5728\u54cd\u5e94\u4e2d\u8fd4\u56de\u54ea\u4e9b\u6570\u636e\uff0c\u5373\u4f7f\u6211\u4eec\u8fd4\u56de\u7684\u662f \u8868\u6a21\u578b\u3002</p> <p>\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u51e0\u4e4e \u4e0d\u9700\u8981\u6539\u53d8 FastAPI \u5e94\u7528 \u7684\u4ee3\u7801\uff0c\u4f46\u5f53\u7136\uff0c\u4e5f\u4f1a\u6709\u4e00\u4e9b\u60c5\u51b5\uff0c\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\u4f60\u9700\u8981\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u83b7\u53d6\u5e76\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u5904\u7406\u6570\u636e\uff0c\u7136\u540e\u518d\u8fd4\u56de\u5b83\u3002</p> <p>\u4f46\u5373\u4fbf\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f60\u4ecd\u7136\u53ef\u4ee5\u5b9a\u4e49 \u6570\u636e\u6a21\u578b \u7528\u4e8e <code>response_model</code>\uff0c\u4ee5\u544a\u8bc9 FastAPI \u5982\u4f55\u9a8c\u8bc1\u548c\u8fc7\u6ee4\u6570\u636e\u3002</p> <p>\u5230\u6b64\u4e3a\u6b62\uff0c\u4f60\u5df2\u7ecf\u62e5\u6709\u4e86\u4e00\u4e2a\u975e\u5e38\u5f3a\u5927\u7684 API\uff0c\u80fd\u591f\u7ed3\u5408 SQLModel \u548c FastAPI \u5904\u7406 SQL \u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\uff0c\u5e76\u5b9e\u73b0\u4e86 \u6700\u4f73\u5b9e\u8df5\uff0c\u4f8b\u5982\u6570\u636e\u9a8c\u8bc1\u3001\u8f6c\u6362\u3001\u8fc7\u6ee4\u548c\u6587\u6863\u751f\u6210\u3002\u2728</p> <p>\u5728\u4e0b\u4e00\u7ae0\uff0c\u6211\u5c06\u544a\u8bc9\u4f60\u5982\u4f55\u4f7f\u7528 FastAPI \u548c SQLModel \u4e3a\u4f60\u7684\u5e94\u7528\u5b9e\u73b0\u81ea\u52a8\u5316 \u6d4b\u8bd5\u3002\u2705</p>"},{"location":"tutorial/fastapi/response-model/","title":"FastAPI \u54cd\u5e94\u6a21\u578b\u4e0e SQLModel","text":"<p>\u73b0\u5728\uff0c\u6211\u5c06\u5411\u4f60\u5c55\u793a\u5982\u4f55\u4f7f\u7528 FastAPI \u7684 <code>response_model</code> \u4e0e SQLModel \u914d\u5408\u4f7f\u7528\u3002</p>"},{"location":"tutorial/fastapi/response-model/#api","title":"\u4ea4\u4e92\u5f0f API \u6587\u6863","text":"<p>\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u4f7f\u7528\u7684\u4ee3\u7801\uff0cAPI \u6587\u6863\u5df2\u7ecf\u77e5\u9053\u5ba2\u6237\u7aef\u9700\u8981\u53d1\u9001\u7684\u6570\u636e\uff1a</p> <p></p> <p>\u8fd9\u4e2a\u4ea4\u4e92\u5f0f\u6587\u6863 UI \u662f\u7531 Swagger UI \u63d0\u4f9b\u652f\u6301\u7684\uff0cSwagger UI \u7684\u4f5c\u7528\u662f\u8bfb\u53d6\u4e00\u4e2a\u5927\u578b\u7684 JSON \u5185\u5bb9\uff0c\u8fd9\u4e2a JSON \u5b9a\u4e49\u4e86 API \u548c\u6240\u6709\u6570\u636e\u67b6\u6784\uff08\u6570\u636e\u7ed3\u6784\uff09\uff0c\u4f7f\u7528\u6807\u51c6\u7684 OpenAPI\uff0c\u5e76\u5c06\u5176\u663e\u793a\u5728\u8fd9\u4e2a\u6f02\u4eae\u7684 UI \u4e2d\u3002</p> <p>FastAPI \u4f1a\u81ea\u52a8 \u751f\u6210 OpenAPI\uff0c\u4f9b Swagger UI \u8bfb\u53d6\u3002</p> <p>\u5b83\u6839\u636e\u4f60\u7f16\u5199\u7684\u4ee3\u7801\u751f\u6210\u8fd9\u4e9b\u5185\u5bb9\uff0c\u5229\u7528 Pydantic \u6a21\u578b\uff08\u5728\u672c\u4f8b\u4e2d\u662f SQLModel \u6a21\u578b\uff09\u548c\u7c7b\u578b\u6ce8\u89e3\u6765\u4e86\u89e3 API \u5904\u7406\u7684\u6570\u636e\u67b6\u6784\u3002</p>"},{"location":"tutorial/fastapi/response-model/#_1","title":"\u54cd\u5e94\u6570\u636e","text":"<p>\u4f46\u662f\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0cAPI \u6587\u6863 UI \u5e76\u4e0d\u77e5\u9053\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u8fd4\u56de\u7684 \u54cd\u5e94 \u7684\u67b6\u6784\u3002</p> <p>\u4f60\u53ef\u4ee5\u770b\u5230\uff0c\u6709\u4e00\u4e2a\u53ef\u80fd\u7684 \"\u6210\u529f\u54cd\u5e94\" \u548c\u4ee3\u7801 <code>200</code>\uff0c\u4f46\u662f\u6211\u4eec\u5e76\u4e0d\u77e5\u9053\u54cd\u5e94\u6570\u636e\u7684\u5177\u4f53\u6837\u5b50\u3002</p> <p></p> <p>\u73b0\u5728\uff0c\u6211\u4eec\u53ea\u544a\u8bc9\u4e86 FastAPI \u6211\u4eec\u5e0c\u671b\u63a5\u6536\u7684\u6570\u636e\uff0c\u4f46\u8fd8\u6ca1\u6709\u544a\u8bc9\u5b83\u6211\u4eec\u5e0c\u671b\u53d1\u9001\u56de\u7684\u6570\u636e\u3002</p> <p>\u8ba9\u6211\u4eec\u73b0\u5728\u505a\u8fd9\u4e2a\u6539\u53d8\u3002\ud83e\udd13</p>"},{"location":"tutorial/fastapi/response-model/#response_model","title":"\u4f7f\u7528 <code>response_model</code>","text":"<p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 <code>response_model</code> \u6765\u544a\u8bc9 FastAPI \u6211\u4eec\u5e0c\u671b\u53d1\u9001\u56de\u7684\u6570\u636e\u7684\u67b6\u6784\u3002</p> <p>\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u4f20\u9012\u76f8\u540c\u7684 <code>Hero</code> SQLModel \u7c7b\uff08\u56e0\u4e3a\u5b83\u4e5f\u662f\u4e00\u4e2a Pydantic \u6a21\u578b\uff09\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.post(\"/heroes/\", response_model=Hero)\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\n@app.post(\"/heroes/\", response_model=Hero)\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\n@app.post(\"/heroes/\", response_model=Hero)\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=Hero)\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n\n@app.get(\"/heroes/\", response_model=list[Hero])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=Hero)\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n\n@app.get(\"/heroes/\", response_model=list[Hero])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=Hero)\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n\n@app.get(\"/heroes/\", response_model=List[Hero])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre>"},{"location":"tutorial/fastapi/response-model/#response_model_1","title":"\u5728 <code>response_model</code> \u4e2d\u5217\u51fa\u82f1\u96c4","text":"<p>\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u7c7b\u578b\u6ce8\u89e3\uff0c\u5c31\u50cf\u6211\u4eec\u5728 Pydantic \u5b57\u6bb5\u4e2d\u4f7f\u7528\u7684\u90a3\u6837\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a <code>Hero</code> \u5bf9\u8c61\u7684\u5217\u8868\u3002</p> <p>\u9996\u5148\uff0c\u6211\u4eec\u4ece <code>typing</code> \u5bfc\u5165 <code>List</code>\uff0c\u7136\u540e\u5728 <code>response_model</code> \u4e2d\u58f0\u660e <code>List[Hero]</code>\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code here omitted \ud83d\udc48\n\n@app.get(\"/heroes/\", response_model=list[Hero])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code here omitted \ud83d\udc48\n\n@app.get(\"/heroes/\", response_model=list[Hero])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import List, Optional\n\n# Code here omitted \ud83d\udc48\n\n@app.get(\"/heroes/\", response_model=List[Hero])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=Hero)\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n\n@app.get(\"/heroes/\", response_model=list[Hero])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=Hero)\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n\n@app.get(\"/heroes/\", response_model=list[Hero])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=Hero)\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n\n@app.get(\"/heroes/\", response_model=List[Hero])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre>"},{"location":"tutorial/fastapi/response-model/#fastapi-response-model","title":"FastAPI \u548c Response Model","text":"<p>FastAPI \u4f1a\u4f7f\u7528\u8fd9\u4e2a <code>response_model</code> \u8fdb\u884c\u6570\u636e\u9a8c\u8bc1\u548c\u54cd\u5e94\u6570\u636e\u8fc7\u6ee4\u3002</p> <p>\u8fd9\u5c31\u50cf\u662f\u6211\u4eec\u5e94\u7528\u7a0b\u5e8f\u548c\u5ba2\u6237\u7aef\u4e4b\u95f4\u7684\u5951\u7ea6\u3002</p> <p>\u4f60\u53ef\u4ee5\u5728 FastAPI \u6587\u6863\u5173\u4e8e <code>response_model</code> \u7684\u90e8\u5206 \u4e2d\u9605\u8bfb\u66f4\u591a\u5185\u5bb9\u3002</p>"},{"location":"tutorial/fastapi/response-model/#api-ui","title":"\u65b0\u7684 API \u6587\u6863 UI","text":"<p>\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u8fd4\u56de\u5230\u6587\u6863 UI\uff0c\u770b\u5230\u5b83\u4eec\u5df2\u7ecf\u663e\u793a\u4e86\u6211\u4eec\u5c06\u63a5\u6536\u5230\u7684\u54cd\u5e94\u7684 schema\u3002</p> <p></p> <p>\u5ba2\u6237\u7aef\u5c06\u77e5\u9053\u4ed6\u4eec\u5e94\u8be5\u671f\u5f85\u4ec0\u4e48\u6570\u636e\u3002</p>"},{"location":"tutorial/fastapi/response-model/#_2","title":"\u81ea\u52a8\u5316\u5ba2\u6237\u7aef","text":"<p>\u4f7f\u7528 <code>response_model</code> \u7684\u6700\u5927\u597d\u5904\u4e4b\u4e00\u5c31\u662f\u5b83\u4f1a\u663e\u793a\u5728 API \u6587\u6863 UI \u4e2d\u3002</p> <p>\u4f46\u5b83\u8fd8\u6709\u5176\u4ed6\u4f18\u70b9\uff0c\u6bd4\u5982 FastAPI \u4f1a\u4f7f\u7528\u8fd9\u4e2a\u6a21\u578b\u81ea\u52a8\u8fdb\u884c \u6570\u636e\u9a8c\u8bc1\u548c\u54cd\u5e94\u6570\u636e\u8fc7\u6ee4\u3002</p> <p>\u6b64\u5916\uff0c\u7531\u4e8e schema \u662f\u4f7f\u7528\u6807\u51c6\u5b9a\u4e49\u7684\uff0c\u6709\u8bb8\u591a\u5de5\u5177\u53ef\u4ee5\u5229\u7528\u8fd9\u4e00\u70b9\u3002</p> <p>\u4f8b\u5982\uff0c\u5ba2\u6237\u7aef\u751f\u6210\u5668\u53ef\u4ee5\u81ea\u52a8\u751f\u6210\u4e0e\u60a8\u7684 API \u4ea4\u4e92\u6240\u9700\u7684\u4ee3\u7801\uff0c\u652f\u6301\u591a\u79cd\u8bed\u8a00\u3002</p> <p>Tip</p> <p>\u5982\u679c\u4f60\u5bf9\u8fd9\u4e9b\u6807\u51c6\u611f\u5174\u8da3\uff0cFastAPI \u4f1a\u751f\u6210 OpenAPI\uff0c\u800c OpenAPI \u5185\u90e8\u4f7f\u7528\u7684\u662f JSON Schema\u3002</p> <p>\u4f60\u53ef\u4ee5\u5728 FastAPI \u6587\u6863 - \u7b2c\u4e00\u6b65 \u4e2d\u9605\u8bfb\u6240\u6709\u76f8\u5173\u5185\u5bb9\u3002</p>"},{"location":"tutorial/fastapi/response-model/#_3","title":"\u603b\u7ed3","text":"<p>\u4f7f\u7528 <code>response_model</code> \u544a\u8bc9 FastAPI \u4f60\u5e0c\u671b\u53d1\u9001\u56de\u7684\u6570\u636e\u7684 schema\uff0c\u4ece\u800c\u62e5\u6709\u5f3a\u5927\u7684\u6570\u636e API\u3002 \ud83d\ude0e</p>"},{"location":"tutorial/fastapi/session-with-dependency/","title":"\u4f7f\u7528 FastAPI \u4f9d\u8d56\u9879\u7ba1\u7406 Session","text":"<p>\u5728\u6211\u4eec\u7ee7\u7eed\u6dfb\u52a0\u529f\u80fd\u4e4b\u524d\uff0c\u8ba9\u6211\u4eec\u7a0d\u5fae\u6539\u53d8\u4e00\u4e0b\u83b7\u53d6\u6bcf\u4e2a\u8bf7\u6c42\u7684 session \u7684\u65b9\u5f0f\uff0c\u4ee5\u4fbf\u4ee5\u540e\u7b80\u5316\u6211\u4eec\u7684\u5de5\u4f5c\u3002</p>"},{"location":"tutorial/fastapi/session-with-dependency/#session","title":"\u5f53\u524d\u7684 Session","text":"<p>\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5728\u6bcf\u4e2a \u8def\u5f84\u64cd\u4f5c \u4e2d\u90fd\u5728 <code>with</code> \u5757\u4e2d\u521b\u5efa\u4e86\u4e00\u4e2a session\u3002</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        for key, value in hero_data.items():\n            setattr(db_hero, key, value)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        session.delete(hero)\n        session.commit()\n        return {\"ok\": True}\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        for key, value in hero_data.items():\n            setattr(db_hero, key, value)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        session.delete(hero)\n        session.commit()\n        return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        for key, value in hero_data.items():\n            setattr(db_hero, key, value)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        session.delete(hero)\n        session.commit()\n        return {\"ok\": True}\n</code></pre> <p>\u8fd9\u6837\u505a\u662f\u5b8c\u5168\u6ca1\u95ee\u9898\u7684\uff0c\u4f46\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5e0c\u671b\u4f7f\u7528 FastAPI \u4f9d\u8d56\u9879\uff0c\u4f8b\u5982\u5728\u6267\u884c\u4efb\u4f55\u5176\u4ed6\u4ee3\u7801\u4e4b\u524d\uff0c \u9a8c\u8bc1 \u5ba2\u6237\u7aef\u662f\u5426 \u767b\u5f55 \u5e76\u83b7\u53d6 \u5f53\u524d\u7528\u6237 \u3002</p> <p>\u8fd9\u4e9b\u4f9d\u8d56\u9879\u5728 \u6d4b\u8bd5 \u4e2d\u4e5f\u975e\u5e38\u6709\u7528\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5 \u8f7b\u677e\u5730\u66ff\u6362\u5b83\u4eec\uff0c\u7136\u540e\u4f8b\u5982\u4e3a\u6d4b\u8bd5\u4f7f\u7528\u65b0\u7684\u6570\u636e\u5e93\uff0c\u6216\u5728\u6d4b\u8bd5\u524d\u63d2\u5165\u4e00\u4e9b\u6570\u636e\u7b49\u3002</p> <p>\u56e0\u6b64\uff0c\u8ba9\u6211\u4eec\u91cd\u6784\u8fd9\u4e9b session\uff0c\u4f7f\u5176\u4f7f\u7528 FastAPI \u4f9d\u8d56\u9879\u3002</p>"},{"location":"tutorial/fastapi/session-with-dependency/#fastapi","title":"\u521b\u5efa\u4e00\u4e2a FastAPI \u4f9d\u8d56\u9879","text":"<p>FastAPI \u4f9d\u8d56\u9879\u975e\u5e38\u7b80\u5355\uff0c\u5b83\u53ea\u662f\u4e00\u4e2a\u8fd4\u56de\u503c\u7684\u51fd\u6570\u3002</p> <p>\u5b83\u53ef\u4ee5\u4f7f\u7528 <code>yield</code> \u66ff\u4ee3 <code>return</code>\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cFastAPI \u4f1a\u786e\u4fdd\u5728\u8bf7\u6c42\u5b8c\u6210\u540e\u6267\u884c\u6240\u6709 <code>yield</code> \u4e4b\u540e\u7684\u4ee3\u7801\u3002</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/fastapi/session-with-dependency/#_1","title":"\u4f7f\u7528\u4f9d\u8d56\u9879","text":"<p>\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u8ba9 FastAPI \u6267\u884c\u4e00\u4e2a\u4f9d\u8d56\u9879\uff0c\u5e76\u5728 \u8def\u5f84\u64cd\u4f5c \u4e2d\u83b7\u53d6\u5b83\u7684\u503c\u3002</p> <p>\u6211\u4eec\u4ece <code>fastapi</code> \u5bfc\u5165 <code>Depends()</code>\uff0c\u7136\u540e\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u4f7f\u7528\u5b83\u4f5c\u4e3a\u4e00\u4e2a \u53c2\u6570\uff0c\u5c31\u50cf\u6211\u4eec\u58f0\u660e\u53c2\u6570\u4ee5\u83b7\u53d6 JSON \u6570\u636e\u4f53\u3001\u8def\u5f84\u53c2\u6570\u7b49\u4e00\u6837\u3002</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>\u8fd9\u91cc\u6709\u4e00\u4e2a\u5173\u4e8e\u53c2\u6570\u4e2d <code>*,</code> \u7684\u5c0f\u8d34\u58eb\u3002</p> <p>\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4f20\u9012\u4e86\u4e00\u4e2a\u53c2\u6570 <code>session</code>\uff0c\u5b83\u7684\u201c\u9ed8\u8ba4\u503c\u201d\u662f <code>Depends(get_session)</code>\uff0c\u4f4d\u4e8e\u6ca1\u6709\u9ed8\u8ba4\u503c\u7684\u53c2\u6570 <code>hero</code> \u4e4b\u524d\u3002</p> <p>\u901a\u5e38\u60c5\u51b5\u4e0b\uff0cPython \u4f1a\u62b1\u6028\u8fd9\u4e2a\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u521d\u59cb\u7684\u201c\u53c2\u6570\u201d <code>*,</code> \u6765\u5c06\u5269\u4e0b\u7684\u53c2\u6570\u6807\u8bb0\u4e3a\u201c\u4ec5\u9650\u5173\u952e\u5b57\u201d\uff0c\u8fd9\u6837\u5c31\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002</p> <p>\u4f60\u53ef\u4ee5\u5728 FastAPI \u6587\u6863\u4e2d\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u8fd9\u4e2a\u7684\u5185\u5bb9\uff1a\u8def\u5f84\u53c2\u6570\u548c\u6570\u5b57\u9a8c\u8bc1 - \u6309\u9700\u6392\u5e8f\u53c2\u6570\u6280\u5de7</p> <p>\u4f9d\u8d56\u9879\u7684\u503c \u53ea\u4f1a\u7528\u4e8e\u4e00\u6b21\u8bf7\u6c42\uff0cFastAPI \u4f1a\u5728\u8c03\u7528\u4f60\u7684\u4ee3\u7801\u4e4b\u524d\u8c03\u7528\u5b83\uff0c\u5e76\u5c06\u4f9d\u8d56\u9879\u7684\u503c\u4f20\u9012\u7ed9\u4f60\u3002</p> <p>\u5982\u679c\u5b83\u6709 <code>yield</code>\uff0c\u90a3\u4e48\u5728\u4f60\u5b8c\u6210\u53d1\u9001\u54cd\u5e94\u540e\uff0cFastAPI \u4f1a\u7ee7\u7eed\u6267\u884c <code>yield</code> \u4e4b\u540e\u7684\u5176\u4f59\u4ee3\u7801\u3002\u5728 session \u7684\u60c5\u51b5\u4e0b\uff0c\u5b83\u4f1a\u5b8c\u6210 <code>with</code> \u5757\u4e2d\u7684\u6e05\u7406\u4ee3\u7801\uff0c\u5173\u95ed session \u7b49\u3002</p> <p>\u7136\u540e\uff0cFastAPI \u4f1a\u5728 \u4e0b\u4e00\u4e2a\u8bf7\u6c42 \u65f6\u518d\u6b21\u8c03\u7528\u5b83\u3002</p> <p>\u7531\u4e8e\u5b83\u662f \u6bcf\u6b21\u8bf7\u6c42\u8c03\u7528\u4e00\u6b21\uff0c\u6211\u4eec\u4ecd\u7136\u4f1a\u4e3a\u6bcf\u4e2a\u8bf7\u6c42\u83b7\u53d6 \u5355\u4e2a session\uff0c\u56e0\u6b64\u6211\u4eec\u4ecd\u7136\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002\u2705</p> <p>\u56e0\u4e3a\u4f9d\u8d56\u9879\u53ef\u4ee5\u4f7f\u7528 <code>yield</code>\uff0cFastAPI \u4f1a\u786e\u4fdd\u5728\u5b8c\u6210\u540e\u8fd0\u884c <code>yield</code> \u4e4b\u540e\u7684\u4ee3\u7801\uff0c\u5305\u62ec <code>with</code> \u5757\u672b\u5c3e\u7684\u6240\u6709 \u6e05\u7406\u4ee3\u7801\u3002\u6240\u4ee5\u6211\u4eec\u4e5f\u53ef\u4ee5\u63a5\u53d7\u8fd9\u4e00\u70b9\u3002\u2705</p>"},{"location":"tutorial/fastapi/session-with-dependency/#with","title":"<code>with</code> \u5757","text":"<p>\u8fd9\u610f\u5473\u7740\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684\u4e3b\u4ee3\u7801\u4e2d\uff0c\u5b83\u5c06\u4e0e\u4e4b\u524d\u4f7f\u7528\u663e\u5f0f <code>with</code> \u5757\u7684\u7248\u672c\u7b49\u6548\u3002</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>\u5b9e\u9645\u4e0a\uff0c\u4f60\u53ef\u4ee5\u8ba4\u4e3a <code>create_hero()</code> \u51fd\u6570\u4e2d\u6240\u6709\u7684\u4ee3\u7801\u5757\u4ecd\u7136\u662f\u5728 session \u7684 <code>with</code> \u5757\u5185\uff0c\u56e0\u4e3a\u8fd9\u57fa\u672c\u4e0a\u662f\u5e55\u540e\u53d1\u751f\u7684\u4e8b\u60c5\u3002</p> <p>\u4f46\u73b0\u5728\uff0c<code>with</code> \u5757\u5e76\u4e0d\u663e\u5f0f\u5728\u51fd\u6570\u5185\uff0c\u800c\u662f\u5728\u4e0a\u9762\u7684\u4f9d\u8d56\u9879\u4e2d\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>\u6211\u4eec\u7a0d\u540e\u4f1a\u770b\u5230\uff0c\u8fd9\u5728\u6d4b\u8bd5\u4ee3\u7801\u65f6\u975e\u5e38\u6709\u7528\u3002\u2705</p>"},{"location":"tutorial/fastapi/session-with-dependency/#_2","title":"\u66f4\u65b0\u8def\u5f84\u64cd\u4f5c\u4ee5\u4f7f\u7528\u4f9d\u8d56\u9879","text":"<p>\u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u66f4\u65b0\u5176\u4f59\u7684 \u8def\u5f84\u64cd\u4f5c \u4ee5\u4f7f\u7528\u65b0\u7684\u4f9d\u8d56\u9879\u3002</p> <p>\u6211\u4eec\u53ea\u9700\u5728\u51fd\u6570\u7684\u53c2\u6570\u4e2d\u58f0\u660e\u4f9d\u8d56\u9879\uff0c\u4f7f\u7528\uff1a</p> <pre><code>session: Session = Depends(get_session)\n</code></pre> <p>\u7136\u540e\uff0c\u79fb\u9664\u4e4b\u524d\u4f7f\u7528\u65e7 session \u7684 <code>with</code> \u5757\u3002</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/fastapi/session-with-dependency/#_3","title":"\u5c0f\u7ed3","text":"<p>\u4f60\u521a\u521a\u5b66\u4e60\u4e86\u5982\u4f55\u4f7f\u7528 FastAPI \u4f9d\u8d56\u9879 \u6765\u5904\u7406\u6570\u636e\u5e93\u4f1a\u8bdd\u3002\u8fd9\u5c06\u5728\u7a0d\u540e\u7684\u6d4b\u8bd5\u4ee3\u7801\u4e2d\u6d3e\u4e0a\u7528\u573a\u3002</p> <p>\u968f\u7740\u4f60\u5728 FastAPI \u4e2d\u7684\u5de5\u4f5c\u8d8a\u6765\u8d8a\u591a\uff0c\u4f60\u4f1a\u53d1\u73b0\u8fd9\u4e9b\u4f9d\u8d56\u9879\u80fd\u5e2e\u52a9\u4f60\u5904\u7406 \u6743\u9650\u3001\u8ba4\u8bc1\u3001\u6570\u636e\u5e93 \u4f1a\u8bdd \u7b49\u8d44\u6e90\u3002\ud83d\ude80</p> <p>\u5982\u679c\u4f60\u60f3\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u4f9d\u8d56\u9879\u7684\u5185\u5bb9\uff0c\u8bf7\u67e5\u770b FastAPI \u6587\u6863\u4e2d\u7684\u4f9d\u8d56\u9879\u3002</p>"},{"location":"tutorial/fastapi/simple-hero-api/","title":"\u4f7f\u7528 FastAPI \u6784\u5efa\u7b80\u5355\u7684\u82f1\u96c4 API","text":"<p>\u8ba9\u6211\u4eec\u4ece\u4f7f\u7528 FastAPI \u6784\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u82f1\u96c4 Web API \u5f00\u59cb\u3002\u2728</p>"},{"location":"tutorial/fastapi/simple-hero-api/#fastapi","title":"\u5b89\u88c5 FastAPI","text":"<p>\u7b2c\u4e00\u6b65\u662f\u5b89\u88c5 FastAPI\u3002</p> <p>FastAPI \u662f\u7528\u4e8e\u521b\u5efa Web API \u7684\u6846\u67b6\u3002</p> <p>\u4f46\u6211\u4eec\u8fd8\u9700\u8981\u53e6\u4e00\u4e2a\u7a0b\u5e8f\u6765\u8fd0\u884c\u5b83\uff0c\u79f0\u4e3a \"\u670d\u52a1\u5668\"\u3002\u6211\u4eec\u5c06\u4f7f\u7528 Uvicorn \u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u5e76\u4e14\u6211\u4eec\u5c06\u4f7f\u7528\u5b83\u7684 \u6807\u51c6 \u4f9d\u8d56\u9879\u6765\u5b89\u88c5 Uvicorn\u3002</p> <p>\u7136\u540e\u5b89\u88c5 FastAPI\u3002</p> <p>\u786e\u4fdd\u4f60\u521b\u5efa\u4e86\u4e00\u4e2a \u865a\u62df\u73af\u5883\uff0c\u5e76\u6fc0\u6d3b\u5b83\uff0c\u7136\u540e\u7528\u4ee5\u4e0b\u547d\u4ee4\u5b89\u88c5\u5b83\u4eec\uff0c\u4f8b\u5982\uff1a</p> <pre><code>$ pip install fastapi \"uvicorn[standard]\"\n\n---&gt; 100%\n</code></pre>"},{"location":"tutorial/fastapi/simple-hero-api/#sqlmodel-","title":"SQLModel \u4ee3\u7801 - \u6a21\u578b\u4e0e\u5f15\u64ce","text":"<p>\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u5f00\u59cb\u7f16\u5199 SQLModel \u4ee3\u7801\u3002</p> <p>\u6211\u4eec\u5c06\u4ece \u6700\u7b80\u5355\u7684\u7248\u672c \u5f00\u59cb\uff0c\u53ea\u5904\u7406\u82f1\u96c4\uff08\u8fd8\u6ca1\u6709\u56e2\u961f\uff09\u3002</p> <p>\u8fd9\u51e0\u4e4e\u4e0e\u6211\u4eec\u4e4b\u524d\u5728\u793a\u4f8b\u4e2d\u770b\u5230\u7684\u4ee3\u7801\u76f8\u540c\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u8fd9\u91cc\u7a0d\u540e\u4f1a\u6709\u4e00\u884c FastAPI \u5bfc\u5165 \ud83d\udc48\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\n# \u8fd9\u91cc\u7a0d\u540e\u4f1a\u6709\u4e00\u884c FastAPI \u5bfc\u5165 \ud83d\udc48\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <p>\u8fd9\u91cc\u4e0e\u6211\u4eec\u4e4b\u524d\u4f7f\u7528\u7684\u4ee3\u7801\u552f\u4e00\u7684\u4e0d\u540c\u662f <code>connect_args</code> \u4e2d\u7684 <code>check_same_thread</code>\u3002</p> <p>\u8fd9\u662f SQLAlchemy \u4f20\u9012\u7ed9\u8d1f\u8d23\u4e0e\u6570\u636e\u5e93\u901a\u4fe1\u7684\u4f4e\u7ea7\u5e93\u7684\u4e00\u4e2a\u914d\u7f6e\u9879\u3002</p> <p><code>check_same_thread</code> \u9ed8\u8ba4\u8bbe\u7f6e\u4e3a <code>True</code>\uff0c\u7528\u4e8e\u9632\u6b62\u5728\u67d0\u4e9b\u7b80\u5355\u60c5\u51b5\u4e0b\u7684\u8bef\u7528\u3002</p> <p>\u4f46\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u786e\u4fdd\u4e0d\u5728\u591a\u4e2a\u8bf7\u6c42\u4e4b\u95f4\u5171\u4eab\u76f8\u540c\u7684 \u4f1a\u8bdd\uff0c\u8fd9\u4e5f\u662f\u907f\u514d\u8be5\u914d\u7f6e\u9879\u6240\u7528\u7684\u4efb\u4f55\u95ee\u9898\u7684 \u6700\u5b89\u5168\u65b9\u6cd5\u3002</p> <p>\u6211\u4eec\u8fd8\u9700\u8981\u7981\u7528\u5b83\uff0c\u56e0\u4e3a\u5728 FastAPI \u4e2d\uff0c\u6bcf\u4e2a\u8bf7\u6c42\u53ef\u80fd\u4f1a\u7531\u591a\u4e2a\u4ea4\u4e92\u7684\u7ebf\u7a0b\u5904\u7406\u3002</p> <p>Info</p> <p>\u76ee\u524d\u8fd9\u4e9b\u4fe1\u606f\u5df2\u7ecf\u8db3\u591f\u4e86\uff0c\u4f60\u53ef\u4ee5\u5728 FastAPI \u7684 <code>async</code> \u548c <code>await</code> \u6587\u6863 \u4e2d\u9605\u8bfb\u66f4\u591a\u5185\u5bb9\u3002</p> <p>\u5173\u952e\u70b9\u662f\uff0c\u901a\u8fc7\u786e\u4fdd\u4f60 \u4e0d\u5171\u4eab \u540c\u4e00\u4e2a \u4f1a\u8bdd \u5904\u7406\u591a\u4e2a\u8bf7\u6c42\uff0c\u4ee3\u7801\u5df2\u7ecf\u662f\u5b89\u5168\u7684\u3002</p>"},{"location":"tutorial/fastapi/simple-hero-api/#fastapi_1","title":"FastAPI \u5e94\u7528","text":"<p>\u4e0b\u4e00\u6b65\u662f\u521b\u5efa FastAPI \u5e94\u7528\u3002</p> <p>\u6211\u4eec\u5c06\u4ece <code>fastapi</code> \u5bfc\u5165 <code>FastAPI</code> \u7c7b\u3002</p> <p>\u7136\u540e\u521b\u5efa\u4e00\u4e2a <code>app</code> \u5bf9\u8c61\uff0c\u5b83\u662f\u8be5 <code>FastAPI</code> \u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\uff1a</p> Python 3.10+Python 3.7+ <pre><code>from fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# \u8fd9\u91cc\u7701\u7565\u4e86 SQLModel \u4ee3\u7801 \ud83d\udc48\n\napp = FastAPI()\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# \u8fd9\u91cc\u7701\u7565\u4e86 SQLModel \u4ee3\u7801 \ud83d\udc48\n\napp = FastAPI()\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre>"},{"location":"tutorial/fastapi/simple-hero-api/#_1","title":"\u5728\u5e94\u7528\u542f\u52a8\u65f6\u521b\u5efa\u6570\u636e\u5e93\u548c\u8868","text":"<p>\u6211\u4eec\u5e0c\u671b\u786e\u4fdd\u5728\u5e94\u7528\u542f\u52a8\u65f6\uff0c<code>create_tables</code> \u51fd\u6570\u4f1a\u88ab\u8c03\u7528\uff0c\u4ee5\u4fbf\u521b\u5efa\u6570\u636e\u5e93\u548c\u8868\u3002</p> <p>\u8fd9\u4e2a\u51fd\u6570\u53ea\u5e94\u8be5\u5728\u542f\u52a8\u65f6\u8c03\u7528\u4e00\u6b21\uff0c\u800c\u4e0d\u662f\u5728\u6bcf\u4e2a\u8bf7\u6c42\u4e4b\u524d\u8c03\u7528\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u5b83\u653e\u5728\u5904\u7406 <code>\"startup\"</code> \u4e8b\u4ef6\u7684\u51fd\u6570\u4e2d\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre>"},{"location":"tutorial/fastapi/simple-hero-api/#_2","title":"\u521b\u5efa\u82f1\u96c4 \u8def\u5f84\u64cd\u4f5c","text":"<p>Info</p> <p>\u5982\u679c\u4f60\u9700\u8981\u590d\u4e60\u4e00\u4e0b \u8def\u5f84\u64cd\u4f5c\uff08\u4e00\u4e2a\u5177\u6709\u7279\u5b9a HTTP \u64cd\u4f5c\u7684\u7aef\u70b9\uff09\u662f\u4ec0\u4e48\uff0c\u4ee5\u53ca\u5982\u4f55\u5728 FastAPI \u4e2d\u4f7f\u7528\u5b83\uff0c\u53ef\u4ee5\u67e5\u770b FastAPI \u5165\u95e8\u6587\u6863\u3002</p> <p>\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a \u8def\u5f84\u64cd\u4f5c \u4ee3\u7801\uff0c\u7528\u4e8e\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u82f1\u96c4\u3002</p> <p>\u5f53\u7528\u6237\u53d1\u9001\u4e00\u4e2a <code>POST</code> \u64cd\u4f5c \u8bf7\u6c42\u5230 <code>/heroes/</code> \u8def\u5f84 \u65f6\uff0c\u5b83\u5c06\u88ab\u8c03\u7528\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <p>Info</p> <p>\u5982\u679c\u4f60\u9700\u8981\u590d\u4e60\u4e00\u4e9b\u6982\u5ff5\uff0c\u67e5\u770b FastAPI \u6587\u6863\uff1a</p> <ul> <li>\u5165\u95e8</li> <li>\u8def\u5f84\u53c2\u6570 - \u6570\u636e\u9a8c\u8bc1\u548c\u6570\u636e\u8f6c\u6362</li> <li>\u8bf7\u6c42\u4f53</li> </ul>"},{"location":"tutorial/fastapi/simple-hero-api/#sqlmodel","title":"SQLModel \u7684\u4f18\u52bf","text":"<p>\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u7684 SQLModel \u7c7b\u6a21\u578b\u65e2\u662f SQLAlchemy \u6a21\u578b\uff0c\u53c8\u662f Pydantic \u6a21\u578b\u7684\u4f18\u52bf\u5f97\u4ee5\u4f53\u73b0\u3002\u2728</p> <p>\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4f7f\u7528 \u76f8\u540c\u7684 \u7c7b\u6a21\u578b\u6765\u5b9a\u4e49\u6211\u4eec\u7684 API \u63a5\u6536\u5230\u7684 \u8bf7\u6c42\u4f53\u3002</p> <p>\u7531\u4e8e FastAPI \u662f\u57fa\u4e8e Pydantic \u6784\u5efa\u7684\uff0c\u5b83\u5c06\u4f7f\u7528\u76f8\u540c\u7684\u6a21\u578b\uff08Pydantic \u90e8\u5206\uff09\u6765\u6267\u884c\u81ea\u52a8\u6570\u636e\u9a8c\u8bc1\u548c \u8f6c\u6362\uff0c\u5c06 JSON \u8bf7\u6c42\u8f6c\u6362\u4e3a\u5b9e\u9645\u7684 <code>Hero</code> \u7c7b\u5b9e\u4f8b\u5bf9\u8c61\u3002</p> <p>\u7136\u540e\uff0c\u7531\u4e8e\u8fd9\u4e2a SQLModel \u5bf9\u8c61\u4e0d\u4ec5\u662f Pydantic \u6a21\u578b\u5b9e\u4f8b\uff0c\u8fd8\u662f SQLAlchemy \u6a21\u578b\u5b9e\u4f8b\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5728 \u4f1a\u8bdd \u4e2d\u4f7f\u7528\u5b83\u6765\u521b\u5efa\u6570\u636e\u5e93\u4e2d\u7684\u884c\u3002</p> <p>\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u76f4\u89c2\u7684\u6807\u51c6 Python \u7c7b\u578b\u6ce8\u89e3\uff0c\u5e76\u4e14\u4e0d\u5fc5\u4e3a\u6570\u636e\u5e93\u6a21\u578b\u548c API \u6570\u636e\u6a21\u578b\u91cd\u590d\u5927\u91cf\u4ee3\u7801\u3002\ud83c\udf89</p> <p>Tip</p> <p>\u6211\u4eec\u7a0d\u540e\u4f1a\u8fdb\u4e00\u6b65\u6539\u8fdb\u8fd9\u4e2a\uff0c\u4f46\u76ee\u524d\uff0c\u5b83\u5df2\u7ecf\u5c55\u793a\u4e86 SQLModel \u7c7b\u540c\u65f6\u4f5c\u4e3a SQLAlchemy \u6a21\u578b\u548c Pydantic \u6a21\u578b\u7684\u5f3a\u5927\u529f\u80fd\u3002</p>"},{"location":"tutorial/fastapi/simple-hero-api/#_3","title":"\u8bfb\u53d6\u82f1\u96c4 \u8def\u5f84\u64cd\u4f5c","text":"<p>\u73b0\u5728\u8ba9\u6211\u4eec\u6dfb\u52a0\u53e6\u4e00\u4e2a \u8def\u5f84\u64cd\u4f5c \u6765\u8bfb\u53d6\u6240\u6709\u82f1\u96c4\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <p>\u8fd9\u975e\u5e38\u76f4\u63a5\u3002</p> <p>\u5f53\u5ba2\u6237\u7aef\u53d1\u9001\u4e00\u4e2a <code>GET</code> HTTP \u64cd\u4f5c \u8bf7\u6c42\u5230 <code>/heroes/</code> \u8def\u5f84 \u65f6\uff0c\u6211\u4eec\u8fd0\u884c\u8fd9\u4e2a\u51fd\u6570\uff0c\u4ece\u6570\u636e\u5e93\u4e2d\u83b7\u53d6\u82f1\u96c4\u5e76\u8fd4\u56de\u5b83\u4eec\u3002</p>"},{"location":"tutorial/fastapi/simple-hero-api/#_4","title":"\u6bcf\u4e2a\u8bf7\u6c42\u4e00\u4e2a\u4f1a\u8bdd","text":"<p>\u8bb0\u4f4f\u6211\u4eec\u5e94\u8be5\u5728\u6bcf\u7ec4\u64cd\u4f5c\u4e2d\u4f7f\u7528\u4e00\u4e2a SQLModel \u4f1a\u8bdd\uff0c\u5982\u679c\u9700\u8981\u5176\u4ed6\u4e0d\u76f8\u5173\u7684\u64cd\u4f5c\u65f6\uff0c\u5e94\u8be5\u4f7f\u7528\u4e0d\u540c\u7684\u4f1a\u8bdd\u5417\uff1f</p> <p>\u5728\u8fd9\u91cc\u5b83\u66f4\u52a0\u660e\u663e\u3002</p> <p>\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5e94\u8be5**\u6bcf\u4e2a\u8bf7\u6c42\u4e00\u4e2a\u4f1a\u8bdd**\u3002</p> <p>\u5728\u67d0\u4e9b\u5b64\u7acb\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u5728\u5185\u90e8\u521b\u5efa\u65b0\u7684\u4f1a\u8bdd\uff0c\u56e0\u6b64**\u6bcf\u4e2a\u8bf7\u6c42\u53ef\u80fd\u6709\u591a\u4e2a\u4f1a\u8bdd**\u3002</p> <p>\u4f46\u662f\u6211\u4eec \u7edd\u4e0d\u5e0c\u671b\u5728\u4e0d\u540c\u7684\u8bf7\u6c42\u4e4b\u95f4\u5171\u4eab\u540c\u4e00\u4e2a\u4f1a\u8bdd\u3002</p> <p>\u5728\u8fd9\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u53ea\u662f\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u624b\u52a8\u521b\u5efa\u65b0\u7684\u4f1a\u8bdd\u3002</p> <p>\u5728\u540e\u7eed\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 FastAPI \u4f9d\u8d56\u9879 \u6765\u83b7\u53d6 \u4f1a\u8bdd\uff0c\u80fd\u591f\u4e0e\u5176\u4ed6\u4f9d\u8d56\u9879\u5171\u4eab\u5e76\u5728\u6d4b\u8bd5\u671f\u95f4\u66ff\u6362\u5b83\u3002\ud83e\udd13</p>"},{"location":"tutorial/fastapi/simple-hero-api/#fastapi_2","title":"\u8fd0\u884c FastAPI \u5e94\u7528","text":"<p>\u73b0\u5728\u6211\u4eec\u51c6\u5907\u8fd0\u884c FastAPI \u5e94\u7528\u4e86\u3002</p> <p>\u5c06\u6240\u6709\u4ee3\u7801\u653e\u5165\u4e00\u4e2a\u540d\u4e3a <code>main.py</code> \u7684\u6587\u4ef6\u4e2d\u3002</p> <p>\u7136\u540e\u7528 Uvicorn \u8fd0\u884c\u5b83\uff1a</p> <pre><code>$ uvicorn main:app\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Started reloader process [28720]\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Started server process [28722]\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Waiting for application startup.\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Application startup complete.\n</code></pre> <p>Info</p> <p>\u547d\u4ee4 <code>uvicorn main:app</code> \u7684\u542b\u4e49\u662f\uff1a</p> <ul> <li><code>main</code>\uff1a\u6307\u7684\u662f <code>main.py</code> \u6587\u4ef6\uff08Python \"\u6a21\u5757\"\uff09\u3002</li> <li><code>app</code>\uff1a\u6307\u7684\u662f\u5728 <code>main.py</code> \u4e2d\u901a\u8fc7 <code>app = FastAPI()</code> \u8fd9\u4e00\u884c\u521b\u5efa\u7684\u5bf9\u8c61\u3002</li> </ul>"},{"location":"tutorial/fastapi/simple-hero-api/#uvicorn-reload","title":"Uvicorn <code>--reload</code>","text":"<p>\u5728\u5f00\u53d1\u8fc7\u7a0b\u4e2d\uff08\u4ec5\u5728\u5f00\u53d1\u8fc7\u7a0b\u4e2d\uff09\uff0c\u4f60\u8fd8\u53ef\u4ee5\u4e3a Uvicorn \u6dfb\u52a0 <code>--reload</code> \u9009\u9879\u3002</p> <p>\u5b83\u5c06\u5728\u4f60\u6bcf\u6b21\u4fee\u6539\u4ee3\u7801\u65f6\u91cd\u65b0\u542f\u52a8\u670d\u52a1\u5668\uff0c\u8fd9\u6837\u4f60\u5c31\u80fd\u66f4\u5feb\u5730\u5f00\u53d1\u3002\ud83e\udd13</p> <pre><code>$ uvicorn main:app --reload\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Will watch for changes in these directories: ['/home/user/code/sqlmodel-tutorial']\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Started reloader process [28720]\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Started server process [28722]\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Waiting for application startup.\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Application startup complete.\n</code></pre> <p>\u53ea\u9700\u8bb0\u4f4f\uff0c\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u4e0d\u8981\u4f7f\u7528 <code>--reload</code>\uff0c\u56e0\u4e3a\u5b83\u4f1a\u6d88\u8017\u6bd4\u5fc5\u8981\u66f4\u591a\u7684\u8d44\u6e90\uff0c\u5bb9\u6613\u51fa\u9519\u7b49\u3002</p>"},{"location":"tutorial/fastapi/simple-hero-api/#api-ui","title":"\u67e5\u770b API \u6587\u6863 UI","text":"<p>\u73b0\u5728\u4f60\u53ef\u4ee5\u5728\u6d4f\u89c8\u5668\u4e2d\u8bbf\u95ee\u8fd9\u4e2a URL <code>http://127.0.0.1:8000</code>\u3002\u6211\u4eec\u6ca1\u6709\u4e3a\u6839\u8def\u5f84 <code>/</code> \u521b\u5efa \u8def\u5f84\u64cd\u4f5c\uff0c\u6240\u4ee5\u8fd9\u4e2a URL \u53ea\u4f1a\u663e\u793a\u4e00\u4e2a \"Not Found\" \u9519\u8bef... \u8fd9\u4e2a \"Not Found\" \u9519\u8bef\u662f\u7531\u4f60\u7684 FastAPI \u5e94\u7528\u7a0b\u5e8f\u751f\u6210\u7684\u3002</p> <p>\u4f46\u4f60\u53ef\u4ee5\u8bbf\u95ee \u81ea\u52a8\u751f\u6210\u7684\u4ea4\u4e92\u5f0f API \u6587\u6863\uff0c\u8def\u5f84\u662f <code>/docs</code>\uff1ahttp://127.0.0.1:8000/docs\u3002\u2728</p> <p>\u4f60\u4f1a\u770b\u5230\u8fd9\u4e2a \u81ea\u52a8\u751f\u6210\u7684 API \u6587\u6863 UI \u663e\u793a\u4e86\u6211\u4eec\u4e0a\u9762\u5b9a\u4e49\u7684 \u8def\u5f84 \u548c\u5b83\u4eec\u7684 \u64cd\u4f5c\uff0c\u5e76\u4e14\u5b83\u5df2\u7ecf\u77e5\u9053\u4e86 \u8def\u5f84\u64cd\u4f5c \u5c06\u63a5\u6536\u7684\u6570\u636e\u7684\u7ed3\u6784\uff1a</p> <p></p>"},{"location":"tutorial/fastapi/simple-hero-api/#api","title":"\u4f7f\u7528 API","text":"<p>\u4f60\u5b9e\u9645\u4e0a\u53ef\u4ee5\u70b9\u51fb\u6309\u94ae Try it out\uff0c\u5e76\u53d1\u9001\u4e00\u4e9b\u8bf7\u6c42\u6765\u521b\u5efa\u4e00\u4e9b\u82f1\u96c4\uff0c\u4f7f\u7528 \u521b\u5efa\u82f1\u96c4 \u8def\u5f84\u64cd\u4f5c\u3002</p> <p>\u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7 \u8bfb\u53d6\u82f1\u96c4 \u8def\u5f84\u64cd\u4f5c \u83b7\u53d6\u5b83\u4eec\uff1a</p> <p></p>"},{"location":"tutorial/fastapi/simple-hero-api/#_5","title":"\u68c0\u67e5\u6570\u636e\u5e93","text":"<p>\u73b0\u5728\u4f60\u53ef\u4ee5\u901a\u8fc7\u8fd4\u56de\u7ec8\u7aef\u5e76\u6309 Ctrl+C \u6765\u7ec8\u6b62 Uvicorn \u670d\u52a1\u5668\u3002</p> <p>\u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u6253\u5f00 DB Browser for SQLite \u5e76\u68c0\u67e5\u6570\u636e\u5e93\uff0c\u6d4f\u89c8\u6570\u636e\u5e76\u786e\u8ba4\u5b83\u786e\u5b9e\u4fdd\u5b58\u4e86\u82f1\u96c4\u3002\ud83c\udf89</p> <p></p>"},{"location":"tutorial/fastapi/simple-hero-api/#_6","title":"\u603b\u7ed3","text":"<p>\u505a\u5f97\u597d\uff01\u8fd9\u5df2\u7ecf\u662f\u4e00\u4e2a FastAPI Web API \u5e94\u7528\u7a0b\u5e8f\uff0c\u7528\u4e8e\u4e0e\u82f1\u96c4\u6570\u636e\u5e93\u8fdb\u884c\u4ea4\u4e92\u3002\ud83c\udf89</p> <p>\u6211\u4eec\u53ef\u4ee5\u6539\u8fdb\u548c\u6269\u5c55\u5f88\u591a\u5185\u5bb9\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u5e0c\u671b\u6570\u636e\u5e93\u51b3\u5b9a\u6bcf\u4e2a\u65b0\u82f1\u96c4\u7684 ID\uff0c\u800c\u4e0d\u662f\u5141\u8bb8\u7528\u6237\u53d1\u9001\u5b83\u3002</p> <p>\u6211\u4eec\u5c06\u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4e2d\u505a\u51fa\u8fd9\u4e9b\u6539\u8fdb\u3002\ud83d\ude80</p>"},{"location":"tutorial/fastapi/teams/","title":"FastAPI \u56e2\u961f\u8def\u5f84\u64cd\u4f5c - \u5176\u4ed6\u6a21\u578b","text":"<p>\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u66f4\u65b0 FastAPI \u5e94\u7528\u7a0b\u5e8f\uff0c\u4ee5\u5904\u7406\u56e2\u961f\u7684\u6570\u636e\u3002</p> <p>\u8fd9\u4e0e\u6211\u4eec\u4e3a\u82f1\u96c4\u6240\u505a\u7684\u975e\u5e38\u76f8\u4f3c\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u5728\u8fd9\u91cc\u5feb\u901f\u4ecb\u7ecd\u3002</p> <p>\u6211\u4eec\u5c06\u4f7f\u7528\u4e0e\u4e4b\u524d\u793a\u4f8b\u4e2d\u76f8\u540c\u7684\u6a21\u578b\uff0c\u5305\u542b \u5173\u7cfb\u5c5e\u6027 \u7b49\u3002</p>"},{"location":"tutorial/fastapi/teams/#_1","title":"\u6dfb\u52a0\u56e2\u961f\u6a21\u578b","text":"<p>\u8ba9\u6211\u4eec\u6dfb\u52a0\u56e2\u961f\u7684\u6a21\u578b\u3002</p> <p>\u8fd9\u4e0e\u6211\u4eec\u4e3a\u82f1\u96c4\u6240\u505a\u7684\u8fc7\u7a0b\u76f8\u540c\uff0c\u9996\u5148\u662f\u57fa\u7840\u6a21\u578b\u3001\u8868\u6a21\u578b\uff0c\u4ee5\u53ca\u4e00\u4e9b\u5176\u4ed6\u7684 \u6570\u636e\u6a21\u578b\u3002</p> <p>\u6211\u4eec\u6709\u4e00\u4e2a <code>TeamBase</code> \u6570\u636e\u6a21\u578b\uff0c\u7136\u540e\u4ece\u5b83\u7ee7\u627f\u51fa <code>Team</code> \u8868\u6a21\u578b\u3002</p> <p>\u63a5\u7740\uff0c\u6211\u4eec\u8fd8\u4ece <code>TeamBase</code> \u7ee7\u627f\u51fa <code>TeamCreate</code> \u548c <code>TeamPublic</code> \u6570\u636e\u6a21\u578b\u3002</p> <p>\u540c\u65f6\uff0c\u6211\u4eec\u8fd8\u521b\u5efa\u4e86\u4e00\u4e2a <code>TeamUpdate</code> \u6570\u636e\u6a21\u578b\u3002</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: str | None = None\n    headquarters: str | None = None\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: Optional[str] = None\n    headquarters: Optional[str] = None\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: Optional[str] = None\n    headquarters: Optional[str] = None\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: str | None = None\n    headquarters: str | None = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n    team_id: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=list[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: Optional[str] = None\n    headquarters: Optional[str] = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    team_id: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=list[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: Optional[str] = None\n    headquarters: Optional[str] = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    team_id: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=List[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>\u73b0\u5728\uff0c\u6211\u4eec\u8fd8\u5177\u6709\u4e86 \u5173\u7cfb\u5c5e\u6027\u3002\ud83c\udf89</p> <p>\u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u66f4\u65b0 <code>Hero</code> \u6a21\u578b\u3002</p>"},{"location":"tutorial/fastapi/teams/#_2","title":"\u66f4\u65b0\u82f1\u96c4\u6a21\u578b","text":"Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n    team_id: int | None = None\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    team_id: Optional[int] = None\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    team_id: Optional[int] = None\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: str | None = None\n    headquarters: str | None = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n    team_id: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=list[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: Optional[str] = None\n    headquarters: Optional[str] = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    team_id: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=list[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: Optional[str] = None\n    headquarters: Optional[str] = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    team_id: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=List[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>\u73b0\u5728\u6211\u4eec\u5728\u82f1\u96c4\u6a21\u578b\u4e2d\u52a0\u5165\u4e86 <code>team_id</code>\u3002</p> <p>\u6ce8\u610f\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 <code>HeroBase</code> \u4e2d\u58f0\u660e <code>team_id</code>\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u88ab\u6240\u6709\u6a21\u578b\u91cd\u7528\uff0c\u4e14\u5728\u6240\u6709\u60c5\u51b5\u4e0b\u5b83\u90fd\u662f\u4e00\u4e2a\u53ef\u9009\u7684\u6574\u6570\u3002</p> <p>\u5373\u4f7f <code>HeroBase</code> \u4e0d\u662f \u4e00\u4e2a \u8868\u6a21\u578b\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5728\u5176\u4e2d\u58f0\u660e <code>team_id</code>\uff0c\u5e76\u4f7f\u7528 <code>foreign key</code> \u53c2\u6570\u3002\u5bf9\u4e8e\u7ee7\u627f\u81ea <code>HeroBase</code> \u7684\u5927\u591a\u6570\u6a21\u578b\u6765\u8bf4\uff0c\u8fd9\u4e0d\u4f1a\u4ea7\u751f\u4efb\u4f55\u5f71\u54cd\uff0c\u4f46\u5728 \u8868\u6a21\u578b <code>Hero</code> \u4e2d\uff0c\u5b83\u5c06\u7528\u4e8e\u544a\u8bc9 SQLModel \u8fd9\u662f\u4e00\u4e2a\u6307\u5411\u8be5\u8868\u7684 \u5916\u952e\u3002</p>"},{"location":"tutorial/fastapi/teams/#_3","title":"\u5173\u7cfb\u5c5e\u6027","text":"<p>\u8bf7\u6ce8\u610f\uff0c\u5173\u7cfb\u5c5e\u6027\uff08\u4f7f\u7528 <code>Relationship()</code> \u7684\u90a3\u4e9b\uff09\u4ec5**\u5b58\u5728\u4e8e **\u8868\u6a21\u578b \u4e2d\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u6a21\u578b\u7531 SQLModel \u4e0e SQLAlchemy \u5904\u7406\uff0c\u4e14\u5f53\u6211\u4eec\u8bbf\u95ee\u5b83\u4eec\u65f6\uff0c\u80fd\u591f\u81ea\u52a8\u4ece\u6570\u636e\u5e93\u4e2d\u83b7\u53d6\u6570\u636e\u3002</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: str | None = None\n    headquarters: str | None = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n    team_id: int | None = None\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: Optional[str] = None\n    headquarters: Optional[str] = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    team_id: Optional[int] = None\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: Optional[str] = None\n    headquarters: Optional[str] = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    team_id: Optional[int] = None\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: str | None = None\n    headquarters: str | None = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n    team_id: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=list[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: Optional[str] = None\n    headquarters: Optional[str] = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    team_id: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=list[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: Optional[str] = None\n    headquarters: Optional[str] = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    team_id: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=List[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/fastapi/teams/#_4","title":"\u56e2\u961f\u7684\u8def\u5f84\u64cd\u4f5c","text":"<p>\u73b0\u5728\u8ba9\u6211\u4eec\u4e3a\u56e2\u961f\u6dfb\u52a0 \u8def\u5f84\u64cd\u4f5c\u3002</p> <p>\u8fd9\u4e9b\u64cd\u4f5c\u4e0e\u6211\u4eec\u4e4b\u524d\u4e3a \u82f1\u96c4 \u521b\u5efa\u7684 \u8def\u5f84\u64cd\u4f5c \u76f8\u4f3c\uff0c\u56e0\u6b64\u6211\u4eec\u4e0d\u9700\u8981\u8be6\u7ec6\u8bb2\u89e3\u6bcf\u4e00\u4e2a\u64cd\u4f5c\uff0c\u76f4\u63a5\u6765\u770b\u4ee3\u7801\u5427\u3002</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=list[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=list[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=List[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: str | None = None\n    headquarters: str | None = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n    team_id: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=list[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: Optional[str] = None\n    headquarters: Optional[str] = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    team_id: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=list[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: Optional[str] = None\n    headquarters: Optional[str] = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    team_id: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=List[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/fastapi/teams/#_5","title":"\u4f7f\u7528\u5173\u7cfb\u5c5e\u6027","text":"<p>\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u8fd8\u6ca1\u6709\u4f7f\u7528 \u5173\u7cfb\u5c5e\u6027\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u5728\u4ee3\u7801\u4e2d\u8bbf\u95ee\u5b83\u4eec\u3002</p> <p>\u5728\u4e0b\u4e00\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u8fdb\u4e00\u6b65\u64cd\u4f5c\u8fd9\u4e9b\u5173\u7cfb\u5c5e\u6027\u3002</p>"},{"location":"tutorial/fastapi/teams/#ui","title":"\u67e5\u770b\u6587\u6863 UI","text":"<p>\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u67e5\u770b\u81ea\u52a8\u751f\u6210\u7684\u6587\u6863 UI\uff0c\u67e5\u770b\u6240\u6709\u5173\u4e8e\u82f1\u96c4\u548c\u56e2\u961f\u7684 \u8def\u5f84\u64cd\u4f5c\u3002</p> <p></p>"},{"location":"tutorial/fastapi/teams/#_6","title":"\u603b\u7ed3","text":"<p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u7684\u6a21\u5f0f\u5411 FastAPI \u5e94\u7528\u7a0b\u5e8f\u4e2d\u6dfb\u52a0\u66f4\u591a\u6a21\u578b\u548c API \u8def\u5f84\u64cd\u4f5c\u3002\ud83c\udf89</p>"},{"location":"tutorial/fastapi/tests/","title":"\u4f7f\u7528 FastAPI \u548c SQLModel \u6d4b\u8bd5\u5e94\u7528\u7a0b\u5e8f","text":"<p>\u4e3a\u4e86\u5b8c\u6210\u8fd9\u4e00\u7ec4\u5173\u4e8e FastAPI \u548c SQLModel \u7684\u7ae0\u8282\uff0c\u6211\u4eec\u73b0\u5728\u6765\u5b66\u4e60\u5982\u4f55\u4e3a\u4f7f\u7528 FastAPI \u548c SQLModel \u7684\u5e94\u7528\u7a0b\u5e8f\u5b9e\u73b0\u81ea\u52a8\u5316\u6d4b\u8bd5\u3002\u2705</p> <p>\u5305\u62ec\u4e00\u4e9b\u6280\u5de7\u548c\u7a8d\u95e8\u3002\ud83c\udf81</p>"},{"location":"tutorial/fastapi/tests/#fastapi","title":"FastAPI \u5e94\u7528\u7a0b\u5e8f","text":"<p>\u6211\u4eec\u5c06\u4f7f\u7528\u6211\u4eec\u5728\u524d\u51e0\u7ae0\u4e2d\u6784\u5efa\u7684\u4e00\u4e2a \u7b80\u5355 FastAPI \u5e94\u7528\u7a0b\u5e8f\u3002</p> <p>\u540c\u6837\u7684 \u6982\u5ff5\u3001\u6280\u5de7 \u548c \u7a8d\u95e8 \u4e5f\u9002\u7528\u4e8e\u66f4\u590d\u6742\u7684\u5e94\u7528\u7a0b\u5e8f\u3002</p> <p>\u6211\u4eec\u5c06\u4f7f\u7528\u5305\u542b\u82f1\u96c4\u6a21\u578b\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f46\u4e0d\u5305\u62ec\u56e2\u961f\u6a21\u578b\uff0c\u5e76\u4e14\u6211\u4eec\u5c06\u4f7f\u7528\u4f9d\u8d56\u9879\u6765\u83b7\u53d6\u4e00\u4e2a \u4f1a\u8bdd\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u5c06\u770b\u5230\u62e5\u6709\u8fd9\u4e2a\u4f1a\u8bdd\u4f9d\u8d56\u9879\u662f\u591a\u4e48\u6709\u7528\u3002\u2728</p> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 <pre><code>from typing import List, Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/fastapi/tests/#_1","title":"\u6587\u4ef6\u7ed3\u6784","text":"<p>\u73b0\u5728\u6211\u4eec\u5c06\u6709\u4e00\u4e2a\u5305\u542b\u591a\u4e2a\u6587\u4ef6\u7684 Python \u9879\u76ee\uff0c\u4e00\u4e2a\u6587\u4ef6 <code>main.py</code> \u5305\u542b\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\uff0c\u4e00\u4e2a\u6587\u4ef6 <code>test_main.py</code> \u5305\u542b\u6d4b\u8bd5\uff0c\u9075\u5faa \u4ee3\u7801\u7ed3\u6784\u4e0e\u591a\u4e2a\u6587\u4ef6 \u4e2d\u7684\u76f8\u540c\u601d\u8def\u3002</p> <p>\u6587\u4ef6\u7ed3\u6784\u5982\u4e0b\uff1a</p> <pre><code>.\n\u251c\u2500\u2500 project\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 main.py\n    \u2514\u2500\u2500 test_main.py\n</code></pre>"},{"location":"tutorial/fastapi/tests/#fastapi_1","title":"\u6d4b\u8bd5 FastAPI \u5e94\u7528\u7a0b\u5e8f","text":"<p>\u5982\u679c\u4f60\u4e4b\u524d\u6ca1\u6709\u8fdb\u884c\u8fc7 FastAPI \u5e94\u7528\u7a0b\u5e8f\u7684\u6d4b\u8bd5\uff0c\u8bf7\u9996\u5148\u67e5\u770b FastAPI \u6d4b\u8bd5\u6587\u6863\u3002</p> <p>\u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u7ee7\u7eed\uff0c\u8fd9\u91cc\u7684\u7b2c\u4e00\u6b65\u662f\u5b89\u88c5\u4f9d\u8d56\u9879 <code>requests</code> \u548c <code>pytest</code>\u3002</p> <p>\u786e\u4fdd\u4f60\u521b\u5efa\u4e86\u4e00\u4e2a \u865a\u62df\u73af\u5883\uff0c\u5e76\u6fc0\u6d3b\u5b83\uff0c\u7136\u540e\u5b89\u88c5\u4f9d\u8d56\u9879\uff0c\u4f8b\u5982\u4f7f\u7528\uff1a</p> <pre><code>$ pip install requests pytest\n\n---&gt; 100%\n</code></pre>"},{"location":"tutorial/fastapi/tests/#_2","title":"\u57fa\u672c\u6d4b\u8bd5\u4ee3\u7801","text":"<p>\u8ba9\u6211\u4eec\u4ece\u4e00\u4e2a\u7b80\u5355\u7684\u6d4b\u8bd5\u5f00\u59cb\uff0c\u6d4b\u8bd5\u4ee3\u7801\u53ea\u662f\u9a8c\u8bc1 FastAPI \u5e94\u7528\u7a0b\u5e8f\u662f\u5426\u80fd\u6b63\u786e\u5730\u521b\u5efa\u4e00\u4e2a\u65b0\u82f1\u96c4\u3002</p> <pre><code>from fastapi.testclient import TestClient\nfrom sqlmodel import Session, SQLModel, create_engine\n\nfrom .main import app, get_session  # (1)!\n\n\ndef test_create_hero():\n        # \u8fd9\u91cc\u7701\u7565\u4e86\u4e00\u4e9b\u4ee3\u7801\uff0c\u6211\u4eec\u7a0d\u540e\u4f1a\u770b\u5230 \ud83d\udc48\n        client = TestClient(app)  # (2)!\n\n        response = client.post(  # (3)!\n            \"/heroes/\", json={\"name\": \"Deadpond\", \"secret_name\": \"Dive Wilson\"}\n        )\n        # \u8fd9\u91cc\u7701\u7565\u4e86\u4e00\u4e9b\u4ee3\u7801\uff0c\u6211\u4eec\u7a0d\u540e\u4f1a\u770b\u5230 \ud83d\udc48\n        data = response.json()  # (4)!\n\n        assert response.status_code == 200  # (5)!\n        assert data[\"name\"] == \"Deadpond\"  # (6)!\n        assert data[\"secret_name\"] == \"Dive Wilson\"  # (7)!\n        assert data[\"age\"] is None  # (8)!\n        assert data[\"id\"] is not None  # (9)!\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <ol> <li> <p>Import the <code>app</code> from the the <code>main</code> module.</p> </li> <li> <p>We create a <code>TestClient</code> for the FastAPI <code>app</code> and put it in the variable <code>client</code>.</p> </li> <li> <p>Then we use use this <code>client</code> to talk to the API and send a <code>POST</code> HTTP operation, creating a new hero.</p> </li> <li> <p>Then we get the JSON data from the response and put it in the variable <code>data</code>.</p> </li> <li> <p>Next we start testing the results with <code>assert</code> statements, we check that the status code of the response is <code>200</code>.</p> </li> <li> <p>We check that the <code>name</code> of the hero created is <code>\"Deadpond\"</code>.</p> </li> <li> <p>We check that the <code>secret_name</code> of the hero created is <code>\"Dive Wilson\"</code>.</p> </li> <li> <p>We check that the <code>age</code> of the hero created is <code>None</code>, because we didn't send an age.</p> </li> <li> <p>We check that the hero created has an <code>id</code> created by the database, so it's not <code>None</code>.</p> </li> </ol> <p>Tip</p> <p>\u67e5\u770b\u4ee3\u7801\u884c\u53f7\u6c14\u6ce1\uff0c\u4e86\u89e3\u6bcf\u884c\u4ee3\u7801\u7684\u4f5c\u7528\u3002</p> <p>\u8fd9\u5c31\u662f\u6211\u4eec\u7a0d\u540e\u6240\u6709\u6d4b\u8bd5\u6240\u9700\u7684 \u6838\u5fc3 \u4ee3\u7801\u3002</p> <p>\u4f46\u662f\u73b0\u5728\uff0c\u6211\u4eec\u9700\u8981\u5904\u7406\u4e00\u4e9b\u540e\u52e4\u5de5\u4f5c\u548c\u7ec6\u8282\uff0c\u4e4b\u524d\u6211\u4eec\u8fd8\u6ca1\u6709\u6ce8\u610f\u5230\u8fd9\u4e9b\u3002\ud83e\udd13</p>"},{"location":"tutorial/fastapi/tests/#_3","title":"\u6d4b\u8bd5\u6570\u636e\u5e93","text":"<p>\u8fd9\u4e2a\u6d4b\u8bd5\u770b\u8d77\u6765\u6ca1\u95ee\u9898\uff0c\u4f46\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\u3002</p> <p>\u5982\u679c\u6211\u4eec\u76f4\u63a5\u8fd0\u884c\u5b83\uff0c\u5b83\u5c06\u4f7f\u7528\u6211\u4eec\u6b63\u5728\u4f7f\u7528\u7684 \u751f\u4ea7\u6570\u636e\u5e93 \u6765\u5b58\u50a8\u6211\u4eec\u975e\u5e38\u91cd\u8981\u7684 \u82f1\u96c4 \u6570\u636e\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u80fd\u5411\u5176\u4e2d\u6dfb\u52a0\u4e0d\u5fc5\u8981\u7684\u6570\u636e\uff0c\u751a\u81f3\u66f4\u7cdf\uff0c\u672a\u6765\u7684\u6d4b\u8bd5\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u5220\u9664\u751f\u4ea7\u6570\u636e\u3002</p> <p>\u56e0\u6b64\uff0c\u6211\u4eec\u5e94\u8be5\u4f7f\u7528\u4e00\u4e2a\u72ec\u7acb\u7684 \u6d4b\u8bd5\u6570\u636e\u5e93\uff0c\u4ec5\u4f9b\u6d4b\u8bd5\u4f7f\u7528\u3002</p> <p>\u4e3a\u6b64\uff0c\u6211\u4eec\u9700\u8981\u66f4\u6539\u7528\u4e8e\u6570\u636e\u5e93\u7684 URL\u3002</p> <p>\u4f46\u662f\u5f53 API \u4ee3\u7801\u6267\u884c\u65f6\uff0c\u5b83\u4f1a\u83b7\u53d6\u4e00\u4e2a\u5df2\u7ecf\u8fde\u63a5\u5230 \u5f15\u64ce \u7684 \u4f1a\u8bdd\uff0c\u800c \u5f15\u64ce \u5df2\u7ecf\u4f7f\u7528\u4e86\u4e00\u4e2a\u7279\u5b9a\u7684\u6570\u636e\u5e93 URL\u3002</p> <p>\u5373\u4f7f\u6211\u4eec\u4ece <code>main</code> \u6a21\u5757\u5bfc\u5165\u53d8\u91cf\u5e76\u4ec5\u5728\u6d4b\u8bd5\u4e2d\u66f4\u6539\u5176\u503c\uff0c\u5230\u90a3\u65f6 \u5f15\u64ce \u5df2\u7ecf\u4f7f\u7528\u539f\u59cb\u503c\u521b\u5efa\u4e86\u3002</p> <p>\u4f46\u662f\u6211\u4eec\u6240\u6709\u7684 API \u8def\u5f84\u64cd\u4f5c \u90fd\u662f\u901a\u8fc7 FastAPI \u4f9d\u8d56\u9879 \u83b7\u53d6 \u4f1a\u8bdd \u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6d4b\u8bd5\u4e2d\u8986\u76d6\u4f9d\u8d56\u9879\u3002</p> <p>\u8fd9\u5c31\u662f\u4f9d\u8d56\u9879\u5f00\u59cb\u5927\u663e\u8eab\u624b\u7684\u5730\u65b9\u3002</p>"},{"location":"tutorial/fastapi/tests/#_4","title":"\u8986\u76d6\u4f9d\u8d56\u9879","text":"<p>\u6211\u4eec\u5c06\u4e3a\u6d4b\u8bd5\u8986\u76d6 <code>get_session()</code> \u4f9d\u8d56\u9879\u3002</p> <p>\u8fd9\u4e2a\u4f9d\u8d56\u9879\u88ab\u6240\u6709\u7684 \u8def\u5f84\u64cd\u4f5c \u7528\u6765\u83b7\u53d6 SQLModel \u4f1a\u8bdd\u5bf9\u8c61\u3002</p> <p>\u6211\u4eec\u5c06\u8986\u76d6\u5b83\uff0c\u4f7f\u5176\u4ec5\u5728\u6d4b\u8bd5\u4e2d\u4f7f\u7528\u4e00\u4e2a\u4e0d\u540c\u7684 \u4f1a\u8bdd \u5bf9\u8c61\u3002</p> <p>\u8fd9\u6837\u53ef\u4ee5\u4fdd\u62a4\u751f\u4ea7\u6570\u636e\u5e93\uff0c\u5e76\u66f4\u597d\u5730\u63a7\u5236\u6211\u4eec\u6b63\u5728\u6d4b\u8bd5\u7684\u6570\u636e\u3002</p> <pre><code>from fastapi.testclient import TestClient\nfrom sqlmodel import Session, SQLModel, create_engine\n\nfrom .main import app, get_session  # (1)!\n\n\ndef test_create_hero():\n        # \u8fd9\u91cc\u7701\u7565\u4e86\u4e00\u4e9b\u4ee3\u7801\uff0c\u6211\u4eec\u7a0d\u540e\u4f1a\u770b\u5230 \ud83d\udc48\n        def get_session_override():  # (2)!\n            return session  # (3)!\n\n        app.dependency_overrides[get_session] = get_session_override  # (4)!\n\n        client = TestClient(app)\n\n        response = client.post(\n            \"/heroes/\", json={\"name\": \"Deadpond\", \"secret_name\": \"Dive Wilson\"}\n        )\n        app.dependency_overrides.clear()  # (5)!\n        data = response.json()\n\n        assert response.status_code == 200\n        assert data[\"name\"] == \"Deadpond\"\n        assert data[\"secret_name\"] == \"Dive Wilson\"\n        assert data[\"age\"] is None\n        assert data[\"id\"] is not None\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <ol> <li> <p>Import the <code>get_session</code> dependency from the the <code>main</code> module.</p> </li> <li> <p>Define the new function that will be the new dependency override.</p> </li> <li> <p>This function will return a different session than the one that would be returned by the original <code>get_session</code> function.</p> <p>We haven't seen how this new session object is created yet, but the point is that this is a different session than the original one from the app.</p> <p>This session is attached to a different engine, and that different engine uses a different URL, for a database just for testing.</p> <p>We haven't defined that new URL nor the new engine yet, but here we already see the that this object <code>session</code> will override the one returned by the original dependency  <code>get_session()</code>.</p> </li> <li> <p>Then, the FastAPI <code>app</code> object has an attribute <code>app.dependency_overrides</code>.</p> <p>This attribute is a dictionary, and we can put dependency overrides in it by passing, as the key, the original dependency function, and as the value, the new overriding dependency function.</p> <p>So, here we are telling the FastAPI app to use <code>get_session_override</code> instead of <code>get_session</code> in all the places in the code that depend on <code>get_session</code>, that is, all the parameters with something like:</p> <pre><code>session: Session = Depends(get_session)\n</code></pre> </li> <li> <p>After we are done with the dependency override, we can restore the application back to normal, by removing all the values in this dictionary <code>app.dependency_overrides</code>.</p> <p>This way whenever a path operation function needs the dependency FastAPI will use the original one instead of the override.</p> </li> </ol> <p>Tip</p> <p>\u67e5\u770b\u4ee3\u7801\u884c\u53f7\u6c14\u6ce1\uff0c\u4e86\u89e3\u6bcf\u884c\u4ee3\u7801\u7684\u4f5c\u7528\u3002</p>"},{"location":"tutorial/fastapi/tests/#_5","title":"\u4e3a\u6d4b\u8bd5\u521b\u5efa\u5f15\u64ce\u548c\u4f1a\u8bdd","text":"<p>\u73b0\u5728\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a \u4f1a\u8bdd \u5bf9\u8c61\uff0c\u4f9b\u6d4b\u8bd5\u671f\u95f4\u4f7f\u7528\u3002</p> <p>\u5b83\u5c06\u4f7f\u7528\u81ea\u5df1\u7684 \u5f15\u64ce\uff0c\u800c\u8fd9\u4e2a\u65b0\u5f15\u64ce\u5c06\u4f7f\u7528\u65b0\u7684\u6d4b\u8bd5\u6570\u636e\u5e93 URL\uff1a</p> <pre><code>sqlite:///testing.db\n</code></pre> <p>\u6240\u4ee5\uff0c\u6d4b\u8bd5\u6570\u636e\u5e93\u5c06\u5b58\u50a8\u5728 <code>testing.db</code> \u6587\u4ef6\u4e2d\u3002</p> <pre><code>from fastapi.testclient import TestClient\nfrom sqlmodel import Session, SQLModel, create_engine\n\nfrom .main import app, get_session  # (1)!\n\n\ndef test_create_hero():\n    engine = create_engine(  # (2)!\n        \"sqlite:///testing.db\", connect_args={\"check_same_thread\": False}\n    )\n    SQLModel.metadata.create_all(engine)  # (3)!\n\n    with Session(engine) as session:  # (4)!\n\n        def get_session_override():\n            return session  # (5)!\n\n        app.dependency_overrides[get_session] = get_session_override  # (4)!\n\n        client = TestClient(app)\n\n        response = client.post(\n            \"/heroes/\", json={\"name\": \"Deadpond\", \"secret_name\": \"Dive Wilson\"}\n        )\n        app.dependency_overrides.clear()\n        data = response.json()\n\n        assert response.status_code == 200\n        assert data[\"name\"] == \"Deadpond\"\n        assert data[\"secret_name\"] == \"Dive Wilson\"\n        assert data[\"age\"] is None\n        assert data[\"id\"] is not None\n    # (6)!\n</code></pre> <ol> <li> <p>Here's a subtle thing to notice.</p> <p>Remember that Order Matters and we need to make sure all the SQLModel models are already defined and imported before calling <code>.create_all()</code>.</p> <p>IN this line, by importing something, anything, from <code>.main</code>, the code in <code>.main</code> will be executed, including the definition of the table models, and that will automatically register them in <code>SQLModel.metadata</code>.</p> </li> <li> <p>Here we create a new engine, completely different from the one in <code>main.py</code>.</p> <p>This is the engine we will use for the tests.</p> <p>We use the new URL of the database for tests:</p> <pre><code>sqlite:///testing.db\n</code></pre> <p>And again, we use the connection argument <code>check_same_thread=False</code>.</p> </li> <li> <p>Then we call:</p> <pre><code>SQLModel.metadata.create_all(engine)\n</code></pre> <p>...to make sure we create all the tables in the new testing database.</p> <p>The table models are registered in <code>SQLModel.metadata</code> just because we imported something from <code>.main</code>, and the code in <code>.main</code> was executed, creating the classes for the table models and automatically registering them in <code>SQLModel.metadata</code>.</p> <p>So, by the point we call this method, the table models are already registered there. \ud83d\udcaf</p> </li> <li> <p>Here's where we create the custom session object for this test in a <code>with</code> block.</p> <p>It uses the new custom engine we created, so anything that uses this session will be using the testing database.</p> </li> <li> <p>Now, back to the dependency override, it is just returning the same session object from outside, that's it, that's the whole trick.</p> </li> <li> <p>By this point, the testing session <code>with</code> block finishes, and the session is closed, the file is closed, etc.</p> </li> </ol>"},{"location":"tutorial/fastapi/tests/#_6","title":"\u5bfc\u5165\u8868\u6a21\u578b","text":"<p>\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u521b\u5efa\u6d4b\u8bd5\u6570\u636e\u5e93\u4e2d\u7684\u6240\u6709\u8868\uff1a</p> <pre><code>SQLModel.metadata.create_all(engine)\n</code></pre> <p>\u4f46\u8bf7\u8bb0\u4f4f\uff0c\u987a\u5e8f\u5f88\u91cd\u8981\uff0c\u987a\u5e8f\u5f88\u91cd\u8981\uff0c\u6211\u4eec\u9700\u8981\u786e\u4fdd\u6240\u6709 SQLModel \u6a21\u578b\u90fd\u5df2\u7ecf\u5b9a\u4e49\u5e76 \u5bfc\u5165\uff0c\u7136\u540e\u518d\u8c03\u7528 <code>.create_all()</code>\u3002</p> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u4e4b\u6240\u4ee5\u6709\u6548\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u5bfc\u5165\u4e86 <code>.main</code> \u4e2d\u7684\u67d0\u4e9b\u5185\u5bb9\uff0c\u4efb\u4f55\u4e1c\u897f\uff0c\u8fd9\u5c06\u5bfc\u81f4 <code>.main</code> \u4e2d\u7684\u4ee3\u7801\u88ab\u6267\u884c\uff0c\u5305\u62ec \u8868\u6a21\u578b \u7684\u5b9a\u4e49\uff0c\u8fd9\u4f1a\u81ea\u52a8\u5c06\u5b83\u4eec\u6ce8\u518c\u5230 <code>SQLModel.metadata</code> \u4e2d\u3002</p> <p>\u8fd9\u6837\uff0c\u5f53\u6211\u4eec\u8c03\u7528 <code>.create_all()</code> \u65f6\uff0c\u6240\u6709\u7684 \u8868\u6a21\u578b \u90fd\u4f1a\u6b63\u786e\u5730\u6ce8\u518c\u5230 <code>SQLModel.metadata</code> \u4e2d\uff0c\u4e00\u5207\u90fd\u4f1a\u6b63\u5e38\u5de5\u4f5c\u3002\ud83d\udc4c</p>"},{"location":"tutorial/fastapi/tests/#_7","title":"\u5185\u5b58\u6570\u636e\u5e93","text":"<p>\u73b0\u5728\u6211\u4eec\u4e0d\u518d\u4f7f\u7528\u751f\u4ea7\u6570\u636e\u5e93\uff0c\u800c\u662f\u4f7f\u7528\u4e86\u4e00\u4e2a\u65b0\u7684 \u6d4b\u8bd5\u6570\u636e\u5e93\uff0c\u5b58\u50a8\u5728 <code>testing.db</code> \u6587\u4ef6\u4e2d\uff0c\u8fd9\u5f88\u597d\u3002</p> <p>\u4f46\u662f\uff0cSQLite \u4e5f\u652f\u6301\u4f7f\u7528 \u5185\u5b58\u6570\u636e\u5e93\u3002\u8fd9\u610f\u5473\u7740\u6574\u4e2a\u6570\u636e\u5e93\u53ea\u5b58\u5728\u4e8e\u5185\u5b58\u4e2d\uff0c\u6c38\u8fdc\u4e0d\u4f1a\u4fdd\u5b58\u5230\u78c1\u76d8\u4e0a\u7684\u6587\u4ef6\u4e2d\u3002</p> <p>\u5728\u7a0b\u5e8f\u7ec8\u6b62\u540e\uff0c\u5185\u5b58\u6570\u636e\u5e93\u4f1a\u88ab\u5220\u9664\uff0c\u56e0\u6b64\u5bf9\u4e8e\u751f\u4ea7\u6570\u636e\u5e93\u6ca1\u6709\u592a\u5927\u5e2e\u52a9\u3002</p> <p>\u4f46\u662f\uff0c\u5b83\u5bf9\u6d4b\u8bd5\u975e\u5e38\u6709\u7528\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u5728\u6bcf\u4e2a\u6d4b\u8bd5\u4e4b\u524d\u5feb\u901f\u521b\u5efa\uff0c\u5e76\u5728\u6bcf\u4e2a\u6d4b\u8bd5\u540e\u5feb\u901f\u5220\u9664\u3002\u2705</p> <p>\u800c\u4e14\uff0c\u7531\u4e8e\u5b83\u6c38\u8fdc\u4e0d\u9700\u8981\u5199\u5165\u6587\u4ef6\uff0c\u4e00\u5207\u90fd\u4ec5\u5b58\u5728\u4e8e\u5185\u5b58\u4e2d\uff0c\u5b83\u7684\u901f\u5ea6\u4f1a\u6bd4\u901a\u5e38\u7684\u6570\u636e\u5e93\u66f4\u5feb\u3002\ud83c\udfce</p> \u5176\u4ed6\u66ff\u4ee3\u65b9\u6848\u548c\u601d\u8def \ud83d\udc40 <p>\u5728\u8003\u8651\u4f7f\u7528 \u5185\u5b58\u6570\u636e\u5e93 \u4e4b\u524d\uff0c\u6211\u4eec\u53ef\u4ee5\u63a2\u7d22\u5176\u4ed6\u4e00\u4e9b\u66ff\u4ee3\u65b9\u6848\u548c\u601d\u8def\u3002</p> <p>\u9996\u5148\uff0c\u6211\u4eec\u6ca1\u6709\u5728\u6d4b\u8bd5\u7ed3\u675f\u540e\u5220\u9664\u6587\u4ef6\uff0c\u56e0\u6b64\u4e0b\u4e00\u4e2a\u6d4b\u8bd5\u53ef\u80fd\u4f1a\u6709 \u6b8b\u7559\u6570\u636e\u3002\u56e0\u6b64\uff0c\u6b63\u786e\u7684\u505a\u6cd5\u662f\u5728\u6d4b\u8bd5\u7ed3\u675f\u540e\u7acb\u5373\u5220\u9664\u6587\u4ef6\u3002\ud83d\udd25</p> <p>\u4f46\u662f\uff0c\u5982\u679c\u6bcf\u4e2a\u6d4b\u8bd5\u90fd\u5fc5\u987b\u521b\u5efa\u4e00\u4e2a\u65b0\u6587\u4ef6\uff0c\u7136\u540e\u518d\u5220\u9664\u5b83\uff0c\u8fd0\u884c\u6240\u6709\u6d4b\u8bd5\u53ef\u80fd\u4f1a \u7a0d\u5fae\u6162\u4e00\u70b9\u3002</p> <p>\u76ee\u524d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u6587\u4ef6 <code>testing.db</code>\uff0c\u6240\u6709\u6d4b\u8bd5\u90fd\u4f7f\u7528\u8fd9\u4e2a\u6587\u4ef6\uff08\u867d\u7136\u73b0\u5728\u53ea\u6709\u4e00\u4e2a\u6d4b\u8bd5\uff0c\u4f46\u6211\u4eec\u5c06\u4f1a\u6709\u66f4\u591a\uff09\u3002</p> <p>\u56e0\u6b64\uff0c\u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u540c\u65f6 \u5e76\u884c \u8fd0\u884c\u6d4b\u8bd5\u4ee5\u63d0\u9ad8\u901f\u5ea6\uff0c\u5b83\u4eec\u53ef\u80fd\u4f1a\u56e0\u4e3a\u5c1d\u8bd5\u4f7f\u7528 \u76f8\u540c\u7684 <code>testing.db</code> \u6587\u4ef6\u800c\u53d1\u751f\u51b2\u7a81\u3002</p> <p>\u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4e3a\u6bcf\u4e2a\u6d4b\u8bd5\u6570\u636e\u5e93\u6587\u4ef6\u4f7f\u7528 \u968f\u673a\u540d\u79f0 \u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u2026\u2026\u4f46\u5bf9\u4e8e SQLite\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u66f4\u597d\u7684\u66ff\u4ee3\u65b9\u6848\u2014\u2014\u76f4\u63a5\u4f7f\u7528 \u5185\u5b58\u6570\u636e\u5e93\u3002\u2728</p>"},{"location":"tutorial/fastapi/tests/#_8","title":"\u914d\u7f6e\u5185\u5b58\u6570\u636e\u5e93","text":"<p>\u8ba9\u6211\u4eec\u66f4\u65b0\u4ee3\u7801\uff0c\u4f7f\u7528\u5185\u5b58\u6570\u636e\u5e93\u3002</p> <p>\u6211\u4eec\u53ea\u9700\u8981\u66f4\u6539 \u5f15\u64ce \u4e2d\u7684\u51e0\u4e2a\u53c2\u6570\u3002</p> <pre><code>from fastapi.testclient import TestClient\nfrom sqlmodel import Session, SQLModel, create_engine\nfrom sqlmodel.pool import StaticPool  # (1)!\n\nfrom .main import app, get_session\n\n\ndef test_create_hero():\n    engine = create_engine(\n        \"sqlite://\",  # (2)!\n        connect_args={\"check_same_thread\": False},\n        poolclass=StaticPool,  # (3)!\n    )\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <ol> <li> <p>Import <code>StaticPool</code> from <code>sqlmodel</code>, we will use it in a bit.</p> </li> <li> <p>For the SQLite URL, don't write any file name, leave it empty.</p> <p>So, instead of:</p> <pre><code>sqlite:///testing.db\n</code></pre> <p>...just write:</p> <pre><code>sqlite://\n</code></pre> <p>This is enough to tell SQLModel (actually SQLAlchemy) that we want to use an in-memory SQLite database.</p> </li> <li> <p>Remember that we told the low-level library in charge of communicating with SQLite that we want to be able to access the database from different threads with <code>check_same_thread=False</code>?</p> <p>Now that we use an in-memory database, we need to also tell SQLAlchemy that we want to be able to use the same in-memory database object from different threads.</p> <p>We tell it that with the <code>poolclass=StaticPool</code> parameter.</p> <p>Info</p> <p>You can read more details in the SQLAlchemy documentation about Using a Memory Database in Multiple Threads</p> </li> </ol> <p>Tip</p> <p>\u67e5\u770b\u4ee3\u7801\u884c\u53f7\u6c14\u6ce1\uff0c\u4e86\u89e3\u6bcf\u884c\u4ee3\u7801\u7684\u4f5c\u7528\u3002</p> <p>\u5c31\u8fd9\u6837\uff0c\u73b0\u5728\u6d4b\u8bd5\u5c06\u4f7f\u7528 \u5185\u5b58\u6570\u636e\u5e93 \u8fd0\u884c\uff0c\u8fd9\u5c06\u66f4\u5feb\uff0c\u4e5f\u53ef\u80fd\u66f4\u5b89\u5168\u3002</p> <p>\u5176\u4ed6\u6240\u6709\u6d4b\u8bd5\u4e5f\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u7684\u65b9\u6cd5\u3002</p>"},{"location":"tutorial/fastapi/tests/#_9","title":"\u6837\u677f\u4ee3\u7801","text":"<p>\u5f88\u597d\uff0c\u4ee3\u7801\u6709\u6548\uff0c\u4f60\u53ef\u4ee5\u5728\u6bcf\u4e2a\u6d4b\u8bd5\u51fd\u6570\u4e2d\u590d\u5236\u6574\u4e2a\u8fc7\u7a0b\u3002</p> <p>\u4f46\u6211\u4eec\u4e0d\u5f97\u4e0d\u6dfb\u52a0\u5f88\u591a \u6837\u677f\u4ee3\u7801 \u6765\u5904\u7406\u81ea\u5b9a\u4e49\u6570\u636e\u5e93\uff0c\u521b\u5efa\u5185\u5b58\u6570\u636e\u5e93\u3001\u521b\u5efa\u81ea\u5b9a\u4e49\u4f1a\u8bdd\u548c\u8986\u76d6\u4f9d\u8d56\u9879\u3002</p> <p>\u6211\u4eec\u771f\u7684\u9700\u8981\u4e3a \u6bcf\u4e2a\u6d4b\u8bd5 \u90fd\u590d\u5236\u8fd9\u4e9b\u4ee3\u7801\u5417\uff1f\u4e0d\uff0c\u6211\u4eec\u53ef\u4ee5\u505a\u5f97\u66f4\u597d\uff01 \ud83d\ude0e</p> <p>\u6211\u4eec\u4f7f\u7528 pytest \u6765\u8fd0\u884c\u6d4b\u8bd5\u3002\u800c\u4e14\uff0cpytest \u4e5f\u6709\u4e00\u4e2a\u4e0e FastAPI \u4f9d\u8d56\u9879\u975e\u5e38\u76f8\u4f3c\u7684\u6982\u5ff5\u3002</p> <p>Info</p> <p>\u5b9e\u9645\u4e0a\uff0cpytest \u662f\u542f\u53d1 FastAPI \u8bbe\u8ba1\u4f9d\u8d56\u9879\u7684\u56e0\u7d20\u4e4b\u4e00\u3002</p> <p>\u5b83\u662f\u4e00\u79cd\u8ba9\u6211\u4eec\u5728\u6bcf\u4e2a\u6d4b\u8bd5\u4e4b\u524d\u58f0\u660e\u4e00\u4e9b \u4ee3\u7801 \u5e76 \u4e3a\u6d4b\u8bd5\u51fd\u6570\u63d0\u4f9b\u4e00\u4e2a\u503c \u7684\u65b9\u5f0f\uff08\u8fd9\u51e0\u4e4e\u4e0e FastAPI \u7684\u4f9d\u8d56\u9879\u76f8\u540c\uff09\u3002</p> <p>\u5b9e\u9645\u4e0a\uff0c\u5b83\u4e5f\u6709\u7c7b\u4f3c\u7684\u6280\u5de7\uff0c\u5141\u8bb8\u4f7f\u7528 <code>yield</code> \u4ee3\u66ff <code>return</code> \u6765\u63d0\u4f9b\u503c\uff0c\u7136\u540e pytest \u4f1a\u786e\u4fdd <code>yield</code> \u540e\u7684\u4ee3\u7801\u4f1a\u5728\u6d4b\u8bd5\u51fd\u6570\u6267\u884c\u5b8c\u540e\u518d\u6267\u884c\u3002</p> <p>\u5728 pytest \u4e2d\uff0c\u8fd9\u4e9b\u4e1c\u897f\u53eb\u505a fixtures\uff0c\u800c\u4e0d\u662f \u4f9d\u8d56\u9879\u3002</p> <p>\u8ba9\u6211\u4eec\u4f7f\u7528\u8fd9\u4e9b fixtures \u6765\u6539\u8fdb\u6211\u4eec\u7684\u4ee3\u7801\uff0c\u51cf\u5c11\u540e\u7eed\u6d4b\u8bd5\u4e2d\u7684\u91cd\u590d\u6837\u677f\u4ee3\u7801\u3002</p>"},{"location":"tutorial/fastapi/tests/#pytest-fixtures","title":"Pytest Fixtures","text":"<p>\u4f60\u53ef\u4ee5\u5728 pytest \u6587\u6863\u4e2d\u7684 Fixtures \u4e2d\u4e86\u89e3\u66f4\u591a\uff0c\u4f46\u6211\u4f1a\u7ed9\u4f60\u4e00\u4e2a\u7b80\u77ed\u7684\u793a\u4f8b\uff0c\u5c55\u793a\u6211\u4eec\u5728\u8fd9\u91cc\u9700\u8981\u7684\u5185\u5bb9\u3002</p> <p>\u8ba9\u6211\u4eec\u770b\u770b\u7b2c\u4e00\u4e2a\u4f7f\u7528 fixture \u7684\u4ee3\u7801\u793a\u4f8b\uff1a</p> <pre><code>import pytest  # (1)!\nfrom fastapi.testclient import TestClient\nfrom sqlmodel import Session, SQLModel, create_engine\nfrom sqlmodel.pool import StaticPool\n\nfrom .main import app, get_session\n\n\n@pytest.fixture(name=\"session\")  # (2)!\ndef session_fixture():  # (3)!\n    engine = create_engine(\n        \"sqlite://\", connect_args={\"check_same_thread\": False}, poolclass=StaticPool\n    )\n    SQLModel.metadata.create_all(engine)\n    with Session(engine) as session:\n        yield session  # (4)!\n\n\ndef test_create_hero(session: Session):  # (5)!\n    def get_session_override():\n        return session  # (6)!\n\n    app.dependency_overrides[get_session] = get_session_override\n\n    client = TestClient(app)\n\n    response = client.post(\n        \"/heroes/\", json={\"name\": \"Deadpond\", \"secret_name\": \"Dive Wilson\"}\n    )\n    app.dependency_overrides.clear()\n    data = response.json()\n\n    assert response.status_code == 200\n    assert data[\"name\"] == \"Deadpond\"\n    assert data[\"secret_name\"] == \"Dive Wilson\"\n    assert data[\"age\"] is None\n    assert data[\"id\"] is not None\n</code></pre> <ol> <li> <p>Import <code>pytest</code>.</p> </li> <li> <p>Use the <code>@pytest.fixture()</code> decorator on top of the function to tell pytest that this is a fixture function (equivalent to a FastAPI dependency).</p> <p>We also give it a name of <code>\"session\"</code>, this will be important in the testing function.</p> </li> <li> <p>Create the fixture function. This is equivalent to a FastAPI dependency function.</p> <p>In this fixture we create the custom engine, with the in-memory database, we create the tables, and we create the session.</p> <p>Then we <code>yield</code> the <code>session</code> object.</p> </li> <li> <p>The thing that we <code>return</code> or <code>yield</code> is what will be available to the test function, in this case, the <code>session</code> object.</p> <p>Here we use <code>yield</code> so that pytest comes back to execute \"the rest of the code\" in this function once the testing function is done.</p> <p>We don't have any more visible \"rest of the code\" after the <code>yield</code>, but we have the end of the <code>with</code> block that will close the session.</p> <p>By using <code>yield</code>, pytest will:</p> <ul> <li>run the first part</li> <li>create the session object</li> <li>give it to the test function</li> <li>run the test function</li> <li>once the test function is done, it will continue here, right after the <code>yield</code>, and will correctly close the session object in the end of the <code>with</code> block.</li> </ul> </li> <li> <p>Now, in the test function, to tell pytest that this test wants to get the fixture, instead of declaring something like in FastAPI with:</p> <pre><code>session: Session = Depends(session_fixture)\n</code></pre> <p>...the way we tell pytest what is the fixture that we want is by using the exact same name of the fixture.</p> <p>In this case, we named it <code>session</code>, so the parameter has to be exactly named <code>session</code> for it to work.</p> <p>We also add the type annotation <code>session: Session</code> so that we can get autocompletion and inline error checks in our editor.</p> </li> <li> <p>Now in the dependency override function, we just return the same <code>session</code> object that came from outside it.</p> <p>The <code>session</code> object comes from the parameter passed to the test function, and we just re-use it and return it here in the dependency override.</p> </li> </ol> <p>Tip</p> <p>\u67e5\u770b\u4ee3\u7801\u884c\u53f7\u6c14\u6ce1\uff0c\u4e86\u89e3\u6bcf\u884c\u4ee3\u7801\u7684\u4f5c\u7528\u3002</p> <p>pytest \u7684 fixtures \u548c FastAPI \u7684\u4f9d\u8d56\u9879\u5de5\u4f5c\u65b9\u5f0f\u975e\u5e38\u76f8\u4f3c\uff0c\u4f46\u6709\u4e00\u4e9b\u5c0f\u7684\u5dee\u522b\uff1a</p> <ul> <li>\u5728 pytest fixtures \u4e2d\uff0c\u6211\u4eec\u9700\u8981\u5728\u4e0a\u65b9\u6dfb\u52a0 <code>@pytest.fixture()</code> \u88c5\u9970\u5668\u3002</li> <li>\u8981\u5728\u51fd\u6570\u4e2d\u4f7f\u7528 pytest fixture\uff0c\u6211\u4eec\u5fc5\u987b\u58f0\u660e\u53c2\u6570\u7684 \u5b8c\u5168\u76f8\u540c\u7684\u540d\u79f0\u3002\u5728 FastAPI \u4e2d\uff0c\u6211\u4eec\u5fc5\u987b\u663e\u5f0f\u5730\u4f7f\u7528 <code>Depends()</code> \u5e76\u5c06\u5b9e\u9645\u51fd\u6570\u653e\u5728\u5176\u4e2d\u3002</li> </ul> <p>\u4f46\u9664\u4e86\u58f0\u660e\u65b9\u5f0f\u548c\u5982\u4f55\u544a\u77e5\u6846\u67b6\u6211\u4eec\u5e0c\u671b\u5c06\u5176\u5e94\u7528\u4e8e\u51fd\u6570\u7684\u65b9\u5f0f\u5916\uff0c\u5b83\u4eec \u5de5\u4f5c\u65b9\u5f0f\u975e\u5e38\u76f8\u4f3c\u3002</p> <p>\u73b0\u5728\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u8bb8\u591a\u6d4b\u8bd5\u5e76\u5728\u5176\u4e2d\u91cd\u7528\u76f8\u540c\u7684 fixture\uff0c\u4ece\u800c\u8282\u7701\u4e86\u5927\u91cf\u7684 \u6837\u677f\u4ee3\u7801\u3002</p> <p>pytest \u5c06\u786e\u4fdd\u5728\u6bcf\u4e2a\u6d4b\u8bd5\u51fd\u6570\u4e4b\u524d\u6267\u884c\u5b83\u4eec\uff08\u5e76\u5728\u4e4b\u540e\u6267\u884c\u5b83\u4eec\uff09\u3002\u6240\u4ee5\uff0c\u6bcf\u4e2a\u6d4b\u8bd5\u51fd\u6570\u90fd\u4f1a\u6709\u81ea\u5df1\u72ec\u7acb\u7684\u6570\u636e\u5e93\u3001\u5f15\u64ce\u548c\u4f1a\u8bdd\u3002</p>"},{"location":"tutorial/fastapi/tests/#fixture","title":"\u5ba2\u6237\u7aef Fixture","text":"<p>\u592a\u68d2\u4e86\uff0c\u8fd9\u4e2a fixture \u5e2e\u52a9\u6211\u4eec\u51cf\u5c11\u4e86\u5927\u91cf\u7684\u91cd\u590d\u4ee3\u7801\u3002</p> <p>\u4f46\u76ee\u524d\uff0c\u6211\u4eec\u4ecd\u7136\u9700\u8981\u5728\u6d4b\u8bd5\u51fd\u6570\u4e2d\u7f16\u5199\u4e00\u4e9b\u91cd\u590d\u7684\u4ee3\u7801\uff0c\u76ee\u524d\u6211\u4eec\u9700\u8981\uff1a</p> <ul> <li>\u521b\u5efa \u4f9d\u8d56\u9879\u8986\u76d6</li> <li>\u5c06\u5176\u653e\u5165 <code>app.dependency_overrides</code></li> <li>\u521b\u5efa <code>TestClient</code></li> <li>\u5728\u53d1\u51fa\u8bf7\u6c42\u540e\u6e05\u7406\u4f9d\u8d56\u9879\u8986\u76d6</li> </ul> <p>\u8fd9\u4e9b\u5728\u672a\u6765\u7684\u5176\u4ed6\u6d4b\u8bd5\u4e2d\u4ecd\u7136\u662f\u91cd\u590d\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u6539\u8fdb\u5b83\u5417\uff1f\u53ef\u4ee5\uff01\ud83c\udf89</p> <p>\u6bcf\u4e2a pytest fixture\uff08\u548c FastAPI \u4f9d\u8d56\u9879\u4e00\u6837\uff09\uff0c\u53ef\u4ee5\u4f9d\u8d56\u5176\u4ed6 fixture\u3002</p> <p>\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a \u5ba2\u6237\u7aef fixture\uff0c\u5b83\u5c06\u5728\u6240\u6709\u6d4b\u8bd5\u4e2d\u4f7f\u7528\uff0c\u5e76\u4e14\u5b83\u672c\u8eab\u9700\u8981 \u4f1a\u8bdd fixture\u3002</p> <pre><code>import pytest\nfrom fastapi.testclient import TestClient\nfrom sqlmodel import Session, SQLModel, create_engine\nfrom sqlmodel.pool import StaticPool\n\nfrom .main import app, get_session\n\n\n@pytest.fixture(name=\"session\")\ndef session_fixture():\n    engine = create_engine(\n        \"sqlite://\", connect_args={\"check_same_thread\": False}, poolclass=StaticPool\n    )\n    SQLModel.metadata.create_all(engine)\n    with Session(engine) as session:\n        yield session\n\n\n@pytest.fixture(name=\"client\")  # (1)!\ndef client_fixture(session: Session):  # (2)!\n    def get_session_override():  # (3)!\n        return session\n\n    app.dependency_overrides[get_session] = get_session_override  # (4)!\n\n    client = TestClient(app)  # (5)!\n    yield client  # (6)!\n    app.dependency_overrides.clear()  # (7)!\n\n\ndef test_create_hero(client: TestClient):  # (8)!\n    response = client.post(\n        \"/heroes/\", json={\"name\": \"Deadpond\", \"secret_name\": \"Dive Wilson\"}\n    )\n    data = response.json()\n\n    assert response.status_code == 200\n    assert data[\"name\"] == \"Deadpond\"\n    assert data[\"secret_name\"] == \"Dive Wilson\"\n    assert data[\"age\"] is None\n    assert data[\"id\"] is not None\n</code></pre> <ol> <li> <p>Create the new fixture named <code>\"client\"</code>.</p> </li> <li> <p>This client fixture, in turn, also requires the session fixture.</p> </li> <li> <p>Now we create the dependency override inside the client fixture.</p> </li> <li> <p>Set the dependency override in the <code>app.dependency_overrides</code> dictionary.</p> </li> <li> <p>Create the <code>TestClient</code> with the FastAPI <code>app</code>.</p> </li> <li> <p><code>yield</code> the <code>TestClient</code> instance.</p> <p>By using <code>yield</code>, after the test function is done, pytest will come back to execute the rest of the code after <code>yield</code>.</p> </li> <li> <p>This is the cleanup code, after <code>yield</code>, and after the test function is done.</p> <p>Here we clear the dependency overrides (here it's only one) in the FastAPI <code>app</code>.</p> </li> <li> <p>Now the test function requires the client fixture.</p> <p>And inside the test function, the code is quite simple, we just use the <code>TestClient</code> to make requests to the API, check the data, and that's it.</p> <p>The fixtures take care of all the setup and cleanup code.</p> </li> </ol> <p>Tip</p> <p>\u67e5\u770b\u4ee3\u7801\u884c\u53f7\u6c14\u6ce1\uff0c\u4e86\u89e3\u6bcf\u884c\u4ee3\u7801\u7684\u4f5c\u7528\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u6709\u4e86\u4e00\u4e2a \u5ba2\u6237\u7aef fixture\uff0c\u5b83\u53c8\u4f9d\u8d56\u4e8e \u4f1a\u8bdd fixture\u3002</p> <p>\u5728\u5b9e\u9645\u7684\u6d4b\u8bd5\u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u53ea\u9700\u8981\u58f0\u660e\u9700\u8981\u8fd9\u4e2a \u5ba2\u6237\u7aef fixture\u3002</p>"},{"location":"tutorial/fastapi/tests/#_10","title":"\u6dfb\u52a0\u66f4\u591a\u6d4b\u8bd5","text":"<p>\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u53ef\u80fd\u770b\u8d77\u6765\u6211\u4eec\u505a\u4e86\u5f88\u591a\u66f4\u6539\uff0c\u5374\u6ca1\u6709\u5f97\u5230\u4efb\u4f55\u65b0\u7684\u7ed3\u679c\uff0c\u4f9d\u7136\u662f \u76f8\u540c\u7684\u7ed3\u679c\u3002\ud83e\udd14</p> <p>\u4f46\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f1a\u521b\u5efa \u5f88\u591a\u5176\u4ed6\u6d4b\u8bd5\u51fd\u6570\u3002\u73b0\u5728\u6240\u6709\u7684\u6837\u677f\u4ee3\u7801\u548c\u590d\u6742\u6027 \u53ea\u5199\u4e86\u4e00\u6b21\uff0c\u5c31\u653e\u5728\u4e86\u8fd9\u4e24\u4e2a fixture \u4e2d\u3002</p> <p>\u8ba9\u6211\u4eec\u6dfb\u52a0\u66f4\u591a\u7684\u6d4b\u8bd5\uff1a</p> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef test_create_hero(client: TestClient):\n    response = client.post(\n        \"/heroes/\", json={\"name\": \"Deadpond\", \"secret_name\": \"Dive Wilson\"}\n    )\n    data = response.json()\n\n    assert response.status_code == 200\n    assert data[\"name\"] == \"Deadpond\"\n    assert data[\"secret_name\"] == \"Dive Wilson\"\n    assert data[\"age\"] is None\n    assert data[\"id\"] is not None\n\n\ndef test_create_hero_incomplete(client: TestClient):\n    # No secret_name\n    response = client.post(\"/heroes/\", json={\"name\": \"Deadpond\"})\n    assert response.status_code == 422\n\n\ndef test_create_hero_invalid(client: TestClient):\n    # secret_name has an invalid type\n    response = client.post(\n        \"/heroes/\",\n        json={\n            \"name\": \"Deadpond\",\n            \"secret_name\": {\"message\": \"Do you wanna know my secret identity?\"},\n        },\n    )\n    assert response.status_code == 422\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 <pre><code>import pytest\nfrom fastapi.testclient import TestClient\nfrom sqlmodel import Session, SQLModel, create_engine\nfrom sqlmodel.pool import StaticPool\n\nfrom .main import Hero, app, get_session\n\n\n@pytest.fixture(name=\"session\")\ndef session_fixture():\n    engine = create_engine(\n        \"sqlite://\", connect_args={\"check_same_thread\": False}, poolclass=StaticPool\n    )\n    SQLModel.metadata.create_all(engine)\n    with Session(engine) as session:\n        yield session\n\n\n@pytest.fixture(name=\"client\")\ndef client_fixture(session: Session):\n    def get_session_override():\n        return session\n\n    app.dependency_overrides[get_session] = get_session_override\n    client = TestClient(app)\n    yield client\n    app.dependency_overrides.clear()\n\n\ndef test_create_hero(client: TestClient):\n    response = client.post(\n        \"/heroes/\", json={\"name\": \"Deadpond\", \"secret_name\": \"Dive Wilson\"}\n    )\n    data = response.json()\n\n    assert response.status_code == 200\n    assert data[\"name\"] == \"Deadpond\"\n    assert data[\"secret_name\"] == \"Dive Wilson\"\n    assert data[\"age\"] is None\n    assert data[\"id\"] is not None\n\n\ndef test_create_hero_incomplete(client: TestClient):\n    # No secret_name\n    response = client.post(\"/heroes/\", json={\"name\": \"Deadpond\"})\n    assert response.status_code == 422\n\n\ndef test_create_hero_invalid(client: TestClient):\n    # secret_name has an invalid type\n    response = client.post(\n        \"/heroes/\",\n        json={\n            \"name\": \"Deadpond\",\n            \"secret_name\": {\"message\": \"Do you wanna know my secret identity?\"},\n        },\n    )\n    assert response.status_code == 422\n\n\ndef test_read_heroes(session: Session, client: TestClient):\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    session.add(hero_1)\n    session.add(hero_2)\n    session.commit()\n\n    response = client.get(\"/heroes/\")\n    data = response.json()\n\n    assert response.status_code == 200\n\n    assert len(data) == 2\n    assert data[0][\"name\"] == hero_1.name\n    assert data[0][\"secret_name\"] == hero_1.secret_name\n    assert data[0][\"age\"] == hero_1.age\n    assert data[0][\"id\"] == hero_1.id\n    assert data[1][\"name\"] == hero_2.name\n    assert data[1][\"secret_name\"] == hero_2.secret_name\n    assert data[1][\"age\"] == hero_2.age\n    assert data[1][\"id\"] == hero_2.id\n\n\ndef test_read_hero(session: Session, client: TestClient):\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    session.add(hero_1)\n    session.commit()\n\n    response = client.get(f\"/heroes/{hero_1.id}\")\n    data = response.json()\n\n    assert response.status_code == 200\n    assert data[\"name\"] == hero_1.name\n    assert data[\"secret_name\"] == hero_1.secret_name\n    assert data[\"age\"] == hero_1.age\n    assert data[\"id\"] == hero_1.id\n\n\ndef test_update_hero(session: Session, client: TestClient):\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    session.add(hero_1)\n    session.commit()\n\n    response = client.patch(f\"/heroes/{hero_1.id}\", json={\"name\": \"Deadpuddle\"})\n    data = response.json()\n\n    assert response.status_code == 200\n    assert data[\"name\"] == \"Deadpuddle\"\n    assert data[\"secret_name\"] == \"Dive Wilson\"\n    assert data[\"age\"] is None\n    assert data[\"id\"] == hero_1.id\n\n\ndef test_delete_hero(session: Session, client: TestClient):\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    session.add(hero_1)\n    session.commit()\n\n    response = client.delete(f\"/heroes/{hero_1.id}\")\n\n    hero_in_db = session.get(Hero, hero_1.id)\n\n    assert response.status_code == 200\n\n    assert hero_in_db is None\n</code></pre> <p>Tip</p> <p>\u9664\u4e86\u6d4b\u8bd5\u6b63\u5e38\u60c5\u51b5\u5916\uff0c\u6d4b\u8bd5\u65e0\u6548\u6570\u636e\u3001\u9519\u8bef**\u548c**\u8fb9\u754c\u60c5\u51b5**\u4e5f\u662f **\u597d\u4e3b\u610f\uff0c\u786e\u4fdd\u5b83\u4eec\u80fd\u6b63\u786e\u5904\u7406\u3002</p> <p>\u8fd9\u5c31\u662f\u6211\u4eec\u5728\u8fd9\u91cc\u6dfb\u52a0\u8fd9\u4e24\u4e2a\u989d\u5916\u6d4b\u8bd5\u7684\u539f\u56e0\u3002</p> <p>\u73b0\u5728\uff0c\u4efb\u4f55\u989d\u5916\u7684\u6d4b\u8bd5\u51fd\u6570\u90fd\u53ef\u4ee5\u50cf\u7b2c\u4e00\u4e2a\u6d4b\u8bd5\u4e00\u6837\u7b80\u5355\uff0c\u5b83\u4eec\u53ea\u9700\u8981 \u58f0\u660e <code>client</code> \u53c2\u6570 \u6765\u83b7\u53d6\u5df2\u7ecf\u8bbe\u7f6e\u597d\u6240\u6709\u6570\u636e\u5e93\u5185\u5bb9\u7684 <code>TestClient</code> fixture\u3002\u5f88\u68d2\uff01\ud83d\ude0e</p>"},{"location":"tutorial/fastapi/tests/#fixtures","title":"\u4e3a\u4ec0\u4e48\u662f\u4e24\u4e2a Fixtures","text":"<p>\u73b0\u5728\uff0c\u770b\u5230\u8fd9\u4e9b\u4ee3\u7801\u540e\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u60f3\uff0c\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528 \u4e24\u4e2a fixtures\uff0c\u800c\u4e0d\u662f \u53ea\u7528\u4e00\u4e2a \u5305\u542b\u6240\u6709\u4ee3\u7801\u7684 fixture \u5462\uff1f\u8fd9\u4e2a\u95ee\u9898\u975e\u5e38\u6709\u9053\u7406\uff01</p> <p>\u5bf9\u4e8e\u8fd9\u4e9b\u793a\u4f8b\uff0c\u7528\u4e00\u4e2a fixture \u66f4\u7b80\u5355\uff0c\u5176\u5b9e\u6ca1\u5fc5\u8981\u628a\u4ee3\u7801\u62c6\u5206\u6210\u4e24\u4e2a fixture\u3002</p> <p>\u4f46\u5bf9\u4e8e\u4e0b\u4e00\u4e2a\u6d4b\u8bd5\u51fd\u6570\uff0c\u6211\u4eec\u5c06\u9700\u8981 \u4e24\u4e2a fixture\uff0c\u5373 client \u548c session\u3002</p> <pre><code>import pytest\nfrom fastapi.testclient import TestClient\nfrom sqlmodel import Session, SQLModel, create_engine\nfrom sqlmodel.pool import StaticPool\n\nfrom .main import Hero, app, get_session\n\n# \u8fd9\u91cc\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\ndef test_read_heroes(session: Session, client: TestClient):\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    session.add(hero_1)\n    session.add(hero_2)\n    session.commit()\n\n    response = client.get(\"/heroes/\")\n    data = response.json()\n\n    assert response.status_code == 200\n\n    assert len(data) == 2\n    assert data[0][\"name\"] == hero_1.name\n    assert data[0][\"secret_name\"] == hero_1.secret_name\n    assert data[0][\"age\"] == hero_1.age\n    assert data[0][\"id\"] == hero_1.id\n    assert data[1][\"name\"] == hero_2.name\n    assert data[1][\"secret_name\"] == hero_2.secret_name\n    assert data[1][\"age\"] == hero_2.age\n    assert data[1][\"id\"] == hero_2.id\n\n# \u4e0b\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 <pre><code>import pytest\nfrom fastapi.testclient import TestClient\nfrom sqlmodel import Session, SQLModel, create_engine\nfrom sqlmodel.pool import StaticPool\n\nfrom .main import Hero, app, get_session\n\n\n@pytest.fixture(name=\"session\")\ndef session_fixture():\n    engine = create_engine(\n        \"sqlite://\", connect_args={\"check_same_thread\": False}, poolclass=StaticPool\n    )\n    SQLModel.metadata.create_all(engine)\n    with Session(engine) as session:\n        yield session\n\n\n@pytest.fixture(name=\"client\")\ndef client_fixture(session: Session):\n    def get_session_override():\n        return session\n\n    app.dependency_overrides[get_session] = get_session_override\n    client = TestClient(app)\n    yield client\n    app.dependency_overrides.clear()\n\n\ndef test_create_hero(client: TestClient):\n    response = client.post(\n        \"/heroes/\", json={\"name\": \"Deadpond\", \"secret_name\": \"Dive Wilson\"}\n    )\n    data = response.json()\n\n    assert response.status_code == 200\n    assert data[\"name\"] == \"Deadpond\"\n    assert data[\"secret_name\"] == \"Dive Wilson\"\n    assert data[\"age\"] is None\n    assert data[\"id\"] is not None\n\n\ndef test_create_hero_incomplete(client: TestClient):\n    # No secret_name\n    response = client.post(\"/heroes/\", json={\"name\": \"Deadpond\"})\n    assert response.status_code == 422\n\n\ndef test_create_hero_invalid(client: TestClient):\n    # secret_name has an invalid type\n    response = client.post(\n        \"/heroes/\",\n        json={\n            \"name\": \"Deadpond\",\n            \"secret_name\": {\"message\": \"Do you wanna know my secret identity?\"},\n        },\n    )\n    assert response.status_code == 422\n\n\ndef test_read_heroes(session: Session, client: TestClient):\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    session.add(hero_1)\n    session.add(hero_2)\n    session.commit()\n\n    response = client.get(\"/heroes/\")\n    data = response.json()\n\n    assert response.status_code == 200\n\n    assert len(data) == 2\n    assert data[0][\"name\"] == hero_1.name\n    assert data[0][\"secret_name\"] == hero_1.secret_name\n    assert data[0][\"age\"] == hero_1.age\n    assert data[0][\"id\"] == hero_1.id\n    assert data[1][\"name\"] == hero_2.name\n    assert data[1][\"secret_name\"] == hero_2.secret_name\n    assert data[1][\"age\"] == hero_2.age\n    assert data[1][\"id\"] == hero_2.id\n\n\ndef test_read_hero(session: Session, client: TestClient):\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    session.add(hero_1)\n    session.commit()\n\n    response = client.get(f\"/heroes/{hero_1.id}\")\n    data = response.json()\n\n    assert response.status_code == 200\n    assert data[\"name\"] == hero_1.name\n    assert data[\"secret_name\"] == hero_1.secret_name\n    assert data[\"age\"] == hero_1.age\n    assert data[\"id\"] == hero_1.id\n\n\ndef test_update_hero(session: Session, client: TestClient):\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    session.add(hero_1)\n    session.commit()\n\n    response = client.patch(f\"/heroes/{hero_1.id}\", json={\"name\": \"Deadpuddle\"})\n    data = response.json()\n\n    assert response.status_code == 200\n    assert data[\"name\"] == \"Deadpuddle\"\n    assert data[\"secret_name\"] == \"Dive Wilson\"\n    assert data[\"age\"] is None\n    assert data[\"id\"] == hero_1.id\n\n\ndef test_delete_hero(session: Session, client: TestClient):\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    session.add(hero_1)\n    session.commit()\n\n    response = client.delete(f\"/heroes/{hero_1.id}\")\n\n    hero_in_db = session.get(Hero, hero_1.id)\n\n    assert response.status_code == 200\n\n    assert hero_in_db is None\n</code></pre> <p>\u5728\u8fd9\u4e2a\u6d4b\u8bd5\u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u5e0c\u671b\u68c0\u67e5 \u8bfb\u53d6\u82f1\u96c4\u5217\u8868 \u7684\u8def\u5f84\u64cd\u4f5c\u662f\u5426\u771f\u7684\u53d1\u9001\u4e86\u82f1\u96c4\u6570\u636e\u3002</p> <p>\u4f46\u5982\u679c \u6570\u636e\u5e93\u4e3a\u7a7a\uff0c\u6211\u4eec\u4f1a\u5f97\u5230\u4e00\u4e2a \u7a7a\u5217\u8868\uff0c\u8fd9\u65f6\u6211\u4eec\u65e0\u6cd5\u5224\u65ad\u82f1\u96c4\u6570\u636e\u662f\u5426\u6b63\u786e\u53d1\u9001\u3002</p> <p>\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u5728\u53d1\u9001 API \u8bf7\u6c42\u4e4b\u524d \u5728\u6d4b\u8bd5\u6570\u636e\u5e93\u4e2d\u521b\u5efa\u4e00\u4e9b\u82f1\u96c4\u3002\u2728</p> <p>\u800c\u4e14\uff0c\u7531\u4e8e\u6211\u4eec\u4f7f\u7528\u7684\u662f \u6d4b\u8bd5\u6570\u636e\u5e93\uff0c\u5728\u6d4b\u8bd5\u4e2d\u521b\u5efa\u82f1\u96c4\u6570\u636e\u4e0d\u4f1a\u5f71\u54cd\u5176\u4ed6\u5185\u5bb9\u3002</p> <p>\u4e3a\u6b64\uff0c\u6211\u4eec\u9700\u8981\uff1a</p> <ul> <li>\u5bfc\u5165 <code>Hero</code> \u6a21\u578b</li> <li>\u9700\u8981\u4e24\u4e2a fixtures\uff0cclient \u548c session</li> <li>\u521b\u5efa\u4e00\u4e9b\u82f1\u96c4\u5e76\u4f7f\u7528 session \u5c06\u5b83\u4eec\u4fdd\u5b58\u5230\u6570\u636e\u5e93\u4e2d</li> </ul> <p>\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u53d1\u9001\u8bf7\u6c42\u5e76\u68c0\u67e5\u662f\u5426\u4ece\u6570\u636e\u5e93\u4e2d\u6b63\u786e\u83b7\u53d6\u4e86\u6570\u636e\u3002\ud83d\udcaf</p> <p>\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u4e00\u4e2a\u91cd\u8981\u7ec6\u8282\u662f\uff1a\u6211\u4eec\u53ef\u4ee5\u5728\u5176\u4ed6 fixture \u548c \u6d4b\u8bd5\u51fd\u6570\u4e2d\u8981\u6c42\u4f7f\u7528 fixtures\u3002</p> <p>client fixture \u51fd\u6570\u548c\u5b9e\u9645\u7684\u6d4b\u8bd5\u51fd\u6570\u4f1a \u90fd \u4f7f\u7528\u76f8\u540c\u7684 session\u3002</p>"},{"location":"tutorial/fastapi/tests/#_11","title":"\u6dfb\u52a0\u5176\u4f59\u7684\u6d4b\u8bd5","text":"<p>\u5229\u7528\u76f8\u540c\u7684\u601d\u8def\uff0c\u8981\u6c42 fixtures\uff0c\u521b\u5efa\u6d4b\u8bd5\u6240\u9700\u7684\u6570\u636e\u7b49\u7b49\uff0c\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u6dfb\u52a0\u5269\u4f59\u7684\u6d4b\u8bd5\u3002\u5b83\u4eec\u770b\u8d77\u6765\u4e0e\u6211\u4eec\u8fc4\u4eca\u4e3a\u6b62\u6240\u505a\u7684\u975e\u5e38\u76f8\u4f3c\u3002</p> <pre><code># \u4e0a\u9762\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef test_read_hero(session: Session, client: TestClient):\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    session.add(hero_1)\n    session.commit()\n\n    response = client.get(f\"/heroes/{hero_1.id}\")\n    data = response.json()\n\n    assert response.status_code == 200\n    assert data[\"name\"] == hero_1.name\n    assert data[\"secret_name\"] == hero_1.secret_name\n    assert data[\"age\"] == hero_1.age\n    assert data[\"id\"] == hero_1.id\n\n\ndef test_update_hero(session: Session, client: TestClient):\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    session.add(hero_1)\n    session.commit()\n\n    response = client.patch(f\"/heroes/{hero_1.id}\", json={\"name\": \"Deadpuddle\"})\n    data = response.json()\n\n    assert response.status_code == 200\n    assert data[\"name\"] == \"Deadpuddle\"\n    assert data[\"secret_name\"] == \"Dive Wilson\"\n    assert data[\"age\"] is None\n    assert data[\"id\"] == hero_1.id\n\n\ndef test_delete_hero(session: Session, client: TestClient):\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    session.add(hero_1)\n    session.commit()\n\n    response = client.delete(f\"/heroes/{hero_1.id}\")\n\n    hero_in_db = session.get(Hero, hero_1.id)\n\n    assert response.status_code == 200\n\n    assert hero_in_db is None\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 <pre><code>import pytest\nfrom fastapi.testclient import TestClient\nfrom sqlmodel import Session, SQLModel, create_engine\nfrom sqlmodel.pool import StaticPool\n\nfrom .main import Hero, app, get_session\n\n\n@pytest.fixture(name=\"session\")\ndef session_fixture():\n    engine = create_engine(\n        \"sqlite://\", connect_args={\"check_same_thread\": False}, poolclass=StaticPool\n    )\n    SQLModel.metadata.create_all(engine)\n    with Session(engine) as session:\n        yield session\n\n\n@pytest.fixture(name=\"client\")\ndef client_fixture(session: Session):\n    def get_session_override():\n        return session\n\n    app.dependency_overrides[get_session] = get_session_override\n    client = TestClient(app)\n    yield client\n    app.dependency_overrides.clear()\n\n\ndef test_create_hero(client: TestClient):\n    response = client.post(\n        \"/heroes/\", json={\"name\": \"Deadpond\", \"secret_name\": \"Dive Wilson\"}\n    )\n    data = response.json()\n\n    assert response.status_code == 200\n    assert data[\"name\"] == \"Deadpond\"\n    assert data[\"secret_name\"] == \"Dive Wilson\"\n    assert data[\"age\"] is None\n    assert data[\"id\"] is not None\n\n\ndef test_create_hero_incomplete(client: TestClient):\n    # No secret_name\n    response = client.post(\"/heroes/\", json={\"name\": \"Deadpond\"})\n    assert response.status_code == 422\n\n\ndef test_create_hero_invalid(client: TestClient):\n    # secret_name has an invalid type\n    response = client.post(\n        \"/heroes/\",\n        json={\n            \"name\": \"Deadpond\",\n            \"secret_name\": {\"message\": \"Do you wanna know my secret identity?\"},\n        },\n    )\n    assert response.status_code == 422\n\n\ndef test_read_heroes(session: Session, client: TestClient):\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    session.add(hero_1)\n    session.add(hero_2)\n    session.commit()\n\n    response = client.get(\"/heroes/\")\n    data = response.json()\n\n    assert response.status_code == 200\n\n    assert len(data) == 2\n    assert data[0][\"name\"] == hero_1.name\n    assert data[0][\"secret_name\"] == hero_1.secret_name\n    assert data[0][\"age\"] == hero_1.age\n    assert data[0][\"id\"] == hero_1.id\n    assert data[1][\"name\"] == hero_2.name\n    assert data[1][\"secret_name\"] == hero_2.secret_name\n    assert data[1][\"age\"] == hero_2.age\n    assert data[1][\"id\"] == hero_2.id\n\n\ndef test_read_hero(session: Session, client: TestClient):\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    session.add(hero_1)\n    session.commit()\n\n    response = client.get(f\"/heroes/{hero_1.id}\")\n    data = response.json()\n\n    assert response.status_code == 200\n    assert data[\"name\"] == hero_1.name\n    assert data[\"secret_name\"] == hero_1.secret_name\n    assert data[\"age\"] == hero_1.age\n    assert data[\"id\"] == hero_1.id\n\n\ndef test_update_hero(session: Session, client: TestClient):\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    session.add(hero_1)\n    session.commit()\n\n    response = client.patch(f\"/heroes/{hero_1.id}\", json={\"name\": \"Deadpuddle\"})\n    data = response.json()\n\n    assert response.status_code == 200\n    assert data[\"name\"] == \"Deadpuddle\"\n    assert data[\"secret_name\"] == \"Dive Wilson\"\n    assert data[\"age\"] is None\n    assert data[\"id\"] == hero_1.id\n\n\ndef test_delete_hero(session: Session, client: TestClient):\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    session.add(hero_1)\n    session.commit()\n\n    response = client.delete(f\"/heroes/{hero_1.id}\")\n\n    hero_in_db = session.get(Hero, hero_1.id)\n\n    assert response.status_code == 200\n\n    assert hero_in_db is None\n</code></pre>"},{"location":"tutorial/fastapi/tests/#_12","title":"\u8fd0\u884c\u6d4b\u8bd5","text":"<p>\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 <code>pytest</code> \u8fd0\u884c\u6d4b\u8bd5\uff0c\u5e76\u67e5\u770b\u7ed3\u679c\uff1a</p> <pre><code>$ pytest\n\n============= \u6d4b\u8bd5\u4f1a\u8bdd\u5f00\u59cb ==============\n\u5e73\u53f0 linux -- Python 3.7.5, pytest-6.2.4, py-1.10.0, pluggy-0.13.1\n\u6839\u76ee\u5f55: /home/user/code/sqlmodel-tutorial\n&lt;b&gt;\u5df2\u6536\u96c6 7 \u9879                              &lt;/b&gt;\n\n---&gt; 100%\n\nproject/test_main.py &lt;font color=\"#A6E22E\"&gt;.......         [100%]&lt;/font&gt;\n\n&lt;font color=\"#A6E22E\"&gt;============== &lt;/font&gt;&lt;font color=\"#A6E22E\"&gt;&lt;b&gt;7 \u901a\u8fc7&lt;/b&gt;&lt;/font&gt;&lt;font color=\"#A6E22E\"&gt; 0.83\u79d2 ===============&lt;/font&gt;\n</code></pre>"},{"location":"tutorial/fastapi/tests/#_13","title":"\u56de\u987e","text":"<p>\u4f60\u90fd\u8bfb\u5b8c\u4e86\u5417\uff1f\u54c7\uff0c\u771f\u8ba9\u6211\u5370\u8c61\u6df1\u523b\uff01\ud83d\ude0e</p> <p>\u4e3a\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u6dfb\u52a0\u6d4b\u8bd5\u5c06\u4e3a\u4f60\u63d0\u4f9b\u5f88\u591a \u786e\u5b9a\u6027\uff0c\u786e\u4fdd\u4e00\u5207\u6309\u9884\u671f \u6b63\u786e\u5de5\u4f5c\u3002</p> <p>\u6d4b\u8bd5\u5728 \u91cd\u6784 \u4ee3\u7801\u3001\u66f4\u6539\u5185\u5bb9\u3001\u6dfb\u52a0\u529f\u80fd \u65f6\u5c24\u5176\u6709\u7528\u3002\u56e0\u4e3a\u6d4b\u8bd5\u80fd\u591f\u5e2e\u52a9\u6355\u6349\u8bb8\u591a\u5728\u91cd\u6784\u65f6\u5bb9\u6613\u5f15\u5165\u7684\u9519\u8bef\u3002</p> <p>\u5b83\u4eec\u8fd8\u4f1a\u8ba9\u4f60\u66f4\u6709\u4fe1\u5fc3\u5730\u5de5\u4f5c\uff0c\u66f4\u9ad8\u6548\uff0c\u56e0\u4e3a\u4f60\u77e5\u9053\u81ea\u5df1\u5728\u68c0\u67e5 \u6ca1\u6709\u7834\u574f\u4efb\u4f55\u4e1c\u897f\u3002\ud83d\ude05</p> <p>\u6211\u8ba4\u4e3a\uff0c\u6d4b\u8bd5\u662f\u5c06\u4f60\u7684\u4ee3\u7801\u548c\u4f60\u4f5c\u4e3a\u5f00\u53d1\u8005\u63d0\u5347\u5230\u4e0b\u4e00\u4e2a\u4e13\u4e1a\u7ea7\u522b\u7684\u4e1c\u897f\u4e4b\u4e00\u3002\ud83d\ude0e</p> <p>\u5982\u679c\u4f60\u8bfb\u5b8c\u5e76\u7814\u7a76\u4e86\u8fd9\u4e00\u5207\uff0c\u4f60\u5df2\u7ecf\u638c\u63e1\u4e86\u8bb8\u591a\u9ad8\u7ea7\u7684\u601d\u60f3\u548c\u6280\u5de7\uff0c\u800c\u8fd9\u4e9b\u662f\u6211\u82b1\u4e86\u51e0\u5e74\u624d\u5b66\u5230\u7684\u3002\ud83d\ude80</p>"},{"location":"tutorial/fastapi/update-extra-data/","title":"\u4f7f\u7528 FastAPI \u66f4\u65b0\u9644\u52a0\u6570\u636e\uff08\u54c8\u5e0c\u5bc6\u7801\uff09","text":"<p>\u5728\u4e0a\u4e00\u7ae0\u4e2d\uff0c\u6211\u5411\u4f60\u89e3\u91ca\u4e86\u5982\u4f55\u4ece FastAPI \u8def\u5f84\u64cd\u4f5c \u63a5\u6536\u5230\u7684\u8f93\u5165\u6570\u636e\u66f4\u65b0\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u3002</p> <p>\u73b0\u5728\uff0c\u6211\u5c06\u5411\u4f60\u89e3\u91ca\u5982\u4f55\u5728\u66f4\u65b0\u6216\u521b\u5efa\u6a21\u578b\u5bf9\u8c61\u65f6\uff0c\u6dfb\u52a0 \u9644\u52a0\u6570\u636e\uff0c\u5373\u9664\u4e86\u8f93\u5165\u6570\u636e\u4e4b\u5916\u7684\u6570\u636e\u3002</p> <p>\u5f53\u4f60\u9700\u8981\u5728\u4ee3\u7801\u4e2d \u751f\u6210\u4e00\u4e9b\u6570\u636e\uff0c\u8fd9\u4e9b\u6570\u636e \u4e0d\u662f\u6765\u81ea\u5ba2\u6237\u7aef\uff0c\u4f46\u4f60\u9700\u8981\u5c06\u5176\u5b58\u50a8\u5728\u6570\u636e\u5e93\u4e2d\u65f6\uff0c\u8fd9\u7279\u522b\u6709\u7528\u3002\u4f8b\u5982\uff0c\u5b58\u50a8 \u54c8\u5e0c\u5bc6\u7801\u3002</p>"},{"location":"tutorial/fastapi/update-extra-data/#_1","title":"\u5bc6\u7801\u54c8\u5e0c","text":"<p>\u5047\u8bbe\u6211\u4eec\u7cfb\u7edf\u4e2d\u7684\u6bcf\u4e2a\u82f1\u96c4\u90fd\u6709\u4e00\u4e2a \u5bc6\u7801\u3002</p> <p>\u6211\u4eec\u7edd\u4e0d\u80fd\u5c06\u5bc6\u7801\u4ee5\u660e\u6587\u5f62\u5f0f\u5b58\u50a8\u5728\u6570\u636e\u5e93\u4e2d\uff0c\u800c\u5e94\u8be5\u53ea\u5b58\u50a8\u5176 \u54c8\u5e0c\u7248\u672c\u3002</p> <p>\u201c\u54c8\u5e0c\u201d\u662f\u6307\u5c06\u67d0\u4e9b\u5185\u5bb9\uff08\u5728\u6b64\u60c5\u51b5\u4e0b\u4e3a\u5bc6\u7801\uff09\u8f6c\u6362\u4e3a\u4e00\u4e32\u5b57\u8282\uff08\u5373\u4e00\u4e2a\u5b57\u7b26\u4e32\uff09\uff0c\u770b\u8d77\u6765\u50cf\u662f\u4e71\u7801\u3002</p> <p>\u6bcf\u6b21\u4f60\u4f20\u9012\u5b8c\u5168\u76f8\u540c\u7684\u5185\u5bb9\uff08\u5373\u5b8c\u5168\u76f8\u540c\u7684\u5bc6\u7801\uff09\uff0c\u4f60\u4f1a\u5f97\u5230\u5b8c\u5168\u76f8\u540c\u7684\u4e71\u7801\u3002</p> <p>\u4f46\u4f60 \u65e0\u6cd5\u5c06\u4e71\u7801 \u4ece \u8f6c\u6362\u56de\u5bc6\u7801\u3002</p>"},{"location":"tutorial/fastapi/update-extra-data/#_2","title":"\u4e3a\u4ec0\u4e48\u4f7f\u7528\u5bc6\u7801\u54c8\u5e0c","text":"<p>\u5982\u679c\u4f60\u7684\u6570\u636e\u5e93\u88ab\u76d7\uff0c\u76d7\u8d3c\u5c06\u65e0\u6cd5\u83b7\u53d6\u7528\u6237\u7684 \u660e\u6587\u5bc6\u7801\uff0c\u53ea\u80fd\u62ff\u5230\u54c8\u5e0c\u503c\u3002</p> <p>\u56e0\u6b64\uff0c\u76d7\u8d3c\u5c06\u65e0\u6cd5\u5c1d\u8bd5\u5c06\u8be5\u5bc6\u7801\u7528\u4e8e\u53e6\u4e00\u4e2a\u7cfb\u7edf\uff08\u56e0\u4e3a\u8bb8\u591a\u7528\u6237\u5728\u5404\u5904\u4f7f\u7528\u76f8\u540c\u7684\u5bc6\u7801\uff0c\u8fd9\u5c06\u975e\u5e38\u5371\u9669\uff09\u3002</p> <p>Tip</p> <p>\u4f60\u53ef\u4ee5\u4f7f\u7528 passlib \u6765\u54c8\u5e0c\u5bc6\u7801\u3002</p> <p>\u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u4e00\u4e2a\u4f2a\u54c8\u5e0c\u51fd\u6570\u6765\u4e13\u6ce8\u4e8e\u6570\u636e\u53d8\u66f4\u3002\ud83e\udd21</p>"},{"location":"tutorial/fastapi/update-extra-data/#_3","title":"\u4f7f\u7528\u9644\u52a0\u6570\u636e\u66f4\u65b0\u6a21\u578b","text":"<p><code>Hero</code> \u8868\u6a21\u578b\u73b0\u5728\u5c06\u5b58\u50a8\u4e00\u4e2a\u65b0\u7684\u5b57\u6bb5 <code>hashed_password</code>\u3002</p> <p>\u800c <code>HeroCreate</code> \u548c <code>HeroUpdate</code> \u7684\u6570\u636e\u6a21\u578b\u4e5f\u5c06\u589e\u52a0\u4e00\u4e2a\u65b0\u7684\u5b57\u6bb5 <code>password</code>\uff0c\u7528\u4e8e\u5305\u542b\u5ba2\u6237\u7aef\u53d1\u9001\u7684\u660e\u6587\u5bc6\u7801\u3002</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    hashed_password: str = Field()\n\n\nclass HeroCreate(HeroBase):\n    password: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n    password: str | None = None\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    hashed_password: str = Field()\n\n\nclass HeroCreate(HeroBase):\n    password: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    password: Optional[str] = None\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    hashed_password: str = Field()\n\n\nclass HeroCreate(HeroBase):\n    password: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    password: Optional[str] = None\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    hashed_password: str = Field()\n\n\nclass HeroCreate(HeroBase):\n    password: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n    password: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef hash_password(password: str) -&gt; str:\n    # Use something like passlib here\n    return f\"not really hashed {password} hehehe\"\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    hashed_password = hash_password(hero.password)\n    with Session(engine) as session:\n        extra_data = {\"hashed_password\": hashed_password}\n        db_hero = Hero.model_validate(hero, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        extra_data = {}\n        if \"password\" in hero_data:\n            password = hero_data[\"password\"]\n            hashed_password = hash_password(password)\n            extra_data[\"hashed_password\"] = hashed_password\n        db_hero.sqlmodel_update(hero_data, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    hashed_password: str = Field()\n\n\nclass HeroCreate(HeroBase):\n    password: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    password: Optional[str] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef hash_password(password: str) -&gt; str:\n    # Use something like passlib here\n    return f\"not really hashed {password} hehehe\"\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    hashed_password = hash_password(hero.password)\n    with Session(engine) as session:\n        extra_data = {\"hashed_password\": hashed_password}\n        db_hero = Hero.model_validate(hero, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        extra_data = {}\n        if \"password\" in hero_data:\n            password = hero_data[\"password\"]\n            hashed_password = hash_password(password)\n            extra_data[\"hashed_password\"] = hashed_password\n        db_hero.sqlmodel_update(hero_data, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    hashed_password: str = Field()\n\n\nclass HeroCreate(HeroBase):\n    password: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    password: Optional[str] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef hash_password(password: str) -&gt; str:\n    # Use something like passlib here\n    return f\"not really hashed {password} hehehe\"\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    hashed_password = hash_password(hero.password)\n    with Session(engine) as session:\n        extra_data = {\"hashed_password\": hashed_password}\n        db_hero = Hero.model_validate(hero, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        extra_data = {}\n        if \"password\" in hero_data:\n            password = hero_data[\"password\"]\n            hashed_password = hash_password(password)\n            extra_data[\"hashed_password\"] = hashed_password\n        db_hero.sqlmodel_update(hero_data, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <p>\u5f53\u5ba2\u6237\u7aef\u521b\u5efa\u4e00\u4e2a\u65b0\u82f1\u96c4\u65f6\uff0c\u4ed6\u4eec\u4f1a\u5728\u8bf7\u6c42\u4f53\u4e2d\u53d1\u9001 <code>password</code> \u5b57\u6bb5\u3002</p> <p>\u5f53\u4ed6\u4eec\u66f4\u65b0\u4e00\u4e2a\u82f1\u96c4\u65f6\uff0c\u4e5f\u53ef\u4ee5\u5728\u8bf7\u6c42\u4f53\u4e2d\u53d1\u9001 <code>password</code> \u5b57\u6bb5\u6765\u66f4\u65b0\u5bc6\u7801\u3002</p>"},{"location":"tutorial/fastapi/update-extra-data/#_4","title":"\u54c8\u5e0c\u5bc6\u7801","text":"<p>\u5e94\u7528\u7a0b\u5e8f\u5c06\u4f7f\u7528 <code>HeroCreate</code> \u6a21\u578b\u63a5\u6536\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u6570\u636e\u3002</p> <p>\u8fd9\u4e2a\u6a21\u578b\u5305\u542b\u4e86\u660e\u6587\u5bc6\u7801\u7684 <code>password</code> \u5b57\u6bb5\uff0c\u800c\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528\u8fd9\u4e2a\u5bc6\u7801\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u4ece\u4e2d\u751f\u6210\u4e00\u4e2a\u54c8\u5e0c\u503c\u3002</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef hash_password(password: str) -&gt; str:\n    # Use something like passlib here\n    return f\"not really hashed {password} hehehe\"\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    hashed_password = hash_password(hero.password)\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef hash_password(password: str) -&gt; str:\n    # Use something like passlib here\n    return f\"not really hashed {password} hehehe\"\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    hashed_password = hash_password(hero.password)\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef hash_password(password: str) -&gt; str:\n    # Use something like passlib here\n    return f\"not really hashed {password} hehehe\"\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    hashed_password = hash_password(hero.password)\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    hashed_password: str = Field()\n\n\nclass HeroCreate(HeroBase):\n    password: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n    password: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef hash_password(password: str) -&gt; str:\n    # Use something like passlib here\n    return f\"not really hashed {password} hehehe\"\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    hashed_password = hash_password(hero.password)\n    with Session(engine) as session:\n        extra_data = {\"hashed_password\": hashed_password}\n        db_hero = Hero.model_validate(hero, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        extra_data = {}\n        if \"password\" in hero_data:\n            password = hero_data[\"password\"]\n            hashed_password = hash_password(password)\n            extra_data[\"hashed_password\"] = hashed_password\n        db_hero.sqlmodel_update(hero_data, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    hashed_password: str = Field()\n\n\nclass HeroCreate(HeroBase):\n    password: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    password: Optional[str] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef hash_password(password: str) -&gt; str:\n    # Use something like passlib here\n    return f\"not really hashed {password} hehehe\"\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    hashed_password = hash_password(hero.password)\n    with Session(engine) as session:\n        extra_data = {\"hashed_password\": hashed_password}\n        db_hero = Hero.model_validate(hero, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        extra_data = {}\n        if \"password\" in hero_data:\n            password = hero_data[\"password\"]\n            hashed_password = hash_password(password)\n            extra_data[\"hashed_password\"] = hashed_password\n        db_hero.sqlmodel_update(hero_data, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    hashed_password: str = Field()\n\n\nclass HeroCreate(HeroBase):\n    password: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    password: Optional[str] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef hash_password(password: str) -&gt; str:\n    # Use something like passlib here\n    return f\"not really hashed {password} hehehe\"\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    hashed_password = hash_password(hero.password)\n    with Session(engine) as session:\n        extra_data = {\"hashed_password\": hashed_password}\n        db_hero = Hero.model_validate(hero, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        extra_data = {}\n        if \"password\" in hero_data:\n            password = hero_data[\"password\"]\n            hashed_password = hash_password(password)\n            extra_data[\"hashed_password\"] = hashed_password\n        db_hero.sqlmodel_update(hero_data, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre>"},{"location":"tutorial/fastapi/update-extra-data/#_5","title":"\u4f7f\u7528\u9644\u52a0\u6570\u636e\u521b\u5efa\u5bf9\u8c61","text":"<p>\u73b0\u5728\u6211\u4eec\u9700\u8981\u521b\u5efa\u6570\u636e\u5e93\u4e2d\u7684\u82f1\u96c4\u3002</p> <p>\u5728\u4e4b\u524d\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u7c7b\u4f3c\u8fd9\u6837\u7684\u4ee3\u7801\uff1a</p> <pre><code>db_hero = Hero.model_validate(hero)\n</code></pre> <p>\u8fd9\u5c06\u4ece\u8bf7\u6c42\u4e2d\u63a5\u6536\u5230\u7684 <code>HeroCreate</code>\uff08\u6570\u636e\u6a21\u578b\uff09\u5bf9\u8c61\u521b\u5efa\u4e00\u4e2a <code>Hero</code>\uff08\u8868\u6a21\u578b\uff09\u5bf9\u8c61\u3002</p> <p>\u8fd9\u5f88\u597d\u2026\u2026\u4f46\u7531\u4e8e <code>Hero</code> \u6ca1\u6709 <code>password</code> \u5b57\u6bb5\uff0c\u5b83\u4e0d\u4f1a\u4ece\u5305\u542b\u8be5\u5b57\u6bb5\u7684 <code>HeroCreate</code> \u5bf9\u8c61\u4e2d\u63d0\u53d6\u5b83\u3002</p> <p><code>Hero</code> \u5b9e\u9645\u4e0a\u6709\u4e00\u4e2a <code>hashed_password</code> \u5b57\u6bb5\uff0c\u4f46\u6211\u4eec\u6ca1\u6709\u63d0\u4f9b\u5b83\u3002\u6211\u4eec\u9700\u8981\u4e00\u79cd\u65b9\u5f0f\u6765\u63d0\u4f9b\u5b83\u2026\u2026</p>"},{"location":"tutorial/fastapi/update-extra-data/#_6","title":"\u5b57\u5178\u66f4\u65b0","text":"<p>\u8ba9\u6211\u4eec\u6682\u505c\u4e00\u4e0b\uff0c\u68c0\u67e5\u4e00\u4e0b\uff0c\u5f53\u5904\u7406\u5b57\u5178\u65f6\uff0c\u6709\u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u7528\u53e6\u4e00\u4e2a\u5b57\u5178\u4e2d\u7684\u9644\u52a0\u6570\u636e\u6765 <code>update</code> \u5b57\u5178\uff0c\u7c7b\u4f3c\u8fd9\u6837\uff1a</p> <pre><code>db_user_dict = {\n    \"name\": \"Deadpond\",\n    \"secret_name\": \"Dive Wilson\",\n    \"age\": None,\n}\n\nhashed_password = \"fakehashedpassword\"\n\nextra_data = {\n    \"hashed_password\": hashed_password,\n    \"age\": 32,\n}\n\ndb_user_dict.update(extra_data)\n\nprint(db_user_dict)\n\n# {\n#     \"name\": \"Deadpond\",\n#     \"secret_name\": \"Dive Wilson\",\n#     \"age\": 32,\n#     \"hashed_password\": \"fakehashedpassword\",\n# }\n</code></pre> <p>\u8fd9\u4e2a <code>update</code> \u65b9\u6cd5\u5141\u8bb8\u6211\u4eec\u7528\u53e6\u4e00\u4e2a\u5b57\u5178\u4e2d\u7684\u6570\u636e\u6dfb\u52a0\u548c\u8986\u76d6\u539f\u59cb\u5b57\u5178\u4e2d\u7684\u5185\u5bb9\u3002</p> <p>\u73b0\u5728\uff0c<code>db_user_dict</code> \u66f4\u65b0\u4e86 <code>age</code> \u5b57\u6bb5\uff0c\u503c\u4e3a <code>32</code>\uff0c\u800c\u4e0d\u662f <code>None</code>\uff0c\u66f4\u91cd\u8981\u7684\u662f\uff0c\u5b83\u6709\u4e86\u65b0\u7684 <code>hashed_password</code> \u5b57\u6bb5\u3002</p>"},{"location":"tutorial/fastapi/update-extra-data/#_7","title":"\u4f7f\u7528\u9644\u52a0\u6570\u636e\u521b\u5efa\u6a21\u578b\u5bf9\u8c61","text":"<p>\u7c7b\u4f3c\u4e8e\u5b57\u5178\u4e2d\u7684 <code>update</code> \u65b9\u6cd5\uff0cSQLModel \u6a21\u578b\u5728 <code>Hero.model_validate()</code> \u4e2d\u4e5f\u6709\u4e00\u4e2a <code>update</code> \u53c2\u6570\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u5305\u542b\u9644\u52a0\u6570\u636e\u7684\u5b57\u5178\uff0c\u6216\u8005\u662f\u5e94\u8be5\u4f18\u5148\u4f7f\u7528\u7684\u6570\u636e\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    hashed_password = hash_password(hero.password)\n    with Session(engine) as session:\n        extra_data = {\"hashed_password\": hashed_password}\n        db_hero = Hero.model_validate(hero, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    hashed_password = hash_password(hero.password)\n    with Session(engine) as session:\n        extra_data = {\"hashed_password\": hashed_password}\n        db_hero = Hero.model_validate(hero, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    hashed_password = hash_password(hero.password)\n    with Session(engine) as session:\n        extra_data = {\"hashed_password\": hashed_password}\n        db_hero = Hero.model_validate(hero, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    hashed_password: str = Field()\n\n\nclass HeroCreate(HeroBase):\n    password: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n    password: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef hash_password(password: str) -&gt; str:\n    # Use something like passlib here\n    return f\"not really hashed {password} hehehe\"\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    hashed_password = hash_password(hero.password)\n    with Session(engine) as session:\n        extra_data = {\"hashed_password\": hashed_password}\n        db_hero = Hero.model_validate(hero, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        extra_data = {}\n        if \"password\" in hero_data:\n            password = hero_data[\"password\"]\n            hashed_password = hash_password(password)\n            extra_data[\"hashed_password\"] = hashed_password\n        db_hero.sqlmodel_update(hero_data, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    hashed_password: str = Field()\n\n\nclass HeroCreate(HeroBase):\n    password: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    password: Optional[str] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef hash_password(password: str) -&gt; str:\n    # Use something like passlib here\n    return f\"not really hashed {password} hehehe\"\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    hashed_password = hash_password(hero.password)\n    with Session(engine) as session:\n        extra_data = {\"hashed_password\": hashed_password}\n        db_hero = Hero.model_validate(hero, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        extra_data = {}\n        if \"password\" in hero_data:\n            password = hero_data[\"password\"]\n            hashed_password = hash_password(password)\n            extra_data[\"hashed_password\"] = hashed_password\n        db_hero.sqlmodel_update(hero_data, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    hashed_password: str = Field()\n\n\nclass HeroCreate(HeroBase):\n    password: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    password: Optional[str] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef hash_password(password: str) -&gt; str:\n    # Use something like passlib here\n    return f\"not really hashed {password} hehehe\"\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    hashed_password = hash_password(hero.password)\n    with Session(engine) as session:\n        extra_data = {\"hashed_password\": hashed_password}\n        db_hero = Hero.model_validate(hero, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        extra_data = {}\n        if \"password\" in hero_data:\n            password = hero_data[\"password\"]\n            hashed_password = hash_password(password)\n            extra_data[\"hashed_password\"] = hashed_password\n        db_hero.sqlmodel_update(hero_data, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <p>\u73b0\u5728\uff0c<code>db_hero</code>\uff08\u5373 \u8868\u6a21\u578b <code>Hero</code>\uff09\u5c06\u4ece <code>hero</code>\uff08\u5373 \u6570\u636e\u6a21\u578b <code>HeroCreate</code>\uff09\u4e2d\u63d0\u53d6\u5176\u503c\uff0c\u7136\u540e\u5b83\u5c06\u4f7f\u7528\u6765\u81ea\u5b57\u5178 <code>extra_data</code> \u7684\u9644\u52a0\u6570\u636e \u66f4\u65b0 \u5176\u503c\u3002</p> <p>\u5b83\u53ea\u4f1a\u91c7\u7528 <code>Hero</code> \u4e2d\u5b9a\u4e49\u7684\u5b57\u6bb5\uff0c\u56e0\u6b64 \u4e0d\u4f1a\u83b7\u53d6 <code>HeroCreate</code> \u4e2d\u7684 <code>password</code>\u3002\u5b83\u8fd8\u5c06 \u4ece\u4f20\u9012\u7ed9 <code>update</code> \u53c2\u6570\u7684\u5b57\u5178\u4e2d\u83b7\u53d6\u5176\u503c\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4e3a <code>hashed_password</code>\u3002</p> <p>\u5982\u679c <code>hero</code> \u548c <code>extra_data</code> \u4e2d\u90fd\u6709\u67d0\u4e2a\u5b57\u6bb5\uff0c\u4f20\u9012\u7ed9 <code>update</code> \u7684 <code>extra_data</code> \u4e2d\u7684\u503c\u5c06\u4f18\u5148\u3002</p>"},{"location":"tutorial/fastapi/update-extra-data/#_8","title":"\u4f7f\u7528\u9644\u52a0\u6570\u636e\u66f4\u65b0","text":"<p>\u73b0\u5728\u5047\u8bbe\u6211\u4eec\u8981 \u66f4\u65b0\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u4e8e\u6570\u636e\u5e93\u4e2d\u7684\u82f1\u96c4\u3002</p> <p>\u4e0e\u4e4b\u524d\u76f8\u540c\uff0c\u4e3a\u4e86\u907f\u514d\u5220\u9664\u73b0\u6709\u6570\u636e\uff0c\u6211\u4eec\u5728\u8c03\u7528 <code>hero.model_dump()</code> \u65f6\u5c06\u4f7f\u7528 <code>exclude_unset=True</code>\uff0c\u4ee5\u4ec5\u83b7\u53d6\u5ba2\u6237\u7aef\u53d1\u9001\u7684\u6570\u636e\u7684\u5b57\u5178\u3002</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    hashed_password: str = Field()\n\n\nclass HeroCreate(HeroBase):\n    password: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n    password: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef hash_password(password: str) -&gt; str:\n    # Use something like passlib here\n    return f\"not really hashed {password} hehehe\"\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    hashed_password = hash_password(hero.password)\n    with Session(engine) as session:\n        extra_data = {\"hashed_password\": hashed_password}\n        db_hero = Hero.model_validate(hero, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        extra_data = {}\n        if \"password\" in hero_data:\n            password = hero_data[\"password\"]\n            hashed_password = hash_password(password)\n            extra_data[\"hashed_password\"] = hashed_password\n        db_hero.sqlmodel_update(hero_data, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    hashed_password: str = Field()\n\n\nclass HeroCreate(HeroBase):\n    password: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    password: Optional[str] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef hash_password(password: str) -&gt; str:\n    # Use something like passlib here\n    return f\"not really hashed {password} hehehe\"\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    hashed_password = hash_password(hero.password)\n    with Session(engine) as session:\n        extra_data = {\"hashed_password\": hashed_password}\n        db_hero = Hero.model_validate(hero, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        extra_data = {}\n        if \"password\" in hero_data:\n            password = hero_data[\"password\"]\n            hashed_password = hash_password(password)\n            extra_data[\"hashed_password\"] = hashed_password\n        db_hero.sqlmodel_update(hero_data, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    hashed_password: str = Field()\n\n\nclass HeroCreate(HeroBase):\n    password: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    password: Optional[str] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef hash_password(password: str) -&gt; str:\n    # Use something like passlib here\n    return f\"not really hashed {password} hehehe\"\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    hashed_password = hash_password(hero.password)\n    with Session(engine) as session:\n        extra_data = {\"hashed_password\": hashed_password}\n        db_hero = Hero.model_validate(hero, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        extra_data = {}\n        if \"password\" in hero_data:\n            password = hero_data[\"password\"]\n            hashed_password = hash_password(password)\n            extra_data[\"hashed_password\"] = hashed_password\n        db_hero.sqlmodel_update(hero_data, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <p>\u73b0\u5728\uff0c\u8fd9\u4e2a <code>hero_data</code> \u5b57\u5178\u53ef\u80fd\u5305\u542b\u4e00\u4e2a <code>password</code> \u5b57\u6bb5\u3002\u6211\u4eec\u9700\u8981\u68c0\u67e5\u5b83\uff0c\u5982\u679c\u5b58\u5728\uff0c\u5c31\u9700\u8981\u751f\u6210 <code>hashed_password</code>\u3002</p> <p>\u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8be5 <code>hashed_password</code> \u653e\u5165\u5b57\u5178\u4e2d\u3002</p> <p>\u63a5\u7740\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 <code>db_hero.sqlmodel_update()</code> \u65b9\u6cd5\u66f4\u65b0 <code>db_hero</code> \u5bf9\u8c61\u3002</p> <p>\u8be5\u65b9\u6cd5\u63a5\u53d7\u4e00\u4e2a\u6a21\u578b\u5bf9\u8c61\u6216\u5305\u542b\u8981\u66f4\u65b0\u7684\u5bf9\u8c61\u6570\u636e\u7684\u5b57\u5178\uff0c\u5e76\u4e14\u8fd8\u6709\u4e00\u4e2a \u9644\u52a0\u7684 <code>update</code> \u53c2\u6570\uff0c\u7528\u4e8e\u4f20\u9012\u9644\u52a0\u6570\u636e\u3002</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        extra_data = {}\n        if \"password\" in hero_data:\n            password = hero_data[\"password\"]\n            hashed_password = hash_password(password)\n            extra_data[\"hashed_password\"] = hashed_password\n        db_hero.sqlmodel_update(hero_data, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        extra_data = {}\n        if \"password\" in hero_data:\n            password = hero_data[\"password\"]\n            hashed_password = hash_password(password)\n            extra_data[\"hashed_password\"] = hashed_password\n        db_hero.sqlmodel_update(hero_data, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        extra_data = {}\n        if \"password\" in hero_data:\n            password = hero_data[\"password\"]\n            hashed_password = hash_password(password)\n            extra_data[\"hashed_password\"] = hashed_password\n        db_hero.sqlmodel_update(hero_data, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    hashed_password: str = Field()\n\n\nclass HeroCreate(HeroBase):\n    password: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n    password: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef hash_password(password: str) -&gt; str:\n    # Use something like passlib here\n    return f\"not really hashed {password} hehehe\"\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    hashed_password = hash_password(hero.password)\n    with Session(engine) as session:\n        extra_data = {\"hashed_password\": hashed_password}\n        db_hero = Hero.model_validate(hero, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        extra_data = {}\n        if \"password\" in hero_data:\n            password = hero_data[\"password\"]\n            hashed_password = hash_password(password)\n            extra_data[\"hashed_password\"] = hashed_password\n        db_hero.sqlmodel_update(hero_data, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    hashed_password: str = Field()\n\n\nclass HeroCreate(HeroBase):\n    password: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    password: Optional[str] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef hash_password(password: str) -&gt; str:\n    # Use something like passlib here\n    return f\"not really hashed {password} hehehe\"\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    hashed_password = hash_password(hero.password)\n    with Session(engine) as session:\n        extra_data = {\"hashed_password\": hashed_password}\n        db_hero = Hero.model_validate(hero, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        extra_data = {}\n        if \"password\" in hero_data:\n            password = hero_data[\"password\"]\n            hashed_password = hash_password(password)\n            extra_data[\"hashed_password\"] = hashed_password\n        db_hero.sqlmodel_update(hero_data, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    hashed_password: str = Field()\n\n\nclass HeroCreate(HeroBase):\n    password: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    password: Optional[str] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef hash_password(password: str) -&gt; str:\n    # Use something like passlib here\n    return f\"not really hashed {password} hehehe\"\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    hashed_password = hash_password(hero.password)\n    with Session(engine) as session:\n        extra_data = {\"hashed_password\": hashed_password}\n        db_hero = Hero.model_validate(hero, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        extra_data = {}\n        if \"password\" in hero_data:\n            password = hero_data[\"password\"]\n            hashed_password = hash_password(password)\n            extra_data[\"hashed_password\"] = hashed_password\n        db_hero.sqlmodel_update(hero_data, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <p>Tip</p> <p><code>db_hero.sqlmodel_update()</code> \u65b9\u6cd5\u662f\u5728 SQLModel 0.0.16 \u4e2d\u6dfb\u52a0\u7684\u3002\ud83d\ude0e</p>"},{"location":"tutorial/fastapi/update-extra-data/#_9","title":"\u5c0f\u7ed3","text":"<p>\u4f60\u53ef\u4ee5\u5728 <code>Hero.model_validate()</code> \u4e2d\u4f7f\u7528 <code>update</code> \u53c2\u6570\uff0c\u5728\u521b\u5efa\u65b0\u5bf9\u8c61\u65f6\u63d0\u4f9b\u9644\u52a0\u6570\u636e\uff1b\u5e76\u4e14\u53ef\u4ee5\u5728\u66f4\u65b0\u73b0\u6709\u5bf9\u8c61\u65f6\uff0c\u4f7f\u7528 <code>Hero.sqlmodel_update()</code> \u63d0\u4f9b\u9644\u52a0\u6570\u636e\u3002\ud83e\udd13</p>"},{"location":"tutorial/fastapi/update/","title":"\u4f7f\u7528 FastAPI \u66f4\u65b0\u6570\u636e","text":"<p>\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u5982\u4f55\u4f7f\u7528 FastAPI \u7684 \u8def\u5f84\u64cd\u4f5c \u6765\u66f4\u65b0\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u3002</p>"},{"location":"tutorial/fastapi/update/#heroupdate","title":"<code>HeroUpdate</code> \u6a21\u578b","text":"<p>\u6211\u4eec\u5e0c\u671b\u5ba2\u6237\u7aef\u80fd\u591f\u66f4\u65b0\u82f1\u96c4\u7684 <code>name</code>\u3001<code>secret_name</code> \u548c <code>age</code>\u3002</p> <p>\u4f46\u662f\uff0c\u6211\u4eec\u4e0d\u5e0c\u671b\u4ed6\u4eec\u5728\u66f4\u65b0\u5355\u4e2a\u5b57\u6bb5\u65f6\u5fc5\u987b\u91cd\u65b0\u63d0\u4f9b\u6240\u6709\u6570\u636e\u3002</p> <p>\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u5c06\u8fd9\u4e9b\u5b57\u6bb5 \u6807\u8bb0\u4e3a\u53ef\u9009\u3002</p> <p>\u7531\u4e8e <code>HeroBase</code> \u4e2d\u7684\u4e00\u4e9b\u5b57\u6bb5\u662f \u5fc5\u9700\u7684\uff0c\u800c\u4e0d\u662f\u53ef\u9009\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u9700\u8981 \u521b\u5efa\u4e00\u4e2a\u65b0\u6a21\u578b\u3002</p> <p>Tip</p> <p>\u8fd9\u662f\u4e00\u4e2a\u53ef\u80fd\u66f4\u9002\u5408\u4f7f\u7528 \u72ec\u7acb\u6a21\u578b \u7684\u60c5\u51b5\uff0c\u800c\u4e0d\u662f\u8bd5\u56fe\u901a\u8fc7\u521b\u5efa\u590d\u6742\u7684\u7ee7\u627f\u6a21\u578b\u6811\u6765\u89e3\u51b3\u95ee\u9898\u3002</p> <p>\u56e0\u4e3a\u6bcf\u4e2a\u5b57\u6bb5 \u5b9e\u9645\u4e0a\u662f\u4e0d\u540c\u7684\uff08\u6211\u4eec\u53ea\u662f\u5c06\u5176\u66f4\u6539\u4e3a <code>Optional</code>\uff0c\u4f46\u8fd9\u5df2\u7ecf\u4f7f\u5b83\u4e0d\u540c\uff09\uff0c\u56e0\u6b64\u5c06\u5b83\u4eec\u653e\u5165\u81ea\u5df1\u7684\u6a21\u578b\u4e2d\u662f\u5408\u7406\u7684\u3002</p> <p>\u6240\u4ee5\uff0c\u6211\u4eec\u6765\u521b\u5efa\u8fd9\u4e2a\u65b0\u7684 <code>HeroUpdate</code> \u6a21\u578b\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <p>\u8fd9\u51e0\u4e4e\u4e0e <code>HeroBase</code> \u76f8\u540c\uff0c\u4f46\u6240\u6709\u5b57\u6bb5\u90fd\u662f\u53ef\u9009\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u4e0d\u80fd\u7b80\u5355\u5730\u4ece <code>HeroBase</code> \u7ee7\u627f\u3002</p>"},{"location":"tutorial/fastapi/update/#_1","title":"\u521b\u5efa\u66f4\u65b0\u8def\u5f84\u64cd\u4f5c","text":"<p>\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u5728 \u8def\u5f84\u64cd\u4f5c \u4e2d\u4f7f\u7528\u8fd9\u4e2a\u6a21\u578b\u6765\u66f4\u65b0\u82f1\u96c4\u3002</p> <p>\u6211\u4eec\u5c06\u4f7f\u7528 <code>PATCH</code> HTTP \u64cd\u4f5c\u3002\u8fd9\u7528\u4e8e \u90e8\u5206\u66f4\u65b0\u6570\u636e\uff0c\u6b63\u662f\u6211\u4eec\u6240\u505a\u7684\u64cd\u4f5c\u3002</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <p>\u6211\u4eec\u8fd8\u4ece \u8def\u5f84\u53c2\u6570 \u548c\u8bf7\u6c42\u4f53\u4e2d\u8bfb\u53d6 <code>hero_id</code> \u548c <code>HeroUpdate</code>\u3002</p>"},{"location":"tutorial/fastapi/update/#_2","title":"\u8bfb\u53d6\u73b0\u6709\u7684\u82f1\u96c4","text":"<p>\u6211\u4eec\u901a\u8fc7 hero_id \u83b7\u53d6\u60f3\u8981\u66f4\u65b0\u7684\u82f1\u96c4\u7684 ID\u3002</p> <p>\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528\u4e0e \u8bfb\u53d6\u5355\u4e2a\u82f1\u96c4 \u65f6\u76f8\u540c\u7684\u903b\u8f91\u4ece\u6570\u636e\u5e93\u4e2d\u8bfb\u53d6\u82f1\u96c4\uff0c\u68c0\u67e5\u5176\u662f\u5426\u5b58\u5728\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u53ef\u80fd\u4f1a\u629b\u51fa\u9519\u8bef\u7ed9\u5ba2\u6237\u7aef\uff0c\u7b49\u7b49\u3002</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre>"},{"location":"tutorial/fastapi/update/#_3","title":"\u83b7\u53d6\u65b0\u7684\u6570\u636e","text":"<p><code>HeroUpdate</code> \u6a21\u578b\u5305\u542b\u6240\u6709\u5177\u6709 \u9ed8\u8ba4\u503c \u7684\u5b57\u6bb5\uff0c\u56e0\u4e3a\u5b83\u4eec\u90fd\u662f\u53ef\u9009\u7684\uff0c\u8fd9\u6b63\u662f\u6211\u4eec\u6240\u9700\u8981\u7684\u3002</p> <p>\u4f46\u8fd9\u4e5f\u610f\u5473\u7740\uff0c\u5982\u679c\u6211\u4eec\u76f4\u63a5\u8c03\u7528 <code>hero.model_dump()</code>\uff0c\u6211\u4eec\u4f1a\u5f97\u5230\u4e00\u4e2a\u5b57\u5178\uff0c\u5176\u4e2d\u53ef\u80fd\u5305\u542b\u591a\u4e2a\u6216\u6240\u6709\u9ed8\u8ba4\u503c\u5b57\u6bb5\uff0c\u4f8b\u5982\uff1a</p> <pre><code>{\n    \"name\": None,\n    \"secret_name\": None,\n    \"age\": None,\n}\n</code></pre> <p>\u7136\u540e\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u7528\u8fd9\u4e9b\u6570\u636e\u66f4\u65b0\u6570\u636e\u5e93\u4e2d\u7684\u82f1\u96c4\uff0c\u6211\u4eec\u5c06\u4f1a\u5220\u9664\u4efb\u4f55\u73b0\u6709\u7684\u503c\uff0c\u800c\u8fd9\u53ef\u80fd \u4e0d\u662f\u5ba2\u6237\u7aef\u7684\u610f\u56fe\u3002</p> <p>\u5e78\u8fd0\u7684\u662f\uff0cPydantic \u6a21\u578b\uff08\u4ee5\u53ca SQLModel \u6a21\u578b\uff09\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53c2\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 <code>.model_dump()</code> \u65b9\u6cd5\u4e2d\u4f20\u9012\uff1a<code>exclude_unset=True</code>\u3002</p> <p>\u8fd9\u544a\u8bc9 Pydantic \u4e0d\u5305\u62ec \u5ba2\u6237\u7aef \u6ca1\u6709\u53d1\u9001 \u7684\u503c\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5b83\u53ea\u4f1a \u5305\u62ec \u5ba2\u6237\u7aef \u53d1\u9001\u7684\u503c\u3002</p> <p>\u56e0\u6b64\uff0c\u5982\u679c\u5ba2\u6237\u7aef\u53d1\u9001\u4e00\u4e2a\u6ca1\u6709\u503c\u7684 JSON\uff1a</p> <pre><code>{}\n</code></pre> <p>\u90a3\u4e48\uff0c\u4f7f\u7528 <code>hero.model_dump(exclude_unset=True)</code> \u83b7\u53d6\u7684\u5b57\u5178\u5c06\u662f\uff1a</p> <pre><code>{}\n</code></pre> <p>\u4f46\u5982\u679c\u5ba2\u6237\u7aef\u53d1\u9001\u7684 JSON \u5305\u542b\uff1a</p> <pre><code>{\n    \"name\": \"Deadpuddle\"\n}\n</code></pre> <p>\u90a3\u4e48\uff0c\u4f7f\u7528 <code>hero.model_dump(exclude_unset=True)</code> \u83b7\u53d6\u7684\u5b57\u5178\u5c06\u662f\uff1a</p> <pre><code>{\n    \"name\": \"Deadpuddle\"\n}\n</code></pre> <p>\u7136\u540e\uff0c\u6211\u4eec\u4f7f\u7528\u8fd9\u4e2a\u6570\u636e\u6765\u66f4\u65b0\u5ba2\u6237\u7aef\u5b9e\u9645\u53d1\u9001\u7684\u6570\u636e\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <p>Tip</p> <p>\u5728 SQLModel 0.0.14 \u4e4b\u524d\uff0c\u65b9\u6cd5\u540d\u662f <code>hero.dict(exclude_unset=True)</code>\uff0c\u4f46\u4e3a\u4e86\u4e0e Pydantic v2 \u4fdd\u6301\u4e00\u81f4\uff0c\u5b83\u88ab\u91cd\u547d\u540d\u4e3a <code>hero.model_dump(exclude_unset=True)</code>\u3002</p>"},{"location":"tutorial/fastapi/update/#_4","title":"\u5728\u6570\u636e\u5e93\u4e2d\u66f4\u65b0\u82f1\u96c4","text":"<p>\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u6709\u4e86 \u5ba2\u6237\u7aef\u53d1\u9001\u7684\u6570\u636e\u5b57\u5178\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 <code>db_hero.sqlmodel_update()</code> \u65b9\u6cd5\u6765\u66f4\u65b0\u5bf9\u8c61 <code>db_hero</code>\u3002</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <p>Tip</p> <p><code>db_hero.sqlmodel_update()</code> \u65b9\u6cd5\u662f\u5728 SQLModel 0.0.16 \u4e2d\u65b0\u589e\u7684\u3002\ud83e\udd13</p> <p>\u5728\u90a3\u4e4b\u524d\uff0c\u4f60\u9700\u8981\u624b\u52a8\u83b7\u53d6\u503c\u5e76\u4f7f\u7528 <code>setattr()</code> \u8bbe\u7f6e\u5b83\u4eec\u3002</p> <p><code>db_hero.sqlmodel_update()</code> \u65b9\u6cd5\u63a5\u53d7\u4e00\u4e2a\u6a21\u578b\u5bf9\u8c61\u6216\u5b57\u5178\u4f5c\u4e3a\u53c2\u6570\u3002</p> <p>\u5bf9\u4e8e \u539f\u59cb \u6a21\u578b\u5bf9\u8c61\uff08\u5728\u6b64\u793a\u4f8b\u4e2d\u4e3a <code>db_hero</code>\uff09\u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bb5\uff0c\u5b83\u4f1a\u68c0\u67e5\u8be5\u5b57\u6bb5\u662f\u5426\u5728 \u53c2\u6570\uff08\u5728\u6b64\u793a\u4f8b\u4e2d\u4e3a <code>hero_data</code>\uff09\u4e2d\u5b58\u5728\uff0c\u7136\u540e\u4f7f\u7528\u63d0\u4f9b\u7684\u503c\u8fdb\u884c\u66f4\u65b0\u3002</p>"},{"location":"tutorial/fastapi/update/#_5","title":"\u79fb\u9664\u5b57\u6bb5","text":"<p>\u8fd9\u91cc\u6709\u4e00\u4e2a\u9644\u52a0\u529f\u80fd\u3002\ud83c\udf81</p> <p>\u5f53\u83b7\u53d6\u5ba2\u6237\u7aef\u53d1\u9001\u7684\u6570\u636e\u5b57\u5178\u65f6\uff0c\u6211\u4eec\u53ea\u5305\u542b \u5ba2\u6237\u7aef\u5b9e\u9645\u53d1\u9001\u7684\u5185\u5bb9\u3002</p> <p>\u8fd9\u542c\u8d77\u6765\u5f88\u7b80\u5355\uff0c\u4f46\u5b83\u6709\u4e00\u4e9b\u989d\u5916\u7684\u7ec6\u8282\uff0c\u6210\u4e3a\u4e86 \u5f88\u68d2\u7684\u7279\u6027\u3002\u2728</p> <p>\u6211\u4eec \u4e0d\u662f\u7b80\u5355\u5730\u7701\u7565 \u5177\u6709 \u9ed8\u8ba4\u503c \u7684\u6570\u636e\u3002</p> <p>\u6211\u4eec\u4e5f \u4e0d\u662f\u7b80\u5355\u5730\u7701\u7565 \u4efb\u4f55\u4e3a <code>None</code> \u7684\u6570\u636e\u3002</p> <p>\u8fd9\u610f\u5473\u7740\uff0c\u5982\u679c\u6570\u636e\u5e93\u4e2d\u7684\u6a21\u578b \u6709\u4e00\u4e2a\u4e0e\u9ed8\u8ba4\u503c\u4e0d\u540c\u7684\u503c\uff0c\u5ba2\u6237\u7aef\u53ef\u4ee5 \u5c06\u5176\u91cd\u7f6e\u4e3a\u4e0e\u9ed8\u8ba4\u503c\u76f8\u540c\u7684\u503c\uff0c\u751a\u81f3\u662f <code>None</code>\uff0c\u6211\u4eec \u4ecd\u7136\u4f1a\u6ce8\u610f\u5230 \u5e76 \u6839\u636e\u9700\u8981\u66f4\u65b0 \u5b83\u3002\ud83e\udd2f\ud83d\ude80</p> <p>\u56e0\u6b64\uff0c\u5982\u679c\u5ba2\u6237\u7aef\u60f3\u6709\u610f\u5220\u9664\u82f1\u96c4\u7684 <code>age</code> \u5b57\u6bb5\uff0c\u4ed6\u4eec\u53ea\u9700\u53d1\u9001\u4e00\u4e2a\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\u7684 JSON\uff1a</p> <pre><code>{\n    \"age\": null\n}\n</code></pre> <p>\u7136\u540e\uff0c\u5f53\u4f7f\u7528 <code>hero.model_dump(exclude_unset=True)</code> \u83b7\u53d6\u6570\u636e\u65f6\uff0c\u6211\u4eec\u4f1a\u5f97\u5230\uff1a</p> <pre><code>{\n    \"age\": None\n}\n</code></pre> <p>\u56e0\u6b64\uff0c\u6211\u4eec\u4f1a\u4f7f\u7528\u8be5\u503c\u5e76\u5c06\u6570\u636e\u5e93\u4e2d\u7684 <code>age</code> \u66f4\u65b0\u4e3a <code>None</code>\uff0c\u6b63\u5982\u5ba2\u6237\u7aef\u6240\u5e0c\u671b\u7684\u90a3\u6837\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c<code>age</code> \u8fd9\u91cc\u662f <code>None</code>\uff0c\u5e76\u4e14 \u6211\u4eec\u4ecd\u7136\u68c0\u6d4b\u5230\u4e86\u8fd9\u4e00\u70b9\u3002</p> <p>\u53e6\u5916\uff0c<code>name</code> \u751a\u81f3\u6ca1\u6709\u53d1\u9001\uff0c\u6211\u4eec\u5e76\u6ca1\u6709 \u9519\u8bef\u5730 \u5c06\u5176\u8bbe\u7f6e\u4e3a <code>None</code> \u6216\u5176\u4ed6\u5185\u5bb9\u3002\u6211\u4eec\u53ea\u662f\u6ca1\u6709\u66f4\u6539\u5b83\uff0c\u56e0\u4e3a\u5ba2\u6237\u7aef\u6ca1\u6709\u53d1\u9001\u5b83\uff0c\u6240\u4ee5\u6211\u4eec \u5b8c\u5168\u6ca1\u6709\u95ee\u9898\uff0c\u5373\u4f7f\u5728\u8fd9\u4e9b\u8fb9\u7f18\u60c5\u51b5\u4e2d\u3002\u2728</p> <p>\u8fd9\u4e9b\u662f\u4f7f\u7528 Pydantic \u548c SQLModel \u7684\u4e00\u4e9b\u4f18\u52bf\u3002\ud83c\udf89</p>"},{"location":"tutorial/fastapi/update/#_6","title":"\u603b\u7ed3","text":"<p>\u901a\u8fc7\u5728 SQLModel \u6a21\u578b\uff08\u548c Pydantic \u6a21\u578b\uff09\u4e2d\u4f7f\u7528 <code>.model_dump(exclude_unset=True)</code>\uff0c\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u3001\u6b63\u786e\u5730 \u66f4\u65b0\u6570\u636e\uff0c\u5373\u4f7f\u662f\u5728 \u8fb9\u7f18\u60c5\u51b5 \u4e0b\u3002\ud83d\ude0e</p>"},{"location":"tutorial/many-to-many/","title":"\u591a\u5bf9\u591a - \u4ecb\u7ecd","text":"<p>\u6211\u4eec\u5df2\u7ecf\u4e86\u89e3\u4e86\u5982\u4f55\u5904\u7406\u6570\u636e\u4e2d\u7684 \u4e00\u5bf9\u591a \u5173\u7cfb\u3002</p> <p>\u4f46\u662f\u5982\u4f55\u5904\u7406 \u591a\u5bf9\u591a \u5173\u7cfb\u5462\uff1f</p> <p>\u8ba9\u6211\u4eec\u6765\u63a2\u7d22\u4e00\u4e0b\u3002\ud83d\ude80</p>"},{"location":"tutorial/many-to-many/#_1","title":"\u4ece\u4e00\u5bf9\u591a\u5f00\u59cb","text":"<p>\u6211\u4eec\u5148\u4ece\u719f\u6089\u4e14\u7b80\u5355\u7684 \u4e00\u5bf9\u591a \u5173\u7cfb\u5f00\u59cb\u3002</p> <p>\u6211\u4eec\u6709\u4e00\u4e2a\u5305\u542b\u56e2\u961f\u7684\u8868\u548c\u4e00\u4e2a\u5305\u542b\u82f1\u96c4\u7684\u8868\uff0c\u5bf9\u4e8e\u6bcf\u4e2a \u5355\u4e00 \u56e2\u961f\uff0c\u6211\u4eec\u53ef\u4ee5\u6709 \u591a\u4e2a \u82f1\u96c4\u3002</p> <p>\u7531\u4e8e\u6bcf\u4e2a\u56e2\u961f\u53ef\u4ee5\u6709\u591a\u4e2a\u82f1\u96c4\uff0c\u6211\u4eec\u4e0d\u80fd\u5728 <code>team</code> \u8868\u4e2d\u4e3a\u6bcf\u4e2a\u82f1\u96c4\u90fd\u521b\u5efa\u4e00\u4e2a\u4e13\u95e8\u7684\u5217\u6765\u5b58\u653e\u4ed6\u4eec\u7684 ID\u3002</p> <p>\u4f46\u662f\uff0c\u7531\u4e8e\u6bcf\u4e2a\u82f1\u96c4\u53ea\u80fd\u5c5e\u4e8e \u4e00\u4e2a \u56e2\u961f\uff0c\u56e0\u6b64\u5728\u82f1\u96c4\u8868\u4e2d\uff0c\u6211\u4eec\u6709 \u4e00\u4e2a\u5355\u4e00\u7684\u5217 \u6765\u6307\u5411\u7279\u5b9a\u7684\u56e2\u961f\uff08\u5373\u6307\u5411 <code>team</code> \u8868\u4e2d\u7684\u7279\u5b9a\u884c\uff09\u3002</p> <p><code>team</code> \u8868\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a</p> idnameheadquarters 1PreventersSharp Tower 2Z-ForceSister Margaret's Bar <p>Tip</p> <p>\u6ce8\u610f\uff0c\u8fd9\u91cc\u6ca1\u6709\u4efb\u4f55\u6307\u5411\u5176\u4ed6\u8868\u7684\u5916\u952e\u3002</p> <p><code>hero</code> \u8868\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a</p> idnamesecret_nameageteam_id 1DeadpondDive Wilsonnull2 2Spider-BoyPedro Parqueadornull1 3Rusty-ManTommy Sharp481 <p>\u6211\u4eec\u5728 <code>hero</code> \u8868\u4e2d\u6709\u4e00\u4e2a <code>team_id</code> \u5217\uff0c\u5b83\u6307\u5411 <code>team</code> \u8868\u4e2d\u67d0\u4e2a\u7279\u5b9a\u56e2\u961f\u7684 ID\u3002</p> <p>\u8fd9\u5c31\u662f\u6211\u4eec\u5982\u4f55\u5c06\u6bcf\u4e2a <code>hero</code> \u4e0e\u4e00\u4e2a <code>team</code> \u8fde\u63a5\u8d77\u6765\uff1a</p> <p></p> <p>\u6ce8\u610f\uff0c\u6bcf\u4e2a\u82f1\u96c4\u53ea\u80fd\u6709 \u4e00\u4e2a \u8fde\u63a5\u3002\u4f46\u662f\u6bcf\u4e2a\u56e2\u961f\u53ef\u4ee5\u63a5\u6536 \u591a\u4e2a \u8fde\u63a5\u3002\u7279\u522b\u5730\uff0c\u56e2\u961f Preventers \u6709\u4e24\u4e2a\u82f1\u96c4\u3002</p>"},{"location":"tutorial/many-to-many/#_2","title":"\u5f15\u5165\u591a\u5bf9\u591a","text":"<p>\u4f46\u5047\u8bbe Deadpond \u662f\u4e00\u4e2a\u4f1f\u5927\u7684\u89d2\u8272\uff0c\u4ed6\u88ab\u62db\u52df\u5230\u65b0\u7684 Preventers \u56e2\u961f\uff0c\u4f46\u4ed6\u4ecd\u7136\u662f Z-Force \u56e2\u961f\u7684\u4e00\u5458\u3002</p> <p>\u6240\u4ee5\u73b0\u5728\uff0c\u6211\u4eec\u9700\u8981\u80fd\u591f\u8ba9\u4e00\u4e2a\u82f1\u96c4\u8fde\u63a5\u5230 \u591a\u4e2a \u56e2\u961f\u3002\u5e76\u4e14\uff0c\u6bcf\u4e2a\u56e2\u961f\u4ecd\u7136\u53ef\u4ee5\u63a5\u6536 \u591a\u4e2a \u82f1\u96c4\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a \u591a\u5bf9\u591a \u5173\u7cfb\u3002</p> <p>\u4e00\u4e2a\u4e0d\u8d77\u4f5c\u7528\u7684\u7b80\u5355\u505a\u6cd5\u662f\u5f80 <code>hero</code> \u8868\u4e2d\u6dfb\u52a0\u66f4\u591a\u7684\u5217\u3002\u5047\u8bbe\u6211\u4eec\u6dfb\u52a0\u4e86\u4e24\u4e2a\u989d\u5916\u7684\u5217\u3002\u90a3\u4e48\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5c06\u4e00\u4e2a <code>hero</code> \u8fde\u63a5\u5230\u6700\u591a 3 \u4e2a\u56e2\u961f\uff0c\u4f46\u4e0d\u80fd\u66f4\u591a\u3002\u56e0\u6b64\uff0c\u8fd9\u6837\u505a\u5e76\u6ca1\u6709\u771f\u6b63\u89e3\u51b3\u652f\u6301 \u591a\u4e2a \u56e2\u961f\u7684\u95ee\u9898\uff0c\u53ea\u662f\u652f\u6301\u4e86\u4e00\u4e2a\u975e\u5e38\u6709\u9650\u7684\u56fa\u5b9a\u6570\u91cf\u7684\u56e2\u961f\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u505a\u5f97\u66f4\u597d\uff01 \ud83e\udd13</p>"},{"location":"tutorial/many-to-many/#_3","title":"\u94fe\u63a5\u8868","text":"<p>\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u53e6\u4e00\u4e2a\u8868\u6765\u8868\u793a <code>hero</code> \u8868\u548c <code>team</code> \u8868\u4e4b\u95f4\u7684\u94fe\u63a5\u3002</p> <p>\u8fd9\u4e2a\u8868\u53ea\u5305\u542b\u4e24\u5217\uff1a<code>hero_id</code> \u548c <code>team_id</code>\u3002</p> <p>\u8fd9\u4e24\u5217\u90fd\u662f \u5916\u952e\uff0c\u5206\u522b\u6307\u5411 <code>hero</code> \u8868\u548c <code>team</code> \u8868\u4e2d\u67d0\u4e2a\u7279\u5b9a\u884c\u7684 ID\u3002</p> <p>\u56e0\u4e3a\u8fd9\u4e2a\u8868\u5c06\u8868\u793a \u82f1\u96c4-\u56e2\u961f\u94fe\u63a5\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u547d\u540d\u4e3a <code>heroteamlink</code>\u3002</p> <p>\u5b83\u770b\u8d77\u6765\u662f\u8fd9\u6837\u7684\uff1a</p> <p></p> <p>\u6ce8\u610f\uff0c\u73b0\u5728 <code>hero</code> \u8868\u4e2d \u4e0d\u518d\u6709 <code>team_id</code> \u5217\uff0c\u5b83\u88ab\u8fd9\u4e2a\u94fe\u63a5\u8868\u6240\u66ff\u4ee3\u3002</p> <p>\u800c <code>team</code> \u8868\uff0c\u50cf\u4ee5\u524d\u4e00\u6837\uff0c\u4ecd\u7136\u6ca1\u6709\u4efb\u4f55\u5916\u952e\u3002</p> <p>\u5177\u4f53\u6765\u8bf4\uff0c\u65b0\u7684\u94fe\u63a5\u8868 <code>heroteamlink</code> \u4f1a\u662f\uff1a</p> hero_idteam_id 11 12 21 31 <p>Info</p> <p>\u6b64 \u94fe\u63a5\u8868 \u7684\u5176\u4ed6\u5e38\u7528\u540d\u79f0\u5305\u62ec\uff1a</p> <ul> <li>\u5173\u8054\u8868\uff08association table\uff09</li> <li>\u4e8c\u7ea7\u8868\uff08secondary table\uff09</li> <li>\u8fde\u63a5\u8868\uff08junction table\uff09</li> <li>\u4e2d\u95f4\u8868\uff08intermediate table\uff09</li> <li>\u8054\u63a5\u8868\uff08join table\uff09</li> <li>\u901a\u8fc7\u8868\uff08through table\uff09</li> <li>\u5173\u7cfb\u8868\uff08relationship table\uff09</li> <li>\u8fde\u63a5\u8868\uff08connection table\uff09</li> </ul> <p>\u6211\u4f7f\u7528\u201c\u94fe\u63a5\u8868\u201d\u8fd9\u4e2a\u672f\u8bed\uff0c\u56e0\u4e3a\u5b83\u7b80\u77ed\u3001\u4e0d\u4e0e\u5176\u4ed6\u5df2\u7528\u7684\u672f\u8bed\uff08\u4f8b\u5982\u201c\u5173\u7cfb\u201d\uff09\u51b2\u7a81\uff0c\u4e14\u5bb9\u6613\u8bb0\u4f4f\u600e\u4e48\u5199\uff0c\u7b49\u7b49\u3002</p>"},{"location":"tutorial/many-to-many/#_4","title":"\u94fe\u63a5\u4e3b\u952e","text":"<p>\u597d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u53ea\u6709 \u4e24\u5217 \u7684\u94fe\u63a5\u8868\u3002\u4f46\u8bb0\u4f4f\uff0cSQL \u6570\u636e\u5e93\u8981\u6c42\u6bcf\u4e00\u884c\u90fd\u5fc5\u987b\u6709\u4e00\u4e2a \u4e3b\u952e \u6765 \u552f\u4e00\u6807\u8bc6 \u8be5\u8868\u4e2d\u7684\u884c\uff0c\u5bf9\u5427\uff1f</p> <p>\u90a3\u4e48\uff0c\u5728\u8fd9\u4e2a\u8868\u4e2d\uff0c \u4e3b\u952e \u662f\u4ec0\u4e48\u5462\uff1f</p> <p>\u6211\u4eec\u8be5\u5982\u4f55\u6807\u8bc6\u6bcf\u4e00\u884c\u7684\u552f\u4e00\u6027\uff1f</p> <p>\u662f\u5426\u9700\u8981\u518d\u6dfb\u52a0\u4e00\u5217\u6765\u4f5c\u4e3a\u8fd9\u4e2a\u94fe\u63a5\u8868\u7684 \u4e3b\u952e \uff1f\u4e0d\uff01\u6211\u4eec\u4e0d\u9700\u8981\u8fd9\u6837\u505a\u3002\ud83d\udc4c</p> <p>\u8fd9\u4e24\u5217\u4f5c\u4e3a\u4e3b\u952e \uff0c\u5171\u540c\u6807\u8bc6\u8fd9\u4e2a\u8868\u4e2d\u7684\u6bcf\u4e00\u884c\uff08\u6bcf\u4e00\u884c\u53ea\u6709\u8fd9\u4e24\u5217\uff09\u3002\u2728</p> <p>\u4e3b\u952e\u662f\u4e00\u79cd \u552f\u4e00\u6807\u8bc6 \u5355\u4e2a\u8868\u4e2d\u7279\u5b9a\u884c\u7684\u65b9\u5f0f\u3002\u4f46\u5b83\u4e0d\u4e00\u5b9a\u662f\u5355\u72ec\u7684\u4e00\u5217\u3002</p> <p>\u4e3b\u952e\u53ef\u4ee5\u662f\u8868\u4e2d\u4e00\u7ec4\u5217\uff0c\u7ec4\u5408\u8d77\u6765\u5728\u8868\u4e2d\u662f\u552f\u4e00\u7684\u3002</p> <p>\u518d\u770b\u4e00\u4e0b\u4e0a\u9762\u7684\u8868\uff0c\u770b\u5230 \u6bcf\u4e00\u884c\u90fd\u6709\u552f\u4e00\u7684 <code>hero_id</code> \u548c <code>team_id</code> \u7ec4\u5408 \u5417\uff1f</p> <p>\u6211\u4eec\u4e0d\u80fd\u6709\u91cd\u590d\u7684\u4e3b\u952e\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u4e0d\u80fd\u6709\u91cd\u590d\u7684 <code>hero</code> \u548c <code>team</code> \u4e4b\u95f4\u7684\u94fe\u63a5\uff0c\u8fd9\u6b63\u662f\u6211\u4eec\u60f3\u8981\u7684\uff01</p> <p>\u4f8b\u5982\uff0c\u6570\u636e\u5e93\u73b0\u5728\u4f1a\u9632\u6b62\u51fa\u73b0\u50cf\u4e0b\u9762\u8fd9\u6837\u6709\u91cd\u590d\u884c\u7684\u9519\u8bef\uff1a</p> hero_idteam_id 11 12 21 31 3 \ud83d\udea81 \ud83d\udea8 <p>\u8ba9\u4e00\u4e2a\u82f1\u96c4 \u91cd\u590d\u52a0\u5165\u540c\u4e00\u4e2a\u56e2\u961f \u662f\u6ca1\u6709\u610f\u4e49\u7684\uff0c\u5bf9\u5427\uff1f</p> <p>\u73b0\u5728\uff0c\u53ea\u9700\u4f7f\u7528\u8fd9\u4e24\u5217\u4f5c\u4e3a\u8fd9\u4e2a\u8868\u7684\u4e3b\u952e\uff0cSQL \u5c31\u4f1a\u81ea\u52a8\u5904\u7406 \u9632\u6b62\u6211\u4eec\u91cd\u590d\u63d2\u5165 <code>hero</code> \u548c <code>team</code> \u4e4b\u95f4\u7684\u94fe\u63a5\u3002\u2705</p>"},{"location":"tutorial/many-to-many/#_5","title":"\u603b\u7ed3","text":"<p>\u4e00\u4e2a\u603b\u7ed3\u6027\u7684\u4ecb\u7ecd\uff01\u8fd9\u6709\u70b9\u5947\u602a\u2026\u2026\u4e0d\u8fc7\u6ca1\u5173\u7cfb\u3002\ud83e\udd37</p> <p>\u73b0\u5728\u4f60\u5df2\u7ecf\u4e86\u89e3\u4e86 \u591a\u5bf9\u591a \u5173\u7cfb\u7684\u7406\u8bba\uff0c\u4ee5\u53ca\u5982\u4f55\u901a\u8fc7 SQL \u8868\u6765\u89e3\u51b3\u5b83\u4eec\u3002\ud83e\udd13</p> <p>\u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u7f16\u5199 SQL \u548c\u4ee3\u7801\u6765\u5b9e\u73b0\u5b83\u4eec\u3002\ud83d\ude80</p>"},{"location":"tutorial/many-to-many/create-data/","title":"\u4f7f\u7528\u591a\u5bf9\u591a\u5173\u7cfb\u521b\u5efa\u6570\u636e","text":"<p>\u8ba9\u6211\u4eec\u4ece\u4e4b\u524d\u7684\u5185\u5bb9\u7ee7\u7eed\uff0c\u521b\u5efa\u4e00\u4e9b\u6570\u636e\u3002</p> <p>\u6211\u4eec\u5c06\u4e3a\u8fd9\u4e2a\u901a\u8fc7\u94fe\u63a5\u8868\u5efa\u7acb\u7684 \u591a\u5bf9\u591a \u5173\u7cfb\u521b\u5efa\u6570\u636e\uff1a</p> <p></p> <p>\u6211\u4eec\u5c06\u5728\u4e4b\u524d\u4ee3\u7801\u7684\u57fa\u7840\u4e0a\u7ee7\u7eed\u3002</p> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", primary_key=True)\n    hero_id: int | None = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: List[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/many-to-many/create-data/#_2","title":"\u521b\u5efa\u82f1\u96c4","text":"<p>\u548c\u4e4b\u524d\u4e00\u6837\uff0c\u6211\u4eec\u4f1a\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a <code>create_heroes()</code> \u7684\u51fd\u6570\uff0c\u5e76\u5728\u5176\u4e2d\u521b\u5efa\u4e00\u4e9b\u56e2\u961f\u548c\u82f1\u96c4\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4e0a\u65b9\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n\n# \u4e0b\u65b9\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u65b9\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n\n# \u4e0b\u65b9\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u65b9\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n\n# \u4e0b\u65b9\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", primary_key=True)\n    hero_id: int | None = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: List[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u8fd9\u4e0e\u4e4b\u524d\u7684\u64cd\u4f5c\u975e\u5e38\u76f8\u4f3c\u3002</p> <p>\u6211\u4eec\u521b\u5efa\u4e86\u4e24\u4e2a\u56e2\u961f\uff0c\u7136\u540e\u521b\u5efa\u4e86\u4e09\u4e2a\u82f1\u96c4\u3002</p> <p>\u552f\u4e00\u7684\u65b0\u7ec6\u8282\u662f\uff0c\u6211\u4eec\u4e0d\u518d\u4f7f\u7528\u53c2\u6570 <code>team</code>\uff0c\u800c\u662f\u4f7f\u7528 <code>teams</code>\uff0c\u56e0\u4e3a\u8fd9\u662f\u65b0\u7684 \u5173\u7cfb\u5c5e\u6027 \u7684\u540d\u79f0\u3002\u66f4\u91cd\u8981\u7684\u662f\uff0c\u6211\u4eec\u4f20\u9012\u4e86\u4e00\u4e2a \u56e2\u961f\u5217\u8868\uff08\u5373\u4f7f\u5b83\u53ea\u6709\u4e00\u4e2a\u56e2\u961f\uff09\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0cDeadpond \u73b0\u5728\u5c5e\u4e8e\u4e24\u4e2a\u56e2\u961f\u4e86\uff01</p>"},{"location":"tutorial/many-to-many/create-data/#_3","title":"\u63d0\u4ea4\u3001\u5237\u65b0\u5e76\u6253\u5370","text":"<p>\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u50cf\u4e4b\u524d\u4e00\u6837\uff0c<code>commit</code> \u4f1a\u8bdd\uff0c<code>refresh</code> \u6570\u636e\uff0c\u5e76\u6253\u5370\u5b83\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4e0a\u65b9\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n# \u4e0b\u65b9\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u65b9\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n# \u4e0b\u65b9\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u65b9\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n# \u4e0b\u65b9\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", primary_key=True)\n    hero_id: int | None = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: List[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/many-to-many/create-data/#_4","title":"\u6dfb\u52a0\u5230\u4e3b\u51fd\u6570","text":"<p>\u548c\u4e4b\u524d\u4e00\u6837\uff0c\u5c06 <code>create_heroes()</code> \u51fd\u6570\u6dfb\u52a0\u5230 <code>main()</code> \u51fd\u6570\u4e2d\uff0c\u4ee5\u786e\u4fdd\u5728\u4ece\u547d\u4ee4\u884c\u8fd0\u884c\u8be5\u7a0b\u5e8f\u65f6\u8c03\u7528\u5b83\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4e0a\u65b9\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n# \u4e0b\u65b9\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u65b9\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n# \u4e0b\u65b9\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u65b9\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n# \u4e0b\u65b9\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", primary_key=True)\n    hero_id: int | None = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: List[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/many-to-many/create-data/#_5","title":"\u8fd0\u884c\u7a0b\u5e8f","text":"<p>\u5982\u679c\u4ece\u547d\u4ee4\u884c\u8fd0\u884c\u7a0b\u5e8f\uff0c\u8f93\u51fa\u5c06\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>$ python app.py\n\n// \u4e4b\u524d\u7684\u8f93\u51fa\u5df2\u7701\u7565 \ud83d\ude48\n\n// \u81ea\u52a8\u5f00\u59cb\u4e00\u4e2a\u65b0\u4e8b\u52a1\nINFO Engine BEGIN (implicit)\n// \u9996\u5148\u63d2\u5165\u82f1\u96c4\u6570\u636e\nINFO Engine INSERT INTO hero (name, secret_name, age) VALUES (?, ?, ?)\nINFO Engine [generated in 0.00041s] ('Deadpond', 'Dive Wilson', None)\nINFO Engine INSERT INTO hero (name, secret_name, age) VALUES (?, ?, ?)\nINFO Engine [cached since 0.001942s ago] ('Rusty-Man', 'Tommy Sharp', 48)\nINFO Engine INSERT INTO hero (name, secret_name, age) VALUES (?, ?, ?)\nINFO Engine [cached since 0.002541s ago] ('Spider-Boy', 'Pedro Parqueador', None)\n// \u7136\u540e\u63d2\u5165\u961f\u4f0d\u6570\u636e\nINFO Engine INSERT INTO team (name, headquarters) VALUES (?, ?)\nINFO Engine [generated in 0.00037s] ('Z-Force', 'Sister Margaret's Bar')\nINFO Engine INSERT INTO team (name, headquarters) VALUES (?, ?)\nINFO Engine [cached since 0.001239s ago] ('Preventers', 'Sharp Tower')\n// \u6700\u540e\u63d2\u5165\u94fe\u63a5\u6570\u636e\uff0c\u4ee5\u4fbf\u91cd\u7528\u5df2\u521b\u5efa\u7684 ID\nINFO Engine INSERT INTO heroteamlink (team_id, hero_id) VALUES (?, ?)\nINFO Engine [generated in 0.00026s] ((2, 3), (1, 1), (2, 1), (2, 2))\n// \u63d0\u4ea4\u4e8b\u52a1\u5e76\u5c06\u6570\u636e\u4fdd\u5b58\u5230\u6570\u636e\u5e93\nINFO Engine COMMIT\n\n// \u81ea\u52a8\u5f00\u59cb\u4e00\u4e2a\u65b0\u4e8b\u52a1\nINFO Engine BEGIN (implicit)\n// \u5237\u65b0\u6570\u636e\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [generated in 0.00019s] (1,)\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.001959s ago] (2,)\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.003215s ago] (3,)\n\n// \u6253\u5370 Deadpond\nDeadpond: name='Deadpond' age=None id=1 secret_name='Dive Wilson'\n\n// \u8bbf\u95ee `.team` \u5c5e\u6027\u89e6\u53d1\u5237\u65b0\nINFO Engine SELECT team.id AS team_id, team.name AS team_name, team.headquarters AS team_headquarters\nFROM team, heroteamlink\nWHERE ? = heroteamlink.hero_id AND team.id = heroteamlink.team_id\nINFO Engine [generated in 0.00025s] (1,)\n\n// \u6253\u5370 Deadpond \u7684\u961f\u4f0d\uff0c2 \u4e2a\u961f\u4f0d\uff01\ud83c\udf89\nDeadpond teams: [Team(id=1, name='Z-Force', headquarters='Sister Margaret's Bar'), Team(id=2, name='Preventers', headquarters='Sharp Tower')]\n\n// \u6253\u5370 Rusty-Man\nRusty-Man: name='Rusty-Man' age=48 id=2 secret_name='Tommy Sharp'\n\n// \u8bbf\u95ee `.team` \u5c5e\u6027\u89e6\u53d1\u5237\u65b0\nINFO Engine SELECT team.id AS team_id, team.name AS team_name, team.headquarters AS team_headquarters\nFROM team, heroteamlink\nWHERE ? = heroteamlink.hero_id AND team.id = heroteamlink.team_id\nINFO Engine [cached since 0.001716s ago] (2,)\n\n// \u6253\u5370 Rusty-Man \u7684\u961f\u4f0d\uff0c\u53ea\u6709\u4e00\u4e2a\uff0c\u4f46\u4ecd\u7136\u662f\u5217\u8868\nRusty-Man Teams: [Team(id=2, name='Preventers', headquarters='Sharp Tower')]\n\n// \u6253\u5370 Spider-Boy\nSpider-Boy: name='Spider-Boy' age=None id=3 secret_name='Pedro Parqueador'\n\n// \u8bbf\u95ee `.team` \u5c5e\u6027\u89e6\u53d1\u5237\u65b0\nINFO Engine SELECT team.id AS team_id, team.name AS team_name, team.headquarters AS team_headquarters\nFROM team, heroteamlink\nWHERE ? = heroteamlink.hero_id AND team.id = heroteamlink.team_id\nINFO Engine [cached since 0.002739s ago] (3,)\n\n// \u6253\u5370 Spider-Boy \u7684\u961f\u4f0d\uff0c\u53ea\u6709\u4e00\u4e2a\uff0c\u4f46\u4ecd\u7136\u662f\u5217\u8868\nSpider-Boy Teams: [Team(id=2, name='Preventers', headquarters='Sharp Tower')]\n\n// \u5728 `with` \u5757\u7ed3\u675f\u65f6\uff0c\u81ea\u52a8\u56de\u6eda\u4efb\u4f55\u5148\u524d\u7684\u81ea\u52a8\u4e8b\u52a1\nINFO Engine ROLLBACK\n</code></pre>"},{"location":"tutorial/many-to-many/create-data/#_6","title":"\u56de\u987e","text":"<p>\u5728\u8bbe\u7f6e\u597d\u6a21\u578b\u94fe\u63a5\u540e\uff0c\u4f7f\u7528 \u5173\u7cfb\u5c5e\u6027 \u7684\u64cd\u4f5c\u975e\u5e38\u76f4\u89c2\uff0c\u4ec5\u9700\u5904\u7406 Python \u5bf9\u8c61\u5373\u53ef\u3002\u2728</p>"},{"location":"tutorial/many-to-many/create-models-with-link/","title":"\u4f7f\u7528\u591a\u5bf9\u591a\u5173\u7cfb\u521b\u5efa\u6a21\u578b","text":"<p>\u73b0\u5728\u6211\u4eec\u5c06\u901a\u8fc7 \u5173\u8054\u8868 \u652f\u6301 \u591a\u5bf9\u591a \u5173\u7cfb\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <p></p> <p>\u8ba9\u6211\u4eec\u4ece\u5b9a\u4e49\u7c7b\u6a21\u578b\u5f00\u59cb\uff0c\u5305\u62ec \u5173\u8054\u8868 \u6a21\u578b\u3002</p>"},{"location":"tutorial/many-to-many/create-models-with-link/#_2","title":"\u5173\u8054\u8868\u6a21\u578b","text":"<p>\u4e3a\u4e86\u652f\u6301 \u591a\u5bf9\u591a \u5173\u7cfb\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a \u5173\u8054\u8868 \u6765\u8fde\u63a5\u5b83\u4eec\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u50cf\u521b\u5efa\u5176\u4ed6 SQLModel \u4e00\u6837\u521b\u5efa\u5b83\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", primary_key=True)\n    hero_id: int | None = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\n\n# \u4ee5\u4e0b\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n# \u4ee5\u4e0b\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n# \u4ee5\u4e0b\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", primary_key=True)\n    hero_id: int | None = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: List[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u8fd9\u4e0e\u5176\u4ed6 SQLModel \u7c7b\u6a21\u578b\u8868\u76f8\u540c\u3002</p> <p>\u5b83\u6709\u4e24\u4e2a\u5b57\u6bb5\uff0c<code>team_id</code> \u548c <code>hero_id</code>\u3002</p> <p>\u5b83\u4eec\u90fd\u662f\u5404\u81ea\u8868\u7684 \u5916\u952e\u3002\u6211\u4eec\u7a0d\u540e\u4f1a\u521b\u5efa\u8fd9\u4e9b\u6a21\u578b\uff0c\u4f46\u4f60\u5df2\u7ecf\u77e5\u9053\u5b83\u4eec\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u4e86\u3002</p> <p>\u800c\u4e14\u8fd9 \u4e24\u4e2a\u5b57\u6bb5\u90fd\u662f\u4e3b\u952e\u3002\u8fd9\u662f\u6211\u4eec\u4e4b\u524d\u6ca1\u6709\u4f7f\u7528\u8fc7\u7684\u529f\u80fd\u3002\ud83e\udd13</p>"},{"location":"tutorial/many-to-many/create-models-with-link/#team-model","title":"\u56e2\u961f\u6a21\u578b\uff08Team Model\uff09","text":"<p>\u6765\u770b\u4e00\u4e0b <code>Team</code> \u6a21\u578b\uff0c\u5b83\u4e0e\u4e4b\u524d\u7684\u6a21\u578b\u51e0\u4e4e\u76f8\u540c\uff0c\u4f46\u6709\u4e00\u70b9\u5c0f\u6539\u52a8\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4e0a\u65b9\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n# \u4e0b\u65b9\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u65b9\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n# \u4e0b\u65b9\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u65b9\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n# \u4e0b\u65b9\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", primary_key=True)\n    hero_id: int | None = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: List[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u5173\u7cfb\u5c5e\u6027 <code>heroes</code> \u4ecd\u7136\u662f\u4e00\u4e2a\u82f1\u96c4\u7684\u5217\u8868\uff0c\u7c7b\u578b\u6ce8\u89e3\u4e3a <code>List[\"Hero\"]</code>\u3002\u6211\u4eec\u7528\u5f15\u53f7\u62ec\u4f4f <code>\"Hero\"</code>\uff0c\u56e0\u4e3a\u6b64\u65f6\u4ee3\u7801\u4e2d\u8fd8\u6ca1\u6709\u58f0\u660e\u8fd9\u4e2a\u7c7b\uff08\u4f46\u6b63\u5982\u4f60\u6240\u77e5\uff0c\u7f16\u8f91\u5668\u548c SQLModel \u80fd\u7406\u89e3\u5b83\uff09\u3002</p> <p>\u6211\u4eec\u7ee7\u7eed\u4f7f\u7528 <code>Relationship()</code> \u51fd\u6570\u3002</p> <p>\u8fd9\u91cc\u7528 <code>back_populates=\"teams\"</code>\uff0c\u800c\u4e0d\u662f\u4e4b\u524d\u7684 <code>team</code>\uff0c\u56e0\u4e3a\u73b0\u5728\u53ef\u4ee5\u6709\u591a\u4e2a\u56e2\u961f\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u521b\u5efa <code>Hero</code> \u6a21\u578b\u65f6\u5c06\u5176\u91cd\u547d\u540d\u4e3a <code>teams</code>\u3002</p> <p>\u6b64\u5916\uff0c\u5141\u8bb8 \u591a\u5bf9\u591a \u5173\u7cfb\u7684\u5173\u952e\u90e8\u5206\u662f\u4f7f\u7528 <code>link_model=HeroTeamLink</code>\u3002\u5c31\u662f\u8fd9\u6837\uff01\u2728</p>"},{"location":"tutorial/many-to-many/create-models-with-link/#hero-model","title":"\u82f1\u96c4\u6a21\u578b\uff08Hero Model\uff09","text":"<p>\u63a5\u4e0b\u6765\u770b\u770b\u5173\u7cfb\u7684\u53e6\u4e00\u7aef\uff0c\u5373 <code>Hero</code> \u6a21\u578b\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4e0a\u65b9\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n# \u4e0b\u65b9\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u65b9\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n# \u4e0b\u65b9\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u65b9\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: List[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n# \u4e0b\u65b9\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", primary_key=True)\n    hero_id: int | None = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: List[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u6211\u4eec**\u79fb\u9664\u4e86**\u4e4b\u524d\u7684 <code>team_id</code> \u5b57\u6bb5\uff08\u5217\uff09\uff0c\u56e0\u4e3a\u73b0\u5728\u901a\u8fc7\u5173\u8054\u8868\u5b8c\u6210\u5173\u7cfb\u7ba1\u7406\u3002\ud83d\udd25</p> <p>\u5173\u7cfb\u5c5e\u6027\u73b0\u5728\u6539\u540d\u4e3a <code>teams</code>\uff0c\u800c\u4e0d\u518d\u662f <code>team</code>\uff0c\u56e0\u4e3a\u73b0\u5728\u652f\u6301\u591a\u652f\u56e2\u961f\u3002</p> <p>\u5c5e\u6027\u7684\u7c7b\u578b\u4ece <code>Optional[Team]</code> \u6539\u4e3a\u591a\u4e2a\u56e2\u961f\u7684\u5217\u8868\uff0c\u6ce8\u89e3\u4e3a <code>List[Team]</code>\u3002</p> <p>\u8fd9\u91cc\u540c\u6837\u4f7f\u7528\u4e86 <code>Relationship()</code>\u3002</p> <p>\u4ecd\u7136\u4fdd\u7559\u4e86 <code>back_populates=\"heroes\"</code>\uff0c\u4e0e\u4e4b\u524d\u4e00\u81f4\u3002</p> <p>\u6b64\u5916\uff0c\u6dfb\u52a0\u4e86 <code>link_model=HeroTeamLink</code> \u6765\u5b9e\u73b0\u591a\u5bf9\u591a\u7684\u5173\u7cfb\u7ba1\u7406\u3002\u2728</p>"},{"location":"tutorial/many-to-many/create-models-with-link/#_3","title":"\u521b\u5efa\u8868","text":"<p>\u4e0e\u4e4b\u524d\u4e00\u6837\uff0c\u6211\u4eec\u4f1a\u7f16\u5199\u4ee3\u7801\u6765\u521b\u5efa engine\uff0c\u5e76\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570 <code>create_db_and_tables()</code> \u7528\u4e8e\u521b\u5efa\u6240\u6709\u8868\u3002</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4e0a\u65b9\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n# \u4e0b\u65b9\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u65b9\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n# \u4e0b\u65b9\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u65b9\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n# \u4e0b\u65b9\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", primary_key=True)\n    hero_id: int | None = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: List[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u4e0e\u4e4b\u524d\u7684\u4f8b\u5b50\u7c7b\u4f3c\uff0c\u6211\u4eec\u5c06\u8fd9\u4e2a\u51fd\u6570\u6dfb\u52a0\u5230\u4e00\u4e2a <code>main()</code> \u51fd\u6570\u4e2d\uff0c\u5e76\u5728\u4e3b\u7a0b\u5e8f\u5757\u4e2d\u8c03\u7528\u5b83\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4e0a\u65b9\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\ndef main():\n    create_db_and_tables()\n    # \u540e\u7eed\u5c06\u5728\u6b64\u5904\u6dfb\u52a0\u66f4\u591a\u529f\u80fd \ud83d\udc48\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code># \u4e0a\u65b9\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\ndef main():\n    create_db_and_tables()\n    # \u540e\u7eed\u5c06\u5728\u6b64\u5904\u6dfb\u52a0\u66f4\u591a\u529f\u80fd \ud83d\udc48\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code># \u4e0a\u65b9\u4ee3\u7801\u5df2\u7701\u7565 \ud83d\udc46\n\ndef main():\n    create_db_and_tables()\n    # \u540e\u7eed\u5c06\u5728\u6b64\u5904\u6dfb\u52a0\u66f4\u591a\u529f\u80fd \ud83d\udc48\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", primary_key=True)\n    hero_id: int | None = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: List[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/many-to-many/create-models-with-link/#_4","title":"\u8fd0\u884c\u4ee3\u7801","text":"<p>\u5982\u679c\u4f60\u5728\u547d\u4ee4\u884c\u4e2d\u8fd0\u884c\u4ee3\u7801\uff0c\u8f93\u51fa\u5c06\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>$ python app.py\n\n// \u6807\u51c6\u8f93\u51fa\u7701\u7565 \ud83d\ude09\n\nINFO Engine\nCREATE TABLE team (\n        id INTEGER,\n        name VARCHAR NOT NULL,\n        headquarters VARCHAR NOT NULL,\n        PRIMARY KEY (id)\n)\n\n\nINFO Engine [no key 0.00033s] ()\nINFO Engine\nCREATE TABLE hero (\n        id INTEGER,\n        name VARCHAR NOT NULL,\n        secret_name VARCHAR NOT NULL,\n        age INTEGER,\n        PRIMARY KEY (id)\n)\n\n\nINFO Engine [no key 0.00016s] ()\nINFO Engine\n\n// \u6211\u4eec\u5168\u65b0\u7684\u94fe\u63a5\u8868 \u2728\nCREATE TABLE heroteamlink (\n        team_id INTEGER,\n        hero_id INTEGER,\n        PRIMARY KEY (team_id, hero_id),\n        FOREIGN KEY(team_id) REFERENCES team (id),\n        FOREIGN KEY(hero_id) REFERENCES hero (id)\n)\n\n\nINFO Engine [no key 0.00031s] ()\nINFO Engine COMMIT\n</code></pre>"},{"location":"tutorial/many-to-many/create-models-with-link/#_5","title":"\u56de\u987e","text":"<p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u58f0\u660e\u4e00\u4e2a\u94fe\u63a5\u8868\u6765\u652f\u6301\u8868\u4e4b\u95f4\u7684 \u591a\u5bf9\u591a \u5173\u7cfb\u3002</p> <p>\u53ef\u4ee5\u50cf\u521b\u5efa\u5176\u4ed6 SQLModel \u7c7b\u4e00\u6837\u521b\u5efa\u94fe\u63a5\u8868\uff0c\u7136\u540e\u5728 <code>Relationship()</code> \u7684 <code>link_model</code> \u53c2\u6570\u4e2d\u4f7f\u7528\u5b83\u3002</p> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u8fd9\u4e9b\u6a21\u578b\u5904\u7406\u6570\u636e\u3002\ud83e\udd13</p>"},{"location":"tutorial/many-to-many/link-with-extra-fields/","title":"\u5e26\u6709\u989d\u5916\u5b57\u6bb5\u7684\u8fde\u63a5\u6a21\u578b","text":"<p>\u5728\u4e4b\u524d\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4ece\u672a\u76f4\u63a5\u4e0e <code>HeroTeamLink</code> \u6a21\u578b\u8fdb\u884c\u4ea4\u4e92\uff0c\u4e00\u5207\u90fd\u662f\u901a\u8fc7\u81ea\u52a8\u7684 \u591a\u5bf9\u591a \u5173\u7cfb\u6765\u5b8c\u6210\u7684\u3002</p> <p>\u4f46\u5982\u679c\u6211\u4eec\u9700\u8981\u989d\u5916\u7684\u6570\u636e\u6765\u63cf\u8ff0\u4e24\u4e2a\u6a21\u578b\u4e4b\u95f4\u7684\u8fde\u63a5\u5462\uff1f</p> <p>\u5047\u8bbe\u6211\u4eec\u60f3\u8981\u6709\u4e00\u4e2a\u989d\u5916\u7684\u5b57\u6bb5/\u5217\uff0c\u7528\u6765\u8868\u793a\u4e00\u4e2a\u82f1\u96c4\u662f\u5426\u4ecd\u7136\u5728\u8be5\u961f\u4f0d\u4e2d \u8bad\u7ec3\uff0c\u6216\u8005\u4ed6\u4eec\u662f\u5426\u5df2\u7ecf\u5f00\u59cb\u6267\u884c\u4efb\u52a1\u7b49\u3002</p> <p>\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002</p>"},{"location":"tutorial/many-to-many/link-with-extra-fields/#_2","title":"\u5e26\u6709\u4e24\u4e2a\u4e00\u5bf9\u591a\u5173\u7cfb\u7684\u8fde\u63a5\u6a21\u578b","text":"<p>\u5904\u7406\u8fd9\u79cd\u60c5\u51b5\u7684\u65b9\u5f0f\u662f\u663e\u5f0f\u5730\u4f7f\u7528\u8fde\u63a5\u6a21\u578b\uff0c\u4ee5\u4fbf\u80fd\u591f\u83b7\u53d6\u548c\u4fee\u6539\u5176\u6570\u636e\uff08\u9664\u4e86\u6307\u5411 <code>Hero</code> \u548c <code>Team</code> \u4e24\u4e2a\u6a21\u578b\u7684\u5916\u952e\uff09\u3002</p> <p>\u6700\u7ec8\uff0c\u5b83\u7684\u5de5\u4f5c\u65b9\u5f0f\u5c31\u50cf\u662f\u4e24\u4e2a \u4e00\u5bf9\u591a \u5173\u7cfb\u7684\u7ed3\u5408\u3002</p> <p>\u5728 <code>heroteamlink</code> \u8868\u4e2d\u7684\u4e00\u884c\u6307\u5411 \u4e00\u4e2a \u7279\u5b9a\u7684\u82f1\u96c4\uff0c\u4f46\u4e00\u4e2a\u82f1\u96c4\u53ef\u4ee5\u4e0e \u591a\u4e2a \u82f1\u96c4-\u961f\u4f0d\u8fde\u63a5\uff0c\u6240\u4ee5\u662f \u4e00\u5bf9\u591a\u3002</p> <p>\u540c\u6837\uff0c<code>heroteamlink</code> \u8868\u4e2d\u7684\u540c\u4e00\u884c\u4e5f\u6307\u5411 \u4e00\u4e2a \u961f\u4f0d\uff0c\u4f46\u4e00\u4e2a\u961f\u4f0d\u53ef\u4ee5\u4e0e \u591a\u4e2a \u82f1\u96c4-\u961f\u4f0d\u8fde\u63a5\uff0c\u6240\u4ee5\u4e5f\u662f \u4e00\u5bf9\u591a\u3002</p> <p>Tip</p> <p>\u4e4b\u524d\u7684\u591a\u5bf9\u591a\u5173\u7cfb\u5b9e\u9645\u4e0a\u4e5f\u53ea\u662f\u4e24\u4e2a\u4e00\u5bf9\u591a\u5173\u7cfb\u7684\u7ed3\u5408\uff0c\u4f46\u73b0\u5728\u5b83\u4f1a\u53d8\u5f97\u66f4\u52a0\u663e\u5f0f\u3002</p>"},{"location":"tutorial/many-to-many/link-with-extra-fields/#_3","title":"\u66f4\u65b0\u8fde\u63a5\u6a21\u578b","text":"<p>\u6211\u4eec\u5c06\u66f4\u65b0 <code>HeroTeamLink</code> \u6a21\u578b\u3002</p> <p>\u6211\u4eec\u5c06\u6dfb\u52a0\u4e00\u4e2a\u65b0\u5b57\u6bb5 <code>is_training</code>\u3002</p> <p>\u540c\u65f6\uff0c\u6211\u4eec\u8fd8\u4f1a\u4e3a\u94fe\u63a5\u7684 <code>team</code> \u548c <code>hero</code> \u6dfb\u52a0\u4e24\u4e2a \u5173\u7cfb\u5c5e\u6027\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", primary_key=True)\n    hero_id: int | None = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\n    is_training: bool = False\n\n    team: \"Team\" = Relationship(back_populates=\"hero_links\")\n    hero: \"Hero\" = Relationship(back_populates=\"team_links\")\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n    is_training: bool = False\n\n    team: \"Team\" = Relationship(back_populates=\"hero_links\")\n    hero: \"Hero\" = Relationship(back_populates=\"team_links\")\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n    is_training: bool = False\n\n    team: \"Team\" = Relationship(back_populates=\"hero_links\")\n    hero: \"Hero\" = Relationship(back_populates=\"team_links\")\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", primary_key=True)\n    hero_id: int | None = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\n    is_training: bool = False\n\n    team: \"Team\" = Relationship(back_populates=\"hero_links\")\n    hero: \"Hero\" = Relationship(back_populates=\"team_links\")\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    hero_links: list[HeroTeamLink] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_links: list[HeroTeamLink] = Relationship(back_populates=\"hero\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\",\n            secret_name=\"Pedro Parqueador\",\n        )\n        deadpond_team_z_link = HeroTeamLink(team=team_z_force, hero=hero_deadpond)\n        deadpond_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_deadpond, is_training=True\n        )\n        spider_boy_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_spider_boy, is_training=True\n        )\n        rusty_man_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_rusty_man\n        )\n\n        session.add(deadpond_team_z_link)\n        session.add(deadpond_preventers_link)\n        session.add(spider_boy_preventers_link)\n        session.add(rusty_man_preventers_link)\n        session.commit()\n\n        for link in team_z_force.hero_links:\n            print(\"Z-Force hero:\", link.hero, \"is training:\", link.is_training)\n\n        for link in team_preventers.hero_links:\n            print(\"Preventers hero:\", link.hero, \"is training:\", link.is_training)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        spider_boy_z_force_link = HeroTeamLink(\n            team=team_z_force, hero=hero_spider_boy, is_training=True\n        )\n        team_z_force.hero_links.append(spider_boy_z_force_link)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.team_links)\n        print(\"Z-Force heroes:\", team_z_force.hero_links)\n\n        for link in hero_spider_boy.team_links:\n            if link.team.name == \"Preventers\":\n                link.is_training = False\n\n        session.add(hero_spider_boy)\n        session.commit()\n\n        for link in hero_spider_boy.team_links:\n            print(\"Spider-Boy team:\", link.team, \"is training:\", link.is_training)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n    is_training: bool = False\n\n    team: \"Team\" = Relationship(back_populates=\"hero_links\")\n    hero: \"Hero\" = Relationship(back_populates=\"team_links\")\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    hero_links: list[HeroTeamLink] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_links: list[HeroTeamLink] = Relationship(back_populates=\"hero\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\",\n            secret_name=\"Pedro Parqueador\",\n        )\n        deadpond_team_z_link = HeroTeamLink(team=team_z_force, hero=hero_deadpond)\n        deadpond_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_deadpond, is_training=True\n        )\n        spider_boy_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_spider_boy, is_training=True\n        )\n        rusty_man_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_rusty_man\n        )\n\n        session.add(deadpond_team_z_link)\n        session.add(deadpond_preventers_link)\n        session.add(spider_boy_preventers_link)\n        session.add(rusty_man_preventers_link)\n        session.commit()\n\n        for link in team_z_force.hero_links:\n            print(\"Z-Force hero:\", link.hero, \"is training:\", link.is_training)\n\n        for link in team_preventers.hero_links:\n            print(\"Preventers hero:\", link.hero, \"is training:\", link.is_training)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        spider_boy_z_force_link = HeroTeamLink(\n            team=team_z_force, hero=hero_spider_boy, is_training=True\n        )\n        team_z_force.hero_links.append(spider_boy_z_force_link)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.team_links)\n        print(\"Z-Force heroes:\", team_z_force.hero_links)\n\n        for link in hero_spider_boy.team_links:\n            if link.team.name == \"Preventers\":\n                link.is_training = False\n\n        session.add(hero_spider_boy)\n        session.commit()\n\n        for link in hero_spider_boy.team_links:\n            print(\"Spider-Boy team:\", link.team, \"is training:\", link.is_training)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n    is_training: bool = False\n\n    team: \"Team\" = Relationship(back_populates=\"hero_links\")\n    hero: \"Hero\" = Relationship(back_populates=\"team_links\")\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    hero_links: List[HeroTeamLink] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_links: List[HeroTeamLink] = Relationship(back_populates=\"hero\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\",\n            secret_name=\"Pedro Parqueador\",\n        )\n        deadpond_team_z_link = HeroTeamLink(team=team_z_force, hero=hero_deadpond)\n        deadpond_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_deadpond, is_training=True\n        )\n        spider_boy_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_spider_boy, is_training=True\n        )\n        rusty_man_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_rusty_man\n        )\n\n        session.add(deadpond_team_z_link)\n        session.add(deadpond_preventers_link)\n        session.add(spider_boy_preventers_link)\n        session.add(rusty_man_preventers_link)\n        session.commit()\n\n        for link in team_z_force.hero_links:\n            print(\"Z-Force hero:\", link.hero, \"is training:\", link.is_training)\n\n        for link in team_preventers.hero_links:\n            print(\"Preventers hero:\", link.hero, \"is training:\", link.is_training)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        spider_boy_z_force_link = HeroTeamLink(\n            team=team_z_force, hero=hero_spider_boy, is_training=True\n        )\n        team_z_force.hero_links.append(spider_boy_z_force_link)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.team_links)\n        print(\"Z-Force heroes:\", team_z_force.hero_links)\n\n        for link in hero_spider_boy.team_links:\n            if link.team.name == \"Preventers\":\n                link.is_training = False\n\n        session.add(hero_spider_boy)\n        session.commit()\n\n        for link in hero_spider_boy.team_links:\n            print(\"Spider-Boy team:\", link.team, \"is training:\", link.is_training)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u65b0\u7684 \u5173\u7cfb\u5c5e\u6027 \u6709\u5b83\u4eec\u81ea\u5df1\u7684 <code>back_populates</code>\uff0c\u6307\u5411\u6211\u4eec\u5c06\u5728 <code>Hero</code> \u548c <code>Team</code> \u6a21\u578b\u4e2d\u521b\u5efa\u7684\u65b0\u5173\u7cfb\u5c5e\u6027\uff1a</p> <ul> <li><code>team</code>\uff1a\u5177\u6709 <code>back_populates=\"hero_links\"</code>\uff0c\u56e0\u4e3a\u5728 <code>Team</code> \u6a21\u578b\u4e2d\uff0c\u8be5\u5c5e\u6027\u5c06\u5305\u542b\u6307\u5411 \u961f\u4f0d\u82f1\u96c4 \u7684\u94fe\u63a5\u3002</li> <li><code>hero</code>\uff1a\u5177\u6709 <code>back_populates=\"team_links\"</code>\uff0c\u56e0\u4e3a\u5728 <code>Hero</code> \u6a21\u578b\u4e2d\uff0c\u8be5\u5c5e\u6027\u5c06\u5305\u542b\u6307\u5411 \u82f1\u96c4\u961f\u4f0d \u7684\u94fe\u63a5\u3002</li> </ul> <p>Info</p> <p>\u5728 SQLAlchemy \u4e2d\uff0c\u8fd9\u88ab\u79f0\u4e3a\u5173\u8054\u5bf9\u8c61\u6216\u5173\u8054\u6a21\u578b\uff08Association Object \u6216 Association Model\uff09\u3002</p> <p>\u6211\u79f0\u5176\u4e3a \u8fde\u63a5\u6a21\u578b\uff0c\u4ec5\u4ec5\u662f\u56e0\u4e3a\u8fd9\u6837\u5199\u66f4\u7b80\u5355\uff0c\u907f\u514d\u4e86\u62fc\u5199\u9519\u8bef\u3002\u4f46\u60a8\u4e5f\u53ef\u4ee5\u6839\u636e\u9700\u8981\u968f\u610f\u547d\u540d\u3002\ud83d\ude09</p>"},{"location":"tutorial/many-to-many/link-with-extra-fields/#team","title":"\u66f4\u65b0 Team \u6a21\u578b","text":"<p>\u73b0\u5728\u8ba9\u6211\u4eec\u66f4\u65b0 <code>Team</code> \u6a21\u578b\u3002</p> <p>\u6211\u4eec\u4e0d\u518d\u4f7f\u7528 <code>heroes</code> \u5173\u7cfb\u5c5e\u6027\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\u65b0\u7684 <code>hero_links</code> \u5c5e\u6027\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    hero_links: list[HeroTeamLink] = Relationship(back_populates=\"team\")\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    hero_links: list[HeroTeamLink] = Relationship(back_populates=\"team\")\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    hero_links: List[HeroTeamLink] = Relationship(back_populates=\"team\")\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", primary_key=True)\n    hero_id: int | None = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\n    is_training: bool = False\n\n    team: \"Team\" = Relationship(back_populates=\"hero_links\")\n    hero: \"Hero\" = Relationship(back_populates=\"team_links\")\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    hero_links: list[HeroTeamLink] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_links: list[HeroTeamLink] = Relationship(back_populates=\"hero\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\",\n            secret_name=\"Pedro Parqueador\",\n        )\n        deadpond_team_z_link = HeroTeamLink(team=team_z_force, hero=hero_deadpond)\n        deadpond_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_deadpond, is_training=True\n        )\n        spider_boy_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_spider_boy, is_training=True\n        )\n        rusty_man_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_rusty_man\n        )\n\n        session.add(deadpond_team_z_link)\n        session.add(deadpond_preventers_link)\n        session.add(spider_boy_preventers_link)\n        session.add(rusty_man_preventers_link)\n        session.commit()\n\n        for link in team_z_force.hero_links:\n            print(\"Z-Force hero:\", link.hero, \"is training:\", link.is_training)\n\n        for link in team_preventers.hero_links:\n            print(\"Preventers hero:\", link.hero, \"is training:\", link.is_training)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        spider_boy_z_force_link = HeroTeamLink(\n            team=team_z_force, hero=hero_spider_boy, is_training=True\n        )\n        team_z_force.hero_links.append(spider_boy_z_force_link)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.team_links)\n        print(\"Z-Force heroes:\", team_z_force.hero_links)\n\n        for link in hero_spider_boy.team_links:\n            if link.team.name == \"Preventers\":\n                link.is_training = False\n\n        session.add(hero_spider_boy)\n        session.commit()\n\n        for link in hero_spider_boy.team_links:\n            print(\"Spider-Boy team:\", link.team, \"is training:\", link.is_training)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n    is_training: bool = False\n\n    team: \"Team\" = Relationship(back_populates=\"hero_links\")\n    hero: \"Hero\" = Relationship(back_populates=\"team_links\")\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    hero_links: list[HeroTeamLink] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_links: list[HeroTeamLink] = Relationship(back_populates=\"hero\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\",\n            secret_name=\"Pedro Parqueador\",\n        )\n        deadpond_team_z_link = HeroTeamLink(team=team_z_force, hero=hero_deadpond)\n        deadpond_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_deadpond, is_training=True\n        )\n        spider_boy_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_spider_boy, is_training=True\n        )\n        rusty_man_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_rusty_man\n        )\n\n        session.add(deadpond_team_z_link)\n        session.add(deadpond_preventers_link)\n        session.add(spider_boy_preventers_link)\n        session.add(rusty_man_preventers_link)\n        session.commit()\n\n        for link in team_z_force.hero_links:\n            print(\"Z-Force hero:\", link.hero, \"is training:\", link.is_training)\n\n        for link in team_preventers.hero_links:\n            print(\"Preventers hero:\", link.hero, \"is training:\", link.is_training)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        spider_boy_z_force_link = HeroTeamLink(\n            team=team_z_force, hero=hero_spider_boy, is_training=True\n        )\n        team_z_force.hero_links.append(spider_boy_z_force_link)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.team_links)\n        print(\"Z-Force heroes:\", team_z_force.hero_links)\n\n        for link in hero_spider_boy.team_links:\n            if link.team.name == \"Preventers\":\n                link.is_training = False\n\n        session.add(hero_spider_boy)\n        session.commit()\n\n        for link in hero_spider_boy.team_links:\n            print(\"Spider-Boy team:\", link.team, \"is training:\", link.is_training)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n    is_training: bool = False\n\n    team: \"Team\" = Relationship(back_populates=\"hero_links\")\n    hero: \"Hero\" = Relationship(back_populates=\"team_links\")\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    hero_links: List[HeroTeamLink] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_links: List[HeroTeamLink] = Relationship(back_populates=\"hero\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\",\n            secret_name=\"Pedro Parqueador\",\n        )\n        deadpond_team_z_link = HeroTeamLink(team=team_z_force, hero=hero_deadpond)\n        deadpond_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_deadpond, is_training=True\n        )\n        spider_boy_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_spider_boy, is_training=True\n        )\n        rusty_man_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_rusty_man\n        )\n\n        session.add(deadpond_team_z_link)\n        session.add(deadpond_preventers_link)\n        session.add(spider_boy_preventers_link)\n        session.add(rusty_man_preventers_link)\n        session.commit()\n\n        for link in team_z_force.hero_links:\n            print(\"Z-Force hero:\", link.hero, \"is training:\", link.is_training)\n\n        for link in team_preventers.hero_links:\n            print(\"Preventers hero:\", link.hero, \"is training:\", link.is_training)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        spider_boy_z_force_link = HeroTeamLink(\n            team=team_z_force, hero=hero_spider_boy, is_training=True\n        )\n        team_z_force.hero_links.append(spider_boy_z_force_link)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.team_links)\n        print(\"Z-Force heroes:\", team_z_force.hero_links)\n\n        for link in hero_spider_boy.team_links:\n            if link.team.name == \"Preventers\":\n                link.is_training = False\n\n        session.add(hero_spider_boy)\n        session.commit()\n\n        for link in hero_spider_boy.team_links:\n            print(\"Spider-Boy team:\", link.team, \"is training:\", link.is_training)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/many-to-many/link-with-extra-fields/#hero","title":"\u66f4\u65b0 Hero \u6a21\u578b","text":"<p>\u540c\u6837\u7684\uff0c\u66f4\u65b0 <code>Hero</code> \u6a21\u578b\u3002</p> <p>\u6211\u4eec\u5c06 <code>teams</code> \u5173\u7cfb\u5c5e\u6027\u6539\u4e3a <code>team_links</code>\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_links: list[HeroTeamLink] = Relationship(back_populates=\"hero\")\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_links: list[HeroTeamLink] = Relationship(back_populates=\"hero\")\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_links: List[HeroTeamLink] = Relationship(back_populates=\"hero\")\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", primary_key=True)\n    hero_id: int | None = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\n    is_training: bool = False\n\n    team: \"Team\" = Relationship(back_populates=\"hero_links\")\n    hero: \"Hero\" = Relationship(back_populates=\"team_links\")\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    hero_links: list[HeroTeamLink] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_links: list[HeroTeamLink] = Relationship(back_populates=\"hero\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\",\n            secret_name=\"Pedro Parqueador\",\n        )\n        deadpond_team_z_link = HeroTeamLink(team=team_z_force, hero=hero_deadpond)\n        deadpond_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_deadpond, is_training=True\n        )\n        spider_boy_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_spider_boy, is_training=True\n        )\n        rusty_man_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_rusty_man\n        )\n\n        session.add(deadpond_team_z_link)\n        session.add(deadpond_preventers_link)\n        session.add(spider_boy_preventers_link)\n        session.add(rusty_man_preventers_link)\n        session.commit()\n\n        for link in team_z_force.hero_links:\n            print(\"Z-Force hero:\", link.hero, \"is training:\", link.is_training)\n\n        for link in team_preventers.hero_links:\n            print(\"Preventers hero:\", link.hero, \"is training:\", link.is_training)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        spider_boy_z_force_link = HeroTeamLink(\n            team=team_z_force, hero=hero_spider_boy, is_training=True\n        )\n        team_z_force.hero_links.append(spider_boy_z_force_link)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.team_links)\n        print(\"Z-Force heroes:\", team_z_force.hero_links)\n\n        for link in hero_spider_boy.team_links:\n            if link.team.name == \"Preventers\":\n                link.is_training = False\n\n        session.add(hero_spider_boy)\n        session.commit()\n\n        for link in hero_spider_boy.team_links:\n            print(\"Spider-Boy team:\", link.team, \"is training:\", link.is_training)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n    is_training: bool = False\n\n    team: \"Team\" = Relationship(back_populates=\"hero_links\")\n    hero: \"Hero\" = Relationship(back_populates=\"team_links\")\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    hero_links: list[HeroTeamLink] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_links: list[HeroTeamLink] = Relationship(back_populates=\"hero\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\",\n            secret_name=\"Pedro Parqueador\",\n        )\n        deadpond_team_z_link = HeroTeamLink(team=team_z_force, hero=hero_deadpond)\n        deadpond_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_deadpond, is_training=True\n        )\n        spider_boy_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_spider_boy, is_training=True\n        )\n        rusty_man_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_rusty_man\n        )\n\n        session.add(deadpond_team_z_link)\n        session.add(deadpond_preventers_link)\n        session.add(spider_boy_preventers_link)\n        session.add(rusty_man_preventers_link)\n        session.commit()\n\n        for link in team_z_force.hero_links:\n            print(\"Z-Force hero:\", link.hero, \"is training:\", link.is_training)\n\n        for link in team_preventers.hero_links:\n            print(\"Preventers hero:\", link.hero, \"is training:\", link.is_training)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        spider_boy_z_force_link = HeroTeamLink(\n            team=team_z_force, hero=hero_spider_boy, is_training=True\n        )\n        team_z_force.hero_links.append(spider_boy_z_force_link)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.team_links)\n        print(\"Z-Force heroes:\", team_z_force.hero_links)\n\n        for link in hero_spider_boy.team_links:\n            if link.team.name == \"Preventers\":\n                link.is_training = False\n\n        session.add(hero_spider_boy)\n        session.commit()\n\n        for link in hero_spider_boy.team_links:\n            print(\"Spider-Boy team:\", link.team, \"is training:\", link.is_training)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n    is_training: bool = False\n\n    team: \"Team\" = Relationship(back_populates=\"hero_links\")\n    hero: \"Hero\" = Relationship(back_populates=\"team_links\")\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    hero_links: List[HeroTeamLink] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_links: List[HeroTeamLink] = Relationship(back_populates=\"hero\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\",\n            secret_name=\"Pedro Parqueador\",\n        )\n        deadpond_team_z_link = HeroTeamLink(team=team_z_force, hero=hero_deadpond)\n        deadpond_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_deadpond, is_training=True\n        )\n        spider_boy_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_spider_boy, is_training=True\n        )\n        rusty_man_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_rusty_man\n        )\n\n        session.add(deadpond_team_z_link)\n        session.add(deadpond_preventers_link)\n        session.add(spider_boy_preventers_link)\n        session.add(rusty_man_preventers_link)\n        session.commit()\n\n        for link in team_z_force.hero_links:\n            print(\"Z-Force hero:\", link.hero, \"is training:\", link.is_training)\n\n        for link in team_preventers.hero_links:\n            print(\"Preventers hero:\", link.hero, \"is training:\", link.is_training)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        spider_boy_z_force_link = HeroTeamLink(\n            team=team_z_force, hero=hero_spider_boy, is_training=True\n        )\n        team_z_force.hero_links.append(spider_boy_z_force_link)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.team_links)\n        print(\"Z-Force heroes:\", team_z_force.hero_links)\n\n        for link in hero_spider_boy.team_links:\n            if link.team.name == \"Preventers\":\n                link.is_training = False\n\n        session.add(hero_spider_boy)\n        session.commit()\n\n        for link in hero_spider_boy.team_links:\n            print(\"Spider-Boy team:\", link.team, \"is training:\", link.is_training)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/many-to-many/link-with-extra-fields/#_4","title":"\u521b\u5efa\u5173\u7cfb","text":"<p>\u73b0\u5728\u521b\u5efa\u5173\u7cfb\u7684\u8fc7\u7a0b\u975e\u5e38\u76f8\u4f3c\u3002</p> <p>\u4f46\u73b0\u5728\u6211\u4eec\u9700\u8981\u624b\u52a8\u521b\u5efa**\u663e\u5f0f\u7684\u94fe\u63a5\u6a21\u578b**\uff0c\u8fd9\u4e9b\u6a21\u578b\u6307\u5411\u5b83\u4eec\u7684\u82f1\u96c4\u548c\u56e2\u961f\u5b9e\u4f8b\uff0c\u5e76\u6307\u5b9a\u989d\u5916\u7684\u94fe\u63a5\u6570\u636e\uff08<code>is_training</code>\uff09\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\",\n            secret_name=\"Pedro Parqueador\",\n        )\n        deadpond_team_z_link = HeroTeamLink(team=team_z_force, hero=hero_deadpond)\n        deadpond_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_deadpond, is_training=True\n        )\n        spider_boy_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_spider_boy, is_training=True\n        )\n        rusty_man_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_rusty_man\n        )\n\n        session.add(deadpond_team_z_link)\n        session.add(deadpond_preventers_link)\n        session.add(spider_boy_preventers_link)\n        session.add(rusty_man_preventers_link)\n        session.commit()\n\n        for link in team_z_force.hero_links:\n            print(\"Z-Force hero:\", link.hero, \"is training:\", link.is_training)\n\n        for link in team_preventers.hero_links:\n            print(\"Preventers hero:\", link.hero, \"is training:\", link.is_training)\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\",\n            secret_name=\"Pedro Parqueador\",\n        )\n        deadpond_team_z_link = HeroTeamLink(team=team_z_force, hero=hero_deadpond)\n        deadpond_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_deadpond, is_training=True\n        )\n        spider_boy_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_spider_boy, is_training=True\n        )\n        rusty_man_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_rusty_man\n        )\n\n        session.add(deadpond_team_z_link)\n        session.add(deadpond_preventers_link)\n        session.add(spider_boy_preventers_link)\n        session.add(rusty_man_preventers_link)\n        session.commit()\n\n        for link in team_z_force.hero_links:\n            print(\"Z-Force hero:\", link.hero, \"is training:\", link.is_training)\n\n        for link in team_preventers.hero_links:\n            print(\"Preventers hero:\", link.hero, \"is training:\", link.is_training)\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\",\n            secret_name=\"Pedro Parqueador\",\n        )\n        deadpond_team_z_link = HeroTeamLink(team=team_z_force, hero=hero_deadpond)\n        deadpond_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_deadpond, is_training=True\n        )\n        spider_boy_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_spider_boy, is_training=True\n        )\n        rusty_man_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_rusty_man\n        )\n\n        session.add(deadpond_team_z_link)\n        session.add(deadpond_preventers_link)\n        session.add(spider_boy_preventers_link)\n        session.add(rusty_man_preventers_link)\n        session.commit()\n\n        for link in team_z_force.hero_links:\n            print(\"Z-Force hero:\", link.hero, \"is training:\", link.is_training)\n\n        for link in team_preventers.hero_links:\n            print(\"Preventers hero:\", link.hero, \"is training:\", link.is_training)\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", primary_key=True)\n    hero_id: int | None = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\n    is_training: bool = False\n\n    team: \"Team\" = Relationship(back_populates=\"hero_links\")\n    hero: \"Hero\" = Relationship(back_populates=\"team_links\")\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    hero_links: list[HeroTeamLink] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_links: list[HeroTeamLink] = Relationship(back_populates=\"hero\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\",\n            secret_name=\"Pedro Parqueador\",\n        )\n        deadpond_team_z_link = HeroTeamLink(team=team_z_force, hero=hero_deadpond)\n        deadpond_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_deadpond, is_training=True\n        )\n        spider_boy_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_spider_boy, is_training=True\n        )\n        rusty_man_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_rusty_man\n        )\n\n        session.add(deadpond_team_z_link)\n        session.add(deadpond_preventers_link)\n        session.add(spider_boy_preventers_link)\n        session.add(rusty_man_preventers_link)\n        session.commit()\n\n        for link in team_z_force.hero_links:\n            print(\"Z-Force hero:\", link.hero, \"is training:\", link.is_training)\n\n        for link in team_preventers.hero_links:\n            print(\"Preventers hero:\", link.hero, \"is training:\", link.is_training)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        spider_boy_z_force_link = HeroTeamLink(\n            team=team_z_force, hero=hero_spider_boy, is_training=True\n        )\n        team_z_force.hero_links.append(spider_boy_z_force_link)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.team_links)\n        print(\"Z-Force heroes:\", team_z_force.hero_links)\n\n        for link in hero_spider_boy.team_links:\n            if link.team.name == \"Preventers\":\n                link.is_training = False\n\n        session.add(hero_spider_boy)\n        session.commit()\n\n        for link in hero_spider_boy.team_links:\n            print(\"Spider-Boy team:\", link.team, \"is training:\", link.is_training)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n    is_training: bool = False\n\n    team: \"Team\" = Relationship(back_populates=\"hero_links\")\n    hero: \"Hero\" = Relationship(back_populates=\"team_links\")\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    hero_links: list[HeroTeamLink] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_links: list[HeroTeamLink] = Relationship(back_populates=\"hero\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\",\n            secret_name=\"Pedro Parqueador\",\n        )\n        deadpond_team_z_link = HeroTeamLink(team=team_z_force, hero=hero_deadpond)\n        deadpond_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_deadpond, is_training=True\n        )\n        spider_boy_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_spider_boy, is_training=True\n        )\n        rusty_man_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_rusty_man\n        )\n\n        session.add(deadpond_team_z_link)\n        session.add(deadpond_preventers_link)\n        session.add(spider_boy_preventers_link)\n        session.add(rusty_man_preventers_link)\n        session.commit()\n\n        for link in team_z_force.hero_links:\n            print(\"Z-Force hero:\", link.hero, \"is training:\", link.is_training)\n\n        for link in team_preventers.hero_links:\n            print(\"Preventers hero:\", link.hero, \"is training:\", link.is_training)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        spider_boy_z_force_link = HeroTeamLink(\n            team=team_z_force, hero=hero_spider_boy, is_training=True\n        )\n        team_z_force.hero_links.append(spider_boy_z_force_link)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.team_links)\n        print(\"Z-Force heroes:\", team_z_force.hero_links)\n\n        for link in hero_spider_boy.team_links:\n            if link.team.name == \"Preventers\":\n                link.is_training = False\n\n        session.add(hero_spider_boy)\n        session.commit()\n\n        for link in hero_spider_boy.team_links:\n            print(\"Spider-Boy team:\", link.team, \"is training:\", link.is_training)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n    is_training: bool = False\n\n    team: \"Team\" = Relationship(back_populates=\"hero_links\")\n    hero: \"Hero\" = Relationship(back_populates=\"team_links\")\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    hero_links: List[HeroTeamLink] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_links: List[HeroTeamLink] = Relationship(back_populates=\"hero\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\",\n            secret_name=\"Pedro Parqueador\",\n        )\n        deadpond_team_z_link = HeroTeamLink(team=team_z_force, hero=hero_deadpond)\n        deadpond_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_deadpond, is_training=True\n        )\n        spider_boy_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_spider_boy, is_training=True\n        )\n        rusty_man_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_rusty_man\n        )\n\n        session.add(deadpond_team_z_link)\n        session.add(deadpond_preventers_link)\n        session.add(spider_boy_preventers_link)\n        session.add(rusty_man_preventers_link)\n        session.commit()\n\n        for link in team_z_force.hero_links:\n            print(\"Z-Force hero:\", link.hero, \"is training:\", link.is_training)\n\n        for link in team_preventers.hero_links:\n            print(\"Preventers hero:\", link.hero, \"is training:\", link.is_training)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        spider_boy_z_force_link = HeroTeamLink(\n            team=team_z_force, hero=hero_spider_boy, is_training=True\n        )\n        team_z_force.hero_links.append(spider_boy_z_force_link)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.team_links)\n        print(\"Z-Force heroes:\", team_z_force.hero_links)\n\n        for link in hero_spider_boy.team_links:\n            if link.team.name == \"Preventers\":\n                link.is_training = False\n\n        session.add(hero_spider_boy)\n        session.commit()\n\n        for link in hero_spider_boy.team_links:\n            print(\"Spider-Boy team:\", link.team, \"is training:\", link.is_training)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u6211\u4eec\u53ea\u9700\u8981\u5c06\u94fe\u63a5\u6a21\u578b\u5b9e\u4f8b\u6dfb\u52a0\u5230\u4f1a\u8bdd\u4e2d\uff0c\u56e0\u4e3a\u94fe\u63a5\u6a21\u578b\u5b9e\u4f8b\u5df2\u7ecf\u8fde\u63a5\u5230\u82f1\u96c4\u548c\u56e2\u961f\uff0c\u5f53\u6211\u4eec\u63d0\u4ea4\u65f6\uff0c\u5b83\u4eec\u4e5f\u4f1a\u81ea\u52a8\u5305\u542b\u5728\u4f1a\u8bdd\u4e2d\u3002</p>"},{"location":"tutorial/many-to-many/link-with-extra-fields/#_5","title":"\u8fd0\u884c\u7a0b\u5e8f","text":"<p>\u73b0\u5728\uff0c\u5982\u679c\u6211\u4eec\u8fd0\u884c\u7a0b\u5e8f\uff0c\u5b83\u5c06\u663e\u793a\u51e0\u4e4e\u4e0e\u4e4b\u524d\u76f8\u540c\u7684\u8f93\u51fa\uff0c\u56e0\u4e3a\u5b83\u751f\u6210\u7684 SQL \u51e0\u4e4e\u76f8\u540c\uff0c\u4f46\u8fd9\u6b21\u5305\u62ec\u4e86\u65b0\u7684 <code>is_training</code> \u5217\uff1a</p> <pre><code>$ python app.py\n\n// \u7701\u7565\u4e4b\u524d\u7684\u8f93\u51fa \ud83d\ude48\n\n// \u81ea\u52a8\u5f00\u59cb\u4e00\u4e2a\u65b0\u4e8b\u52a1\nINFO Engine BEGIN (implicit)\n\n// \u63d2\u5165\u82f1\u96c4\u6570\u636e\nINFO Engine INSERT INTO hero (name, secret_name, age) VALUES (?, ?, ?)\nINFO Engine [generated in 0.00025s] ('Deadpond', 'Dive Wilson', None)\nINFO Engine INSERT INTO hero (name, secret_name, age) VALUES (?, ?, ?)\nINFO Engine [cached since 0.00136s ago] ('Spider-Boy', 'Pedro Parqueador', None)\nINFO Engine INSERT INTO hero (name, secret_name, age) VALUES (?, ?, ?)\nINFO Engine [cached since 0.001858s ago] ('Rusty-Man', 'Tommy Sharp', 48)\n\n// \u63d2\u5165\u56e2\u961f\u6570\u636e\nINFO Engine INSERT INTO team (name, headquarters) VALUES (?, ?)\nINFO Engine [generated in 0.00019s] ('Z-Force', 'Sister Margaret's Bar')\nINFO Engine INSERT INTO team (name, headquarters) VALUES (?, ?)\nINFO Engine [cached since 0.0007985s ago] ('Preventers', 'Sharp Tower')\n\n// \u63d2\u5165\u82f1\u96c4-\u56e2\u961f\u94fe\u63a5\u6570\u636e\nINFO Engine INSERT INTO heroteamlink (team_id, hero_id, is_training) VALUES (?, ?, ?)\nINFO Engine [generated in 0.00023s] ((1, 1, 0), (2, 1, 1), (2, 2, 1), (2, 3, 0))\n// \u5728\u4e8b\u52a1\u4e2d\u4fdd\u5b58\u66f4\u6539\u5230\u6570\u636e\u5e93\nINFO Engine COMMIT\n\n// \u81ea\u52a8\u5f00\u59cb\u4e00\u4e2a\u65b0\u4e8b\u52a1\nINFO Engine BEGIN (implicit)\n\n// \u81ea\u52a8\u83b7\u53d6\u5c5e\u6027\u8bbf\u95ee\u65f6\u7684\u6570\u636e\nINFO Engine SELECT team.id AS team_id, team.name AS team_name, team.headquarters AS team_headquarters\nFROM team\nWHERE team.id = ?\nINFO Engine [generated in 0.00028s] (1,)\nINFO Engine SELECT heroteamlink.team_id AS heroteamlink_team_id, heroteamlink.hero_id AS heroteamlink_hero_id, heroteamlink.is_training AS heroteamlink_is_training\nFROM heroteamlink\nWHERE ? = heroteamlink.team_id\nINFO Engine [generated in 0.00026s] (1,)\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [generated in 0.00024s] (1,)\n\n// \u6253\u5370 Z-Force \u82f1\u96c4\u6570\u636e\uff0c\u5305\u62ec\u94fe\u63a5\u6570\u636e\nZ-Force hero: name='Deadpond' age=None id=1 secret_name='Dive Wilson' is training: False\n\n// \u81ea\u52a8\u83b7\u53d6\u5c5e\u6027\u8bbf\u95ee\u65f6\u7684\u6570\u636e\nINFO Engine SELECT team.id AS team_id, team.name AS team_name, team.headquarters AS team_headquarters\nFROM team\nWHERE team.id = ?\nINFO Engine [cached since 0.008822s ago] (2,)\nINFO Engine SELECT heroteamlink.team_id AS heroteamlink_team_id, heroteamlink.hero_id AS heroteamlink_hero_id, heroteamlink.is_training AS heroteamlink_is_training\nFROM heroteamlink\nWHERE ? = heroteamlink.team_id\nINFO Engine [cached since 0.005778s ago] (2,)\n\n// \u6253\u5370 Preventers \u82f1\u96c4\u6570\u636e\uff0c\u5305\u62ec\u94fe\u63a5\u6570\u636e\nPreventers hero: name='Deadpond' age=None id=1 secret_name='Dive Wilson' is training: True\n\n// \u81ea\u52a8\u83b7\u53d6\u5c5e\u6027\u8bbf\u95ee\u65f6\u7684\u6570\u636e\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.004196s ago] (2,)\n\n// \u6253\u5370 Preventers \u82f1\u96c4\u6570\u636e\uff0c\u5305\u62ec\u94fe\u63a5\u6570\u636e\nPreventers hero: name='Spider-Boy' age=None id=2 secret_name='Pedro Parqueador' is training: True\n\n// \u81ea\u52a8\u83b7\u53d6\u5c5e\u6027\u8bbf\u95ee\u65f6\u7684\u6570\u636e\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.006005s ago] (3,)\n\n// \u6253\u5370 Preventers \u82f1\u96c4\u6570\u636e\uff0c\u5305\u62ec\u94fe\u63a5\u6570\u636e\nPreventers hero: name='Rusty-Man' age=48 id=3 secret_name='Tommy Sharp' is training: False\n</code></pre>"},{"location":"tutorial/many-to-many/link-with-extra-fields/#_6","title":"\u6dfb\u52a0\u5173\u7cfb","text":"<p>\u73b0\u5728\uff0c\u8981\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u5173\u7cfb\uff0c\u6211\u4eec\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 <code>HeroTeamLink</code> \u5b9e\u4f8b\uff0c\u6307\u5411\u82f1\u96c4\u548c\u56e2\u961f\uff0c\u6dfb\u52a0\u5230\u4f1a\u8bdd\u4e2d\uff0c\u7136\u540e\u63d0\u4ea4\u5b83\u3002</p> <p>\u8fd9\u91cc\u6211\u4eec\u5728 <code>update_heroes()</code> \u51fd\u6570\u4e2d\u6267\u884c\u6b64\u64cd\u4f5c\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        spider_boy_z_force_link = HeroTeamLink(\n            team=team_z_force, hero=hero_spider_boy, is_training=True\n        )\n        team_z_force.hero_links.append(spider_boy_z_force_link)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.team_links)\n        print(\"Z-Force heroes:\", team_z_force.hero_links)\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        spider_boy_z_force_link = HeroTeamLink(\n            team=team_z_force, hero=hero_spider_boy, is_training=True\n        )\n        team_z_force.hero_links.append(spider_boy_z_force_link)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.team_links)\n        print(\"Z-Force heroes:\", team_z_force.hero_links)\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        spider_boy_z_force_link = HeroTeamLink(\n            team=team_z_force, hero=hero_spider_boy, is_training=True\n        )\n        team_z_force.hero_links.append(spider_boy_z_force_link)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.team_links)\n        print(\"Z-Force heroes:\", team_z_force.hero_links)\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", primary_key=True)\n    hero_id: int | None = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\n    is_training: bool = False\n\n    team: \"Team\" = Relationship(back_populates=\"hero_links\")\n    hero: \"Hero\" = Relationship(back_populates=\"team_links\")\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    hero_links: list[HeroTeamLink] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_links: list[HeroTeamLink] = Relationship(back_populates=\"hero\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\",\n            secret_name=\"Pedro Parqueador\",\n        )\n        deadpond_team_z_link = HeroTeamLink(team=team_z_force, hero=hero_deadpond)\n        deadpond_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_deadpond, is_training=True\n        )\n        spider_boy_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_spider_boy, is_training=True\n        )\n        rusty_man_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_rusty_man\n        )\n\n        session.add(deadpond_team_z_link)\n        session.add(deadpond_preventers_link)\n        session.add(spider_boy_preventers_link)\n        session.add(rusty_man_preventers_link)\n        session.commit()\n\n        for link in team_z_force.hero_links:\n            print(\"Z-Force hero:\", link.hero, \"is training:\", link.is_training)\n\n        for link in team_preventers.hero_links:\n            print(\"Preventers hero:\", link.hero, \"is training:\", link.is_training)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        spider_boy_z_force_link = HeroTeamLink(\n            team=team_z_force, hero=hero_spider_boy, is_training=True\n        )\n        team_z_force.hero_links.append(spider_boy_z_force_link)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.team_links)\n        print(\"Z-Force heroes:\", team_z_force.hero_links)\n\n        for link in hero_spider_boy.team_links:\n            if link.team.name == \"Preventers\":\n                link.is_training = False\n\n        session.add(hero_spider_boy)\n        session.commit()\n\n        for link in hero_spider_boy.team_links:\n            print(\"Spider-Boy team:\", link.team, \"is training:\", link.is_training)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n    is_training: bool = False\n\n    team: \"Team\" = Relationship(back_populates=\"hero_links\")\n    hero: \"Hero\" = Relationship(back_populates=\"team_links\")\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    hero_links: list[HeroTeamLink] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_links: list[HeroTeamLink] = Relationship(back_populates=\"hero\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\",\n            secret_name=\"Pedro Parqueador\",\n        )\n        deadpond_team_z_link = HeroTeamLink(team=team_z_force, hero=hero_deadpond)\n        deadpond_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_deadpond, is_training=True\n        )\n        spider_boy_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_spider_boy, is_training=True\n        )\n        rusty_man_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_rusty_man\n        )\n\n        session.add(deadpond_team_z_link)\n        session.add(deadpond_preventers_link)\n        session.add(spider_boy_preventers_link)\n        session.add(rusty_man_preventers_link)\n        session.commit()\n\n        for link in team_z_force.hero_links:\n            print(\"Z-Force hero:\", link.hero, \"is training:\", link.is_training)\n\n        for link in team_preventers.hero_links:\n            print(\"Preventers hero:\", link.hero, \"is training:\", link.is_training)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        spider_boy_z_force_link = HeroTeamLink(\n            team=team_z_force, hero=hero_spider_boy, is_training=True\n        )\n        team_z_force.hero_links.append(spider_boy_z_force_link)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.team_links)\n        print(\"Z-Force heroes:\", team_z_force.hero_links)\n\n        for link in hero_spider_boy.team_links:\n            if link.team.name == \"Preventers\":\n                link.is_training = False\n\n        session.add(hero_spider_boy)\n        session.commit()\n\n        for link in hero_spider_boy.team_links:\n            print(\"Spider-Boy team:\", link.team, \"is training:\", link.is_training)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n    is_training: bool = False\n\n    team: \"Team\" = Relationship(back_populates=\"hero_links\")\n    hero: \"Hero\" = Relationship(back_populates=\"team_links\")\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    hero_links: List[HeroTeamLink] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_links: List[HeroTeamLink] = Relationship(back_populates=\"hero\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\",\n            secret_name=\"Pedro Parqueador\",\n        )\n        deadpond_team_z_link = HeroTeamLink(team=team_z_force, hero=hero_deadpond)\n        deadpond_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_deadpond, is_training=True\n        )\n        spider_boy_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_spider_boy, is_training=True\n        )\n        rusty_man_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_rusty_man\n        )\n\n        session.add(deadpond_team_z_link)\n        session.add(deadpond_preventers_link)\n        session.add(spider_boy_preventers_link)\n        session.add(rusty_man_preventers_link)\n        session.commit()\n\n        for link in team_z_force.hero_links:\n            print(\"Z-Force hero:\", link.hero, \"is training:\", link.is_training)\n\n        for link in team_preventers.hero_links:\n            print(\"Preventers hero:\", link.hero, \"is training:\", link.is_training)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        spider_boy_z_force_link = HeroTeamLink(\n            team=team_z_force, hero=hero_spider_boy, is_training=True\n        )\n        team_z_force.hero_links.append(spider_boy_z_force_link)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.team_links)\n        print(\"Z-Force heroes:\", team_z_force.hero_links)\n\n        for link in hero_spider_boy.team_links:\n            if link.team.name == \"Preventers\":\n                link.is_training = False\n\n        session.add(hero_spider_boy)\n        session.commit()\n\n        for link in hero_spider_boy.team_links:\n            print(\"Spider-Boy team:\", link.team, \"is training:\", link.is_training)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/many-to-many/link-with-extra-fields/#_7","title":"\u4f7f\u7528\u65b0\u5173\u7cfb\u8fd0\u884c\u7a0b\u5e8f","text":"<p>\u5982\u679c\u6211\u4eec\u8fd0\u884c\u8be5\u7a0b\u5e8f\uff0c\u5c06\u770b\u5230\u5982\u4e0b\u8f93\u51fa\uff1a</p> <pre><code>$ python app.py\n\n// \u7701\u7565\u4e4b\u524d\u7684\u8f93\u51fa \ud83d\ude48\n\n// \u81ea\u52a8\u5f00\u59cb\u4e00\u4e2a\u65b0\u4e8b\u52a1\nINFO Engine BEGIN (implicit)\n\n// \u9009\u62e9\u82f1\u96c4\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.name = ?\nINFO Engine [no key 0.00014s] ('Spider-Boy',)\n\n// \u9009\u62e9\u56e2\u961f\nINFO Engine SELECT team.id, team.name, team.headquarters\nFROM team\nWHERE team.name = ?\nINFO Engine [no key 0.00012s] ('Z-Force',)\n\n// \u521b\u5efa\u94fe\u63a5\nINFO Engine INSERT INTO heroteamlink (team_id, hero_id, is_training) VALUES (?, ?, ?)\nINFO Engine [generated in 0.00023s] (1, 2, 1)\n\n// \u81ea\u52a8\u5237\u65b0\u6570\u636e\uff0c\u8bbf\u95ee\u5c5e\u6027\u65f6\nINFO Engine SELECT heroteamlink.team_id AS heroteamlink_team_id, heroteamlink.hero_id AS heroteamlink_hero_id, heroteamlink.is_training AS heroteamlink_is_training\nFROM heroteamlink\nWHERE ? = heroteamlink.team_id\nINFO Engine [cached since 0.01514s ago] (1,)\nINFO Engine COMMIT\nINFO Engine BEGIN (implicit)\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.08953s ago] (2,)\nINFO Engine SELECT heroteamlink.team_id AS heroteamlink_team_id, heroteamlink.hero_id AS heroteamlink_hero_id, heroteamlink.is_training AS heroteamlink_is_training\nFROM heroteamlink\nWHERE ? = heroteamlink.hero_id\nINFO Engine [generated in 0.00018s] (2,)\n\n// \u6253\u5370\u66f4\u65b0\u540e\u7684\u82f1\u96c4\u94fe\u63a5\nUpdated Spider-Boy's Teams: [\n    HeroTeamLink(team_id=2, is_training=True, hero_id=2),\n    HeroTeamLink(team_id=1, is_training=True, hero_id=2)\n]\n\n// \u81ea\u52a8\u5237\u65b0\u56e2\u961f\u6570\u636e\uff0c\u8bbf\u95ee\u5c5e\u6027\u65f6\nINFO Engine SELECT team.id AS team_id, team.name AS team_name, team.headquarters AS team_headquarters\nFROM team\nWHERE team.id = ?\nINFO Engine [cached since 0.1084s ago] (1,)\nINFO Engine SELECT heroteamlink.team_id AS heroteamlink_team_id, heroteamlink.hero_id AS heroteamlink_hero_id, heroteamlink.is_training AS heroteamlink_is_training\nFROM heroteamlink\nWHERE ? = heroteamlink.team_id\nINFO Engine [cached since 0.1054s ago] (1,)\n\n// \u6253\u5370\u56e2\u961f\u82f1\u96c4\u94fe\u63a5\nZ-Force heroes: [\n    HeroTeamLink(team_id=1, is_training=False, hero_id=1),\n    HeroTeamLink(team_id=1, is_training=True, hero_id=2)\n]\n</code></pre>"},{"location":"tutorial/many-to-many/link-with-extra-fields/#_8","title":"\u4f7f\u7528\u94fe\u63a5\u66f4\u65b0\u5173\u7cfb","text":"<p>\u73b0\u5728\u5047\u8bbe Spider-Boy \u5728 Preventers \u8bad\u7ec3\u5f97\u8db3\u591f\u4e45\uff0c\u56e2\u961f\u540c\u610f\u4ed6\u53ef\u4ee5\u5168\u804c\u52a0\u5165\u3002</p> <p>\u56e0\u6b64\uff0c\u6211\u4eec\u73b0\u5728\u5e0c\u671b\u5c06 <code>is_training</code> \u7684\u72b6\u6001\u66f4\u65b0\u4e3a <code>False</code>\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fed\u4ee3\u94fe\u63a5\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n\n        # \u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n        for link in hero_spider_boy.team_links:\n            if link.team.name == \"Preventers\":\n                link.is_training = False\n\n        session.add(hero_spider_boy)\n        session.commit()\n\n        for link in hero_spider_boy.team_links:\n            print(\"Spider-Boy team:\", link.team, \"is training:\", link.is_training)\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n\n        # \u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n        for link in hero_spider_boy.team_links:\n            if link.team.name == \"Preventers\":\n                link.is_training = False\n\n        session.add(hero_spider_boy)\n        session.commit()\n\n        for link in hero_spider_boy.team_links:\n            print(\"Spider-Boy team:\", link.team, \"is training:\", link.is_training)\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n\n        # \u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n        for link in hero_spider_boy.team_links:\n            if link.team.name == \"Preventers\":\n                link.is_training = False\n\n        session.add(hero_spider_boy)\n        session.commit()\n\n        for link in hero_spider_boy.team_links:\n            print(\"Spider-Boy team:\", link.team, \"is training:\", link.is_training)\n\n# \u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", primary_key=True)\n    hero_id: int | None = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\n    is_training: bool = False\n\n    team: \"Team\" = Relationship(back_populates=\"hero_links\")\n    hero: \"Hero\" = Relationship(back_populates=\"team_links\")\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    hero_links: list[HeroTeamLink] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_links: list[HeroTeamLink] = Relationship(back_populates=\"hero\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\",\n            secret_name=\"Pedro Parqueador\",\n        )\n        deadpond_team_z_link = HeroTeamLink(team=team_z_force, hero=hero_deadpond)\n        deadpond_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_deadpond, is_training=True\n        )\n        spider_boy_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_spider_boy, is_training=True\n        )\n        rusty_man_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_rusty_man\n        )\n\n        session.add(deadpond_team_z_link)\n        session.add(deadpond_preventers_link)\n        session.add(spider_boy_preventers_link)\n        session.add(rusty_man_preventers_link)\n        session.commit()\n\n        for link in team_z_force.hero_links:\n            print(\"Z-Force hero:\", link.hero, \"is training:\", link.is_training)\n\n        for link in team_preventers.hero_links:\n            print(\"Preventers hero:\", link.hero, \"is training:\", link.is_training)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        spider_boy_z_force_link = HeroTeamLink(\n            team=team_z_force, hero=hero_spider_boy, is_training=True\n        )\n        team_z_force.hero_links.append(spider_boy_z_force_link)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.team_links)\n        print(\"Z-Force heroes:\", team_z_force.hero_links)\n\n        for link in hero_spider_boy.team_links:\n            if link.team.name == \"Preventers\":\n                link.is_training = False\n\n        session.add(hero_spider_boy)\n        session.commit()\n\n        for link in hero_spider_boy.team_links:\n            print(\"Spider-Boy team:\", link.team, \"is training:\", link.is_training)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n    is_training: bool = False\n\n    team: \"Team\" = Relationship(back_populates=\"hero_links\")\n    hero: \"Hero\" = Relationship(back_populates=\"team_links\")\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    hero_links: list[HeroTeamLink] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_links: list[HeroTeamLink] = Relationship(back_populates=\"hero\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\",\n            secret_name=\"Pedro Parqueador\",\n        )\n        deadpond_team_z_link = HeroTeamLink(team=team_z_force, hero=hero_deadpond)\n        deadpond_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_deadpond, is_training=True\n        )\n        spider_boy_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_spider_boy, is_training=True\n        )\n        rusty_man_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_rusty_man\n        )\n\n        session.add(deadpond_team_z_link)\n        session.add(deadpond_preventers_link)\n        session.add(spider_boy_preventers_link)\n        session.add(rusty_man_preventers_link)\n        session.commit()\n\n        for link in team_z_force.hero_links:\n            print(\"Z-Force hero:\", link.hero, \"is training:\", link.is_training)\n\n        for link in team_preventers.hero_links:\n            print(\"Preventers hero:\", link.hero, \"is training:\", link.is_training)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        spider_boy_z_force_link = HeroTeamLink(\n            team=team_z_force, hero=hero_spider_boy, is_training=True\n        )\n        team_z_force.hero_links.append(spider_boy_z_force_link)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.team_links)\n        print(\"Z-Force heroes:\", team_z_force.hero_links)\n\n        for link in hero_spider_boy.team_links:\n            if link.team.name == \"Preventers\":\n                link.is_training = False\n\n        session.add(hero_spider_boy)\n        session.commit()\n\n        for link in hero_spider_boy.team_links:\n            print(\"Spider-Boy team:\", link.team, \"is training:\", link.is_training)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n    is_training: bool = False\n\n    team: \"Team\" = Relationship(back_populates=\"hero_links\")\n    hero: \"Hero\" = Relationship(back_populates=\"team_links\")\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    hero_links: List[HeroTeamLink] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_links: List[HeroTeamLink] = Relationship(back_populates=\"hero\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\",\n            secret_name=\"Pedro Parqueador\",\n        )\n        deadpond_team_z_link = HeroTeamLink(team=team_z_force, hero=hero_deadpond)\n        deadpond_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_deadpond, is_training=True\n        )\n        spider_boy_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_spider_boy, is_training=True\n        )\n        rusty_man_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_rusty_man\n        )\n\n        session.add(deadpond_team_z_link)\n        session.add(deadpond_preventers_link)\n        session.add(spider_boy_preventers_link)\n        session.add(rusty_man_preventers_link)\n        session.commit()\n\n        for link in team_z_force.hero_links:\n            print(\"Z-Force hero:\", link.hero, \"is training:\", link.is_training)\n\n        for link in team_preventers.hero_links:\n            print(\"Preventers hero:\", link.hero, \"is training:\", link.is_training)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        spider_boy_z_force_link = HeroTeamLink(\n            team=team_z_force, hero=hero_spider_boy, is_training=True\n        )\n        team_z_force.hero_links.append(spider_boy_z_force_link)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.team_links)\n        print(\"Z-Force heroes:\", team_z_force.hero_links)\n\n        for link in hero_spider_boy.team_links:\n            if link.team.name == \"Preventers\":\n                link.is_training = False\n\n        session.add(hero_spider_boy)\n        session.commit()\n\n        for link in hero_spider_boy.team_links:\n            print(\"Spider-Boy team:\", link.team, \"is training:\", link.is_training)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/many-to-many/link-with-extra-fields/#_9","title":"\u4f7f\u7528\u66f4\u65b0\u540e\u7684\u5173\u7cfb\u8fd0\u884c\u7a0b\u5e8f","text":"<p>\u5982\u679c\u6211\u4eec\u73b0\u5728\u8fd0\u884c\u7a0b\u5e8f\uff0c\u5b83\u5c06\u8f93\u51fa\uff1a</p> <pre><code>$ python app.py\n\n// \u7701\u7565\u4e4b\u524d\u7684\u8f93\u51fa \ud83d\ude48\n\n// \u81ea\u52a8\u901a\u8fc7\u5c5e\u6027\u8bbf\u95ee\u83b7\u53d6\u56e2\u961f\u6570\u636e\nINFO Engine SELECT team.id AS team_id, team.name AS team_name, team.headquarters AS team_headquarters\nFROM team\nWHERE team.id = ?\nINFO Engine [generated in 0.00015s] (2,)\n\n// \u66f4\u65b0\u94fe\u63a5\u884c\nINFO Engine UPDATE heroteamlink SET is_training=? WHERE heroteamlink.team_id = ? AND heroteamlink.hero_id = ?\nINFO Engine [generated in 0.00020s] (0, 2, 2)\n\n// \u4fdd\u5b58\u5f53\u524d\u4e8b\u52a1\u5230\u6570\u636e\u5e93\nINFO Engine COMMIT\n\n// \u81ea\u52a8\u5f00\u59cb\u4e00\u4e2a\u65b0\u4e8b\u52a1\nINFO Engine BEGIN (implicit)\n\n// \u81ea\u52a8\u901a\u8fc7\u5c5e\u6027\u8bbf\u95ee\u83b7\u53d6\u6570\u636e\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.2004s ago] (2,)\nINFO Engine SELECT heroteamlink.team_id AS heroteamlink_team_id, heroteamlink.hero_id AS heroteamlink_hero_id, heroteamlink.is_training AS heroteamlink_is_training\nFROM heroteamlink\nWHERE ? = heroteamlink.hero_id\nINFO Engine [cached since 0.1005s ago] (2,)\nINFO Engine SELECT team.id AS team_id, team.name AS team_name, team.headquarters AS team_headquarters\nFROM team\nWHERE team.id = ?\nINFO Engine [cached since 0.09707s ago] (2,)\n\n// \u6253\u5370 Spider-Boy \u7684\u56e2\u961f\u4fe1\u606f\uff0c\u5305\u62ec\u94fe\u63a5\u6570\u636e\uff0c\u68c0\u67e5\u662f\u5426\u5728\u8bad\u7ec3\nSpider-Boy team: headquarters='Sharp Tower' id=2 name='Preventers' is training: False\n\n// \u81ea\u52a8\u901a\u8fc7\u5c5e\u6027\u8bbf\u95ee\u83b7\u53d6\u6570\u636e\nINFO Engine SELECT team.id AS team_id, team.name AS team_name, team.headquarters AS team_headquarters\nFROM team\nWHERE team.id = ?\nINFO Engine [cached since 0.2097s ago] (1,)\n\n// \u6253\u5370 Spider-Boy \u7684\u56e2\u961f\u4fe1\u606f\uff0c\u5305\u62ec\u94fe\u63a5\u6570\u636e\uff0c\u68c0\u67e5\u662f\u5426\u5728\u8bad\u7ec3\nSpider-Boy team: headquarters='Sister Margaret's Bar' id=1 name='Z-Force' is training: True\nINFO Engine ROLLBACK\n</code></pre>"},{"location":"tutorial/many-to-many/link-with-extra-fields/#_10","title":"\u603b\u7ed3","text":"<p>\u5982\u679c\u60a8\u9700\u8981\u5b58\u50a8\u66f4\u591a\u5173\u4e8e \u591a\u5bf9\u591a \u5173\u7cfb\u7684\u4fe1\u606f\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u663e\u5f0f\u7684\u94fe\u63a5\u6a21\u578b\uff0c\u5e76\u5728\u5176\u4e2d\u5305\u542b\u989d\u5916\u7684\u6570\u636e\u3002\ud83e\udd13</p>"},{"location":"tutorial/many-to-many/update-remove-relationships/","title":"\u66f4\u65b0\u548c\u79fb\u9664\u591a\u5bf9\u591a\u5173\u7cfb","text":"<p>\u73b0\u5728\u6211\u4eec\u6765\u5b66\u4e60\u5982\u4f55\u66f4\u65b0\u548c\u79fb\u9664\u8fd9\u4e9b \u591a\u5bf9\u591a \u5173\u7cfb\u3002</p> <p>\u6211\u4eec\u5c06\u7ee7\u7eed\u4e4b\u524d\u7684\u4ee3\u7801\u3002</p> \ud83d\udc40 \u67e5\u770b\u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", primary_key=True)\n    hero_id: int | None = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: List[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/many-to-many/update-remove-relationships/#_2","title":"\u83b7\u53d6\u5f85\u66f4\u65b0\u7684\u6570\u636e","text":"<p>\u73b0\u5728\u6211\u4eec\u6765\u521b\u5efa\u4e00\u4e2a\u51fd\u6570 <code>update_heroes()</code>\u3002</p> <p>\u6211\u4eec\u5c06\u83b7\u53d6 Spider-Boy \u548c Z-Force \u56e2\u961f\u3002</p> <p>\u7531\u4e8e\u4f60\u5df2\u7ecf\u719f\u6089\u57fa\u672c\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u4f1a\u4f7f\u7528 \u7b80\u77ed\u7248\u672c\uff0c\u5728\u4e00\u4e2a Python \u8bed\u53e5\u4e2d\u83b7\u53d6\u8fd9\u4e9b\u6570\u636e\u3002</p> <p>\u6b64\u5916\uff0c\u7531\u4e8e\u6211\u4eec\u4f7f\u7528\u4e86 <code>select()</code>\uff0c\u6211\u4eec\u9700\u8981\u5c06\u5176\u5bfc\u5165\u3002</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n# \u8fd9\u91cc\u7701\u7565\u4e86\u4e00\u4e9b\u4ee3\u7801 \ud83d\udc48\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n# \u4e0b\u65b9\u4ee3\u7801\u88ab\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n# \u8fd9\u91cc\u7701\u7565\u4e86\u4e00\u4e9b\u4ee3\u7801 \ud83d\udc48\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n# \u4e0b\u65b9\u4ee3\u7801\u88ab\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n# \u8fd9\u91cc\u7701\u7565\u4e86\u4e00\u4e9b\u4ee3\u7801 \ud83d\udc48\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n# \u4e0b\u65b9\u4ee3\u7801\u88ab\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u67e5\u770b\u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", primary_key=True)\n    hero_id: int | None = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        team_z_force.heroes.append(hero_spider_boy)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.teams)\n        print(\"Z-Force heroes:\", team_z_force.heroes)\n\n        hero_spider_boy.teams.remove(team_z_force)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Reverted Z-Force's heroes:\", team_z_force.heroes)\n        print(\"Reverted Spider-Boy's teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        team_z_force.heroes.append(hero_spider_boy)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.teams)\n        print(\"Z-Force heroes:\", team_z_force.heroes)\n\n        hero_spider_boy.teams.remove(team_z_force)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Reverted Z-Force's heroes:\", team_z_force.heroes)\n        print(\"Reverted Spider-Boy's teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: List[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        team_z_force.heroes.append(hero_spider_boy)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.teams)\n        print(\"Z-Force heroes:\", team_z_force.heroes)\n\n        hero_spider_boy.teams.remove(team_z_force)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Reverted Z-Force's heroes:\", team_z_force.heroes)\n        print(\"Reverted Spider-Boy's teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u5f53\u7136\uff0c\u6211\u4eec\u9700\u8981\u5c06 <code>update_heroes()</code> \u6dfb\u52a0\u5230 <code>main()</code> \u51fd\u6570\u4e2d\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4e0a\u65b9\u4ee3\u7801\u88ab\u7701\u7565 \ud83d\udc46\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code># \u4e0a\u65b9\u4ee3\u7801\u88ab\u7701\u7565 \ud83d\udc46\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code># \u4e0a\u65b9\u4ee3\u7801\u88ab\u7701\u7565 \ud83d\udc46\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> \ud83d\udc40 \u67e5\u770b\u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", primary_key=True)\n    hero_id: int | None = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        team_z_force.heroes.append(hero_spider_boy)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.teams)\n        print(\"Z-Force heroes:\", team_z_force.heroes)\n\n        hero_spider_boy.teams.remove(team_z_force)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Reverted Z-Force's heroes:\", team_z_force.heroes)\n        print(\"Reverted Spider-Boy's teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        team_z_force.heroes.append(hero_spider_boy)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.teams)\n        print(\"Z-Force heroes:\", team_z_force.heroes)\n\n        hero_spider_boy.teams.remove(team_z_force)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Reverted Z-Force's heroes:\", team_z_force.heroes)\n        print(\"Reverted Spider-Boy's teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: List[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        team_z_force.heroes.append(hero_spider_boy)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.teams)\n        print(\"Z-Force heroes:\", team_z_force.heroes)\n\n        hero_spider_boy.teams.remove(team_z_force)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Reverted Z-Force's heroes:\", team_z_force.heroes)\n        print(\"Reverted Spider-Boy's teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/many-to-many/update-remove-relationships/#_3","title":"\u6dfb\u52a0\u591a\u5bf9\u591a\u5173\u7cfb","text":"<p>\u73b0\u5728\uff0c\u5047\u8bbe Spider-Boy \u89c9\u5f97 Z-Force \u56e2\u961f\u7279\u522b\u9177\uff0c\u51b3\u5b9a\u52a0\u5165\u4ed6\u4eec\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u540c\u6837\u7684 \u5173\u7cfb\u5c5e\u6027\uff0c\u5c06 <code>hero_spider_boy</code> \u6dfb\u52a0\u5230 <code>team_z_force.heroes</code> \u4e2d\u3002</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4e0a\u65b9\u4ee3\u7801\u88ab\u7701\u7565 \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        team_z_force.heroes.append(hero_spider_boy)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.teams)\n        print(\"Z-Force heroes:\", team_z_force.heroes)\n\n# \u4e0b\u65b9\u4ee3\u7801\u88ab\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u65b9\u4ee3\u7801\u88ab\u7701\u7565 \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        team_z_force.heroes.append(hero_spider_boy)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.teams)\n        print(\"Z-Force heroes:\", team_z_force.heroes)\n\n# \u4e0b\u65b9\u4ee3\u7801\u88ab\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u65b9\u4ee3\u7801\u88ab\u7701\u7565 \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        team_z_force.heroes.append(hero_spider_boy)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.teams)\n        print(\"Z-Force heroes:\", team_z_force.heroes)\n\n# \u4e0b\u65b9\u4ee3\u7801\u88ab\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u67e5\u770b\u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", primary_key=True)\n    hero_id: int | None = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        team_z_force.heroes.append(hero_spider_boy)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.teams)\n        print(\"Z-Force heroes:\", team_z_force.heroes)\n\n        hero_spider_boy.teams.remove(team_z_force)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Reverted Z-Force's heroes:\", team_z_force.heroes)\n        print(\"Reverted Spider-Boy's teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        team_z_force.heroes.append(hero_spider_boy)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.teams)\n        print(\"Z-Force heroes:\", team_z_force.heroes)\n\n        hero_spider_boy.teams.remove(team_z_force)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Reverted Z-Force's heroes:\", team_z_force.heroes)\n        print(\"Reverted Spider-Boy's teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: List[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        team_z_force.heroes.append(hero_spider_boy)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.teams)\n        print(\"Z-Force heroes:\", team_z_force.heroes)\n\n        hero_spider_boy.teams.remove(team_z_force)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Reverted Z-Force's heroes:\", team_z_force.heroes)\n        print(\"Reverted Spider-Boy's teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Tip</p> <p>\u7531\u4e8e\u6211\u4eec\u5728\u63d0\u4ea4\u540e\u7acb\u5373\u8bbf\u95ee\u6a21\u578b\u4e2d\u7684\u5c5e\u6027\uff08\u5982 <code>hero_spider_boy.teams</code> \u548c <code>team_z_force.heroes</code>\uff09\uff0c\u6570\u636e\u4f1a\u81ea\u52a8\u5237\u65b0\u3002</p> <p>\u56e0\u6b64\uff0c\u65e0\u9700\u8c03\u7528 <code>session.refresh()</code>\u3002</p> <p>\u7136\u540e\u6211\u4eec\u63d0\u4ea4\u66f4\u6539\u3001\u5237\u65b0\u5e76\u6253\u5370\u66f4\u65b0\u540e\u7684 Spider-Boy \u7684\u961f\u4f0d\u4ee5\u786e\u8ba4\u3002</p> <p>\u6ce8\u610f\uff0c\u6211\u4eec\u53ea\u5c06 Z-Force \u6dfb\u52a0\u5230\u4f1a\u8bdd\u4e2d\uff0c\u7136\u540e\u63d0\u4ea4\u3002</p> <p>\u6211\u4eec\u4ece\u672a\u5c06 Spider-Boy \u6dfb\u52a0\u5230\u4f1a\u8bdd\u4e2d\uff0c\u4e5f\u4ece\u672a\u5237\u65b0\u5b83\u3002\u4f46\u6211\u4eec\u4ecd\u7136\u6253\u5370\u4e86\u4ed6\u7684\u961f\u4f0d\u3002</p> <p>\u8fd9\u4e00\u5207\u80fd\u591f\u6b63\u5e38\u5de5\u4f5c\u662f\u56e0\u4e3a\u5728\u6a21\u578b\u4e2d\u7684 <code>Relationship()</code> \u4f7f\u7528\u4e86 <code>back_populates</code>\u3002\u8fd9\u6837\uff0cSQLModel\uff08\u5b9e\u9645\u4e0a\u662f SQLAlchemy\uff09\u53ef\u4ee5\u8ddf\u8e2a\u66f4\u6539\u548c\u66f4\u65b0\uff0c\u5e76\u786e\u4fdd\u8fd9\u4e9b\u66f4\u65b0\u4e5f\u4f1a\u53d1\u751f\u5728\u5176\u4ed6\u76f8\u5173\u6a21\u578b\u7684\u5173\u7cfb\u4e2d\u3002\ud83c\udf89</p>"},{"location":"tutorial/many-to-many/update-remove-relationships/#_4","title":"\u8fd0\u884c\u7a0b\u5e8f","text":"<p>\u60a8\u53ef\u4ee5\u901a\u8fc7\u5728\u547d\u4ee4\u884c\u8fd0\u884c\u7a0b\u5e8f\u6765\u786e\u8ba4\u4e00\u5207\u662f\u5426\u6b63\u5e38\u5de5\u4f5c\uff1a</p> <pre><code>$ python app.py\n\n// \u4e0a\u9762\u7684\u8f93\u51fa\u7701\u7565 \ud83d\ude48\n\n// \u521b\u5efa\u65b0\u7684\u591a\u5bf9\u591a\u5173\u7cfb\nINFO Engine INSERT INTO heroteamlink (team_id, hero_id) VALUES (?, ?)\nINFO Engine [\u751f\u6210\u4e8e 0.00020s] (1, 3)\nINFO Engine COMMIT\n\n// \u5f00\u59cb\u4e00\u4e2a\u65b0\u7684\u81ea\u52a8\u4e8b\u52a1\nINFO Engine BEGIN (implicit)\n\n// \u8bbf\u95ee\u5c5e\u6027 .teams \u65f6\u81ea\u52a8\u5237\u65b0\u6570\u636e\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [\u751f\u6210\u4e8e 0.00044s] (3,)\nINFO Engine SELECT team.id AS team_id, team.name AS team_name, team.headquarters AS team_headquarters\nFROM team, heroteamlink\nWHERE ? = heroteamlink.hero_id AND team.id = heroteamlink.team_id\nINFO Engine [\u7f13\u5b58\u81ea 0.1648s \u524d] (3,)\n\n// \u6253\u5370 Spider-Boy \u7684\u961f\u4f0d\uff0c\u5305\u62ec Z-Force \ud83c\udf89\n\u66f4\u65b0\u540e\u7684 Spider-Boy \u7684\u961f\u4f0d: [\n    Team(id=2, name='Preventers', headquarters='Sharp Tower'),\n    Team(id=1, name='Z-Force', headquarters='Sister Margaret's Bar')\n]\n\n// \u8bbf\u95ee\u5c5e\u6027 .heroes \u65f6\u81ea\u52a8\u5237\u65b0\u6570\u636e\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero, heroteamlink\nWHERE ? = heroteamlink.team_id AND hero.id = heroteamlink.hero_id\nINFO Engine [\u7f13\u5b58\u81ea 0.1499s \u524d] (1,)\n\n// \u6253\u5370 Z-Force \u7684\u82f1\u96c4\uff0c\u5305\u62ec Spider-Boy \ud83c\udf89\nZ-Force \u7684\u82f1\u96c4: [\n    Hero(name='Deadpond', age=None, id=1, secret_name='Dive Wilson'),\n    Hero(name='Spider-Boy', age=None, id=3, secret_name='Pedro Parqueador', teams=[\n        Team(id=2, name='Preventers', headquarters='Sharp Tower'),\n        Team(id=1, name='Z-Force', headquarters='Sister Margaret's Bar', heroes=[...])\n    ])\n]\n</code></pre>"},{"location":"tutorial/many-to-many/update-remove-relationships/#_5","title":"\u79fb\u9664\u591a\u5bf9\u591a\u5173\u7cfb","text":"<p>\u73b0\u5728\uff0c\u5047\u8bbe Spider-Boy \u52a0\u5165\u56e2\u961f\u540e\uff0c\u53d1\u73b0\u4ed6\u4eec\u7684\u201c\u751f\u547d\u4fdd\u62a4\u653f\u7b56\u201d\u6bd4\u4ed6\u4e60\u60ef\u7684\u8981\u5bbd\u677e\u5f97\u591a\u3002\ud83d\udc80</p> <p>\u800c\u4e14\u4ed6\u4eec\u7684 \u804c\u4e1a\u5b89\u5168\u548c\u5065\u5eb7 \u4e5f\u4e0d\u5982\u9884\u671f... \ud83d\udca5</p> <p>\u6240\u4ee5\uff0cSpider-Boy \u51b3\u5b9a\u79bb\u5f00 Z-Force\u3002</p> <p>\u8ba9\u6211\u4eec\u66f4\u65b0\u5173\u7cfb\uff0c\u79fb\u9664 <code>hero_spider_boy.teams</code> \u4e2d\u7684 <code>team_z_force</code>\u3002</p> <p>\u7531\u4e8e <code>hero_spider_boy.teams</code> \u53ea\u662f\u4e00\u4e2a\u5217\u8868\uff08\u5b9e\u9645\u4e0a\u662f\u7531 SQLAlchemy \u7ba1\u7406\u7684\u7279\u6b8a\u5217\u8868\uff0c\u4f46\u4ecd\u7136\u662f\u5217\u8868\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6807\u51c6\u7684\u5217\u8868\u65b9\u6cd5\u3002</p> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f7f\u7528 <code>.remove()</code> \u65b9\u6cd5\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u9879\u76ee\u5e76\u5c06\u5176\u4ece\u5217\u8868\u4e2d\u79fb\u9664\u3002</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4e0a\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        team_z_force.heroes.append(hero_spider_boy)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.teams)\n        print(\"Z-Force heroes:\", team_z_force.heroes)\n\n        hero_spider_boy.teams.remove(team_z_force)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Reverted Z-Force's heroes:\", team_z_force.heroes)\n        print(\"Reverted Spider-Boy's teams:\", hero_spider_boy.teams)\n\n# \u4e0b\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        team_z_force.heroes.append(hero_spider_boy)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.teams)\n        print(\"Z-Force heroes:\", team_z_force.heroes)\n\n        hero_spider_boy.teams.remove(team_z_force)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Reverted Z-Force's heroes:\", team_z_force.heroes)\n        print(\"Reverted Spider-Boy's teams:\", hero_spider_boy.teams)\n\n# \u4e0b\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4e0a\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        team_z_force.heroes.append(hero_spider_boy)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.teams)\n        print(\"Z-Force heroes:\", team_z_force.heroes)\n\n        hero_spider_boy.teams.remove(team_z_force)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Reverted Z-Force's heroes:\", team_z_force.heroes)\n        print(\"Reverted Spider-Boy's teams:\", hero_spider_boy.teams)\n\n# \u4e0b\u65b9\u4ee3\u7801\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u67e5\u770b\u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", primary_key=True)\n    hero_id: int | None = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        team_z_force.heroes.append(hero_spider_boy)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.teams)\n        print(\"Z-Force heroes:\", team_z_force.heroes)\n\n        hero_spider_boy.teams.remove(team_z_force)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Reverted Z-Force's heroes:\", team_z_force.heroes)\n        print(\"Reverted Spider-Boy's teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        team_z_force.heroes.append(hero_spider_boy)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.teams)\n        print(\"Z-Force heroes:\", team_z_force.heroes)\n\n        hero_spider_boy.teams.remove(team_z_force)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Reverted Z-Force's heroes:\", team_z_force.heroes)\n        print(\"Reverted Spider-Boy's teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: List[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        team_z_force.heroes.append(hero_spider_boy)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.teams)\n        print(\"Z-Force heroes:\", team_z_force.heroes)\n\n        hero_spider_boy.teams.remove(team_z_force)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Reverted Z-Force's heroes:\", team_z_force.heroes)\n        print(\"Reverted Spider-Boy's teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u8fd9\u6b21\uff0c\u6211\u4eec\u518d\u6b21\u5c55\u793a\uff0c\u4f7f\u7528 <code>back_populates</code> \u65f6\uff0cSQLModel\uff08\u5b9e\u9645\u4e0a\u662f SQLAlchemy\uff09\u4f1a\u81ea\u52a8\u5904\u7406\u901a\u8fc7\u5173\u7cfb\u8fde\u63a5\u6a21\u578b\u7684\u5de5\u4f5c\uff0c\u5373\u4f7f\u6211\u4eec\u662f\u4ece <code>hero_spider_boy</code> \u5bf9\u8c61\uff08\u4fee\u6539 <code>hero_spider_boy.teams</code>\uff09\u6267\u884c\u64cd\u4f5c\uff0c\u5b9e\u9645\u4e0a\u6211\u4eec\u662f\u5728\u5c06 <code>team_z_force</code> \u6dfb\u52a0\u5230 \u4f1a\u8bdd \u4e2d\uff0c\u5e76\u63d0\u4ea4\u5b83\uff0c\u800c\u4e0d\u9700\u8981\u663e\u5f0f\u5730\u6dfb\u52a0 <code>hero_spider_boy</code>\u3002</p> <p>\u8fd9\u4f9d\u7136\u6709\u6548\uff0c\u56e0\u4e3a\u901a\u8fc7\u66f4\u65b0 <code>hero_spider_boy</code> \u4e2d\u7684\u961f\u4f0d\uff08\u5b83\u4eec\u4e0e <code>back_populates</code> \u540c\u6b65\uff09\uff0c\u8fd9\u4e9b\u66f4\u6539\u4e5f\u4f1a\u53cd\u6620\u5230 <code>team_z_force</code> \u4e2d\uff0c\u56e0\u6b64\u5b83\u4e5f\u6709\u66f4\u6539\u9700\u8981\u4fdd\u5b58\u5230\u6570\u636e\u5e93\u4e2d\uff08\u5373 Spider-Boy \u88ab\u79fb\u9664\uff09\u3002</p> <p>\u7136\u540e\uff0c\u6211\u4eec\u5c06\u8be5\u56e2\u961f\u6dfb\u52a0\u5230\u4f1a\u8bdd\uff0c\u5e76\u63d0\u4ea4\u66f4\u6539\uff0c\u4ece\u800c\u66f4\u65b0 <code>team_z_force</code> \u5bf9\u8c61\u3002\u7531\u4e8e\u5b83\u66f4\u6539\u4e86\u4e0e <code>hero_spider_boy</code> \u76f8\u5173\u8054\u7684\u8868\uff0c\u5b83\u4e5f\u4f1a\u5728\u5185\u90e8\u6807\u8bb0\u4e3a\u5df2\u66f4\u65b0\uff0c\u56e0\u6b64\u4e00\u5207\u90fd\u6b63\u5e38\u5de5\u4f5c\u3002</p> <p>\u6700\u540e\uff0c\u6211\u4eec\u518d\u6b21\u6253\u5370\u5b83\u4eec\uff0c\u4ee5\u786e\u8ba4\u4e00\u5207\u662f\u5426\u6b63\u5e38\u3002</p>"},{"location":"tutorial/many-to-many/update-remove-relationships/#_6","title":"\u518d\u6b21\u8fd0\u884c\u7a0b\u5e8f","text":"<p>\u4e3a\u4e86\u786e\u8ba4\u6700\u540e\u7684\u90e8\u5206\u662f\u5426\u6b63\u5e38\u5de5\u4f5c\uff0c\u60a8\u53ef\u4ee5\u518d\u6b21\u8fd0\u884c\u7a0b\u5e8f\uff0c\u5b83\u4f1a\u8f93\u51fa\u7c7b\u4f3c\u5982\u4e0b\u5185\u5bb9\uff1a</p> <pre><code>$ python app.py\n\n// \u4e0a\u9762\u7684\u8f93\u51fa\u7701\u7565 \ud83d\ude48\n\n// \u5220\u9664\u8fde\u63a5\u8868\u4e2d\u7684\u884c\nINFO Engine DELETE FROM heroteamlink WHERE heroteamlink.team_id = ? AND heroteamlink.hero_id = ?\nINFO Engine [\u751f\u6210\u4e8e 0.00043s] (1, 3)\n// \u4fdd\u5b58\u66f4\u6539\nINFO Engine COMMIT\n\n// \u81ea\u52a8\u5f00\u59cb\u4e00\u4e2a\u65b0\u7684\u4e8b\u52a1\nINFO Engine BEGIN (implicit)\n\n// \u8bbf\u95ee\u5c5e\u6027 .heroes \u65f6\u81ea\u52a8\u5237\u65b0\u6570\u636e\nINFO Engine SELECT team.id AS team_id, team.name AS team_name, team.headquarters AS team_headquarters\nFROM team\nWHERE team.id = ?\nINFO Engine [\u751f\u6210\u4e8e 0.00029s] (1,)\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero, heroteamlink\nWHERE ? = heroteamlink.team_id AND hero.id = heroteamlink.hero_id\nINFO Engine [\u7f13\u5b58\u81ea 0.5625s \u524d] (1,)\n\n// \u6253\u5370\u64a4\u9500\u66f4\u6539\u540e\u7684 Z-Force \u82f1\u96c4\n\u64a4\u9500\u540e\u7684 Z-Force \u82f1\u96c4: [\n    Hero(name='Deadpond', age=None, id=1, secret_name='Dive Wilson')\n]\n\n// \u8bbf\u95ee\u5c5e\u6027 .teams \u65f6\u81ea\u52a8\u5237\u65b0\u6570\u636e\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [\u7f13\u5b58\u81ea 0.4209s \u524d] (3,)\nINFO Engine SELECT team.id AS team_id, team.name AS team_name, team.headquarters AS team_headquarters\nFROM team, heroteamlink\nWHERE ? = heroteamlink.hero_id AND team.id = heroteamlink.team_id\nINFO Engine [\u7f13\u5b58\u81ea 0.5842s \u524d] (3,)\n\n// \u6253\u5370\u64a4\u9500\u66f4\u6539\u540e\u7684 Spider-Boy \u961f\u4f0d\n\u64a4\u9500\u540e\u7684 Spider-Boy \u961f\u4f0d: [\n    Team(id=2, name='Preventers', headquarters='Sharp Tower')\n]\n\n// \u81ea\u52a8\u56de\u6eda\u4efb\u4f55\u53ef\u80fd\u5c1a\u672a\u4fdd\u5b58\u7684\u4e8b\u52a1\nINFO Engine ROLLBACK\n</code></pre>"},{"location":"tutorial/many-to-many/update-remove-relationships/#_7","title":"\u603b\u7ed3","text":"<p>\u5728\u8bbe\u7f6e\u597d \u8fde\u63a5\u6a21\u578b \u548c\u5173\u7cfb\u5c5e\u6027\u4e4b\u540e\uff0c\u66f4\u65b0\u548c\u79fb\u9664\u591a\u5bf9\u591a\u5173\u7cfb\u662f\u76f8\u5f53\u7b80\u5355\u7684\u3002</p> <p>\u60a8\u53ea\u9700\u4f7f\u7528\u5e38\u89c1\u7684\u5217\u8868\u64cd\u4f5c\u5373\u53ef\u3002 \ud83d\ude80</p>"},{"location":"tutorial/relationship-attributes/","title":"\u5173\u7cfb\u5c5e\u6027 - \u4ecb\u7ecd","text":"<p>\u5728\u4e4b\u524d\u7684\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u8ba8\u8bba\u4e86\u5982\u4f55\u901a\u8fc7\u4f7f\u7528\u5e26\u6709 \u5916\u952e \u7684\u5b57\u6bb5\uff08\u5217\uff09\u6765\u7ba1\u7406\u5177\u6709 \u5173\u7cfb \u7684\u6570\u636e\u5e93\u8868\uff0c\u8fd9\u4e9b\u5916\u952e\u6307\u5411\u5176\u4ed6\u8868\u7684\u5217\u3002</p> <p>\u7136\u540e\uff0c\u6211\u4eec\u4f7f\u7528 <code>select()</code> \u7ed3\u5408 <code>.where()</code> \u6216 <code>.join()</code> \u6765\u8bfb\u53d6\u6570\u636e\u5e76\u5c06\u5176\u8fde\u63a5\u8d77\u6765\u3002</p> <p>\u73b0\u5728\uff0c\u6211\u4eec\u5c06\u770b\u5230\u5982\u4f55\u4f7f\u7528 \u5173\u7cfb\u5c5e\u6027\uff0c\u8fd9\u662f SQLModel\uff08\u4ee5\u53ca SQLAlchemy\uff09\u7684\u4e00\u9879\u989d\u5916\u529f\u80fd\uff0c\u80fd\u591f\u4ee5\u4e00\u79cd\u66f4\u4e3a\u719f\u6089\u7684\u65b9\u5f0f\u5904\u7406\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\uff0c\u66f4\u63a5\u8fd1\u6b63\u5e38\u7684 Python \u4ee3\u7801\u3002</p> <p>Info</p> <p>\u5f53\u6211\u8bf4 \"\u5173\u7cfb\" \u65f6\uff0c\u6211\u6307\u7684\u662f\u6807\u51c6\u7684\u5b57\u5178\u610f\u4e49\u4e0a\u7684\u6570\u636e\u4e4b\u95f4\u7684\u5173\u8054\u3002</p> <p>\u6211\u5e76\u4e0d\u662f\u5728\u4f7f\u7528\u672f\u8bed \"\u5173\u7cfb\"\uff0c\u8fd9\u662f\u5b66\u672f\u754c\u548c SQL \u4e2d\u6307\u4ee3\u5355\u4e2a\u8868\u7684\u6280\u672f\u672f\u8bed\u3002</p> <p>\u4f7f\u7528\u8fd9\u4e9b \u5173\u7cfb\u5c5e\u6027 \u662f SQLModel \u8fd9\u4e00\u5de5\u5177\u771f\u6b63\u5c55\u73b0\u5176\u4f18\u52bf\u7684\u5730\u65b9\u3002\u2728</p>"},{"location":"tutorial/relationship-attributes/back-populates/","title":"\u5173\u7cfb <code>back_populates</code>","text":"<p>\u73b0\u5728\u4f60\u5df2\u7ecf\u77e5\u9053\u5982\u4f55\u4f7f\u7528 \u5173\u7cfb\u5c5e\u6027 \u6765\u64cd\u4f5c\u6570\u636e\u5e93\u4e2d\u8fde\u63a5\u7684\u6570\u636e\u4e86\uff01\ud83c\udf89</p> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u7a0d\u5fae\u56de\u987e\u4e00\u4e0b\u4e4b\u524d\u5b9a\u4e49 <code>Relationship()</code> \u5c5e\u6027\u7684\u65b9\u5f0f\uff0c\u5e76\u6f84\u6e05\u4e00\u4e0b <code>back_populates</code> \u53c2\u6570\u7684\u542b\u4e49\u3002\ud83e\udd13</p>"},{"location":"tutorial/relationship-attributes/back-populates/#back_populates_1","title":"\u5e26\u6709 <code>back_populates</code> \u7684\u5173\u7cfb","text":"<p>\u90a3\u4e48\uff0c<code>Relationship()</code> \u4e2d\u7684 <code>back_populates</code> \u53c2\u6570\u5230\u5e95\u662f\u4ec0\u4e48\u5462\uff1f</p> <p>\u5b83\u7684\u503c\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8868\u793a**\u53e6\u4e00\u4e2a**\u6a21\u578b\u7c7b\u4e2d\u5c5e\u6027\u7684\u540d\u79f0\u3002</p> <p></p> <p>\u8fd9\u544a\u8bc9 SQLModel\uff0c\u5982\u679c\u5f53\u524d\u6a21\u578b\u4e2d\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u5b83\u5e94\u8be5\u540c\u6b65\u66f4\u65b0\u53e6\u4e00\u4e2a\u6a21\u578b\u4e2d\u7684\u5bf9\u5e94\u5c5e\u6027\uff0c\u800c\u4e14\u5373\u4f7f\u5728\u63d0\u4ea4\uff08commit\uff09\u4e4b\u524d\uff0c\u5b83\u4e5f\u4f1a\u7acb\u523b\u751f\u6548\uff08\u800c\u4e0d\u9700\u8981\u5f3a\u5236\u5237\u65b0\u6570\u636e\uff09\u3002</p> <p>\u8ba9\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u6765\u66f4\u597d\u5730\u7406\u89e3\u8fd9\u4e00\u70b9\u3002</p>"},{"location":"tutorial/relationship-attributes/back-populates/#_1","title":"\u4e0d\u5b8c\u6574\u7684\u5173\u7cfb","text":"<p>\u9996\u5148\uff0c\u6211\u4eec\u901a\u8fc7\u4e0d\u4f7f\u7528 <code>back_populates</code> \u6765\u5199\u4e00\u4e2a**\u4e0d\u5b8c\u6574**\u7684\u7248\u672c\uff0c\u770b\u770b\u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship()\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship()\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship()\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship()\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship()\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship()\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship()\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship()\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship()\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship()\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship()\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship()\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/relationship-attributes/back-populates/#_2","title":"\u8bfb\u53d6\u6570\u636e\u5bf9\u8c61","text":"<p>\u73b0\u5728\uff0c\u6211\u4eec\u5c06\u83b7\u53d6 Spider-Boy \u82f1\u96c4\uff0c\u5e76\u72ec\u7acb\u5730\u83b7\u53d6 Preventers \u961f\u4f0d\uff0c\u4f7f\u7528\u4e24\u4e2a <code>select</code> \u8bed\u53e5\u3002</p> <p>\u5982\u4f60\u6240\u77e5\uff0c\u5982\u4f55\u6267\u884c\u8fd9\u4e24\u4e2a\u64cd\u4f5c\uff0c\u6211\u5c31\u4e0d\u518d\u5206\u5f00\u8bb2\u89e3 <code>select</code> \u8bed\u53e5\u3001<code>results</code> \u7b49\u5185\u5bb9\u4e86\u3002\u6211\u4eec\u76f4\u63a5\u4f7f\u7528\u66f4\u7b80\u6d01\u7684\u5f62\u5f0f\uff0c\u901a\u8fc7\u4e00\u4e2a\u8c03\u7528\u6765\u5b8c\u6210\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship()\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship()\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship()\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship()\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship()\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship()\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Tip</p> <p>\u5728\u7f16\u5199\u81ea\u5df1\u7684\u4ee3\u7801\u65f6\uff0c\u8fd9\u53ef\u80fd\u662f\u4f60\u6700\u5e38\u7528\u7684\u98ce\u683c\uff0c\u56e0\u4e3a\u5b83\u66f4\u52a0\u7b80\u6d01\u3001\u65b9\u4fbf\uff0c\u5e76\u4e14\u4f60\u4f9d\u7136\u80fd\u4eab\u53d7\u81ea\u52a8\u8865\u5168\u548c\u5185\u8054\u9519\u8bef\u63d0\u793a\u7684\u6240\u6709\u4f18\u52bf\u3002</p>"},{"location":"tutorial/relationship-attributes/back-populates/#_3","title":"\u6253\u5370\u6570\u636e","text":"<p>\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u6253\u5370\u5f53\u524d\u7684 Spider-Boy\uff0c\u5f53\u524d\u7684 Preventers \u961f\u4f0d\uff0c\u7279\u522b\u662f\u5f53\u524d Preventers \u82f1\u96c4\u5217\u8868\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship()\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship()\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship()\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship()\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship()\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship()\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u4e00\u5207\u6b63\u5e38\u3002\ud83d\ude0a</p> <p>\u7279\u522b\u662f\uff0c\u6253\u5370 <code>preventers_team.heroes</code> \u7684\u7ed3\u679c\u662f\uff1a</p> <pre><code>Preventers \u961f\u4f0d\u82f1\u96c4\uff1a[\n        Hero(name='Rusty-Man', age=48, id=2, secret_name='Tommy Sharp', team_id=2),\n        Hero(name='Spider-Boy', age=None, id=3, secret_name='Pedro Parqueador', team_id=2),\n        Hero(name='Tarantula', age=32, id=6, secret_name='Natalia Roman-on', team_id=2),\n        Hero(name='Dr. Weird', age=36, id=7, secret_name='Steve Weird', team_id=2),\n        Hero(name='Captain North America', age=93, id=8, secret_name='Esteban Rogelios', team_id=2)\n]\n</code></pre> <p>\u6ce8\u610f\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u770b\u5230\u4e86 Spider-Boy \u3002</p>"},{"location":"tutorial/relationship-attributes/back-populates/#_4","title":"\u63d0\u4ea4\u524d\u66f4\u65b0\u5bf9\u8c61","text":"<p>\u73b0\u5728\u8ba9\u6211\u4eec\u66f4\u65b0 Spider-Boy\uff0c\u901a\u8fc7\u5c06 <code>hero_spider_boy.team = None</code> \u6765\u5c06\u4ed6\u4ece\u961f\u4f0d\u4e2d\u79fb\u9664\uff0c\u7136\u540e\u518d\u6253\u5370\u8fd9\u4e2a\u5bf9\u8c61\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n\n        # \u8fd9\u91cc\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n\n        # \u8fd9\u91cc\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n\n        # \u8fd9\u91cc\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship()\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship()\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship()\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship()\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship()\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship()\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u9996\u5148\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec**\u8fd8\u6ca1\u6709\u63d0\u4ea4**\u82f1\u96c4\u5bf9\u8c61\uff0c\u56e0\u6b64\u8bbf\u95ee\u82f1\u96c4\u5217\u8868\u4e0d\u4f1a\u89e6\u53d1\u81ea\u52a8\u5237\u65b0\u3002</p> <p>\u4f46\u5728\u6211\u4eec\u7684\u4ee3\u7801\u4e2d\uff0c\u6070\u6070\u5728\u8fd9\u4e2a\u65f6\u523b\uff0c\u6211\u4eec\u5df2\u7ecf\u58f0\u660e Spider-Boy \u4e0d\u518d\u662f Preventers \u961f\u4f0d\u7684\u4e00\u5458\u4e86\u3002\ud83d\udd25</p> <p>Tip</p> <p>\u6211\u4eec\u4ee5\u540e\u53ef\u4ee5\u901a\u8fc7\u4e0d\u63d0\u4ea4 session \u6765\u64a4\u9500\u8fd9\u4e00\u66f4\u6539\uff0c\u4f46\u8fd9\u4e0d\u662f\u6211\u4eec\u5728\u8fd9\u91cc\u5173\u6ce8\u7684\u5185\u5bb9\u3002</p> <p>\u5728\u6b64\u65f6\u7684\u4ee3\u7801\u4e2d\uff0c\u5728\u5185\u5b58\u4e2d\uff0c\u4ee3\u7801\u9884\u671f Preventers \u4e0d\u518d\u5305\u62ec Spider-Boy\u3002</p> <p>\u6253\u5370\u6ca1\u6709\u961f\u4f0d\u7684 <code>hero_spider_boy</code> \u7684\u8f93\u51fa\u662f\uff1a</p> <pre><code>\u6ca1\u6709\u961f\u4f0d\u7684 Spider-Boy: name='Spider-Boy' age=None id=3 secret_name='Pedro Parqueador' team_id=2 team=None\n</code></pre> <p>\u5f88\u9177\uff0c\u961f\u4f0d\u5df2\u7ecf\u88ab\u8bbe\u7f6e\u4e3a <code>None</code>\uff0c<code>team_id</code> \u5c5e\u6027\u4ecd\u7136\u4fdd\u7559\u961f\u4f0d ID\uff0c\u76f4\u5230\u6211\u4eec\u4fdd\u5b58\u5b83\u3002\u4f46\u6ca1\u5173\u7cfb\uff0c\u56e0\u4e3a\u6211\u4eec\u73b0\u5728\u4e3b\u8981\u662f\u5728\u64cd\u4f5c \u5173\u7cfb\u5c5e\u6027 \u548c\u5bf9\u8c61\u3002\u2705</p> <p>\u4f46\u662f\u73b0\u5728\uff0c\u5f53\u6211\u4eec\u6253\u5370 <code>preventers_team.heroes</code> \u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f</p> <pre><code>Preventers \u961f\u4f0d\u82f1\u96c4\uff08\u66f4\u65b0\u540e\uff09: [\n        Hero(name='Rusty-Man', age=48, id=2, secret_name='Tommy Sharp', team_id=2),\n        Hero(name='Spider-Boy', age=None, id=3, secret_name='Pedro Parqueador', team_id=2, team=None),\n        Hero(name='Tarantula', age=32, id=6, secret_name='Natalia Roman-on', team_id=2),\n        Hero(name='Dr. Weird', age=36, id=7, secret_name='Steve Weird', team_id=2),\n        Hero(name='Captain North America', age=93, id=8, secret_name='Esteban Rogelios', team_id=2)\n]\n</code></pre> <p>\u54e6\uff0c\u4e0d\uff01\ud83d\ude31 Spider-Boy \u4ecd\u7136\u51fa\u73b0\u5728\u5217\u8868\u4e2d\uff01</p>"},{"location":"tutorial/relationship-attributes/back-populates/#_5","title":"\u63d0\u4ea4\u5e76\u6253\u5370","text":"<p>\u73b0\u5728\uff0c\u5982\u679c\u6211\u4eec\u63d0\u4ea4\u66f4\u6539\u5e76\u518d\u6b21\u6253\u5370\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n\n        # \u8fd9\u91cc\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n\n        # \u8fd9\u91cc\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n\n        # \u8fd9\u91cc\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship()\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship()\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship()\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship()\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship()\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship()\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u5728\u6211\u4eec\u63d0\u4ea4\u540e\u8bbf\u95ee <code>preventers_team.heroes</code> \u65f6\uff0c\u4f1a\u89e6\u53d1\u6570\u636e\u5237\u65b0\uff0c\u6240\u4ee5\u6211\u4eec\u5f97\u5230\u4e86\u6700\u65b0\u7684\u5217\u8868\uff0c Spider-Boy \u88ab\u79fb\u9664\u4e86\uff0c\u7ed3\u679c\u5c31\u6b63\u5e38\u4e86\uff1a</p> <pre><code>INFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age, hero.team_id AS hero_team_id\nFROM hero\nWHERE ? = hero.team_id\n2021-08-13 11:15:24,658 INFO sqlalchemy.engine.Engine [cached since 0.1924s ago] (2,)\n\nPreventers Team Heroes after commit: [\n        Hero(name='Rusty-Man', age=48, id=2, secret_name='Tommy Sharp', team_id=2),\n        Hero(name='Tarantula', age=32, id=6, secret_name='Natalia Roman-on', team_id=2),\n        Hero(name='Dr. Weird', age=36, id=7, secret_name='Steve Weird', team_id=2),\n        Hero(name='Captain North America', age=93, id=8, secret_name='Esteban Rogelios', team_id=2)\n]\n</code></pre> <p>\u63d0\u4ea4\u540e\u6ca1\u6709 Spider-Boy \uff0c\u6240\u4ee5\u4e00\u5207\u6b63\u5e38\u3002\ud83d\ude0a</p> <p>\u4e0d\u8fc7\uff0c\u5728\u4e4b\u524d\u7684\u90a3\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u4f9d\u7136\u5b58\u5728\u4e0d\u4e00\u81f4\u7684\u60c5\u51b5\u3002</p> <p>\u5982\u679c\u6211\u4eec\u5728\u63d0\u4ea4\u524d\u5c31\u4f7f\u7528\u4e86\u5bf9\u8c61\uff0c\u53ef\u80fd\u4f1a\u9047\u5230\u9519\u8bef\u3002\ud83d\ude14</p> <p>\u8ba9\u6211\u4eec\u6765\u4fee\u590d\u8fd9\u4e2a\u95ee\u9898\u3002\ud83e\udd13</p>"},{"location":"tutorial/relationship-attributes/back-populates/#back_populates_2","title":"\u4f7f\u7528 <code>back_populates</code> \u4fee\u590d","text":"<p>\u8fd9\u5c31\u662f <code>back_populates</code> \u7684\u4f5c\u7528\u3002\u2728</p> <p>\u8ba9\u6211\u4eec\u5c06\u5176\u6dfb\u52a0\u56de\u6765\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> <p>/// \u8be6\u7ec6\u4fe1\u606f | \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>///</p> <p>\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u4fdd\u6301\u5176\u4f59\u4ee3\u7801\u4e0d\u53d8\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n\n        # \u8fd9\u91cc\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n\n        # \u8fd9\u91cc\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n\n        # \u8fd9\u91cc\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Tip</p> <p>\u8fd9\u662f\u6211\u4eec\u4e4b\u524d\u5c06 <code>hero_spider_boy.team</code> \u8bbe\u7f6e\u4e3a <code>None</code> \u4f46*\u5c1a\u672a\u63d0\u4ea4*\u8be5\u66f4\u6539\u7684\u540c\u4e00\u90e8\u5206\u3002</p> <p>\u4e5f\u5c31\u662f\u4e4b\u524d\u5bfc\u81f4\u95ee\u9898\u7684\u90e8\u5206\u3002</p>"},{"location":"tutorial/relationship-attributes/back-populates/#_6","title":"\u56de\u987e\u7ed3\u679c","text":"<p>\u8fd9\u6b21\uff0c SQLModel \uff08\u5b9e\u9645\u4e0a\u662f SQLAlchemy\uff09\u80fd\u591f\u6ce8\u610f\u5230\u66f4\u6539\uff0c\u5e76 \u81ea\u52a8\u66f4\u65b0\u56e2\u961f\u4e2d\u7684\u82f1\u96c4\u5217\u8868 \uff0c\u5373\u4f7f\u6211\u4eec\u8fd8\u6ca1\u6709\u63d0\u4ea4\u3002</p> <p>\u7b2c\u4e8c\u6b21\u6253\u5370\u5c06\u8f93\u51fa\uff1a</p> <pre><code>Preventers Team Heroes again: [\n        Hero(name='Rusty-Man', age=48, id=2, secret_name='Tommy Sharp', team_id=2),\n        Hero(name='Tarantula', age=32, id=6, secret_name='Natalia Roman-on', team_id=2),\n        Hero(name='Dr. Weird', age=36, id=7, secret_name='Steve Weird', team_id=2),\n        Hero(name='Captain North America', age=93, id=8, secret_name='Esteban Rogelios', team_id=2)\n]\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u73b0\u5728 Spider-Boy \u4e0d\u518d\u51fa\u73b0\u5728\u5217\u8868\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7 <code>back_populates</code> \u4fee\u590d\u4e86\u8fd9\u4e00\u70b9\uff01\ud83c\udf89</p>"},{"location":"tutorial/relationship-attributes/back-populates/#back_populates_3","title":"<code>back_populates</code> \u7684\u4ef7\u503c","text":"<p>\u73b0\u5728\u4f60\u77e5\u9053\u4e86 <code>back_populates</code> \u7684\u4f5c\u7528\uff0c\u8ba9\u6211\u4eec\u518d\u6b21\u56de\u987e\u5b83\u7684\u5177\u4f53\u4ef7\u503c\u3002</p> <p>\u4ee3\u7801\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u5b83\u53ea\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4f46\u53ef\u80fd\u4f1a\u8ba9\u4eba\u56f0\u60d1\u7684\u662f\uff0c\u7a76\u7adf\u5e94\u8be5\u5728\u8fd9\u91cc\u4f7f\u7528\u4ec0\u4e48\u5b57\u7b26\u4e32\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p><code>back_populates</code> \u4e2d\u7684\u5b57\u7b26\u4e32\u662f\u6307\u5728 \u53e6\u4e00\u4e2a \u6a21\u578b\u4e2d\uff0c\u5c06\u5f15\u7528 \u5f53\u524d \u6a21\u578b\u7684\u5c5e\u6027\u3002</p> <p></p> <p>\u56e0\u6b64\uff0c\u5728 <code>Team</code> \u7c7b\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u5c5e\u6027 <code>heroes</code>\uff0c\u5e76\u4f7f\u7528 <code>Relationship(back_populates=\"team\")</code> \u6765\u58f0\u660e\u5b83\u3002</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p><code>back_populates=\"team\"</code> \u4e2d\u7684\u5b57\u7b26\u4e32\u6307\u7684\u662f <code>Hero</code> \u7c7b\uff08\u53e6\u4e00\u4e2a\u7c7b\uff09\u4e2d\u7684 <code>team</code> \u5c5e\u6027\u3002</p> <p>\u5728 <code>Hero</code> \u7c7b\u4e2d\uff0c\u6211\u4eec\u58f0\u660e\u4e86\u4e00\u4e2a\u5c5e\u6027 <code>team</code>\uff0c\u5e76\u4f7f\u7528 <code>Relationship(back_populates=\"heroes\")</code> \u6765\u58f0\u660e\u5b83\u3002</p> <p>\u56e0\u6b64\uff0c\u5b57\u7b26\u4e32 <code>\"heroes\"</code> \u6307\u7684\u662f <code>Team</code> \u7c7b\u4e2d\u7684 <code>heroes</code> \u5c5e\u6027\u3002</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Tip</p> <p>\u6bcf\u4e2a \u5173\u7cfb\u5c5e\u6027 \u90fd\u901a\u8fc7 <code>back_populates</code> \u6307\u5411\u53e6\u4e00\u4e2a\u6a21\u578b\u4e2d\u7684\u5bf9\u5e94\u5c5e\u6027\u3002</p> <p>\u5c3d\u7ba1\u4ee3\u7801\u5f88\u7b80\u5355\uff0c\u4f46\u7406\u89e3\u65f6\u53ef\u80fd\u4f1a\u8ba9\u4eba\u56f0\u60d1 \ud83d\ude35\uff0c\u56e0\u4e3a\u540c\u4e00\u884c\u4ee3\u7801\u6d89\u53ca\u5230\u4e86\u591a\u4e2a\u6a21\u578b\u7684\u6982\u5ff5\uff1a</p> <ul> <li>\u4ec5\u4ec5\u56e0\u4e3a\u5b83\u4f4d\u4e8e \u5f53\u524d \u6a21\u578b\u4e2d\uff0c\u8fd9\u884c\u4ee3\u7801\u4e0e\u5f53\u524d\u6a21\u578b\u76f8\u5173\u3002</li> <li>\u5c5e\u6027\u7684\u540d\u79f0\u4e0e \u53e6\u4e00\u4e2a \u6a21\u578b\u76f8\u5173\u3002</li> <li>\u7c7b\u578b\u6ce8\u89e3\u4e0e \u53e6\u4e00\u4e2a \u6a21\u578b\u76f8\u5173\u3002</li> <li><code>back_populates</code> \u6307\u5411\u7684\u662f \u53e6\u4e00\u4e2a \u6a21\u578b\u4e2d\u7684\u5c5e\u6027\uff0c\u800c\u8fd9\u4e2a\u5c5e\u6027\u6307\u5411\u7684\u662f \u5f53\u524d \u6a21\u578b\u3002</li> </ul>"},{"location":"tutorial/relationship-attributes/back-populates/#back_populates_4","title":"\u8bb0\u4f4f <code>back_populates</code> \u7684\u4e00\u4e2a\u5fc3\u7406\u6280\u5de7","text":"<p>\u4f60\u53ef\u4ee5\u4f7f\u7528\u7684\u4e00\u4e2a\u5fc3\u7406\u6280\u5de7\u662f\uff0c<code>back_populates</code> \u4e2d\u7684\u5b57\u7b26\u4e32\u59cb\u7ec8\u662f\u5173\u4e8e\u4f60\u6b63\u5728\u7f16\u8f91\u7684\u5f53\u524d\u6a21\u578b\u7c7b\u7684\u3002\ud83e\udd13</p> <p>\u56e0\u6b64\uff0c\u5982\u679c\u4f60\u5728 <code>Hero</code> \u7c7b\u4e2d\uff0c<code>back_populates</code> \u4e2d\u7684\u4efb\u4f55\u5173\u7cfb\u5c5e\u6027\uff0c\u65e0\u8bba\u5b83\u8fde\u63a5\u5230 \u4efb\u4f55 \u5176\u4ed6\u8868\uff08\u6bd4\u5982 <code>Team</code>\u3001<code>Weapon</code>\u3001<code>Powers</code> \u7b49\uff09\uff0c\u90fd\u4f1a\u59cb\u7ec8\u6307\u5411\u8fd9\u4e2a\u76f8\u540c\u7684\u7c7b\u3002</p> <p>\u6240\u4ee5\uff0c<code>back_populates</code> \u7684\u503c\u5f88\u53ef\u80fd\u662f <code>\"hero\"</code> \u6216 <code>\"heroes\"</code>\u3002</p> <p></p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n    weapon_id: int | None = Field(default=None, foreign_key=\"weapon.id\")\n    weapon: Weapon | None = Relationship(back_populates=\"hero\")\n\n    powers: list[Power] = Relationship(back_populates=\"hero\")\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n    weapon_id: Optional[int] = Field(default=None, foreign_key=\"weapon.id\")\n    weapon: Optional[Weapon] = Relationship(back_populates=\"hero\")\n\n    powers: list[Power] = Relationship(back_populates=\"hero\")\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n    weapon_id: Optional[int] = Field(default=None, foreign_key=\"weapon.id\")\n    weapon: Optional[Weapon] = Relationship(back_populates=\"hero\")\n\n    powers: List[Power] = Relationship(back_populates=\"hero\")\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, SQLModel, create_engine\n\n\nclass Weapon(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n\n    hero: \"Hero\" = Relationship(back_populates=\"weapon\")\n\n\nclass Power(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n\n    hero_id: int = Field(foreign_key=\"hero.id\")\n    hero: \"Hero\" = Relationship(back_populates=\"powers\")\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n    weapon_id: int | None = Field(default=None, foreign_key=\"weapon.id\")\n    weapon: Weapon | None = Relationship(back_populates=\"hero\")\n\n    powers: list[Power] = Relationship(back_populates=\"hero\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef main():\n    create_db_and_tables()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, SQLModel, create_engine\n\n\nclass Weapon(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n\n    hero: \"Hero\" = Relationship(back_populates=\"weapon\")\n\n\nclass Power(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n\n    hero_id: int = Field(foreign_key=\"hero.id\")\n    hero: \"Hero\" = Relationship(back_populates=\"powers\")\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n    weapon_id: Optional[int] = Field(default=None, foreign_key=\"weapon.id\")\n    weapon: Optional[Weapon] = Relationship(back_populates=\"hero\")\n\n    powers: list[Power] = Relationship(back_populates=\"hero\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef main():\n    create_db_and_tables()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, SQLModel, create_engine\n\n\nclass Weapon(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n\n    hero: \"Hero\" = Relationship(back_populates=\"weapon\")\n\n\nclass Power(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n\n    hero_id: int = Field(foreign_key=\"hero.id\")\n    hero: \"Hero\" = Relationship(back_populates=\"powers\")\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n    weapon_id: Optional[int] = Field(default=None, foreign_key=\"weapon.id\")\n    weapon: Optional[Weapon] = Relationship(back_populates=\"hero\")\n\n    powers: List[Power] = Relationship(back_populates=\"hero\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef main():\n    create_db_and_tables()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/","title":"\u7ea7\u8054\u5220\u9664\u5173\u7cfb","text":"<p>\u5982\u679c\u6211\u4eec**\u5220\u9664**\u4e00\u4e2a\u4e0e\u82f1\u96c4\u6709**\u5173\u7cfb**\u7684\u56e2\u961f\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f</p> <p>\u8fd9\u4e9b\u82f1\u96c4\u662f\u5426\u4e5f\u5e94\u8be5\u88ab**\u81ea\u52a8\u5220\u9664**\uff1f\u8fd9\u5c31\u53eb\u505a\u201c\u7ea7\u8054\u201d\uff0c\u56e0\u4e3a\u521d\u59cb\u7684\u5220\u9664\u4f1a\u5f15\u53d1\u4e00\u8fde\u4e32\u5176\u4ed6\u5220\u9664\u3002</p> <p>\u6216\u8005\uff0c\u5e94\u8be5\u5c06\u4ed6\u4eec\u7684 <code>team_id</code> \u8bbe\u7f6e\u4e3a <code>NULL</code>\uff0c\u800c\u4e0d\u662f\u5220\u9664\uff1f</p> <p>\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u4f7f\u7528 SQLModel \u914d\u7f6e\u8fd9\u4e2a\u64cd\u4f5c\u3002</p> <p>Info</p> <p>\u6b64\u529f\u80fd\uff0c\u5305\u62ec <code>cascade_delete</code>\u3001<code>ondelete</code> \u548c <code>passive_deletes</code>\uff0c\u81ea SQLModel \u7248\u672c <code>0.0.21</code> \u8d77\u53ef\u7528\u3002</p>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#_2","title":"\u521d\u59cb\u7684\u82f1\u96c4\u548c\u56e2\u961f","text":"<p>\u5047\u8bbe\u6211\u4eec\u6709\u4ee5\u4e0b\u8fd9\u4e9b**\u56e2\u961f**\u548c**\u82f1\u96c4**\u3002</p>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#_3","title":"\u56e2\u961f\u8868","text":"id name headquarters 1 Z-Force Sister Margaret's Bar 2 Preventers Sharp Tower 3 Wakaland Wakaland Capital City"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#_4","title":"\u82f1\u96c4\u8868","text":"id name secret_name age team_id 1 Deadpond Dive WIlson 1 2 Rusty-Man Tommy Sharp 48 2 3 Spider-Boy Pedro Parqueador 2 4 Black Lion Trevor Challa 35 3 5 Princess Sure-E Sure-E 3"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#_5","title":"\u53ef\u89c6\u5316\u56e2\u961f\u548c\u82f1\u96c4","text":"<p>\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u53ef\u89c6\u5316\u5b83\u4eec\uff1a</p> <pre><code>flowchart TB\n    subgraph \"Z-Force\"\n        d(\"Deadpond\")\n    end\n    subgraph \"Preventers\"\n        r(\"Rusty-Man\")\n        s(\"Spider-Boy\")\n    end\n    subgraph \"Wakaland\"\n        b(\"Black Lion\")\n        p(\"Princess Sure-E\")\n    end</code></pre>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#_6","title":"\u5220\u9664\u4e00\u4e2a\u6709\u82f1\u96c4\u7684\u56e2\u961f","text":"<p>\u5f53\u6211\u4eec \u5220\u9664\u4e00\u4e2a\u56e2\u961f \u65f6\uff0c\u5fc5\u987b\u5bf9\u76f8\u5173\u7684\u82f1\u96c4\u505a\u4e00\u4e9b\u5904\u7406\u3002</p> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5b83\u4eec\u6307\u5411\u8be5\u56e2\u961f\u7684\u5916\u952e\u4f1a\u5728\u6570\u636e\u5e93\u4e2d\u88ab\u8bbe\u7f6e\u4e3a <code>NULL</code>\u3002</p> <p>\u4f46\u662f\u5047\u8bbe\u6211\u4eec\u5e0c\u671b\u76f8\u5173\u7684\u82f1\u96c4\u88ab \u81ea\u52a8\u5220\u9664 \u3002</p> <p>\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5220\u9664\u56e2\u961f <code>Wakaland</code>\uff1a</p> <pre><code>flowchart TB\n    subgraph zforce[\"Z-Force\"]\n        d(\"Deadpond\")\n    end\n    subgraph preventers[\"Preventers\"]\n        r(\"Rusty-Man\")\n        s(\"Spider-Boy\")\n    end\n    subgraph wakaland[\"Wakaland\"]\n        b(\"Black Lion\")\n        p(\"Princess Sure-E\")\n    end\n      style wakaland fill:#fee,stroke:#900</code></pre> <p>\u6211\u4eec\u5e0c\u671b\u82f1\u96c4 <code>Black Lion</code> \u548c <code>Princess Sure-E</code> \u4e5f\u88ab \u81ea\u52a8\u5220\u9664 \u3002</p> <p>\u6700\u7ec8\uff0c\u56e2\u961f\u548c\u82f1\u96c4\u5c06\u53d8\u6210\u8fd9\u6837\uff1a</p> <pre><code>flowchart TB\n    subgraph zforce[\"Team Z-Force\"]\n        d(\"Deadpond\")\n    end\n    subgraph preventers[\"Team Preventers\"]\n        r(\"Rusty-Man\")\n        s(\"Spider-Boy\")\n    end</code></pre>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#_7","title":"\u914d\u7f6e\u81ea\u52a8\u5220\u9664","text":"<p>\u81ea\u52a8\u5220\u9664\u7684\u914d\u7f6e\u6709**\u4e24\u4e2a\u5730\u65b9**\uff1a</p> <ul> <li>\u5728 Python \u4ee3\u7801 \u4e2d</li> <li>\u5728 \u6570\u636e\u5e93 \u4e2d</li> </ul>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#python-cascade_delete","title":"\u5728 Python \u4e2d\u4f7f\u7528 <code>cascade_delete</code> \u5220\u9664","text":"<p>\u5728\u521b\u5efa <code>Relationship()</code> \u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6e <code>cascade_delete=True</code>\u3002</p> <p>\u8fd9\u4f1a\u914d\u7f6e SQLModel\uff0c\u4f7f\u5176\u5728\u5220\u9664\u521d\u59cb\u8bb0\u5f55\uff08\u56e2\u961f\uff09\u65f6\uff0c**\u81ea\u52a8\u5220\u9664**\u76f8\u5173\u8bb0\u5f55\uff08\u82f1\u96c4\uff09\u3002</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", cascade_delete=True)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", cascade_delete=True)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\", cascade_delete=True)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", cascade_delete=True)\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", ondelete=\"CASCADE\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion not found:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E not found:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", cascade_delete=True)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"CASCADE\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion not found:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E not found:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\", cascade_delete=True)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"CASCADE\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion not found:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E not found:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u4f7f\u7528\u6b64\u914d\u7f6e\uff0c\u5f53\u6211\u4eec\u5220\u9664\u4e00\u4e2a\u56e2\u961f\u65f6\uff0cSQLModel\uff08\u5b9e\u9645\u4e0a\u662f SQLAlchemy\uff09\u5c06\u4f1a\uff1a</p> <ul> <li>\u786e\u4fdd \u76f8\u5173\u8bb0\u5f55\u7684\u5bf9\u8c61\u5df2\u52a0\u8f7d \uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5c31\u662f <code>heroes</code>\uff08\u82f1\u96c4\uff09\u3002\u5982\u679c\u5b83\u4eec\u6ca1\u6709\u52a0\u8f7d\uff0cSQLModel \u4f1a\u53d1\u9001\u4e00\u4e2a <code>SELECT</code> \u67e5\u8be2\u6765\u4ece\u6570\u636e\u5e93\u4e2d\u83b7\u53d6\u5b83\u4eec\u3002</li> <li>\u5411\u6570\u636e\u5e93\u53d1\u9001\u4e00\u4e2a <code>DELETE</code> \u67e5\u8be2\uff0c\u5305\u62ec\u6bcf\u4e00\u6761\u76f8\u5173\u8bb0\u5f55\uff08\u6bcf\u4e2a\u82f1\u96c4\uff09\u3002</li> <li>\u6700\u540e\uff0c\u53d1\u9001\u53e6\u4e00\u4e2a <code>DELETE</code> \u67e5\u8be2\uff0c\u5220\u9664\u521d\u59cb\u8bb0\u5f55\uff08\u56e2\u961f\uff09\u3002</li> </ul> <p>\u8fd9\u6837\uff0c\u5185\u90e8\u7684 Python \u4ee3\u7801 \u5c06\u901a\u8fc7\u53d1\u51fa\u5fc5\u8981\u7684 SQL \u67e5\u8be2\u6765\u5904\u7406\u5220\u9664\u76f8\u5173\u8bb0\u5f55\u7684\u64cd\u4f5c\u3002</p> <p>Tip</p> <p><code>cascade_delete</code> \u53c2\u6570\u8bbe\u7f6e\u5728 \u6ca1\u6709\u5916\u952e \u7684\u6a21\u578b\u4e2d\u7684 <code>Relationship()</code> \u4e2d\u3002</p> <p>\u6280\u672f\u7ec6\u8282</p> <p>\u5728 <code>Relationship()</code> \u4e2d\u8bbe\u7f6e <code>cascade_delete=True</code> \u5c06\u914d\u7f6e SQLAlchemy \u4f7f\u7528 <code>cascade=\"all, delete-orphan\"</code>\uff0c\u8fd9\u662f\u5f53\u9700\u8981\u7ea7\u8054\u5220\u9664\u65f6\u6700\u5e38\u7528\u4e14\u6709\u6548\u7684\u914d\u7f6e\u3002</p> <p>\u4f60\u53ef\u4ee5\u5728 SQLAlchemy \u6587\u6863 \u4e2d\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\u3002</p>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#ondelete","title":"\u4f7f\u7528 <code>ondelete</code> \u5728\u6570\u636e\u5e93\u4e2d\u5220\u9664","text":"<p>\u5728\u4e0a\u4e00\u8282\u4e2d\uff0c\u6211\u4eec\u770b\u5230\u4f7f\u7528 <code>cascade_delete</code> \u5904\u7406\u4e86\u4ece Python \u4ee3\u7801\u4e2d\u7684\u81ea\u52a8\u5220\u9664\u3002</p> <p>\u4f46\u662f\uff0c\u5982\u679c\u6709\u4eba\u76f4\u63a5 \u4e0e\u6570\u636e\u5e93\u4ea4\u4e92 \uff0c\u6ca1\u6709\u4f7f\u7528\u6211\u4eec\u7684\u4ee3\u7801\uff0c\u800c\u662f \u7528 SQL \u5220\u9664\u4e86\u4e00\u4e2a\u56e2\u961f \uff0c\u4f1a\u53d1\u751f\u4ec0\u4e48\u5462\uff1f</p> <p>\u9488\u5bf9\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 <code>Field()</code> \u4e2d\u7684 <code>ondelete</code> \u53c2\u6570\u6765\u914d\u7f6e\u6570\u636e\u5e93\uff0c \u81ea\u52a8\u5220\u9664 \u76f8\u5173\u8bb0\u5f55\u3002</p>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#ondelete_1","title":"<code>ondelete</code> \u9009\u9879","text":"<p><code>ondelete</code> \u53c2\u6570\u5c06\u5728\u6570\u636e\u5e93\u7684 \u5916\u952e\u5217 \u4e2d\u8bbe\u7f6e SQL \u7684 <code>ON DELETE</code>\u3002</p> <p><code>ondelete</code> \u53ef\u4ee5\u6709\u4ee5\u4e0b\u503c\uff1a</p> <ul> <li><code>CASCADE</code>\uff1a\u5f53\u76f8\u5173\u8bb0\u5f55\uff08\u56e2\u961f\uff09\u88ab\u5220\u9664\u65f6\uff0c \u81ea\u52a8\u5220\u9664\u8be5\u8bb0\u5f55 \uff08\u82f1\u96c4\uff09\u3002</li> <li><code>SET NULL</code>\uff1a\u5f53\u76f8\u5173\u8bb0\u5f55\u88ab\u5220\u9664\u65f6\uff0c\u5c06 \u5916\u952e \uff08<code>hero.team_id</code>\uff09\u5b57\u6bb5\u8bbe\u7f6e\u4e3a <code>NULL</code>\u3002</li> <li><code>RESTRICT</code>\uff1a\u5982\u679c\u5b58\u5728\u5916\u952e\u503c\uff0c\u5219 \u963b\u6b62 \u5220\u9664\u8be5\u8bb0\u5f55\uff08\u82f1\u96c4\uff09\uff0c\u5e76\u629b\u51fa\u9519\u8bef\u3002</li> </ul>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#ondelete-cascade","title":"\u8bbe\u7f6e <code>ondelete</code> \u4e3a <code>CASCADE</code>","text":"<p>\u5982\u679c\u6211\u4eec\u5e0c\u671b\u5728\u5220\u9664\u7236\u8bb0\u5f55\u65f6\uff0c\u6570\u636e\u5e93 \u81ea\u52a8\u5220\u9664 \u76f8\u5173\u8bb0\u5f55\uff0c\u53ef\u4ee5\u8bbe\u7f6e <code>ondelete=\"CASCADE\"</code>\u3002</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", cascade_delete=True)\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", ondelete=\"CASCADE\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", cascade_delete=True)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"CASCADE\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\", cascade_delete=True)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"CASCADE\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", cascade_delete=True)\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", ondelete=\"CASCADE\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion not found:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E not found:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", cascade_delete=True)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"CASCADE\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion not found:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E not found:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\", cascade_delete=True)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"CASCADE\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion not found:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E not found:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u73b0\u5728\uff0c\u5f53\u6211\u4eec\u5728\u6570\u636e\u5e93\u4e2d \u521b\u5efa\u8868 \u65f6\uff0c<code>Hero</code> \u8868\u4e2d\u7684 <code>team_id</code> \u5217\u5c06\u5728\u6570\u636e\u5e93\u7ea7\u522b\u7684\u5b9a\u4e49\u4e2d\u5177\u6709 <code>ON DELETE CASCADE</code>\u3002</p> <p>\u8fd9\u5c06 \u914d\u7f6e\u6570\u636e\u5e93 \uff0c\u4f7f\u5176\u5728\u5220\u9664\u76f8\u5173\u8bb0\u5f55\uff08\u56e2\u961f\uff09\u65f6\uff0c \u81ea\u52a8\u5220\u9664 \u76f8\u5173\u8bb0\u5f55\uff08\u82f1\u96c4\uff09\u3002</p> <p>Tip</p> <p><code>ondelete</code> \u53c2\u6570\u8bbe\u7f6e\u5728 \u5177\u6709\u5916\u952e \u7684\u6a21\u578b\u4e2d\u7684 <code>Field()</code>\u3002</p>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#cascade_delete-ondelete","title":"\u4f7f\u7528 <code>cascade_delete</code> \u6216 <code>ondelete</code>","text":"<p>\u6b64\u65f6\uff0c\u4f60\u53ef\u80fd\u4f1a\u60f3\u77e5\u9053\u662f\u5e94\u8be5\u4f7f\u7528 <code>cascade_delete</code> \u8fd8\u662f <code>ondelete</code>\u3002\u7b54\u6848\u662f\uff1a\u4e24\u8005\u90fd\u7528\uff01 \ud83e\udd13</p> <p><code>ondelete</code> \u4f1a \u914d\u7f6e\u6570\u636e\u5e93 \uff0c\u4ee5\u9632\u6709\u4eba\u76f4\u63a5\u4e0e\u6570\u636e\u5e93\u4ea4\u4e92\u3002</p> <p>\u4f46\u4ecd\u7136\u9700\u8981 <code>cascade_delete</code> \u6765\u544a\u8bc9 SQLAlchemy\uff0c\u5b83\u5e94\u8be5\u5220\u9664\u5185\u5b58\u4e2d\u7684**Python \u5bf9\u8c61**\u3002</p>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#_8","title":"\u5916\u952e\u7ea6\u675f\u652f\u6301","text":"<p>\u4e00\u4e9b\u6570\u636e\u5e93\u4e0d\u652f\u6301\u5916\u952e\u7ea6\u675f\u3002</p> <p>\u4f8b\u5982\uff0c SQLite \u9ed8\u8ba4\u4e0d\u652f\u6301\u5916\u952e\u7ea6\u675f\u3002\u5b83\u4eec\u9700\u8981\u901a\u8fc7\u81ea\u5b9a\u4e49 SQL \u547d\u4ee4\u624b\u52a8\u542f\u7528\uff1a</p> <pre><code>PRAGMA foreign_keys = ON;\n</code></pre> <p>\u56e0\u6b64\uff0c\u901a\u5e38\u5efa\u8bae\u540c\u65f6\u914d\u7f6e <code>cascade_delete</code> \u548c <code>ondelete</code>\u3002</p> <p>Tip</p> <p>\u4f60\u5c06\u4f1a\u5728\u4e0b\u6587\u7684 <code>passive_deletes</code> \u90e8\u5206\u4e2d\u5b66\u4e60\u5230\u5982\u4f55 \u7981\u7528\u9ed8\u8ba4\u7684 \u81ea\u52a8 SQLModel\uff08SQLAlchemy\uff09\u884c\u4e3a\uff0c\u5e76 \u4ec5\u4f9d\u8d56\u4e8e\u6570\u636e\u5e93 \u3002</p>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#cascade_delete-relationship-ondelete-field","title":"<code>cascade_delete</code> \u5728 <code>Relationship()</code> \u4e0a\u548c <code>ondelete</code> \u5728 <code>Field()</code> \u4e0a","text":"<p>\u8bb0\u4f4f\u4e00\u70b9... \ud83e\udd13</p> <ul> <li><code>ondelete</code> \u5e94\u8be5\u653e\u5728\u5177\u6709 \u5916\u952e \u7684 <code>Field()</code> \u4e0a\u3002\u901a\u5e38\u5728 \"\u4e00\u5bf9\u591a\" \u5173\u7cfb\u7684 \"\u591a\" \u7aef\u3002</li> </ul> <pre><code>class Hero(SQLModel, table=True):\n    ...\n\n    team_id: int = Field(foreign_key=\"team.id\", ondelete=\"CASCADE\")\n</code></pre> <ul> <li><code>cascade_delete</code> \u5e94\u8be5\u653e\u5728 <code>Relationship()</code> \u4e0a\u3002\u901a\u5e38\u5728 \"\u4e00\u5bf9\u591a\" \u5173\u7cfb\u7684 \"\u4e00\" \u7aef\uff0c\u5373 \u6ca1\u6709\u5916\u952e \u7684\u90a3\u4e00\u7aef\u3002</li> </ul> <pre><code>class Team(SQLModel, table=True):\n    ...\n\n    heroes: list[Hero] = Relationship(cascade_delete=True)\n</code></pre>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#_9","title":"\u5220\u9664\u56e2\u961f\u53ca\u5176\u82f1\u96c4","text":"<p>\u73b0\u5728\uff0c\u5f53\u6211\u4eec \u5220\u9664\u4e00\u4e2a\u56e2\u961f \u65f6\uff0c\u65e0\u9700\u505a\u4efb\u4f55\u989d\u5916\u64cd\u4f5c\uff0c\u5b83\u4f1a \u81ea\u52a8 \u5220\u9664\u4e0e\u8be5\u56e2\u961f\u76f8\u5173\u8054\u7684 \u82f1\u96c4 \u3002</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", cascade_delete=True)\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", ondelete=\"CASCADE\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion not found:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E not found:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", cascade_delete=True)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"CASCADE\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion not found:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E not found:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\", cascade_delete=True)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"CASCADE\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion not found:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E not found:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#_10","title":"\u786e\u8ba4\u82f1\u96c4\u5df2\u88ab\u5220\u9664","text":"<p>\u6211\u4eec\u53ef\u4ee5\u786e\u8ba4\uff0c\u5728\u5220\u9664\u4e86\u56e2\u961f <code>Wakaland</code> \u540e\uff0c\u82f1\u96c4 <code>Black Lion</code> \u548c <code>Princess Sure-E</code> \u4e5f\u4f1a\u88ab**\u5220\u9664**\u3002</p> <p>\u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u4ece\u6570\u636e\u5e93\u4e2d\u9009\u62e9\u5b83\u4eec\uff0c\u6211\u4eec\u5c06**\u518d\u4e5f\u627e\u4e0d\u5230**\u5b83\u4eec\u3002</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion not found:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E not found:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion not found:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E not found:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion not found:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E not found:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", cascade_delete=True)\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", ondelete=\"CASCADE\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion not found:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E not found:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", cascade_delete=True)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"CASCADE\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion not found:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E not found:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\", cascade_delete=True)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"CASCADE\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion not found:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E not found:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#cascade_deletetrue-ondeletecascade","title":"\u8fd0\u884c\u542f\u7528 <code>cascade_delete=True</code> \u548c <code>ondelete=\"CASCADE\"</code> \u7684\u7a0b\u5e8f","text":"<p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd0\u884c\u7a0b\u5e8f\u6765\u786e\u8ba4\u4e00\u5207\u6b63\u5e38\u5de5\u4f5c\u3002</p> <pre><code>$ python app.py\n\n// \u4e00\u4e9b\u6a21\u677f\u4ee3\u7801\u548c\u4e4b\u524d\u7684\u8f93\u51fa\u5df2\u7701\u7565 \ud83d\ude09\n\n// \u5982\u4ee5\u524d\u4e00\u6837\uff0c\u521b\u5efa\u56e2\u961f\u8868\nCREATE TABLE team (\n        id INTEGER NOT NULL,\n        name VARCHAR NOT NULL,\n        headquarters VARCHAR NOT NULL,\n        PRIMARY KEY (id)\n)\n\n// \u82f1\u96c4\u8868\u88ab\u521b\u5efa\uff0c\u5e76\u4e14\u5e26\u6709 ON DELETE CASCADE \ud83c\udf89\n// \u5728 SQLite \u4e2d\uff0c\u5b83\u8fd8\u5305\u62ec REFERENCES team (id)\uff0c\u8fd9\u662f SQLite \u6b63\u5e38\u4f7f\u7528 ON DELETE CASCADE \u6240\u5fc5\u9700\u7684\u3002\n// SQLAlchemy \u4e3a\u6211\u4eec\u5904\u7406\u4e86\u8fd9\u4e2a\u8bbe\u7f6e\uff0c\u786e\u4fdd\u5b83\u6b63\u5e38\u5de5\u4f5c \ud83e\udd13\nCREATE TABLE hero (\n        id INTEGER NOT NULL,\n        name VARCHAR NOT NULL,\n        secret_name VARCHAR NOT NULL,\n        age INTEGER,\n        team_id INTEGER,\n        PRIMARY KEY (id),\n        FOREIGN KEY(team_id) REFERENCES team (id) ON DELETE CASCADE\n)\n\n// \u6211\u4eec\u9009\u62e9\u56e2\u961f Wakaland\nINFO Engine SELECT team.id, team.name, team.headquarters\nFROM team\nWHERE team.name = ?\nINFO Engine [generated in 0.00014s] ('Wakaland',)\n\n// \u7136\u540e\uff0c\u56e0 `cascade_delete`\uff0c\u5728\u5220\u9664 Wakaland \u4e4b\u524d\uff0cSQLAlchemy \u52a0\u8f7d\u4e86\u76f8\u5173\u82f1\u96c4\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age, hero.team_id AS hero_team_id\nFROM hero\nWHERE ? = hero.team_id\nINFO Engine [generated in 0.00020s] (3,)\n\n// \u63a5\u4e0b\u6765\uff0c\u5728\u5220\u9664 Wakaland \u56e2\u961f\u4e4b\u524d\uff0cSQLAlchemy \u53d1\u9001 DELETE \u8bed\u53e5\uff0c\u5305\u542b\u6bcf\u4e2a\u76f8\u5173\u7684\u82f1\u96c4\uff1aBlack Lion \u548c Princess Sure-E\uff0cID \u5206\u522b\u4e3a 4 \u548c 5\nINFO Engine DELETE FROM hero WHERE hero.id = ?\nINFO Engine [generated in 0.00022s] [(4,), (5,)]\n\n// \u7136\u540e\uff0c\u5b83\u5c06\u53d1\u9001\u5220\u9664\u56e2\u961f Wakaland \u7684 SQL \u8bed\u53e5\uff0cID \u4e3a 3\nINFO Engine DELETE FROM team WHERE team.id = ?\nINFO Engine [generated in 0.00017s] (3,)\n\n// \u6253\u5370\u5df2\u5220\u9664\u7684\u56e2\u961f\nDeleted team: name='Wakaland' id=3 headquarters='Wakaland Capital City'\n\n// \u6700\u540e\uff0c\u6211\u4eec\u5c1d\u8bd5\u9009\u62e9 Wakaland \u7684\u82f1\u96c4 Black Lion \u548c Princess Sure-E \u5e76\u6253\u5370\u5b83\u4eec\uff0c\u4f46\u5b83\u4eec\u73b0\u5728\u5df2\u88ab\u5220\u9664\nBlack Lion not found: None\nPrincess Sure-E not found: None\n</code></pre>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#ondelete-set-null","title":"<code>ondelete</code> \u914d\u7f6e\u4e3a <code>SET NULL</code>","text":"<p>\u6211\u4eec\u53ef\u4ee5\u914d\u7f6e\u6570\u636e\u5e93\uff0c\u5f53\u76f8\u5173\u8bb0\u5f55\uff08\u5728 <code>team</code> \u8868\u4e2d\u7684\u8bb0\u5f55\uff09\u88ab\u5220\u9664\u65f6\uff0c\u5c06\u5916\u952e\uff08\u5728 <code>hero</code> \u8868\u4e2d\u7684 <code>team_id</code>\uff09\u8bbe\u7f6e\u4e3a <code>NULL</code>\u3002</p> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528 <code>Relationship()</code> \u7684\u4e00\u65b9\u4e0d\u4f1a\u8bbe\u7f6e <code>cascade_delete</code>\uff0c\u4f46\u5728\u6709 <code>Field()</code> \u548c <code>foreign_key</code> \u7684\u4e00\u65b9\u4f1a\u8bbe\u7f6e <code>ondelete=\"SET NULL\"</code>\u3002</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"SET NULL\"\n    )\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"SET NULL\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"SET NULL\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"SET NULL\"\n    )\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion has no team:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E has no team:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"SET NULL\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion has no team:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E has no team:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"SET NULL\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion has no team:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E has no team:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u4e0a\u8ff0\u914d\u7f6e\u5c06 <code>Hero</code> \u8868\u4e2d\u7684 <code>team_id</code> \u5217\u8bbe\u7f6e\u4e3a\u5177\u6709 <code>ON DELETE SET NULL</code>\u3002</p> <p>\u8fd9\u6837\uff0c\u5f53\u6709\u4eba\u76f4\u63a5\u4f7f\u7528 SQL \u5220\u9664\u6570\u636e\u5e93\u4e2d\u7684\u56e2\u961f\u65f6\uff0c\u6570\u636e\u5e93\u4f1a\u81ea\u52a8\u5c06\u8be5\u56e2\u961f\u7684\u82f1\u96c4\u8bb0\u5f55\u4e2d\u7684 <code>team_id</code> \u8bbe\u7f6e\u4e3a <code>NULL</code>\uff08\u5982\u679c\u6570\u636e\u5e93\u652f\u6301\u7684\u8bdd\uff09\u3002</p> <p>Tip</p> <p>\u5916\u952e\u5e94\u8be5\u5141\u8bb8 <code>None</code> \u503c\uff08\u6570\u636e\u5e93\u4e2d\u7684 <code>NULL</code>\uff09\uff0c\u5426\u5219\u4f1a\u56e0\u4e3a\u8fdd\u53cd <code>NOT NULL</code> \u7ea6\u675f\u800c\u5bfc\u81f4\u5b8c\u6574\u6027\u9519\u8bef\u3002</p> <p>\u56e0\u6b64\uff0c<code>team_id</code> \u9700\u8981\u6709\u4e00\u4e2a\u652f\u6301 <code>None</code> \u7684\u7c7b\u578b\uff0c\u4f8b\u5982\uff1a</p> <pre><code>team_id: int | None\n</code></pre>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#ondeleteset-null","title":"\u4e0d\u4f7f\u7528 <code>ondelete=\"SET NULL\"</code>","text":"<p>\u5982\u679c\u4e0d\u4f7f\u7528 <code>ondelete=\"SET NULL\"</code>\uff0c\u4e5f\u4e0d\u8bbe\u7f6e\u4efb\u4f55 <code>cascade_delete</code>\uff0c\u7136\u540e\u5220\u9664\u4e00\u4e2a\u56e2\u961f\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f</p> <p>\u9ed8\u8ba4\u884c\u4e3a\u662f\uff0cSQLModel\uff08\u5b9e\u9645\u4e0a\u662f SQLAlchemy\uff09\u4f1a\u4ece Python \u4ee3\u7801 \u4e2d\u53bb\u66f4\u65b0\u82f1\u96c4\u7684 <code>team_id</code> \u5b57\u6bb5\uff0c\u5c06\u5176\u8bbe\u7f6e\u4e3a <code>NULL</code>\u3002</p> <p>\u6240\u4ee5\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b <code>team_id</code> \u5b57\u6bb5\u4f1a\u88ab**\u8bbe\u7f6e\u4e3a <code>NULL</code>**\u3002</p> <p>\u4f46\u662f\uff0c\u5982\u679c\u6709\u4eba\u8fdb\u5165\u6570\u636e\u5e93\u5e76**\u624b\u52a8\u5220\u9664\u4e00\u4e2a\u56e2\u961f**\uff0c\u8fd9\u4e9b\u82f1\u96c4\u7684 <code>team_id</code> \u53ef\u80fd\u4f1a\u6307\u5411\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u56e2\u961f\u3002</p> <p>\u901a\u8fc7\u6dfb\u52a0 <code>ondelete=\"SET NULL\"</code>\uff0c\u53ef\u4ee5\u5c06\u6570\u636e\u5e93\u672c\u8eab\u914d\u7f6e\u4e3a\u4e5f\u5c06\u8fd9\u4e9b\u5b57\u6bb5\u8bbe\u7f6e\u4e3a <code>NULL</code>\u3002</p> <p>\u4f46\u662f\uff0c\u5982\u679c\u4ece\u4ee3\u7801\u4e2d\u5220\u9664\u4e00\u4e2a\u56e2\u961f\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b SQLModel\uff08\u5b9e\u9645\u4e0a\u662f SQLAlchemy\uff09\u4f1a\u5728\u6570\u636e\u5e93\u7684 <code>SET NULL</code> \u751f\u6548\u4e4b\u524d\uff0c\u5148\u5c06\u8fd9\u4e9b <code>team_id</code> \u5b57\u6bb5\u66f4\u65b0\u4e3a <code>NULL</code>\u3002</p>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#set-null","title":"\u4f7f\u7528 <code>SET NULL</code> \u5220\u9664\u56e2\u961f","text":"<p>\u5220\u9664\u56e2\u961f\u7684 \u4ee3\u7801\u4e0e\u4e4b\u524d\u76f8\u540c\uff0c\u552f\u4e00\u4e0d\u540c\u7684\u662f\u6570\u636e\u5e93\u4e2d\u5e95\u5c42\u7684\u914d\u7f6e\u3002</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"SET NULL\"\n    )\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion has no team:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E has no team:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"SET NULL\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion has no team:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E has no team:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"SET NULL\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion has no team:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E has no team:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u6267\u884c\u4ee5\u4e0a\u4ee3\u7801\u540e\uff0c\u7ed3\u679c\u5c06\u662f\u4ee5\u4e0b\u8868\u683c\uff1a</p>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#set-null-team","title":"\u5220\u9664 <code>SET NULL</code> \u540e\u7684 Team \u8868","text":"id name headquarters 1 Z-Force Sister Margaret's Bar 2 Preventers Sharp Tower"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#set-null-hero","title":"\u5220\u9664 <code>SET NULL</code> \u540e\u7684 Hero \u8868","text":"id name secret_name age team_id 1 Deadpond Dive WIlson 1 2 Rusty-Man Tommy Sharp 48 2 3 Spider-Boy Pedro Parqueador 2 4 Black Lion Trevor Challa 35 NULL 5 Princess Sure-E Sure-E NULL"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#set-null_1","title":"\u5220\u9664 <code>SET NULL</code> \u540e\u7684\u56e2\u961f\u548c\u82f1\u96c4","text":"<p>\u6211\u4eec\u53ef\u4ee5\u50cf\u8fd9\u6837\u53ef\u89c6\u5316\u5b83\u4eec\uff1a</p> <pre><code>flowchart TB\n    subgraph \"Z-Force\"\n        d(\"Deadpond\")\n    end\n    subgraph \"Preventers\"\n        r(\"Rusty-Man\")\n        s(\"Spider-Boy\")\n    end\n    b(\"Black Lion\")\n    p(\"Princess Sure-E\")</code></pre>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#set-null_2","title":"\u4f7f\u7528 <code>SET NULL</code> \u8fd0\u884c\u7a0b\u5e8f","text":"<p>\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u901a\u8fc7\u8fd0\u884c\u7a0b\u5e8f\u6765\u786e\u8ba4\u4e00\u5207\u6b63\u5e38\u5de5\u4f5c\uff1a</p> <pre><code>$ python app.py\n\n// \u4e00\u4e9b\u6a21\u677f\u4ee3\u7801\u548c\u4e4b\u524d\u7684\u8f93\u51fa\u5df2\u7701\u7565 \ud83d\ude09\n\n// hero \u8868\u88ab\u521b\u5efa\u65f6\u5e26\u6709 ON DELETE SET NULL \ud83c\udf89\n// \u5728 SQLite \u4e2d\uff0c\u5b83\u8fd8\u5305\u62ec\uff1aREFERENCES team (id)\u3002\u8fd9\u4e2a REFERENCES \u662f SQLite \u4e3a\u4e86\u6b63\u786e\u4f7f\u7528 ON DELETE CASCADE \u6240\u9700\u7684\u3002\n// SQLModel \u548c SQLAlchemy \u4f1a\u4e3a\u6211\u4eec\u8bbe\u7f6e\u597d\uff0c\u786e\u4fdd\u5b83\u6b63\u5e38\u5de5\u4f5c \ud83e\udd13\nCREATE TABLE hero (\n        id INTEGER NOT NULL,\n        name VARCHAR NOT NULL,\n        secret_name VARCHAR NOT NULL,\n        age INTEGER,\n        team_id INTEGER,\n        PRIMARY KEY (id),\n        FOREIGN KEY(team_id) REFERENCES team (id) ON DELETE SET NULL\n)\n\n// \u6211\u4eec\u9009\u62e9\u56e2\u961f Wakaland\nINFO Engine SELECT team.id, team.name, team.headquarters\nFROM team\nWHERE team.id = ?\nINFO Engine [generated in 0.00010s] (3,)\nTeam Wakaland: id=3 name='Wakaland' headquarters='Wakaland Capital City'\n\n// \u7136\u540e\uff0c\u5728\u5220\u9664 Wakaland \u4e4b\u524d\uff0c\u82f1\u96c4\u4eec\u4f1a\u81ea\u52a8\u52a0\u8f7d\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age, hero.team_id AS hero_team_id\nFROM hero\nWHERE ? = hero.team_id\nINFO Engine [generated in 0.00020s] (3,)\n\n// \u63a5\u4e0b\u6765\uff0c\u5728\u5220\u9664 Wakaland \u56e2\u961f\u4e4b\u524d\uff0c\u5b83\u4f1a\u53d1\u9001\u4e00\u4e2a UPDATE \u8bed\u53e5\uff0c\u5305\u542b\u6bcf\u4e2a\u76f8\u5173\u7684\u82f1\u96c4\uff1aBlack Lion \u548c Princess Sure-E\uff0cID \u5206\u522b\u662f 4 \u548c 5\uff0c\u5c06\u5b83\u4eec\u7684 team_id \u8bbe\u7f6e\u4e3a NULL\u3002\u8fd9\u4e0d\u662f\u6211\u4eec\u6dfb\u52a0\u7684 `SET NULL`\uff0c\u8fd9\u662f SQLModel\uff08SQLAlchemy\uff09\u7684\u9ed8\u8ba4\u884c\u4e3a\u3002\nINFO Engine UPDATE hero SET team_id=? WHERE hero.id = ?\nINFO Engine [generated in 0.00009s] [(None, 4), (None, 5)]\n\n// \u7136\u540e\uff0c\u5b83\u4f1a\u53d1\u9001\u5220\u9664 ID \u4e3a 3 \u7684\u56e2\u961f Wakaland \u7684\u8bed\u53e5\nINFO Engine DELETE FROM team WHERE team.id = ?\nINFO Engine [generated in 0.00017s] (3,)\n\n// \u6253\u5370\u5df2\u5220\u9664\u7684\u56e2\u961f\nDeleted team: name='Wakaland' id=3 headquarters='Wakaland Capital City'\n\n// \u6700\u540e\uff0c\u6211\u4eec\u9009\u62e9\u5e76\u6253\u5370\u82f1\u96c4 Black Lion \u548c Princess Sure-E\uff0c\u53d1\u73b0\u5b83\u4eec\u4e0d\u518d\u6709\u56e2\u961f\nBlack Lion has no team: age=35 id=4 name='Black Lion' secret_name='Trevor Challa' team_id=None\nPrincess Sure-E has no team: age=None id=5 name='Princess Sure-E' secret_name='Sure-E' team_id=None\n</code></pre> <p>\u56e2\u961f <code>Wakaland</code> \u88ab\u5220\u9664\uff0c\u6240\u6709\u82f1\u96c4\u90fd\u5931\u53bb\u4e86\u6240\u5c5e\u56e2\u961f\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u5b83\u4eec\u7684 <code>team_id</code> \u88ab\u8bbe\u7f6e\u4e3a <code>NULL</code>\uff0c\u4f46\u4ecd\u7136\u4fdd\u7559\u5728\u6570\u636e\u5e93\u4e2d\uff01 \ud83e\udd13</p>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#passive_deletes","title":"\u4f7f\u7528 <code>passive_deletes</code> \u8ba9\u6570\u636e\u5e93\u5904\u7406\u5220\u9664\u64cd\u4f5c","text":"<p>\u5728\u4e4b\u524d\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 <code>ondelete</code> \u914d\u7f6e\u4e86 <code>CASCADE</code> \u548c <code>SET NULL</code>\uff0c\u76ee\u7684\u662f\u8ba9\u6570\u636e\u5e93\u81ea\u52a8\u5904\u7406\u76f8\u5173\u8bb0\u5f55\u7684\u5220\u9664\u64cd\u4f5c\u3002\u4f46\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u81ea\u5df1 \u4ece\u672a\u4f7f\u7528\u8fc7\u8fd9\u4e9b\u529f\u80fd\uff0c\u56e0\u4e3a SQLModel\uff08SQLAlchemy\uff09\u9ed8\u8ba4\u4f1a \u52a0\u8f7d \u76f8\u5173\u8bb0\u5f55\uff0c\u5e76\u5728\u53d1\u9001\u5220\u9664\u8bf7\u6c42\u4e4b\u524d \u5220\u9664 \u6216 \u66f4\u65b0\u4e3a NULL\u3002</p> <p>\u5982\u679c\u4f60\u77e5\u9053\u4f60\u7684\u6570\u636e\u5e93\u80fd\u591f\u6b63\u786e\u5730\u5904\u7406\u5220\u9664\u6216\u66f4\u65b0\u64cd\u4f5c\uff08\u901a\u8fc7 <code>ondelete=\"CASCADE\"</code> \u6216 <code>ondelete=\"SET NULL\"</code>\uff09\uff0c\u4f60\u53ef\u4ee5\u5728 <code>Relationship()</code> \u4e2d\u4f7f\u7528 <code>passive_deletes=\"all\"</code>\uff0c\u544a\u8bc9 SQLModel\uff08\u5b9e\u9645\u4e0a\u662f SQLAlchemy\uff09**\u4e0d\u8981\u5728\u53d1\u9001\u5220\u9664\u8bf7\u6c42\u4e4b\u524d\u5220\u9664\u6216\u66f4\u65b0**\u8fd9\u4e9b\u8bb0\u5f55\uff08\u5982\u82f1\u96c4\uff09\u3002</p>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#sqlite","title":"\u5728 SQLite \u4e2d\u542f\u7528\u5916\u952e\u652f\u6301","text":"<p>\u4e3a\u4e86\u5728 SQLite \u4e2d\u6d4b\u8bd5\u8fd9\u4e00\u529f\u80fd\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u542f\u7528\u5916\u952e\u652f\u6301\u3002</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n    with engine.connect() as connection:\n        connection.execute(text(\"PRAGMA foreign_keys=ON\"))  # for SQLite only\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n    with engine.connect() as connection:\n        connection.execute(text(\"PRAGMA foreign_keys=ON\"))  # for SQLite only\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n    with engine.connect() as connection:\n        connection.execute(text(\"PRAGMA foreign_keys=ON\"))  # for SQLite only\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select, text\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", passive_deletes=\"all\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"SET NULL\"\n    )\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n    with engine.connect() as connection:\n        connection.execute(text(\"PRAGMA foreign_keys=ON\"))  # for SQLite only\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion has no team:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E has no team:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select, text\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", passive_deletes=\"all\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"SET NULL\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n    with engine.connect() as connection:\n        connection.execute(text(\"PRAGMA foreign_keys=ON\"))  # for SQLite only\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion has no team:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E has no team:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select, text\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\", passive_deletes=\"all\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"SET NULL\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n    with engine.connect() as connection:\n        connection.execute(text(\"PRAGMA foreign_keys=ON\"))  # for SQLite only\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion has no team:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E has no team:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Info</p> <p>\u4f60\u53ef\u4ee5\u5728 SQLAlchemy \u6587\u6863 \u4e2d\u4e86\u89e3\u6709\u5173 SQLite\u3001\u5916\u952e\u548c\u6b64 SQL \u547d\u4ee4\u7684\u66f4\u591a\u4fe1\u606f\u3002</p>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#passive_deletesall","title":"\u4f7f\u7528 <code>passive_deletes=\"all\"</code>","text":"<p>\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u66f4\u65b0 <code>Team</code> \u8868\u6a21\u578b\uff0c\u5728 <code>heroes</code> \u7684 <code>Relationship()</code> \u4e2d\u4f7f\u7528 <code>passive_deletes=\"all\"</code>\u3002</p> <p>\u6211\u4eec\u8fd8\u5c06\u5728 <code>Hero</code> \u6a21\u578b\u8868\u7684\u5916\u952e <code>Field()</code> \u4e2d\u4f7f\u7528 <code>ondelete=\"SET NULL\"</code>\uff0c\u4ee5\u8ba9\u6570\u636e\u5e93\u81ea\u52a8\u5c06\u8fd9\u4e9b\u5b57\u6bb5\u8bbe\u7f6e\u4e3a <code>NULL</code>\u3002</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select, text\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", passive_deletes=\"all\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"SET NULL\"\n    )\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select, text\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", passive_deletes=\"all\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"SET NULL\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select, text\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\", passive_deletes=\"all\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"SET NULL\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select, text\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", passive_deletes=\"all\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"SET NULL\"\n    )\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n    with engine.connect() as connection:\n        connection.execute(text(\"PRAGMA foreign_keys=ON\"))  # for SQLite only\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion has no team:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E has no team:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select, text\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", passive_deletes=\"all\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"SET NULL\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n    with engine.connect() as connection:\n        connection.execute(text(\"PRAGMA foreign_keys=ON\"))  # for SQLite only\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion has no team:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E has no team:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select, text\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\", passive_deletes=\"all\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"SET NULL\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n    with engine.connect() as connection:\n        connection.execute(text(\"PRAGMA foreign_keys=ON\"))  # for SQLite only\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion has no team:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E has no team:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#passive_deletes_1","title":"\u4f7f\u7528 <code>passive_deletes</code> \u8fd0\u884c\u7a0b\u5e8f","text":"<p>\u73b0\u5728\uff0c\u5982\u679c\u6211\u4eec\u8fd0\u884c\u7a0b\u5e8f\uff0c\u6211\u4eec\u5c06\u770b\u5230 SQLModel\uff08SQLAlchemy\uff09\u4e0d\u518d\u52a0\u8f7d\u548c\u66f4\u65b0\u82f1\u96c4\uff0c\u800c\u662f\u76f4\u63a5\u53d1\u9001 <code>DELETE</code> \u8bf7\u6c42\u5220\u9664\u961f\u4f0d\u3002</p> <pre><code>$ python app.py\n\n// \u4e00\u4e9b\u521d\u59cb\u5316\u548c\u5148\u524d\u7684\u8f93\u51fa\u7701\u7565 \ud83d\ude09\n\n// \u521b\u5efa\u82f1\u96c4\u8868\uff0c\u4f7f\u7528\u4e86 `ON DELETE SET NULL` \u5982\u4e4b\u524d\u4e00\u6837\nCREATE TABLE hero (\n        id INTEGER NOT NULL,\n        name VARCHAR NOT NULL,\n        secret_name VARCHAR NOT NULL,\n        age INTEGER,\n        team_id INTEGER,\n        PRIMARY KEY (id),\n        FOREIGN KEY(team_id) REFERENCES team (id) ON DELETE SET NULL\n)\n\n// \u5bf9\u4e8e SQLite\uff0c\u6211\u4eec\u8fd8\u53d1\u9001\u4e86\u81ea\u5b9a\u4e49\u547d\u4ee4\u6765\u542f\u7528\u5916\u952e\u652f\u6301\nINFO Engine PRAGMA foreign_keys=ON\n\n// \u9009\u62e9\u5e76\u6253\u5370\u961f\u4f0d Wakaland\nTeam Wakaland: id=3 name='Wakaland' headquarters='Wakaland Capital City'\n\n// \u6211\u4eec\u4e0d\u4f1a\u518d\u770b\u5230\u5bf9\u82f1\u96c4\u7684 SELECT \u67e5\u8be2\uff0c\u4e5f\u4e0d\u4f1a\u770b\u5230 UPDATE \u6216 DELETE\u3002SQLModel\uff08\u4f7f\u7528 SQLAlchemy\uff09\u4e0d\u4f1a\u5c1d\u8bd5\u52a0\u8f7d\u6216\u66f4\u65b0\uff08\u6216\u5220\u9664\uff09\u82f1\u96c4\u76f8\u5173\u8bb0\u5f55\uff0c\u5b83\u4f1a\u76f4\u63a5\u53d1\u9001\u961f\u4f0d\u7684 DELETE \u8bf7\u6c42\u3002\nINFO Engine DELETE FROM team WHERE team.id = ?\nINFO Engine [generated in 0.00013s] (3,)\n\n// \u6b64\u65f6\uff0c\u7531\u4e8e\u6211\u4eec\u542f\u7528\u4e86 SQLite \u7684\u5916\u952e\u652f\u6301\uff0c\u6570\u636e\u5e93\u4f1a\u81ea\u52a8\u5904\u7406\u82f1\u96c4\u8bb0\u5f55\u7684\u66f4\u65b0\uff0c\u5c06\u4ed6\u4eec\u7684 team_id \u8bbe\u7f6e\u4e3a NULL\n\n// \u6253\u5370\u5df2\u5220\u9664\u7684\u961f\u4f0d\nDeleted team: name='Wakaland' id=3 headquarters='Wakaland Capital City'\n\n// \u6700\u540e\uff0c\u6211\u4eec\u9009\u62e9\u5e76\u6253\u5370\u82f1\u96c4 Black Lion \u548c Princess Sure-E\uff0c\u4ed6\u4eec\u5df2\u7ecf\u6ca1\u6709\u961f\u4f0d\u4e86\nBlack Lion has no team: age=35 id=4 name='Black Lion' secret_name='Trevor Challa' team_id=None\nPrincess Sure-E has no team: age=None id=5 name='Princess Sure-E' secret_name='Sure-E' team_id=None\n</code></pre>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#ondelete-restrict","title":"<code>ondelete</code> \u4e0e <code>RESTRICT</code>","text":"<p>\u6211\u4eec\u8fd8\u53ef\u4ee5\u914d\u7f6e\u6570\u636e\u5e93\uff0c\u5728\u5b58\u5728\u76f8\u5173\u8bb0\u5f55\uff08\u5982\u82f1\u96c4\uff09\u7684\u60c5\u51b5\u4e0b\uff0c**\u963b\u6b62\u5220\u9664**\u67d0\u4e2a\u8bb0\u5f55\uff08\u5982\u961f\u4f0d\uff09\u3002</p> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5f53\u6709\u4eba\u5c1d\u8bd5 \u5220\u9664\u5305\u542b\u82f1\u96c4\u7684\u961f\u4f0d \u65f6\uff0c\u6570\u636e\u5e93\u5c06 \u629b\u51fa\u9519\u8bef\u3002</p> <p>\u800c\u4e14\uff0c\u56e0\u4e3a\u8fd9\u662f\u5728\u6570\u636e\u5e93\u4e2d\u914d\u7f6e\u7684\uff0c\u5373\u4f7f\u6709\u4eba\u76f4\u63a5\u901a\u8fc7 SQL \u4e0e\u6570\u636e\u5e93\u4ea4\u4e92\uff08\u5982\u679c\u6570\u636e\u5e93\u652f\u6301\uff09\uff0c\u4e5f\u4f1a\u53d1\u751f\u6b64\u9519\u8bef\u3002</p> <p>Tip</p> <p>\u5bf9\u4e8e SQLite\uff0c\u8fd9\u4e5f\u9700\u8981\u542f\u7528\u5916\u952e\u652f\u6301\u3002</p>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#restrict-sqlite","title":"\u4e3a <code>RESTRICT</code> \u542f\u7528 SQLite \u5916\u952e\u652f\u6301","text":"<p>\u7531\u4e8e <code>ondelete=\"RESTRICT\"</code> \u4e3b\u8981\u662f\u6570\u636e\u5e93\u7ea7\u7684\u7ea6\u675f\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u9996\u5148\u542f\u7528 SQLite \u7684\u5916\u952e\u652f\u6301\uff0c\u4ee5\u4fbf\u8fdb\u884c\u6d4b\u8bd5\u3002</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n    with engine.connect() as connection:\n        connection.execute(text(\"PRAGMA foreign_keys=ON\"))  # for SQLite only\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n    with engine.connect() as connection:\n        connection.execute(text(\"PRAGMA foreign_keys=ON\"))  # for SQLite only\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n    with engine.connect() as connection:\n        connection.execute(text(\"PRAGMA foreign_keys=ON\"))  # for SQLite only\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select, text\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", passive_deletes=\"all\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"RESTRICT\"\n    )\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n    with engine.connect() as connection:\n        connection.execute(text(\"PRAGMA foreign_keys=ON\"))  # for SQLite only\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion has no team:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E has no team:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select, text\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", passive_deletes=\"all\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"RESTRICT\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n    with engine.connect() as connection:\n        connection.execute(text(\"PRAGMA foreign_keys=ON\"))  # for SQLite only\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion has no team:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E has no team:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select, text\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\", passive_deletes=\"all\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"RESTRICT\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n    with engine.connect() as connection:\n        connection.execute(text(\"PRAGMA foreign_keys=ON\"))  # for SQLite only\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion has no team:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E has no team:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#ondeleterestrict","title":"\u4f7f\u7528 <code>ondelete=\"RESTRICT\"</code>","text":"<p>\u6211\u4eec\u5c06\u5728 <code>Hero</code> \u6a21\u578b\u8868\u7684 <code>team_id</code> \u5916\u952e <code>Field()</code> \u4e2d\u8bbe\u7f6e <code>ondelete=\"RESTRICT\"</code>\u3002</p> <p>\u5728 <code>Team</code> \u6a21\u578b\u8868\u4e2d\uff0c\u6211\u4eec\u5c06\u5728\u82f1\u96c4\u7684 <code>Relationship()</code> \u4e2d\u4f7f\u7528 <code>passive_deletes=\"all\"</code>\uff0c\u8fd9\u6837\u4f1a\u7981\u7528\u9ed8\u8ba4\u7684\u884c\u4e3a\uff0c\u5373\u5c06\u5df2\u5220\u9664\u6a21\u578b\u7684\u5916\u952e\u8bbe\u7f6e\u4e3a <code>NULL</code>\uff0c\u5e76\u4e14\u5f53\u6211\u4eec\u5c1d\u8bd5\u5220\u9664\u5e26\u6709\u82f1\u96c4\u7684\u961f\u4f0d\u65f6\uff0c\u6570\u636e\u5e93\u4f1a \u629b\u51fa\u9519\u8bef\u3002</p> <p>Tip</p> <p>\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u6ca1\u6709\u5728 <code>Team</code> \u6a21\u578b\u8868\u4e2d\u8bbe\u7f6e <code>cascade_delete</code>\u3002</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select, text\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", passive_deletes=\"all\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"RESTRICT\"\n    )\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select, text\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", passive_deletes=\"all\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"RESTRICT\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select, text\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\", passive_deletes=\"all\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"RESTRICT\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select, text\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", passive_deletes=\"all\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"RESTRICT\"\n    )\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n    with engine.connect() as connection:\n        connection.execute(text(\"PRAGMA foreign_keys=ON\"))  # for SQLite only\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion has no team:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E has no team:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select, text\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", passive_deletes=\"all\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"RESTRICT\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n    with engine.connect() as connection:\n        connection.execute(text(\"PRAGMA foreign_keys=ON\"))  # for SQLite only\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion has no team:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E has no team:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select, text\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\", passive_deletes=\"all\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"RESTRICT\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n    with engine.connect() as connection:\n        connection.execute(text(\"PRAGMA foreign_keys=ON\"))  # for SQLite only\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion has no team:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E has no team:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#restrict","title":"\u4f7f\u7528 <code>RESTRICT</code> \u8fd0\u884c\u7a0b\u5e8f\uff0c\u67e5\u770b\u9519\u8bef","text":"<p>\u73b0\u5728\uff0c\u5982\u679c\u6211\u4eec\u8fd0\u884c\u7a0b\u5e8f\u5e76\u5c1d\u8bd5\u5220\u9664\u4e00\u4e2a\u5e26\u6709\u82f1\u96c4\u7684\u961f\u4f0d\uff0c\u6211\u4eec\u5c06\u770b\u5230\u4e00\u4e2a\u9519\u8bef\u3002</p> <pre><code>$ python app.py\n\n// \u4e00\u4e9b\u521d\u59cb\u5316\u548c\u5148\u524d\u7684\u8f93\u51fa\u7701\u7565 \ud83d\ude09\n\n// \u521b\u5efa\u82f1\u96c4\u8868\uff0c\u4f7f\u7528\u4e86 `ON DELETE RESTRICT`\nCREATE TABLE hero (\n        id INTEGER NOT NULL,\n        name VARCHAR NOT NULL,\n        secret_name VARCHAR NOT NULL,\n        age INTEGER,\n        team_id INTEGER,\n        PRIMARY KEY (id),\n        FOREIGN KEY(team_id) REFERENCES team (id) ON DELETE RESTRICT\n)\n\n// \u73b0\u5728\uff0c\u5f53\u6211\u4eec\u5c1d\u8bd5\u5220\u9664\u4e00\u4e2a\u5e26\u6709\u82f1\u96c4\u7684\u961f\u4f0d\u65f6\uff0c\u6211\u4eec\u4f1a\u770b\u5230\u4e00\u4e2a\u9519\u8bef\nTraceback (most recent call last):\n     File \"/home/user/code...\n\nsqlite3.IntegrityError: FOREIGN KEY constraint failed\n\n// \u66f4\u591a\u9519\u8bef\u8f93\u51fa...\nsqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) FOREIGN KEY constraint failed\n[SQL: DELETE FROM team WHERE team.id = ?]\n[parameters: (3,)]\n</code></pre> <p>\u592a\u68d2\u4e86\uff01\u6570\u636e\u5e93\u6ca1\u6709\u8ba9\u6211\u4eec\u72af\u4e0b\u5220\u9664\u5e26\u6709\u82f1\u96c4\u7684\u961f\u4f0d\u7684\u9519\u8bef\u3002\ud83e\udd13</p> <p>Tip</p> <p>\u5982\u679c\u4f60\u60f3\u6d4b\u8bd5\u662f\u5426\u9700\u8981 <code>PRAGMA foreign_keys=ON</code>\uff0c\u6ce8\u91ca\u6389\u90a3\u4e00\u884c**\u5e76\u518d\u6b21\u8fd0\u884c\uff0c\u4f60\u5c06 **\u4e0d\u4f1a\u770b\u5230\u9519\u8bef\u3002\ud83d\ude31</p> <p>\u540c\u6837\u5730\uff0c\u4f7f\u7528 <code>passive_deletes=\"all\"</code> \u4e5f\u662f\u5982\u6b64\uff0c\u5982\u679c\u4f60 \u6ce8\u91ca\u6389\u90a3\u4e00\u884c\uff0cSQLModel\uff08SQLAlchemy\uff09\u4f1a\u5728\u5220\u9664\u961f\u4f0d\u4e4b\u524d\u52a0\u8f7d\u5e76\u66f4\u65b0\u82f1\u96c4\uff0c\u5c06\u4ed6\u4eec\u7684\u5916\u952e <code>team_id</code> \u8bbe\u7f6e\u4e3a <code>NULL</code>\uff0c\u5e76\u4e14 \u7ea6\u675f\u5c06\u65e0\u6cd5\u6309\u9884\u671f\u5de5\u4f5c\uff0c\u4f60\u5c06\u4e0d\u4f1a\u770b\u5230\u9519\u8bef\u3002\ud83d\ude05</p>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#_11","title":"\u5728\u5220\u9664\u961f\u4f0d\u4e4b\u524d\u66f4\u65b0\u82f1\u96c4","text":"<p>\u5728\u914d\u7f6e\u4e86 <code>ondelete=\"RESTRICT\"</code>\uff0c\u542f\u7528\u4e86 SQLite \u5916\u952e\u652f\u6301\uff0c\u5e76\u4e14\u5728 <code>Relationship()</code> \u4e2d\u8bbe\u7f6e\u4e86 <code>passive_deletes=\"all\"</code> \u540e\uff0c\u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u5220\u9664\u4e00\u4e2a\u5e26\u6709\u82f1\u96c4\u7684\u961f\u4f0d\uff0c\u5c31\u4f1a\u770b\u5230\u9519\u8bef\u3002</p> <p>\u5982\u679c\u6211\u4eec\u60f3\u5220\u9664\u961f\u4f0d\uff0c\u9700\u8981 \u5148\u66f4\u65b0\u82f1\u96c4\uff0c\u5c06\u4ed6\u4eec\u7684 <code>team_id</code> \u8bbe\u7f6e\u4e3a <code>None</code>\uff08\u6216\u5728\u6570\u636e\u5e93\u4e2d\u4e3a <code>NULL</code>\uff09\u3002</p> <p>\u901a\u8fc7\u8c03\u7528\u5217\u8868\u7684 <code>.clear()</code> \u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u79fb\u9664\u5217\u8868\u4e2d\u7684\u6240\u6709\u9879\u3002\u6240\u4ee5\uff0c\u901a\u8fc7\u8c03\u7528 <code>team.heroes.clear()</code> \u5e76\u4fdd\u5b58\u5230\u6570\u636e\u5e93\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u82f1\u96c4\u4ece\u961f\u4f0d\u4e2d\u89e3\u9664\u5173\u8054\uff0c\u8fd9\u4f1a\u5c06\u4ed6\u4eec\u7684 <code>team_id</code> \u8bbe\u7f6e\u4e3a <code>None</code>\u3002</p> <p>Tip</p> <p>\u8c03\u7528 <code>team.heroes.clear()</code> \u4e0e SQLModel\uff08\u5b9e\u9645\u4e0a\u662f SQLAlchemy\uff09\u5728\u6ca1\u6709\u914d\u7f6e <code>passive_deletes=\"all\"</code> \u65f6\u4f1a\u505a\u7684\u64cd\u4f5c\u975e\u5e38\u76f8\u4f3c\u3002</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef remove_team_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        team.heroes.clear()\n        session.add(team)\n        session.commit()\n        session.refresh(team)\n        print(\"Team with removed heroes:\", team)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef remove_team_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        team.heroes.clear()\n        session.add(team)\n        session.commit()\n        session.refresh(team)\n        print(\"Team with removed heroes:\", team)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef remove_team_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        team.heroes.clear()\n        session.add(team)\n        session.commit()\n        session.refresh(team)\n        print(\"Team with removed heroes:\", team)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select, text\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", passive_deletes=\"all\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"RESTRICT\"\n    )\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n    with engine.connect() as connection:\n        connection.execute(text(\"PRAGMA foreign_keys=ON\"))  # for SQLite only\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef remove_team_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        team.heroes.clear()\n        session.add(team)\n        session.commit()\n        session.refresh(team)\n        print(\"Team with removed heroes:\", team)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion has no team:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E has no team:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    remove_team_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select, text\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", passive_deletes=\"all\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"RESTRICT\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n    with engine.connect() as connection:\n        connection.execute(text(\"PRAGMA foreign_keys=ON\"))  # for SQLite only\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef remove_team_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        team.heroes.clear()\n        session.add(team)\n        session.commit()\n        session.refresh(team)\n        print(\"Team with removed heroes:\", team)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion has no team:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E has no team:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    remove_team_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select, text\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\", passive_deletes=\"all\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"RESTRICT\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n    with engine.connect() as connection:\n        connection.execute(text(\"PRAGMA foreign_keys=ON\"))  # for SQLite only\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef remove_team_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        team.heroes.clear()\n        session.add(team)\n        session.commit()\n        session.refresh(team)\n        print(\"Team with removed heroes:\", team)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion has no team:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E has no team:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    remove_team_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#_12","title":"\u8fd0\u884c\u7a0b\u5e8f\uff0c\u5148\u5220\u9664\u82f1\u96c4","text":"<p>\u73b0\u5728\uff0c\u5982\u679c\u6211\u4eec\u8fd0\u884c\u7a0b\u5e8f\u5e76\u5148\u5220\u9664\u82f1\u96c4\uff0c\u5c31\u80fd\u591f\u987a\u5229\u5220\u9664\u961f\u4f0d\u4e86\u3002</p> <pre><code>$ python app.py\n\n// \u4e00\u4e9b\u521d\u59cb\u5316\u548c\u5148\u524d\u7684\u8f93\u51fa\u7701\u7565 \ud83d\ude09\n\n// \u521b\u5efa\u82f1\u96c4\u8868\uff0c\u4f7f\u7528\u4e86 `ON DELETE RESTRICT`\nCREATE TABLE hero (\n        id INTEGER NOT NULL,\n        name VARCHAR NOT NULL,\n        secret_name VARCHAR NOT NULL,\n        age INTEGER,\n        team_id INTEGER,\n        PRIMARY KEY (id),\n        FOREIGN KEY(team_id) REFERENCES team (id) ON DELETE RESTRICT\n)\n\n// \u6211\u4eec\u624b\u52a8\u89e3\u9664\u82f1\u96c4\u4e0e\u961f\u4f0d\u7684\u5173\u8054\nINFO Engine UPDATE hero SET team_id=? WHERE hero.id = ?\nINFO Engine [generated in 0.00008s] [(None, 4), (None, 5)]\n\n// \u6253\u5370\u5df2\u79fb\u9664\u82f1\u96c4\u7684\u961f\u4f0d\nTeam with removed heroes: name='Wakaland' id=3 headquarters='Wakaland Capital City'\n\n// \u73b0\u5728\u53ef\u4ee5\u5220\u9664\u961f\u4f0d\nINFO Engine DELETE FROM team WHERE team.id = ?\nINFO Engine [generated in 0.00008s] (3,)\nINFO Engine COMMIT\nDeleted team: name='Wakaland' id=3 headquarters='Wakaland Capital City'\n\n// \u82f1\u96c4 Black Lion \u548c Princess Sure-E \u5df2\u4e0d\u518d\u4e0e\u961f\u4f0d\u5173\u8054\nBlack Lion has no team: secret_name='Trevor Challa' name='Black Lion' team_id=None age=35 id=4\nPrincess Sure-E has no team: secret_name='Sure-E' name='Princess Sure-E' team_id=None age=None id=5\n</code></pre>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#_13","title":"\u7ed3\u8bba","text":"<p>\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u4f60\u5b9e\u9645\u4e0a\u4e0d\u9700\u8981\u914d\u7f6e\u4efb\u4f55\u4e1c\u897f\u3002\ud83d\ude0e</p> <p>\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u4f60\u60f3\u8981 \u7ea7\u8054 \u5220\u9664\u4e00\u4e2a\u8bb0\u5f55\u53ca\u5176\u76f8\u5173\u8bb0\u5f55\uff08\u5220\u9664\u4e00\u4e2a\u5e26\u6709\u82f1\u96c4\u7684\u961f\u4f0d\uff09\uff0c\u4f60\u53ef\u4ee5\uff1a</p> <ul> <li>\u5728\u6ca1\u6709\u5916\u952e\u7684\u90a3\u4e00\u4fa7\u7684 <code>Relationship()</code> \u4e2d\u4f7f\u7528 <code>cascade_delete=True</code></li> <li>\u5e76\u5728\u5e26\u6709\u5916\u952e\u7684 <code>Field()</code> \u4e2d\u4f7f\u7528 <code>ondelete=\"CASCADE\"</code></li> </ul> <p>\u8fd9\u6837\u5c31\u53ef\u4ee5 \u8986\u76d6\u5927\u591a\u6570\u7528\u4f8b\u3002\ud83d\ude80</p> <p>\u5982\u679c\u4f60\u9700\u8981\u5176\u4ed6\u529f\u80fd\uff0c\u53ef\u4ee5\u53c2\u8003\u4e0a\u8ff0\u63cf\u8ff0\u7684\u989d\u5916\u9009\u9879\u3002\ud83e\udd13</p>"},{"location":"tutorial/relationship-attributes/create-and-update-relationships/","title":"\u521b\u5efa\u548c\u66f4\u65b0\u5173\u7cfb","text":"<p>\u73b0\u5728\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u4f7f\u7528\u8fd9\u4e9b\u65b0\u7684 \u5173\u7cfb\u5c5e\u6027 \u6765\u521b\u5efa\u5177\u6709\u5173\u7cfb\u7684\u6570\u636e\u3002\u2728</p>"},{"location":"tutorial/relationship-attributes/create-and-update-relationships/#_2","title":"\u4f7f\u7528\u5b57\u6bb5\u521b\u5efa\u5b9e\u4f8b","text":"<p>\u8ba9\u6211\u4eec\u56de\u987e\u4e00\u4e0b\u4e4b\u524d\u7528\u6765\u521b\u5efa\u82f1\u96c4\u548c\u961f\u4f0d\u7684\u65e7\u4ee3\u7801\uff1a</p> Python 3.10+Python 3.7+ <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u8fd9\u91cc\u6709\u51e0\u4e2a \u6ce8\u610f\u4e8b\u9879 \u3002</p> <p>\u9996\u5148\uff0c\u6211\u4eec \u521b\u5efa \u4e86\u4e00\u4e9b <code>Team</code> \u5b9e\u4f8b\u5bf9\u8c61\u3002\u5728\u521b\u5efa <code>Hero</code> \u5b9e\u4f8b\u65f6\uff0c\u6211\u4eec\u5e0c\u671b\u4f7f\u7528\u8fd9\u4e9b\u961f\u4f0d\u7684 ID\uff0c\u5e76\u5c06\u5176\u586b\u5145\u5230 <code>team_id</code> \u5b57\u6bb5\u4e2d\u3002</p> <p>\u4f46\u662f\uff0c\u6a21\u578b\u5b9e\u4f8b\u5728\u6570\u636e\u5e93\u4e2d \u4e0d\u4f1a\u751f\u6210 ID \uff0c\u76f4\u5230\u6211\u4eec\u5c06\u5b83\u4eec\u901a\u8fc7 <code>add</code> \u548c <code>commit</code> \u6dfb\u52a0\u5230 \u4f1a\u8bdd \u4e2d\u3002\u5728\u6b64\u4e4b\u524d\uff0c\u5b83\u4eec\u7684 ID \u662f <code>None</code>\uff0c\u800c\u6211\u4eec\u5e0c\u671b\u4f7f\u7528\u5b9e\u9645\u7684 ID\u3002</p> <p>\u56e0\u6b64\uff0c\u6211\u4eec\u5fc5\u987b\u5148 <code>add</code> \u5b83\u4eec\uff0c\u5e76\u63d0\u4ea4\u4f1a\u8bdd\uff0c\u4e4b\u540e\u624d\u80fd\u5f00\u59cb\u521b\u5efa <code>Hero</code> \u5b9e\u4f8b\uff0c\u4ee5\u4fbf\u80fd\u591f \u4f7f\u7528\u5b83\u4eec\u7684 ID \u3002</p> <p>\u63a5\u7740\uff0c\u5728\u521b\u5efa <code>Hero</code> \u5b9e\u4f8b\u65f6\uff0c\u6211\u4eec\u4f1a\u4f7f\u7528\u8fd9\u4e9b ID\u3002\u6211\u4eec\u5c06\u65b0\u7684\u82f1\u96c4\u6dfb\u52a0\u5230\u4f1a\u8bdd\u4e2d\uff0c\u7136\u540e\u63d0\u4ea4\u3002</p> <p>\u6240\u4ee5\uff0c\u6211\u4eec \u63d0\u4ea4\u4e86\u4e24\u6b21 \u3002\u6211\u4eec\u9700\u8981\u8bb0\u5f97\u5148 <code>add</code> \u67d0\u4e9b\u5bf9\u8c61\uff0c\u7136\u540e\u518d <code>commit</code>\uff0c\u5e76\u4e14\u8981\u6309\u7167\u6b63\u786e\u7684\u987a\u5e8f\u8fdb\u884c\u64cd\u4f5c\uff0c\u5426\u5219\u6211\u4eec\u53ef\u80fd\u4f1a\u4f7f\u7528\u4e00\u4e2a\u5f53\u524d\u4e3a <code>None</code> \u7684 <code>team.id</code>\uff0c\u56e0\u4e3a\u5b83\u5c1a\u672a\u4fdd\u5b58\u3002</p> <p>\u8fd9\u662f\u8fd9\u4e9b \u5173\u7cfb\u5c5e\u6027 \u5e2e\u52a9\u7684\u7b2c\u4e00\u4e2a\u5730\u65b9\u3002\ud83e\udd13</p>"},{"location":"tutorial/relationship-attributes/create-and-update-relationships/#_3","title":"\u4f7f\u7528\u5173\u7cfb\u5c5e\u6027\u521b\u5efa\u5b9e\u4f8b","text":"<p>\u73b0\u5728\u8ba9\u6211\u4eec\u4f7f\u7528\u65b0\u7684\u3001\u95ea\u4eae\u7684 <code>Relationship</code> \u5c5e\u6027\u6765\u505a\u540c\u6837\u7684\u4e8b\u60c5\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa <code>Team</code> \u5b9e\u4f8b\uff0c\u5e76\u76f4\u63a5\u5c06\u5b83\u4eec\u4f20\u9012\u7ed9\u521b\u5efa <code>Hero</code> \u5b9e\u4f8b\u65f6\u7684 <code>team</code> \u53c2\u6570\uff0c\u4f8b\u5982\u4f7f\u7528 <code>team=team_preventers</code>\uff0c\u800c\u4e0d\u662f <code>team_id=team_preventers.id</code>\u3002</p> <p>\u5f97\u76ca\u4e8e SQLAlchemy \u548c\u5176\u5e95\u5c42\u7684\u5de5\u4f5c\u65b9\u5f0f\uff0c\u8fd9\u4e9b\u961f\u4f0d\u751a\u81f3\u4e0d\u9700\u8981\u63d0\u524d\u6709 ID\uff0c\u4f46\u56e0\u4e3a\u6211\u4eec\u5c06\u6574\u4e2a\u5bf9\u8c61\u8d4b\u7ed9\u6bcf\u4e2a\u82f1\u96c4\uff0c\u5b83\u4eec \u4f1a\u81ea\u52a8\u5728\u6570\u636e\u5e93\u4e2d\u521b\u5efa \uff0c\u5e76\u751f\u6210\u81ea\u52a8 ID\uff0c\u63a5\u7740\u4f1a\u5c06\u8be5 ID \u8bbe\u7f6e\u5230\u6bcf\u4e2a\u82f1\u96c4\u884c\u7684 <code>team_id</code> \u5217\u4e2d\u3002</p> <p>\u4e8b\u5b9e\u4e0a\uff0c\u73b0\u5728\u6211\u4eec\u751a\u81f3\u4e0d\u9700\u8981\u4f7f\u7528 <code>session.add(team)</code> \u663e\u5f0f\u5c06\u961f\u4f0d\u6dfb\u52a0\u5230\u4f1a\u8bdd\u4e2d\uff0c\u56e0\u4e3a\u8fd9\u4e9b <code>Team</code> \u5b9e\u4f8b\u5df2\u7ecf \u4e0e\u6211\u4eec\u6dfb\u52a0\u5230\u4f1a\u8bdd\u4e2d\u7684\u82f1\u96c4 \u5173\u8054\u3002</p> <p>SQLAlchemy \u77e5\u9053\uff0c\u5b83\u8fd8\u9700\u8981\u5728\u4e0b\u6b21\u63d0\u4ea4\u65f6\u5c06\u8fd9\u4e9b\u961f\u4f0d\u5305\u542b\u5728\u5185\uff0c\u4ee5\u4fbf\u6b63\u786e\u4fdd\u5b58\u82f1\u96c4\u6570\u636e\u3002</p> <p>\u7136\u540e\uff0c\u6b63\u5982\u4f60\u6240\u770b\u5230\u7684\uff0c\u6211\u4eec\u53ea\u9700\u8981\u505a\u4e00\u6b21 <code>commit()</code>\u3002</p>"},{"location":"tutorial/relationship-attributes/create-and-update-relationships/#_4","title":"\u5206\u914d\u5173\u7cfb","text":"<p>\u5c31\u50cf\u6211\u4eec\u53ef\u4ee5\u5c06\u4e00\u4e2a\u6574\u6570\u503c\uff08<code>team.id</code>\uff09\u5206\u914d\u7ed9 <code>hero.team_id</code> \u4e00\u6837\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5c06 <code>Team</code> \u5b9e\u4f8b\u5206\u914d\u7ed9 <code>hero.team</code>\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n\n        # \u4e4b\u524d\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n\n        # \u4e4b\u524d\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n\n        # \u4e4b\u524d\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/relationship-attributes/create-and-update-relationships/#_5","title":"\u521b\u5efa\u5305\u542b\u82f1\u96c4\u7684\u56e2\u961f","text":"<p>\u4e4b\u524d\uff0c\u6211\u4eec\u521b\u5efa\u4e86 <code>Team</code> \u5b9e\u4f8b\u5e76\u5c06\u5176\u4f5c\u4e3a <code>team=</code> \u53c2\u6570\u4f20\u9012\u7ed9 <code>Hero</code> \u5b9e\u4f8b\u3002</p> <p>\u6211\u4eec\u4e5f\u53ef\u4ee5\u5148\u521b\u5efa <code>Hero</code> \u5b9e\u4f8b\uff0c\u7136\u540e\u5728\u521b\u5efa <code>Team</code> \u5b9e\u4f8b\u65f6\uff0c\u5c06\u5b83\u4eec\u4f5c\u4e3a <code>heroes=</code> \u53c2\u6570\uff08\u5b83\u63a5\u53d7\u4e00\u4e2a\u5217\u8868\uff09\u4f20\u9012\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n\n        # \u4e4b\u524d\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n\n        # \u4e4b\u524d\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n\n        # \u4e4b\u524d\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u9996\u5148\u521b\u5efa\u4e86\u4e24\u4e2a\u82f1\u96c4\uff0cBlack Lion \u548c Princess Sure-E\uff0c\u7136\u540e\u5c06\u5b83\u4eec\u4f20\u9012\u7ed9 <code>heroes</code> \u53c2\u6570\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u4e0e\u4e4b\u524d\u4e00\u6837\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5c06 <code>Team</code> \u5b9e\u4f8b\u6dfb\u52a0\u5230\u4f1a\u8bdd\u4e2d\uff0c\u5e76\u4e14\u7531\u4e8e\u8fd9\u4e9b\u82f1\u96c4\u4e0e\u5b83\u5173\u8054\uff0c\u5f53\u6211\u4eec\u8c03\u7528 <code>commit</code> \u65f6\uff0c\u5b83\u4eec\u4e5f\u4f1a\u88ab\u81ea\u52a8\u4fdd\u5b58\u3002</p>"},{"location":"tutorial/relationship-attributes/create-and-update-relationships/#_6","title":"\u5728\u201c\u591a\u201d\u65b9\u5305\u542b\u5173\u7cfb\u5bf9\u8c61","text":"<p>\u6211\u4eec\u4e4b\u524d\u63d0\u5230\u8fd9\u662f\u4e00\u4e2a \u591a\u5bf9\u4e00 \u5173\u7cfb\uff0c\u56e0\u4e3a\u53ef\u4ee5\u6709 \u591a\u4e2a \u82f1\u96c4\u5c5e\u4e8e \u4e00\u4e2a \u56e2\u961f\u3002</p> <p>\u6211\u4eec\u4e5f\u53ef\u4ee5\u5728 \u591a \u65b9\u4f7f\u7528\u8fd9\u4e9b\u5173\u7cfb\u5c5e\u6027\u6765\u8fde\u63a5\u6570\u636e\u3002</p> <p>\u7531\u4e8e <code>team.heroes</code> \u5c5e\u6027\u8868\u73b0\u5f97\u50cf\u4e00\u4e2a\u5217\u8868\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5411\u5176\u4e2d\u6dfb\u52a0\u6570\u636e\u3002</p> <p>\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e9b\u65b0\u7684\u82f1\u96c4\u5e76\u5c06\u5b83\u4eec\u6dfb\u52a0\u5230 <code>team_preventers.heroes</code> \u5217\u8868\u5c5e\u6027\u4e2d\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n\n        # \u4e4b\u524d\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n\n        # \u4e4b\u524d\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n\n        # \u4e4b\u524d\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p><code>team_preventers.heroes</code> \u5c5e\u6027\u8868\u73b0\u5f97\u50cf\u4e00\u4e2a\u5217\u8868\uff0c\u4f46\u5b83\u662f\u4e00\u4e2a\u7279\u6b8a\u7c7b\u578b\u7684\u5217\u8868\uff0c\u56e0\u4e3a\u5f53\u6211\u4eec\u4fee\u6539\u5b83\uff0c\u5411\u5176\u4e2d\u6dfb\u52a0\u82f1\u96c4\u65f6\uff0c SQLModel \uff08\u5b9e\u9645\u4e0a\u662f SQLAlchemy\uff09\u4f1a \u8ddf\u8e2a \u5fc5\u987b\u5728\u6570\u636e\u5e93\u4e2d\u6267\u884c\u7684\u76f8\u5e94\u66f4\u6539\u3002</p> <p>\u7136\u540e\uff0c\u6211\u4eec\u5c06\u56e2\u961f <code>add()</code> \u5230\u4f1a\u8bdd\u4e2d\u5e76\u6267\u884c <code>commit()</code>\u3002</p> <p>\u548c\u4e4b\u524d\u4e00\u6837\uff0c\u6211\u4eec\u751a\u81f3\u4e0d\u9700\u8981\u5c06\u72ec\u7acb\u7684\u82f1\u96c4\u901a\u8fc7 <code>add()</code> \u65b9\u6cd5\u6dfb\u52a0\u5230\u4f1a\u8bdd\u4e2d\uff0c\u56e0\u4e3a\u5b83\u4eec\u5df2\u7ecf\u4e0e\u56e2\u961f \u5173\u8054 \u3002</p>"},{"location":"tutorial/relationship-attributes/create-and-update-relationships/#_7","title":"\u603b\u7ed3","text":"<p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5e38\u89c4\u7684 Python \u5bf9\u8c61\u548c\u5c5e\u6027\uff0c\u901a\u8fc7\u8fd9\u4e9b \u5173\u7cfb\u5c5e\u6027 \u6765\u521b\u5efa\u548c\u66f4\u65b0\u6570\u636e\u8fde\u63a5\u3002\ud83d\ude0e</p> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u770b\u5230\u5982\u4f55\u4f7f\u7528\u8fd9\u4e9b\u5173\u7cfb\u5c5e\u6027\u6765\u8bfb\u53d6\u5173\u8054\u6570\u636e\u3002\ud83e\udd1d</p>"},{"location":"tutorial/relationship-attributes/define-relationships-attributes/","title":"\u5b9a\u4e49\u5173\u7cfb\u5c5e\u6027","text":"<p>\u73b0\u5728\u6211\u4eec\u7ec8\u4e8e\u6765\u5230\u4e86 SQLModel \u4e2d\u6700\u6fc0\u52a8\u4eba\u5fc3\u7684\u90e8\u5206\u4e4b\u4e00\u2014\u2014\u5173\u7cfb\u5c5e\u6027\u3002\u2728</p> <p>\u6211\u4eec\u76ee\u524d\u6709\u4e00\u4e2a <code>team</code> \u8868\uff1a</p> idnameheadquarters 1PreventersSharp Tower 2Z-ForceSister Margaret's Bar <p>\u8fd8\u6709\u4e00\u4e2a <code>hero</code> \u8868\uff1a</p> idnamesecret_nameageteam_id 1DeadpondDive Wilsonnull2 2Rusty-ManTommy Sharp481 3Spider-BoyPedro Parqueadornull1 <p>\u73b0\u5728\uff0c\u60a8\u5df2\u7ecf\u4e86\u89e3\u4e86\u8fd9\u4e9b\u8868\u5728\u5e95\u5c42\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u4ee5\u53ca\u6a21\u578b\u7c7b\u5982\u4f55\u8868\u793a\u5b83\u4eec\uff0c\u662f\u65f6\u5019\u6dfb\u52a0\u4e00\u4e9b\u4fbf\u6377\u7684\u529f\u80fd\u4e86\uff0c\u8fd9\u5c06\u4f7f\u8bb8\u591a\u64cd\u4f5c\u53d8\u5f97\u66f4\u52a0\u7b80\u6d01\u3002</p>"},{"location":"tutorial/relationship-attributes/define-relationships-attributes/#_2","title":"\u58f0\u660e\u5173\u7cfb\u5c5e\u6027","text":"<p>\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u53ea\u4f7f\u7528\u4e86 <code>team_id</code> \u5217\u6765\u5728\u67e5\u8be2\u65f6\u8fde\u63a5\u8868\u683c\uff0c\u4f7f\u7528 <code>select()</code>\uff1a</p> Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u8fd9\u662f\u4e00\u4e2a \u666e\u901a\u7684\u5b57\u6bb5 \uff0c\u5c31\u50cf\u5176\u4ed6\u6240\u6709\u5b57\u6bb5\u4e00\u6837\uff0c\u90fd\u8868\u793a \u8868\u4e2d\u7684\u4e00\u5217\u3002</p> <p>\u4f46\u662f\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u5411\u8fd9\u4e9b\u6a21\u578b\u7c7b\u6dfb\u52a0\u51e0\u4e2a\u65b0\u7684\u7279\u6b8a\u5c5e\u6027\u2014\u2014\u5373\u6dfb\u52a0 <code>Relationship</code> \u5c5e\u6027\u3002</p> <p>\u9996\u5148\uff0c\u4ece <code>sqlmodel</code> \u5bfc\u5165 <code>Relationship</code>\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u63a5\u4e0b\u6765\uff0c\u4f7f\u7528 <code>Relationship</code> \u6765\u5728\u6a21\u578b\u7c7b\u4e2d\u58f0\u660e\u4e00\u4e2a\u65b0\u7684\u5c5e\u6027\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/relationship-attributes/define-relationships-attributes/#_3","title":"\u4ec0\u4e48\u662f\u5173\u7cfb\u5c5e\u6027","text":"<p>\u8fd9\u4e9b\u65b0\u5c5e\u6027\u4e0e\u5b57\u6bb5\u4e0d\u540c\uff0c\u5b83\u4eec**\u4e0d\u76f4\u63a5\u4ee3\u8868\u6570\u636e\u5e93\u4e2d\u7684\u4e00\u5217**\uff0c\u5176\u503c\u4e5f\u4e0d\u50cf\u6574\u6570\u90a3\u6837\u662f\u4e00\u4e2a\u5355\u4e00\u7684\u503c\u3002\u5b83\u4eec\u7684\u503c\u662f**\u4e0e\u4e4b\u76f8\u5173\u7684\u6574\u4e2a\u5bf9\u8c61**\u3002</p> <p>\u4f8b\u5982\uff0c\u5728 <code>Hero</code> \u5b9e\u4f8b\u4e2d\uff0c\u5982\u679c\u4f60\u8c03\u7528 <code>hero.team</code>\uff0c\u4f60\u5c06\u5f97\u5230\u8fd9\u4e2a\u82f1\u96c4\u6240\u5c5e\u7684\u6574\u4e2a <code>Team</code> \u5b9e\u4f8b\u5bf9\u8c61\u3002\u2728</p> <p>\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u4f60\u53ef\u4ee5\u68c0\u67e5\u4e00\u4e2a <code>hero</code> \u662f\u5426\u5c5e\u4e8e\u67d0\u4e2a <code>team</code>\uff08\u5982\u679c <code>.team</code> \u4e0d\u4e3a <code>None</code>\uff09\uff0c\u7136\u540e\u6253\u5370\u8be5\u961f\u4f0d\u7684 <code>name</code>\uff1a</p> <pre><code>if hero.team:\n    print(hero.team.name)\n</code></pre>"},{"location":"tutorial/relationship-attributes/define-relationships-attributes/#_4","title":"\u53ef\u9009\u5173\u7cfb\u5c5e\u6027","text":"<p>\u8bf7\u6ce8\u610f\uff0c\u5728 <code>Hero</code> \u7c7b\u4e2d\uff0c<code>team</code> \u7684\u7c7b\u578b\u6ce8\u89e3\u662f <code>Optional[Team]</code>\u3002</p> <p>\u8fd9\u610f\u5473\u7740\u8fd9\u4e2a\u5c5e\u6027\u53ef\u4ee5\u662f <code>None</code>\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u5b8c\u6574\u7684 <code>Team</code> \u5bf9\u8c61\u3002</p> <p>\u8fd9\u662f\u56e0\u4e3a\u76f8\u5173\u7684 <code>team_id</code> \u4e5f\u53ef\u4ee5\u662f <code>None</code>\uff08\u6216\u8005\u6570\u636e\u5e93\u4e2d\u7684 <code>NULL</code>\uff09\u3002</p> <p>\u5982\u679c\u8981\u6c42\u6bcf\u4e2a <code>Hero</code> \u5b9e\u4f8b\u90fd\u5fc5\u987b\u5c5e\u4e8e\u4e00\u4e2a <code>Team</code>\uff0c\u90a3\u4e48 <code>team_id</code> \u7684\u7c7b\u578b\u5e94\u8be5\u662f <code>int</code>\uff0c\u800c\u4e0d\u662f <code>Optional[int]</code>\uff0c\u5b83\u7684 <code>Field</code> \u5e94\u8be5\u662f <code>Field(foreign_key=\"team.id\")</code>\uff0c\u800c\u4e0d\u662f <code>Field(default=None, foreign_key=\"team.id\")</code>\uff0c\u800c <code>team</code> \u5c5e\u6027\u5219\u5e94\u8be5\u662f <code>Team</code> \u7c7b\u578b\uff0c\u800c\u4e0d\u662f <code>Optional[Team]</code>\u3002</p>"},{"location":"tutorial/relationship-attributes/define-relationships-attributes/#_5","title":"\u5e26\u5217\u8868\u7684\u5173\u7cfb\u5c5e\u6027","text":"<p>\u5728 <code>Team</code> \u7c7b\u4e2d\uff0c<code>heroes</code> \u5c5e\u6027\u88ab\u6ce8\u89e3\u4e3a <code>Hero</code> \u5bf9\u8c61\u7684\u5217\u8868\uff0c\u56e0\u4e3a\u8fd9\u6b63\u662f\u5b83\u6240\u5305\u542b\u7684\u5185\u5bb9\u3002</p> <p>SQLModel\uff08\u5b9e\u9645\u4e0a\u662f SQLAlchemy\uff09\u8db3\u591f\u667a\u80fd\uff0c\u80fd\u591f\u77e5\u9053\u5173\u7cfb\u662f\u901a\u8fc7 <code>team_id</code> \u5efa\u7acb\u7684\uff0c\u56e0\u4e3a\u8fd9\u662f\u4ece <code>hero</code> \u8868\u6307\u5411 <code>team</code> \u8868\u7684\u5916\u952e\uff0c\u56e0\u6b64\u6211\u4eec\u4e0d\u9700\u8981\u5728\u8fd9\u91cc\u663e\u5f0f\u6307\u5b9a\u8fd9\u4e00\u70b9\u3002</p> <p>Tip</p> <p>\u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u4f1a\u518d\u6b21\u68c0\u67e5\u4e00\u4e9b\u5173\u4e8e <code>List[\"Hero\"]</code> \u548c <code>back_populates</code> \u7684\u5185\u5bb9\u3002</p> <p>\u4f46\u73b0\u5728\uff0c\u9996\u5148\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u4f7f\u7528\u8fd9\u4e9b\u5173\u7cfb\u5c5e\u6027\u3002</p>"},{"location":"tutorial/relationship-attributes/define-relationships-attributes/#_6","title":"\u4e0b\u4e00\u6b65","text":"<p>\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4e2d\u770b\u770b\u5982\u4f55\u4f7f\u7528\u8fd9\u4e9b\u65b0\u7684**\u5173\u7cfb\u5c5e\u6027**\u7684\u5b9e\u9645\u4f8b\u5b50\u3002\u2728</p>"},{"location":"tutorial/relationship-attributes/read-relationships/","title":"\u8bfb\u53d6\u5173\u7cfb","text":"<p>\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u5982\u4f55\u4f7f\u7528 \u5173\u7cfb\u5c5e\u6027 \u6765\u8fde\u63a5\u6570\u636e\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u5982\u4f55\u4ece\u5173\u7cfb\u4e2d\u83b7\u53d6\u548c\u8bfb\u53d6\u5bf9\u8c61\u3002</p>"},{"location":"tutorial/relationship-attributes/read-relationships/#_2","title":"\u9009\u62e9\u4e00\u4e2a\u82f1\u96c4","text":"<p>\u9996\u5148\uff0c\u6dfb\u52a0\u4e00\u4e2a <code>select_heroes()</code> \u51fd\u6570\uff0c\u7528\u6765\u83b7\u53d6\u4e00\u4e2a\u82f1\u96c4\u5bf9\u8c61\u5e76\u5f00\u59cb\u64cd\u4f5c\uff0c\u5e76\u5c06\u8be5\u51fd\u6570\u6dfb\u52a0\u5230 <code>main()</code> \u51fd\u6570\u4e2d\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n# \u4e4b\u524d\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n# \u4e4b\u524d\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n# \u4e4b\u524d\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        statement = select(Team).where(Team.id == hero_spider_boy.team_id)\n        result = session.exec(statement)\n        team = result.first()\n        print(\"Spider-Boy's team:\", team)\n\n        print(\"Spider-Boy's team again:\", hero_spider_boy.team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        statement = select(Team).where(Team.id == hero_spider_boy.team_id)\n        result = session.exec(statement)\n        team = result.first()\n        print(\"Spider-Boy's team:\", team)\n\n        print(\"Spider-Boy's team again:\", hero_spider_boy.team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        statement = select(Team).where(Team.id == hero_spider_boy.team_id)\n        result = session.exec(statement)\n        team = result.first()\n        print(\"Spider-Boy's team:\", team)\n\n        print(\"Spider-Boy's team again:\", hero_spider_boy.team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/relationship-attributes/read-relationships/#-","title":"\u9009\u62e9\u5173\u8054\u7684\u56e2\u961f - \u4f20\u7edf\u65b9\u6cd5","text":"<p>\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u83b7\u53d6\u4e86\u4e00\u4e2a\u82f1\u96c4\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u8fd9\u4e2a\u82f1\u96c4\u6240\u5c5e\u7684\u56e2\u961f\u3002</p> <p>\u6309\u7167\u5230\u76ee\u524d\u4e3a\u6b62\u6211\u4eec\u5b66\u5230\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 <code>select()</code> \u8bed\u53e5\uff0c\u7136\u540e\u901a\u8fc7 <code>session.exec()</code> \u6267\u884c\u5b83\uff0c\u6700\u540e\u83b7\u53d6 <code>.first()</code> \u7ed3\u679c\uff0c\u4f8b\u5982\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        statement = select(Team).where(Team.id == hero_spider_boy.team_id)\n        result = session.exec(statement)\n        team = result.first()\n        print(\"Spider-Boy's team:\", team)\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        statement = select(Team).where(Team.id == hero_spider_boy.team_id)\n        result = session.exec(statement)\n        team = result.first()\n        print(\"Spider-Boy's team:\", team)\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        statement = select(Team).where(Team.id == hero_spider_boy.team_id)\n        result = session.exec(statement)\n        team = result.first()\n        print(\"Spider-Boy's team:\", team)\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        statement = select(Team).where(Team.id == hero_spider_boy.team_id)\n        result = session.exec(statement)\n        team = result.first()\n        print(\"Spider-Boy's team:\", team)\n\n        print(\"Spider-Boy's team again:\", hero_spider_boy.team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        statement = select(Team).where(Team.id == hero_spider_boy.team_id)\n        result = session.exec(statement)\n        team = result.first()\n        print(\"Spider-Boy's team:\", team)\n\n        print(\"Spider-Boy's team again:\", hero_spider_boy.team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        statement = select(Team).where(Team.id == hero_spider_boy.team_id)\n        result = session.exec(statement)\n        team = result.first()\n        print(\"Spider-Boy's team:\", team)\n\n        print(\"Spider-Boy's team again:\", hero_spider_boy.team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/relationship-attributes/read-relationships/#-_1","title":"\u83b7\u53d6\u5173\u7cfb\u56e2\u961f - \u65b0\u65b9\u5f0f","text":"<p>\u4f46\u73b0\u5728\u6211\u4eec\u6709\u4e86 \u5173\u7cfb\u5c5e\u6027\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u5b83\u4eec\uff0cSQLModel\uff08\u5b9e\u9645\u4e0a\u662f SQLAlchemy\uff09\u5c06\u81ea\u52a8\u4ece\u6570\u636e\u5e93\u4e2d\u83b7\u53d6\u76f8\u5e94\u7684\u6570\u636e\uff0c\u5e76\u5c06\u5176\u52a0\u8f7d\u5230\u8be5\u5c5e\u6027\u4e2d\u3002\u2728</p> <p>\u56e0\u6b64\uff0c\u4e0a\u9762\u9ad8\u4eae\u663e\u793a\u7684\u4ee3\u7801\u5757\uff0c\u4e0e\u4e0b\u9762\u7684\u4ee3\u7801\u5757\u6548\u679c\u76f8\u540c\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        # \u4e4b\u524d\u793a\u4f8b\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n        print(\"Spider-Boy's team again:\", hero_spider_boy.team)\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        # \u4e4b\u524d\u793a\u4f8b\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n        print(\"Spider-Boy's team again:\", hero_spider_boy.team)\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        # \u4e4b\u524d\u793a\u4f8b\u7684\u4ee3\u7801\u7701\u7565 \ud83d\udc48\n\n        print(\"Spider-Boy's team again:\", hero_spider_boy.team)\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        statement = select(Team).where(Team.id == hero_spider_boy.team_id)\n        result = session.exec(statement)\n        team = result.first()\n        print(\"Spider-Boy's team:\", team)\n\n        print(\"Spider-Boy's team again:\", hero_spider_boy.team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        statement = select(Team).where(Team.id == hero_spider_boy.team_id)\n        result = session.exec(statement)\n        team = result.first()\n        print(\"Spider-Boy's team:\", team)\n\n        print(\"Spider-Boy's team again:\", hero_spider_boy.team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        statement = select(Team).where(Team.id == hero_spider_boy.team_id)\n        result = session.exec(statement)\n        team = result.first()\n        print(\"Spider-Boy's team:\", team)\n\n        print(\"Spider-Boy's team again:\", hero_spider_boy.team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Tip</p> <p>\u53ea\u8981\u8d77\u59cb\u5bf9\u8c61\uff08\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u662f <code>Hero</code>\uff09\u4e0e \u5f00\u653e \u7684\u4f1a\u8bdd\u5173\u8054\uff0c\u81ea\u52a8\u6570\u636e\u83b7\u53d6\u5c31\u4f1a\u751f\u6548\u3002</p> <p>\u4f8b\u5982\uff0c\u5728\u8fd9\u91cc\uff0c\u5728 <code>Session</code> \u5bf9\u8c61\u7684 <code>with</code> \u4ee3\u7801\u5757\u5185\u3002</p>"},{"location":"tutorial/relationship-attributes/read-relationships/#_3","title":"\u83b7\u53d6\u5173\u7cfb\u5bf9\u8c61\u5217\u8868","text":"<p>\u540c\u6837\u5730\uff0c\u5f53\u6211\u4eec\u5728 \u4e00\u5bf9\u591a \u5173\u7cfb\u7684 \u591a \u7aef\u5de5\u4f5c\u65f6\uff0c\u53ea\u9700\u8bbf\u95ee\u5173\u7cfb\u5c5e\u6027\uff0c\u5c31\u53ef\u4ee5\u83b7\u53d6\u76f8\u5173\u5bf9\u8c61\u7684\u5217\u8868\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        hero_spider_boy.team = None\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        hero_spider_boy.team = None\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        hero_spider_boy.team = None\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u8fd9\u5c06\u6253\u5370\u51fa\u6240\u6709\u5c5e\u4e8e Preventers \u56e2\u961f\u7684\u82f1\u96c4\u5217\u8868\uff1a</p> <pre><code>$ python app.py\n\n// \u81ea\u52a8\u83b7\u53d6\u82f1\u96c4\u6570\u636e\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age, hero.team_id AS hero_team_id\nFROM hero\nWHERE ? = hero.team_id\nINFO Engine [cached since 0.8774s ago] (2,)\n\n// \u6253\u5370 Preventers \u56e2\u961f\u7684\u82f1\u96c4\u5217\u8868\nPreventers heroes: [\n    Hero(name='Rusty-Man', age=48, id=2, secret_name='Tommy Sharp', team_id=2),\n    Hero(name='Spider-Boy', age=None, id=3, secret_name='Pedro Parqueador', team_id=2),\n    Hero(name='Tarantula', age=32, id=6, secret_name='Natalia Roman-on', team_id=2),\n    Hero(name='Dr. Weird', age=36, id=7, secret_name='Steve Weird', team_id=2),\n    Hero(name='Captain North America', age=93, id=8, secret_name='Esteban Rogelios', team_id=2)\n]\n</code></pre>"},{"location":"tutorial/relationship-attributes/read-relationships/#_4","title":"\u5c0f\u7ed3","text":"<p>\u901a\u8fc7 \u5173\u7cfb\u5c5e\u6027\uff0c\u4f60\u53ef\u4ee5\u5229\u7528\u5e38\u89c1\u7684 Python \u5bf9\u8c61\u8f7b\u677e\u8bbf\u95ee\u6570\u636e\u5e93\u4e2d\u7684\u76f8\u5173\u6570\u636e\u3002\ud83d\ude0e</p>"},{"location":"tutorial/relationship-attributes/remove-relationships/","title":"\u79fb\u9664\u5173\u7cfb","text":"<p>\u73b0\u5728\u5047\u8bbe Spider-Boy \u5bf9 Rusty-Man \u8bf4\uff1a</p> <p>\u6211\u611f\u89c9\u4e0d\u592a\u597d\uff0cSharp\u5148\u751f</p> <p>\u7136\u540e\u7531\u4e8e\u67d0\u4e9b\u539f\u56e0\uff0c\u4ed6\u9700\u8981\u79bb\u5f00 Preventers \u56e2\u961f\u51e0\u5e74\u3002\ud83d\ude2d</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5c06\u5173\u7cfb\u8bbe\u7f6e\u4e3a <code>None</code> \u6765\u79fb\u9664\u5173\u7cfb\uff0c\u548c\u8bbe\u7f6e <code>team_id</code> \u4e00\u6837\uff0c\u8fd9\u4e5f\u9002\u7528\u4e8e\u65b0\u7684\u5173\u7cfb\u5c5e\u6027 <code>.team</code>\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        hero_spider_boy.team = None\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        hero_spider_boy.team = None\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        hero_spider_boy.team = None\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        hero_spider_boy.team = None\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        hero_spider_boy.team = None\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        hero_spider_boy.team = None\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u5f53\u7136\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u8bb0\u5f97\u5c06 <code>update_heroes()</code> \u51fd\u6570\u6dfb\u52a0\u5230 <code>main()</code> \u4e2d\uff0c\u4ee5\u4fbf\u5728\u6211\u4eec\u4ece\u547d\u4ee4\u884c\u8c03\u7528\u8fd9\u4e2a\u7a0b\u5e8f\u65f6\u8fd0\u884c\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> <pre><code># \u4ee3\u7801\u4e0a\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc46\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n# \u4ee3\u7801\u4e0b\u9762\u90e8\u5206\u7701\u7565 \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        hero_spider_boy.team = None\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        hero_spider_boy.team = None\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        hero_spider_boy.team = None\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/relationship-attributes/remove-relationships/#_2","title":"\u5c0f\u7ed3","text":"<p>\u8fd9\u4e00\u7ae0\u5b9e\u5728\u662f\u592a\u7b80\u77ed\u4e86\uff0c\u4e0d\u662f\u5417\uff1f\ud83e\udd14</p> <p>\u65e0\u8bba\u5982\u4f55\uff0c\u5173\u7cfb\u5c5e\u6027 \u4f7f\u5f97\u5904\u7406\u5b58\u50a8\u5728\u6570\u636e\u5e93\u4e2d\u7684\u5173\u7cfb\u53d8\u5f97\u65e2\u7b80\u5355\u53c8\u76f4\u89c2\u3002\ud83c\udf89</p>"},{"location":"tutorial/relationship-attributes/type-annotation-strings/","title":"\u7c7b\u578b\u6ce8\u89e3\u5b57\u7b26\u4e32","text":""},{"location":"tutorial/relationship-attributes/type-annotation-strings/#listhero","title":"\u5173\u4e8e <code>List[\"Hero\"]</code> \u4e2d\u7684\u5b57\u7b26\u4e32","text":"<p>\u5728\u7b2c\u4e00\u4e2a <code>Relationship</code> \u5c5e\u6027\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 <code>List[\"Hero\"]</code> \u6765\u58f0\u660e\u5b83\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u5199 <code>List[Hero]</code>\uff0c\u5c06 <code>Hero</code> \u653e\u5728\u5f15\u53f7\u4e2d\uff1a</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 \u5b8c\u6574\u6587\u4ef6\u9884\u89c8 Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u8fd9\u662f\u600e\u4e48\u56de\u4e8b\uff1f\u6211\u4eec\u4e0d\u80fd\u50cf\u6b63\u5e38\u90a3\u6837\u5199 <code>List[Hero]</code> \u5417\uff1f</p> <p>\u5728\u90a3\u884c\u4ee3\u7801\u6267\u884c\u65f6\uff0cPython \u89e3\u91ca\u5668 \u5e76\u4e0d\u77e5\u9053 <code>Hero</code> \u8fd9\u4e2a\u7c7b\uff0c\u5982\u679c\u6211\u4eec\u76f4\u63a5\u5199\u5b83\uff0c\u5b83\u4f1a\u5c1d\u8bd5\u67e5\u627e\u4f46\u5931\u8d25\uff0c\u8fdb\u800c\u629b\u51fa\u9519\u8bef\u3002\ud83d\ude2d</p> <p>\u4f46\u662f\u901a\u8fc7\u628a\u5b83\u653e\u5728\u5f15\u53f7\u91cc\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u89e3\u91ca\u5668\u4f1a\u628a\u5b83\u770b\u4f5c\u662f\u4e00\u4e2a\u5305\u542b <code>\"Hero\"</code> \u7684\u5b57\u7b26\u4e32\u3002</p> <p>\u800c\u7f16\u8f91\u5668\u548c\u5176\u4ed6\u5de5\u5177\u53ef\u4ee5\u770b\u5230 \u8fd9\u4e2a\u5b57\u7b26\u4e32\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u7c7b\u578b\u6ce8\u89e3\uff0c\u5e76\u63d0\u4f9b\u81ea\u52a8\u8865\u5168\u3001\u7c7b\u578b\u68c0\u67e5\u7b49\u529f\u80fd\u3002\ud83c\udf89</p> <p>\u5f53\u7136\uff0cSQLModel \u4e5f\u80fd\u6b63\u786e\u7406\u89e3\u8fd9\u4e2a\u5b57\u7b26\u4e32\u3002\u2728</p> <p>\u8fd9\u5176\u5b9e\u662f Python \u7684\u4e00\u90e8\u5206\uff0c\u5b83\u662f\u5f53\u524d\u5b98\u65b9\u89e3\u51b3\u65b9\u6848\uff0c\u7528\u6765\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\u3002</p> <p>Info</p> <p>Python \u672c\u8eab\u6b63\u5728\u8fdb\u884c\u5927\u91cf\u5de5\u4f5c\uff0c\u7b80\u5316\u8fd9\u4e00\u8fc7\u7a0b\u5e76\u8ba9\u5176\u66f4\u52a0\u76f4\u89c2\uff0c\u5e76\u5bfb\u627e\u65b9\u6cd5\u4f7f\u5f97\u4e0d\u9700\u8981\u5c06\u7c7b\u5305\u88c5\u5728\u5b57\u7b26\u4e32\u4e2d\u3002</p>"}]}