{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SQLModel","text":"<p> SQLModel, SQL databases in Python, designed for simplicity, compatibility, and robustness. </p> <p> <p>\u6587\u6863\uff1ahttps://sqlmodel.tiangolo.com</p> <p>\u6e90\u4ee3\u7801\uff1ahttps://github.com/fastapi/sqlmodel</p> <p>SQLModel \u662f\u4e00\u4e2a\u7528\u4e8e\u4ece Python \u4ee3\u7801\u4e2d\u901a\u8fc7 Python \u5bf9\u8c61\u4e0e SQL \u6570\u636e\u5e93 \u4ea4\u4e92\u7684\u5e93\u3002\u5b83\u65e8\u5728\u76f4\u89c2\u3001\u6613\u7528\u3001\u9ad8\u5ea6\u517c\u5bb9\u4e14\u5065\u58ee\u3002</p> <p>SQLModel \u57fa\u4e8e Python \u7c7b\u578b\u6ce8\u89e3\uff0c\u7531 Pydantic \u548c SQLAlchemy \u63d0\u4f9b\u652f\u6301\u3002</p> <p>\u5176\u4e3b\u8981\u529f\u80fd\u5305\u62ec\uff1a</p> <ul> <li>\u76f4\u89c2\u6613\u5199\uff1a\u63d0\u4f9b\u6781\u4f73\u7684\u7f16\u8f91\u5668\u652f\u6301\uff0c\u4ee3\u7801\u8865\u5168\u65e0\u5904\u4e0d\u5728\u3002\u51cf\u5c11\u8c03\u8bd5\u65f6\u95f4\uff0c\u6613\u4e8e\u4f7f\u7528\u548c\u5b66\u4e60\uff0c\u65e0\u9700\u9891\u7e41\u67e5\u9605\u6587\u6863\u3002</li> <li>\u6613\u4e8e\u4f7f\u7528\uff1a\u5177\u5907\u5408\u7406\u7684\u9ed8\u8ba4\u914d\u7f6e\uff0c\u7b80\u5316\u4ee3\u7801\u7f16\u5199\u3002</li> <li>\u517c\u5bb9\u6027\u5f3a\uff1a\u4e0e FastAPI\u3001Pydantic \u548c SQLAlchemy \u5b8c\u5168\u517c\u5bb9\u3002</li> <li>\u53ef\u6269\u5c55\u6027\u5f3a\uff1a\u5e95\u5c42\u62e5\u6709 SQLAlchemy \u548c Pydantic \u7684\u5f3a\u5927\u529f\u80fd\u3002</li> <li>\u7b80\u6d01\u4ee3\u7801\uff1a\u6700\u5c0f\u5316\u4ee3\u7801\u91cd\u590d\u3002\u4e00\u4e2a\u7c7b\u578b\u6ce8\u89e3\u53ef\u4ee5\u5b8c\u6210\u5f88\u591a\u5de5\u4f5c\uff0c\u65e0\u9700\u5728 SQLAlchemy \u548c Pydantic \u4e2d\u91cd\u590d\u5b9a\u4e49\u6a21\u578b\u3002</li> </ul>"},{"location":"#_1","title":"\u8d5e\u52a9\u5546","text":""},{"location":"#fastapi-sql","title":"\u5728 FastAPI \u4e2d\u4f7f\u7528 SQL \u6570\u636e\u5e93","text":"<p>SQLModel \u65e8\u5728\u7b80\u5316\u5728 FastAPI \u5e94\u7528\u4e2d\u4e0e SQL \u6570\u636e\u5e93\u7684\u4ea4\u4e92\uff0c\u5b83\u7531\u540c\u4e00\u4f4d \u4f5c\u8005 \u521b\u5efa\u3002\ud83d\ude01</p> <p>\u5b83\u7ed3\u5408\u4e86 SQLAlchemy \u548c Pydantic\uff0c\u5c3d\u53ef\u80fd\u7b80\u5316\u4ee3\u7801\u7f16\u5199\uff0c\u51cf\u5c11 \u4ee3\u7801\u91cd\u590d\u5230\u6700\u4f4e\u9650\u5ea6\uff0c\u540c\u65f6\u63d0\u4f9b \u6700\u4f73\u7684\u5f00\u53d1\u8005\u4f53\u9a8c\u3002</p> <p>\u5b9e\u9645\u4e0a\uff0cSQLModel \u662f\u5efa\u7acb\u5728 Pydantic \u548c SQLAlchemy \u4e4b\u4e0a\u7684\u4e00\u5c42\u8f7b\u91cf\u5c01\u88c5\uff0c\u7ecf\u8fc7\u7cbe\u5fc3\u8bbe\u8ba1\uff0c\u786e\u4fdd\u4e0e\u4e24\u8005\u517c\u5bb9\u3002</p>"},{"location":"#_2","title":"\u73af\u5883\u8981\u6c42","text":"<p>\u9700\u8981\u4e00\u4e2a\u8fd1\u671f\u4e14\u4ecd\u53d7\u652f\u6301\u7684 Python \u7248\u672c\u3002</p> <p>\u7531\u4e8e SQLModel \u57fa\u4e8e Pydantic \u548c SQLAlchemy\uff0c\u56e0\u6b64\u9700\u8981\u8fd9\u4e24\u4e2a\u4f9d\u8d56\u3002\u5728\u5b89\u88c5 SQLModel \u65f6\u4f1a\u81ea\u52a8\u5b89\u88c5\u5b83\u4eec\u3002</p>"},{"location":"#_3","title":"\u5b89\u88c5","text":"<p>\u8bf7\u786e\u4fdd\u521b\u5efa\u5e76\u6fc0\u6d3b\u4e00\u4e2a \u865a\u62df\u73af\u5883\uff0c\u7136\u540e\u5b89\u88c5 SQLModel\uff0c\u4f8b\u5982\uff1a</p> <pre><code>$ pip install sqlmodel\n---&gt; 100%\nSuccessfully installed sqlmodel\n</code></pre>"},{"location":"#_4","title":"\u793a\u4f8b","text":"<p>\u6709\u5173\u6570\u636e\u5e93\u3001SQL \u548c\u5176\u4ed6\u76f8\u5173\u5185\u5bb9\u7684\u4ecb\u7ecd\uff0c\u8bf7\u53c2\u9605 SQLModel \u6587\u6863\u3002</p> <p>\u4ee5\u4e0b\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\u3002\u2728</p>"},{"location":"#sql","title":"\u4e00\u4e2a SQL \u8868","text":"<p>\u5047\u8bbe\u60a8\u6709\u4e00\u4e2a\u540d\u4e3a <code>hero</code> \u7684 SQL \u8868\uff0c\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\uff1a</p> <ul> <li><code>id</code></li> <li><code>name</code></li> <li><code>secret_name</code></li> <li><code>age</code></li> </ul> <p>\u5e76\u5e0c\u671b\u5305\u542b\u5982\u4e0b\u6570\u636e\uff1a</p> id name secret_name age 1 Deadpond Dive Wilson null 2 Spider-Boy Pedro Parqueador null 3 Rusty-Man Tommy Sharp 48"},{"location":"#sqlmodel","title":"\u521b\u5efa\u4e00\u4e2a SQLModel \u6a21\u578b","text":"<p>\u60a8\u53ef\u4ee5\u50cf\u8fd9\u6837\u521b\u5efa\u4e00\u4e2a SQLModel \u6a21\u578b\uff1a</p> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, SQLModel\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n</code></pre> <p>\u8fd9\u4e2a\u7c7b <code>Hero</code> \u662f\u4e00\u4e2a SQLModel \u6a21\u578b\uff0c\u7b49\u540c\u4e8e Python \u4ee3\u7801\u4e2d\u7684 SQL \u8868\u3002</p> <p>\u6bcf\u4e2a\u7c7b\u5c5e\u6027\u5bf9\u5e94\u4e00\u4e2a \u8868\u5217\u3002</p>"},{"location":"#_5","title":"\u521b\u5efa\u6570\u636e\u884c","text":"<p>\u7136\u540e\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u6a21\u578b\u7684 \u5b9e\u4f8b \u6765\u521b\u5efa\u8868\u7684 \u6bcf\u4e00\u884c\uff1a</p> <pre><code>hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\nhero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\nhero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n</code></pre> <p>\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u5e38\u89c4 Python \u4ee3\u7801\u4e2d\u7684 \u7c7b \u548c \u5b9e\u4f8b \u6765\u8868\u793a \u8868 \u548c \u884c\uff0c\u5e76\u4e0e SQL \u6570\u636e\u5e93 \u4ea4\u4e92\u3002</p>"},{"location":"#_6","title":"\u7f16\u8f91\u5668\u652f\u6301","text":"<p>\u6240\u6709\u8bbe\u8ba1\u65e8\u5728\u4e3a\u60a8\u63d0\u4f9b\u6700\u4f73\u7684\u5f00\u53d1\u8005\u4f53\u9a8c\u4ee5\u53ca\u7f16\u8f91\u5668\u652f\u6301\u3002</p> <p>\u5305\u62ec \u81ea\u52a8\u8865\u5168\uff1a</p> <p></p> <p>\u4ee5\u53ca \u5185\u8054\u9519\u8bef\u63d0\u793a\uff1a</p> <p></p>"},{"location":"#_7","title":"\u5199\u5165\u6570\u636e\u5e93","text":"<p>\u901a\u8fc7\u5feb\u901f\u6d4f\u89c8 \u6559\u7a0b\uff0c\u60a8\u53ef\u4ee5\u4e86\u89e3\u66f4\u591a\u5173\u4e8e SQLModel \u7684\u5185\u5bb9\uff0c\u4f46\u5982\u679c\u60a8\u60f3\u5feb\u901f\u5c1d\u8bd5\u5982\u4f55\u5c06\u8fd9\u4e9b\u7ec4\u5408\u5728\u4e00\u8d77\u5e76\u4fdd\u5b58\u5230\u6570\u636e\u5e93\u4e2d\uff0c\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a</p> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nhero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\nhero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\nhero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n\nengine = create_engine(\"sqlite:///database.db\")\n\n\nSQLModel.metadata.create_all(engine)\n\nwith Session(engine) as session:\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n    session.commit()\n</code></pre> <p>\u6b64\u4ee3\u7801\u4f1a\u4fdd\u5b58\u4e00\u4e2a\u5305\u542b 3 \u4f4d\u82f1\u96c4\u7684 SQLite \u6570\u636e\u5e93\u3002</p>"},{"location":"#_8","title":"\u4ece\u6570\u636e\u5e93\u4e2d\u67e5\u8be2","text":"<p>\u63a5\u4e0b\u6765\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u7f16\u5199\u67e5\u8be2\u4ece\u540c\u4e00\u6570\u636e\u5e93\u4e2d\u8fdb\u884c\u67e5\u8be2\uff0c\u4f8b\u5982\uff1a</p> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nengine = create_engine(\"sqlite:///database.db\")\n\nwith Session(engine) as session:\n    statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n    hero = session.exec(statement).first()\n    print(hero)\n</code></pre>"},{"location":"#_9","title":"\u5168\u9762\u652f\u6301\u7f16\u8f91\u5668\u529f\u80fd","text":"<p>SQLModel \u7ecf\u8fc7\u7cbe\u5fc3\u8bbe\u8ba1\uff0c\u53ef\u4e3a\u60a8\u63d0\u4f9b\u6700\u4f73\u7684\u5f00\u53d1\u8005\u4f53\u9a8c\u548c\u7f16\u8f91\u5668\u652f\u6301\uff0c\u5373\u4f7f\u662f\u5728\u4ece\u6570\u636e\u5e93\u9009\u62e9\u6570\u636e\u4e4b\u540e\uff1a</p> <p></p>"},{"location":"#sqlalchemy-pydantic","title":"SQLAlchemy \u548c Pydantic","text":"<p>\u7c7b <code>Hero</code> \u662f\u4e00\u4e2a SQLModel \u6a21\u578b\u3002</p> <p>\u4f46\u540c\u65f6\uff0c\u2728 \u5b83\u4e5f\u662f\u4e00\u4e2a SQLAlchemy \u6a21\u578b \u2728\u3002\u56e0\u6b64\uff0c\u60a8\u53ef\u4ee5\u5c06\u5176\u4e0e\u5176\u4ed6 SQLAlchemy \u6a21\u578b\u7ed3\u5408\u4f7f\u7528\uff0c\u6216\u8005\u8f7b\u677e\u5730\u5c06\u57fa\u4e8e SQLAlchemy \u7684\u5e94\u7528\u8fc1\u79fb\u5230 SQLModel\u3002</p> <p>\u4e0e\u6b64\u540c\u65f6\uff0c\u2728 \u5b83\u4e5f\u662f\u4e00\u4e2a Pydantic \u6a21\u578b \u2728\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u7ee7\u627f\u6765\u5b9a\u4e49\u6240\u6709\u7684 \u6570\u636e\u6a21\u578b\uff0c\u4ece\u800c\u907f\u514d\u4ee3\u7801\u91cd\u590d\u3002\u8fd9\u4f7f\u5f97\u5b83\u5728 FastAPI \u4e2d\u975e\u5e38\u6613\u4e8e\u4f7f\u7528\u3002</p>"},{"location":"#_10","title":"\u8bb8\u53ef\u8bc1","text":"<p>\u6b64\u9879\u76ee\u6839\u636e MIT \u8bb8\u53ef\u8bc1 \u6388\u6743\u3002</p>"},{"location":"alternatives/","title":"Alternatives, Inspiration and Comparisons","text":"<p>Coming soon...</p>"},{"location":"contributing/","title":"Contributing","text":"<p>First, you might want to see the basic ways to help SQLModel and get help.</p>"},{"location":"contributing/#developing","title":"Developing","text":"<p>If you already cloned the sqlmodel repository and you want to deep dive in the code, here are some guidelines to set up your environment.</p>"},{"location":"contributing/#virtual-environment","title":"Virtual Environment","text":"<p>Follow the instructions to create and activate a virtual environment for the internal code of <code>sqlmodel</code>.</p>"},{"location":"contributing/#install-requirements-using-pip","title":"Install Requirements Using <code>pip</code>","text":"<p>After activating the environment, install the required packages:</p> <pre><code>$ pip install -r requirements.txt\n\n---&gt; 100%\n</code></pre> <p>It will install all the dependencies and your local SQLModel in your local environment.</p>"},{"location":"contributing/#using-your-local-sqlmodel","title":"Using your Local SQLModel","text":"<p>If you create a Python file that imports and uses SQLModel, and run it with the Python from your local environment, it will use your cloned local SQLModel source code.</p> <p>And if you update that local SQLModel source code when you run that Python file again, it will use the fresh version of SQLModel you just edited.</p> <p>That way, you don't have to \"install\" your local version to be able to test every change.</p> <p>\"Technical Details\"</p> <p>This only happens when you install using this included <code>requirements.txt</code> instead of running <code>pip install sqlmodel</code> directly.</p> <p>That is because inside the <code>requirements.txt</code> file, the local version of SQLModel is marked to be installed in \"editable\" mode, with the <code>-e</code> option.</p>"},{"location":"contributing/#format","title":"Format","text":"<p>There is a script that you can run that will format and clean all your code:</p> <pre><code>$ bash scripts/format.sh\n</code></pre> <p>It will also auto-sort all your imports.</p>"},{"location":"contributing/#tests","title":"Tests","text":"<p>There is a script that you can run locally to test all the code and generate coverage reports in HTML:</p> <pre><code>$ bash scripts/test-cov-html.sh\n</code></pre> <p>This command generates a directory <code>./htmlcov/</code>, if you open the file <code>./htmlcov/index.html</code> in your browser, you can explore interactively the regions of code that are covered by the tests, and notice if there is any region missing.</p>"},{"location":"contributing/#docs","title":"Docs","text":"<p>First, make sure you set up your environment as described above, that will install all the requirements.</p>"},{"location":"contributing/#docs-live","title":"Docs Live","text":"<p>During local development, there is a script that builds the site and checks for any changes, live-reloading:</p> <pre><code>$ python ./scripts/docs.py live\n\n&lt;span style=\"color: green;\"&gt;[INFO]&lt;/span&gt; Serving on http://127.0.0.1:8008\n&lt;span style=\"color: green;\"&gt;[INFO]&lt;/span&gt; Start watching changes\n&lt;span style=\"color: green;\"&gt;[INFO]&lt;/span&gt; Start detecting changes\n</code></pre> <p>It will serve the documentation on <code>http://127.0.0.1:8008</code>.</p> <p>That way, you can edit the documentation/source files and see the changes live.</p> <p>Tip</p> <p>Alternatively, you can perform the same steps that scripts does manually.</p> <p>Go into the docs director at <code>docs/</code>:</p> <pre><code>$ cd docs/\n</code></pre> <p>Then run <code>mkdocs</code> in that directory:</p> <pre><code>$ mkdocs serve --dev-addr 8008\n</code></pre>"},{"location":"contributing/#typer-cli-optional","title":"Typer CLI (Optional)","text":"<p>The instructions here show you how to use the script at <code>./scripts/docs.py</code> with the <code>python</code> program directly.</p> <p>But you can also use Typer CLI, and you will get autocompletion in your terminal for the commands after installing completion.</p> <p>If you install Typer CLI, you can install completion with:</p> <pre><code>$ typer --install-completion\n\nzsh completion installed in /home/user/.bashrc.\nCompletion will take effect once you restart the terminal.\n</code></pre>"},{"location":"contributing/#docs-structure","title":"Docs Structure","text":"<p>The documentation uses MkDocs.</p> <p>And there are extra tools/scripts in place in <code>./scripts/docs.py</code>.</p> <p>Tip</p> <p>You don't need to see the code in <code>./scripts/docs.py</code>, you just use it in the command line.</p> <p>All the documentation is in Markdown format in the directory <code>./docs</code>.</p> <p>Many of the tutorials have blocks of code.</p> <p>In most of the cases, these blocks of code are actual complete applications that can be run as is.</p> <p>In fact, those blocks of code are not written inside the Markdown, they are Python files in the <code>./docs_src/</code> directory.</p> <p>And those Python files are included/injected in the documentation when generating the site.</p>"},{"location":"contributing/#docs-for-tests","title":"Docs for Tests","text":"<p>Most of the tests actually run against the example source files in the documentation.</p> <p>This helps to make sure that:</p> <ul> <li>The documentation is up-to-date.</li> <li>The documentation examples can be run as is.</li> <li>Most of the features are covered by the documentation, ensured by test coverage.</li> </ul>"},{"location":"databases/","title":"\u6570\u636e\u5e93\u7b80\u4ecb","text":"<p>Info</p> <p>\u4f60\u662f\u7ecf\u9a8c\u4e30\u5bcc\u7684\u5f00\u53d1\u8005\uff0c\u5bf9\u6570\u636e\u5e93\u5df2\u7ecf\u4e86\u5982\u6307\u638c\u5417\uff1f\ud83e\udd13</p> <p>\u90a3\u4e48\u4f60\u53ef\u4ee5\u76f4\u63a5\u8df3\u5230\u63a5\u4e0b\u6765\u7684\u90e8\u5206\u3002</p> <p>\u5982\u679c\u4f60\u5bf9\u6570\u636e\u5e93\u5e76\u4e0d\u662f\u5b8c\u5168\u4e86\u89e3\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u5feb\u901f\u6982\u8ff0\u3002</p> <p>\u4e4b\u540e\u4f60\u968f\u65f6\u53ef\u4ee5\u81ea\u884c\u6df1\u5165\u5b66\u4e60\u66f4\u591a\u5185\u5bb9\u3002</p> <p>\u4f46\u8fd9\u90e8\u5206\u5185\u5bb9\u8db3\u4ee5\u5e2e\u52a9\u4f60\u5f00\u59cb\u4f7f\u7528\u6570\u636e\u5e93\uff0c\u5e76\u901a\u8fc7 SQLModel \u63d0\u9ad8\u751f\u4ea7\u529b\u3002\ud83d\ude80</p>"},{"location":"databases/#_2","title":"\u4ec0\u4e48\u662f\u6570\u636e\u5e93","text":"<p>\u90a3\u4e48\uff0c\u4ec0\u4e48\u662f\u6570\u636e\u5e93\uff1f</p> <p>\u6570\u636e\u5e93 \u662f\u4e00\u79cd\u4ee5\u7ed3\u6784\u5316\u548c\u9ad8\u6548\u65b9\u5f0f\u5b58\u50a8\u548c\u7ba1\u7406\u6570\u636e\u7684\u7cfb\u7edf\u3002</p> <p>Tip</p> <p>\"\u6570\u636e\u5e93\" \u901a\u5e38\u4f1a\u7f29\u5199\u4e3a \"DB\"\u3002</p> <p>\u5173\u4e8e\u6570\u636e\u5e93\u7684\u4fe1\u606f\u975e\u5e38\u4e30\u5bcc\uff0c\u53ef\u80fd\u4f1a\u53d8\u5f97\u975e\u5e38\u6280\u672f\u6027\u548c\u5b66\u672f\u5316\u3002\u8fd9\u91cc\u6211\u4f1a\u4e3a\u4f60\u5feb\u901f\u6982\u8ff0\u4e00\u4e9b\u6838\u5fc3\u6982\u5ff5\u3002</p> <p>\u6211\u8fd8\u4f1a\u7b80\u5355\u4ecb\u7ecd\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\u5e93\uff0c\u5305\u62ec SQLModel \u672a\u6db5\u76d6\u7684\u6570\u636e\u5e93\u7c7b\u578b\uff08\u5982 \"NoSQL\" \u6570\u636e\u5e93\uff09\u3002</p>"},{"location":"databases/#_3","title":"\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528\u6570\u636e\u5e93","text":"<p>\u521a\u5f00\u59cb\u7f16\u7a0b\u65f6\uff0c\u53ef\u80fd \u4e0d\u592a\u660e\u663e \u4e3a\u4ec0\u4e48\u5728\u7a0b\u5e8f\u4ee3\u7801\u4e4b\u5916\u53e6\u8bbe\u4e00\u4e2a\u6570\u636e\u5e93\u662f\u4e2a \u597d\u4e3b\u610f\u3002\u6211\u4eec\u5148\u4ece\u8fd9\u4e2a\u95ee\u9898\u8bf4\u8d77\u3002</p> <p>Tip</p> <p>\u5982\u679c\u4f60\u5df2\u7ecf\u660e\u767d\u8fd9\u4e2a\u95ee\u9898\uff0c\u76f4\u63a5\u8df3\u5230\u4e0b\u9762\u7684\u4e0b\u4e00\u8282\u5427\u3002\ud83d\udc47</p> <p>\u5728\u4f60\u7684\u4ee3\u7801\u4e2d\u5df2\u7ecf\u6709 \u53d8\u91cf\u3001\u5b57\u5178\u3001\u5217\u8868**\u7b49\uff0c\u8fd9\u4e9b\u90fd\u80fd\u4ee5\u67d0\u79cd\u65b9\u5f0f\u5b58\u50a8 **\u6570\u636e\u3002\u90a3\u4e3a\u4ec0\u4e48\u8fd8\u9700\u8981\u5355\u72ec\u7684\u6570\u636e\u5e93\u5462\uff1f</p> <p>\u5982\u679c\u4ed4\u7ec6\u89c2\u5bdf\uff0c\u4f60\u4f1a\u53d1\u73b0\u4ee3\u7801\u662f \u9759\u6001\u7684\uff0c\u4e00\u65e6\u8fd0\u884c\u540e\uff0c\u7a0b\u5e8f\u7684\u72b6\u6001\u5e76\u4e0d\u4f1a\u771f\u6b63\u968f\u7740\u65f6\u95f4\u53d1\u751f\u53d8\u5316\u3002\u5f53\u7136\uff0c\u4f60\u4f1a\u9891\u7e41\u66f4\u6539\u4ee3\u7801\u4ee5\u589e\u52a0\u529f\u80fd\u7b49\uff0c\u4f46\u4e00\u65e6\u542f\u52a8 Python \u8fd0\u884c\u4ee3\u7801\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u4fdd\u6301\u542f\u52a8\u65f6\u7684\u72b6\u6001\u3002\u5373\u4fbf\u4ee3\u7801\u6539\u4e86\uff0c\u7a0b\u5e8f\u4e5f\u53ea\u6709\u5728 \u91cd\u65b0\u8fd0\u884c \u540e\u624d\u4f1a\u53d1\u751f\u53d8\u5316\u3002</p> <p>\u800c\u4e14\uff0c\u5373\u4f7f\u4f60\u5728\u7a0b\u5e8f\u8fd0\u884c\u4e2d\u66f4\u6539\u4e86\u53d8\u91cf\uff0c\u4e00\u65e6\u7a0b\u5e8f\u7ed3\u675f\uff0c\u8fd9\u4e9b\u5b58\u50a8\u5728 \u5185\u5b58 \u4e2d\u7684\u6570\u636e\u5c31\u4f1a \u6d88\u5931\u3002\ud83d\udd25</p> <p>\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4f60\u7684\u7a0b\u5e8f\u76ee\u6807\u662f\u5904\u7406\u7a0b\u5e8f \u5916\u90e8 \u7684\u67d0\u4e9b\u6570\u636e\uff1a</p> <ul> <li>\u5b83\u53ef\u80fd\u53ea\u662f\u5c06 \u6587\u4ef6 \u4ece\u4e00\u4e2a\u5730\u65b9\u79fb\u5230\u53e6\u4e00\u4e2a\u5730\u65b9\u3002</li> <li>\u6216\u8005\u4ece\u7528\u6237\u7684 \u7ec8\u7aef \u83b7\u53d6\u6570\u636e\u5e76\u4ee5\u4e0d\u540c\u65b9\u5f0f\u663e\u793a\u3002</li> <li>\u53c8\u6216\u8005\u662f\u4e00\u4e2a Web API\uff0c\u83b7\u53d6\u6570\u636e\u5e76\u4ee5\u67d0\u79cd\u65b9\u5f0f\u5904\u7406\u3002</li> </ul> <p>\u5728\u5f88\u591a\u60c5\u51b5\u4e0b\uff0c\u6570\u636e \u6765\u6e90\u4e8e\u7a0b\u5e8f\u5916\u90e8 \u6216 \u6700\u7ec8\u4f1a\u6d41\u5411\u7a0b\u5e8f\u5916\u90e8\uff08\u4f8b\u5982\uff0c\u663e\u793a\u5728\u5c4f\u5e55\u4e0a\u3001\u5199\u5165\u6587\u4ef6\u7b49\uff09\u3002</p> <p>\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u4f60\u9700\u8981\u7a0b\u5e8f\u80fd\u591f \u521b\u5efa \u5e76\u5b58\u50a8\u6570\u636e\u3001\u8bfb\u53d6 \u6570\u636e\u3001\u66f4\u65b0 \u6570\u636e\u3001\u5220\u9664 \u6570\u636e\u7b49\u3002</p> <p>\u4f60\u5f53\u7136\u53ef\u4ee5\u901a\u8fc7\u4ee3\u7801\u8bfb\u53d6\u548c\u5199\u5165\u6587\u4ef6\u6765\u5b9e\u73b0\uff0c\u8fd9\u79cd\u65b9\u6cd5\u5728\u7b80\u5355\u573a\u666f\u4e2d\u662f\u53ef\u884c\u7684\u3002\u4f46\u5bf9\u4e8e\u7a0d\u5fae\u590d\u6742\u4e00\u70b9\u7684\u7cfb\u7edf\uff0c\u8fd9\u79cd\u7b56\u7565\u6548\u7387\u5e76\u4e0d\u9ad8\u3002\u4f60\u8fd8\u9700\u8981\u5e94\u5bf9\u8bb8\u591a \u9677\u9631\uff0c\u5982\u6570\u636e\u540c\u6b65\u3001\u6570\u636e\u5b89\u5168\u5b58\u50a8\u7b49\u95ee\u9898\u3002</p> <p>\u6570\u636e\u5e93\u4e13\u4e3a \u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898 \u800c\u8bbe\u8ba1\uff0c\u4f7f\u5f97\u5904\u7406\u6570\u636e\u7684\u8fc7\u7a0b\u66f4\u52a0\u9ad8\u6548\uff0c\u5e76\u4e14\u4e0e\u4ee3\u7801\u76f8\u5bf9\u72ec\u7acb\u3002\u2728</p>"},{"location":"databases/#_4","title":"\u5982\u4f55\u4e0e\u6570\u636e\u5e93\u4ea4\u4e92","text":"<p>\u6570\u636e\u5e93\u6709\u8bb8\u591a\u7c7b\u578b\u3002</p>"},{"location":"databases/#_5","title":"\u5355\u6587\u4ef6\u6570\u636e\u5e93","text":"<p>\u6570\u636e\u5e93\u53ef\u4ee5\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u6587\u4ef6\uff0c\u540d\u4e3a <code>heroes.db</code>\uff0c\u901a\u8fc7\u4ee3\u7801\u4ee5\u975e\u5e38\u9ad8\u6548\u7684\u65b9\u5f0f\u8fdb\u884c\u7ba1\u7406\u3002\u4e00\u4e2a\u4f8b\u5b50\u662f SQLite\uff0c\u7a0d\u540e\u4f1a\u8be6\u7ec6\u4ecb\u7ecd\u3002</p> <p></p>"},{"location":"databases/#_6","title":"\u670d\u52a1\u5668\u6570\u636e\u5e93","text":"<p>\u6570\u636e\u5e93\u4e5f\u53ef\u4ee5\u662f\u8fd0\u884c\u5728\u670d\u52a1\u5668\u4e0a\u7684\u7cfb\u7edf\uff0c\u4f5c\u4e3a\u5e94\u7528\u7a0b\u5e8f\u5904\u7406\u591a\u4e2a\u6587\u4ef6\uff0c\u5e76\u4ee5\u4f18\u5316\u7684\u683c\u5f0f\u5b58\u50a8\u6570\u636e\u3002</p> <p>\u5c31\u50cf Web \u670d\u52a1\u5668\uff0c\u4f46\u5b83\u4f7f\u7528\u81ea\u5b9a\u4e49\u4e14\u9ad8\u6548\u7684\u65b9\u5f0f\u8fdb\u884c\u901a\u4fe1\u3002\u8fd9\u662f\u6700\u5e38\u89c1\u7684\u6570\u636e\u5e93\u4ea4\u4e92\u65b9\u5f0f\u3002</p> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u7684\u4ee3\u7801\u5c06\u4e0e\u8be5\u670d\u52a1\u5668\u5e94\u7528\u7a0b\u5e8f\u8fdb\u884c\u901a\u4fe1\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u8bfb\u53d6\u6216\u4fee\u6539\u6587\u4ef6\u3002</p> <p>\u6570\u636e\u5e93\u53ef\u80fd\u4f4d\u4e8e\u4e0d\u540c\u7684\u670d\u52a1\u5668/\u673a\u5668\u4e0a\uff1a</p> <p></p> <p>\u6216\u8005\u6570\u636e\u5e93\u4e5f\u53ef\u80fd\u4f4d\u4e8e\u540c\u4e00\u670d\u52a1\u5668/\u673a\u5668\u4e0a\uff1a</p> <p></p> <p>\u8fd9\u4e9b\u7c7b\u578b\u7684\u6570\u636e\u5e93\u6700\u91cd\u8981\u7684\u65b9\u9762\u662f\uff0c**\u60a8\u7684\u4ee3\u7801\u4e0d\u4f1a\u76f4\u63a5\u8bfb\u53d6\u6216\u4fee\u6539**\u5305\u542b\u6570\u636e\u7684\u6587\u4ef6\u3002</p> <p>\u76f8\u53cd\uff0c\u60a8\u7684\u4ee3\u7801\u4e0e\u6570\u636e\u5e93\u5e94\u7528\u7a0b\u5e8f\u901a\u4fe1\uff0c\u7531\u8be5\u6570\u636e\u5e93\u5e94\u7528\u7a0b\u5e8f\u5b9e\u9645\u8bfb\u53d6\u548c\u4fee\u6539\u5176\u6570\u636e\u6587\u4ef6\u3002\u8fd9\u662f\u56e0\u4e3a\u8be5\u6570\u636e\u5e93\u5e94\u7528\u7a0b\u5e8f\u901a\u5e38**\u6bd4\u60a8\u7684\u4ee3\u7801\u66f4\u9ad8\u6548**\u3002</p> <p>\u4e00\u4e9b\u50cf PostgreSQL\u3001MySQL \u6216 MongoDB \u8fd9\u6837\u7684\u6570\u636e\u5e93\u5c31\u662f\u6309\u8fd9\u79cd\u65b9\u5f0f\u5de5\u4f5c\u7684\u4f8b\u5b50\u3002</p>"},{"location":"databases/#_7","title":"\u5206\u5e03\u5f0f\u670d\u52a1\u5668","text":"<p>\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6570\u636e\u5e93\u751a\u81f3\u53ef\u4ee5\u662f\u8fd0\u884c\u5728\u4e0d\u540c\u673a\u5668\u4e0a\u7684\u4e00\u7ec4\u670d\u52a1\u5668\u5e94\u7528\u7a0b\u5e8f\uff0c\u5b83\u4eec\u534f\u540c\u5de5\u4f5c\u5e76\u76f8\u4e92\u901a\u4fe1\uff0c\u4ee5\u63d0\u9ad8\u6548\u7387\u5e76\u5904\u7406\u66f4\u591a\u6570\u636e\u3002</p> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u7684\u4ee3\u7801\u5c06\u4e0e\u8fd0\u884c\u5728\u4e0d\u540c\u673a\u5668\u4e0a\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u670d\u52a1\u5668\u5e94\u7528\u7a0b\u5e8f\u8fdb\u884c\u901a\u4fe1\u3002</p> <p></p> <p>\u5927\u591a\u6570\u4f5c\u4e3a\u670d\u52a1\u5668\u5e94\u7528\u7a0b\u5e8f\u7684\u6570\u636e\u5e93\u4e5f\u4ee5\u67d0\u79cd\u65b9\u5f0f\u652f\u6301\u591a\u4e2a\u670d\u52a1\u5668\u3002</p> <p>\u62e5\u6709\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e5f\u4f1a\u5e26\u6765\u989d\u5916\u7684\u6311\u6218\uff0c\u56e0\u6b64\u60a8\u5f88\u53ef\u80fd\u9996\u5148\u4f1a\u4e0e\u5355\u4e2a\u670d\u52a1\u5668\u5e94\u7528\u7a0b\u5e8f\u6216\u57fa\u4e8e\u5355\u4e00\u6587\u4ef6\u7684\u6570\u636e\u5e93\u4ea4\u4e92\u3002</p>"},{"location":"databases/#sql","title":"SQL \u6570\u636e\u5e93","text":"<p>\u6211\u4eec\u5df2\u7ecf\u8ba8\u8bba\u4e86\u4e0e\u6570\u636e\u5e93\u4ea4\u4e92\u7684\u4e0d\u540c\u65b9\u5f0f\u4ee5\u53ca\u5b83\u4eec\u5982\u4f55\u5904\u7406\u6587\u4ef6\u7b49\u5185\u5bb9\u3002\u8fd9\u4e9b\u5185\u5bb9\u9002\u7528\u4e8e\u5927\u591a\u6570\u6216\u6240\u6709\u6570\u636e\u5e93\u3002</p> <p>\u4f46\u8fd8\u6709\u53e6\u4e00\u79cd\u975e\u5e38\u91cd\u8981\u7684\u6570\u636e\u5e93\u5206\u7c7b\u65b9\u5f0f\u3002\u5982\u4f60\u6240\u60f3\uff0c\u6570\u636e\u5e93\u6709\u8bb8\u591a\u7c7b\u578b\uff0c\u6bcf\u4e2a\u7ec4\u522b\u4e2d\u6709\u5f88\u591a\u4e0d\u540c\u7684\u6570\u636e\u5e93\u3002\u4f46\u901a\u5e38\u5b83\u4eec\u53ef\u4ee5\u5206\u4e3a\u4e24\u4e2a\u5927\u7c7b\uff1a\u201cSQL \u6570\u636e\u5e93\u201d\u548c\u201c\u975e SQL \u6570\u636e\u5e93\u201d\u3002</p> <p>\u7a0d\u540e\u6211\u4eec\u5c06\u89e3\u91ca\u4e3a\u4ec0\u4e48\u4f1a\u6709\u201cSQL\u201d\u8fd9\u4e2a\u540d\u5b57\uff0c\u4f46\u9996\u5148\uff0c\u6211\u4eec\u6765\u4e86\u89e3\u4e00\u4e0b\u8fd9\u662f\u4ec0\u4e48\u3002</p>"},{"location":"databases/#sqlmodel-sql","title":"SQLModel \u7528\u4e8e SQL \u6570\u636e\u5e93","text":"<p>SQLModel \u662f\u4e00\u4e2a\u5e2e\u52a9\u4f60\u4e0e SQL \u6570\u636e\u5e93 \u4ea4\u4e92\u7684\u5de5\u5177\u3002</p> <p>\u5b83\u5bf9 \u975e SQL \u6570\u636e\u5e93 \u7684\u5e2e\u52a9\u4e0d\u5927\u3002\u4e0d\u8fc7\uff0c\u6211\u8fd8\u662f\u4f1a\u5728\u8fd9\u91cc\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b\u5b83\u4eec\u3002</p>"},{"location":"databases/#sql_1","title":"SQL \u6570\u636e\u5e93\u7684\u53d1\u660e","text":"<p>\u5f88\u4e45\u4ee5\u524d\uff0c\u4e00\u4e9b\u806a\u660e\u7684\u4eba\u610f\u8bc6\u5230\uff0c\u5b58\u50a8\u6570\u636e\u7684\u4e00\u79cd\u5f88\u597d\u7684\u65b9\u5f0f\u662f\u5c06\u6570\u636e\u653e\u5165\u4e0d\u540c\u7684\u8868\u4e2d\u3002</p> <p>\u201c\u8868\u201d\u5728\u8fd9\u91cc\u6307\u7684\u662f\u50cf\u7535\u5b50\u8868\u683c\u4e00\u6837\u7684\u7f51\u683c\u7ed3\u6784\uff0c\u5305\u542b\u4e0d\u540c\u7684\u5217\u548c\u884c\u3002</p> <p>\u6bcf\u4e00\u884c\u4ee3\u8868\u4e00\u4e2a\u7279\u5b9a\u7684\u9879\u6216 \u8bb0\u5f55\u3002\u6bcf\u4e00\u5217\u4ee3\u8868\u8be5\u8bb0\u5f55\u7684\u4e00\u4e2a\u7279\u5b9a\u5c5e\u6027\u6216\u5b57\u6bb5\u3002</p>"},{"location":"databases/#_8","title":"\u4e00\u4e2a\u5927\u8868\u683c\u7684\u793a\u4f8b","text":"<p>\u5047\u8bbe\u6211\u4eec\u9700\u8981\u5b58\u50a8\u4e00\u4e9b\u5173\u4e8e\u82f1\u96c4\u7684\u6570\u636e\u3002</p> <p>\u5982\u679c\u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u5355\u4e00\u7684\u8868\u683c\u6765\u5b58\u50a8\u6211\u4eec\u7684\u82f1\u96c4\uff0c\u53ef\u80fd\u4f1a\u50cf\u8fd9\u6837\uff1a</p> idnamesecret_nameageteamheadquarters 1DeadpondDive WilsonnullZ-FactorSister Margaret's Bar 2Spider-BoyPedro ParqueadornullPreventersSharp Tower 3Rusty-ManTommy Sharp48PreventersSharp Tower <p>\u8fd9\u53ef\u80fd\u662f\u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u5355\u4e00\u8868\u683c\u65f6\u7684\u6837\u5b50\uff0c\u4f8b\u5982\u4e00\u4e2a\u5355\u72ec\u7684\u7535\u5b50\u8868\u683c\u3002</p> <p>\u4f46\u662f\u8fd9\u6837\u6709\u4e00\u4e9b\u95ee\u9898\u3002\u6211\u4eec\u6765\u770b\u770b\u5176\u4e2d\u7684\u4e00\u4e9b\u95ee\u9898\u3002</p>"},{"location":"databases/#_9","title":"\u5355\u4e00\u8868\u683c\u7684\u95ee\u9898","text":"<p>\u5047\u8bbe\u4ed6\u4eec\u51b3\u5b9a\u5c06\u201cSharp Tower\u201d\u66f4\u540d\u4e3a\u201cPreventers Tower\u201d\u3002</p> <p>\u73b0\u5728\uff0c\u6211\u4eec\u9700\u8981\u5728\u4e24\u4e2a\u5730\u65b9\u66f4\u65b0\u8fd9\u4e2a\u540d\u79f0\u3002</p> <p>\u5982\u679c\u6211\u4eec\u7684\u4ee3\u7801\u5f00\u59cb\u5728\u4e00\u4e2a\u5730\u65b9\u66f4\u65b0\u8fd9\u4e2a\u540d\u79f0\uff0c\u7a81\u7136\u53d1\u751f\u505c\u7535\uff0c\u8ba1\u7b97\u673a\u5173\u673a\u4e86\u5462\uff1f</p> <p>\u6211\u4eec\u53ef\u80fd\u4f1a\u5f97\u5230\u4e0d\u4e00\u81f4\u7684\u4fe1\u606f\uff0c\u4e00\u5904\u663e\u793a\u201cPreventers Tower\u201d\uff0c\u53e6\u4e00\u5904\u5374\u663e\u793a\u201cSharp Tower\u201d\uff1a</p> idnamesecret_nameageteamheadquarters 1DeadpondDive WilsonnullZ-ForceSister Margaret's Bar 2Spider-BoyPedro ParqueadornullPreventersPreventers Tower \u2705 3Rusty-ManTommy Sharp48PreventersSharp Tower \ud83d\udea8 <p>\u73b0\u5728\uff0c\u5047\u8bbe\u6211\u4eec\u9700\u8981\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u82f1\u96c4\u53eb\u201cMahjong\u201d\uff0c\u5e76\u4e14\u5979\u5c5e\u4e8e\u201cZ-Force\u201d\u56e2\u961f\u3002</p> <p>\u6211\u4eec\u53ef\u80fd\u4f1a\u5fd8\u8bb0\u56e2\u961f\u7684\u540d\u79f0\uff0c\u7ed3\u679c\u628a\u201cMahjong\u201d\u6dfb\u52a0\u5230\u4e00\u4e2a\u65e0\u6548\u7684\u56e2\u961f\u540d\u79f0\u4e2d\uff0c\u4f8b\u5982\u201cY-Force\u201d\u3002</p> idnamesecret_nameageteamheadquarters 1DeadpondDive WilsonnullZ-ForceSister Margaret's Bar 2Spider-BoyPedro ParqueadornullPreventersPreventers Tower 3Rusty-ManTommy Sharp48PreventersSharp Tower 4MahjongNeena Thurgirl31Y-Force \ud83d\udea8Sister Margaret's Bar <p>\u5982\u679c\u4e00\u4e2a\u82f1\u96c4\u5c5e\u4e8e\u4e24\u4e2a\u56e2\u961f\u5462\uff1f\u6211\u4eec\u5c31\u6ca1\u6709\u7b80\u5355\u7684\u65b9\u6cd5\u5c06\u8fd9\u4e2a\u4fe1\u606f\u653e\u5165\u4e00\u4e2a\u5927\u7684\u8868\u683c\u4e2d\u4e86\u3002</p>"},{"location":"databases/#_10","title":"\u591a\u4e2a\u8868\u683c","text":"<p>\u4f46\u8fd9\u4e9b\u95ee\u9898\u548c\u5176\u4ed6\u4e00\u4e9b\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7\u5c06\u6570\u636e\u5b58\u50a8\u5728\u591a\u4e2a\u8868\u683c\u4e2d\u6765\u66f4\u597d\u5730\u89e3\u51b3\u3002</p> <p>\u56e0\u6b64\uff0c\u9664\u4e86\u5c06\u6240\u6709\u6570\u636e\u5b58\u50a8\u5728\u4e00\u4e2a\u8868\u683c\u4e2d\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u4e3a\u82f1\u96c4\u548c\u56e2\u961f\u5206\u522b\u521b\u5efa\u4e00\u4e2a\u8868\u683c\uff0c\u5e76\u4e14\u6709\u4e00\u79cd\u65b9\u6cd5\u5c06\u5b83\u4eec\u8fde\u63a5\u8d77\u6765\u3002</p> <p>\u56e2\u961f\u7684\u8868\u683c\u53ef\u4ee5\u50cf\u8fd9\u6837\uff1a</p> idnameheadquarters 1PreventersSharp Tower 2Z-ForceSister Margaret's Bar <p>\u73b0\u5728\uff0c\u82f1\u96c4\u7684\u8868\u683c\u51e0\u4e4e\u770b\u8d77\u6765\u4e0e\u4e4b\u524d\u76f8\u540c\u3002\u4f46\u662f\u8bf7\u8bb0\u4f4f\uff0c\u6211\u4eec\u4e4b\u524d\u63d0\u5230\u8fc7\uff0c\u9700\u8981\u4e00\u79cd\u65b9\u6cd5\u5c06\u4e24\u4e2a\u8868\u683c\u8fde\u63a5\u8d77\u6765\uff1f</p> <p>\u82f1\u96c4\u7684\u8868\u683c\u73b0\u5728\u5c06\u6709\u4e00\u4e2a\u989d\u5916\u7684\u5217 <code>team_id</code>\u3002\u8be5\u5217\u663e\u793a\u6bcf\u4e00\u884c\uff08\u6bcf\u4e2a\u82f1\u96c4\uff09\u4e0e\u4ed6\u4eec\u6240\u5c5e\u56e2\u961f\u4e4b\u95f4\u7684\u5173\u7cfb\u3002</p> idnamesecret_nameageteam_id \u2728 1DeadpondDive Wilsonnull2 \u2728 2Spider-BoyPedro Parqueadornull1 \u2728 3Rusty-ManTommy Sharp481 \u2728"},{"location":"databases/#-","title":"\u6807\u8bc6 - \u4e3b\u952e","text":"<p>\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6bcf\u4e00\u884c\u90fd\u6709\u4e00\u4e2a <code>id</code>\u3002\u6bcf\u4e2a ID \u5728\u8868\u4e2d\u90fd\u662f\u552f\u4e00\u7684\uff0c\u7528\u6765\u6807\u8bc6\u8be5\u7279\u5b9a\u884c\u3002</p> <p>\u8fd9\u4e9b SQL \u6570\u636e\u5e93\u8981\u6c42\u6709\u4e00\u79cd\u72ec\u7279\u7684\u65b9\u5f0f\u6765\u6807\u8bc6\u8868\u4e2d\u7684\u6bcf\u4e00\u884c\u3002\u5b83\u53ef\u4ee5\u662f\u552f\u4e00\u7684\u5217\u7ec4\u5408\uff0c\u4f46\u901a\u5e38\u5b83\u53ea\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u5217\u3002\u8fd9\u88ab\u79f0\u4e3a\u8868\u7684 \"\u4e3b\u952e\"\u3002</p> <p>\u4e3b\u952e \u901a\u5e38\u662f\u5355\u5217\uff0c\u901a\u5e38\u53ea\u662f\u6570\u636e\u5e93\u81ea\u52a8\u751f\u6210\u7684\u6574\u6570\uff0c\u5e76\u4e14\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u5217\u7684\u540d\u79f0\u5c31\u662f <code>id</code>\u3002</p> <p>\u8fd9\u4e2a \u4e3b\u952e\uff0c\u5728\u672c\u4f8b\u4e2d\u5c31\u662f <code>id</code> \u5217\uff0c\u5fc5\u987b\u5728\u6bcf\u4e2a\u8868\u4e2d\u662f\u552f\u4e00\u7684\u3002\u4f46\u662f\u4e24\u4e2a\u4e0d\u540c\u7684\u8868\u683c\u53ef\u4ee5\u6709\u76f8\u540c\u7684 ID\u3002\u4f8b\u5982\uff0c\u4e0a\u9762\u4e24\u4e2a\u8868\u683c\u90fd\u4f7f\u7528 ID <code>2</code>\uff0c\u4e00\u4e2a\u7528\u4e8e\u201cZ-Force\u201d\u56e2\u961f\uff0c\u53e6\u4e00\u4e2a\u7528\u4e8e\u201cSpider-Boy\u201d\u82f1\u96c4\uff0c\u4f46\u53ea\u8981\u6bcf\u4e2a\u8868\u4e2d\u53ea\u6709\u4e00\u4e2a\uff0c\u5c31\u6ca1\u6709\u95ee\u9898\u3002</p>"},{"location":"databases/#-_1","title":"\u5173\u7cfb - \u5916\u952e","text":"<p>\u6bcf\u4e2a\u8868\u683c\u4e2d\u7684\u884c\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684 \u4e3b\u952e\uff08\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\u662f\u5355\u5217 <code>id</code>\uff09\u3002</p> <p>\u4f8b\u5982\uff0c\u56e2\u961f\u8868\u683c\u4e2d\u7684 ID <code>1</code> \u4ee3\u8868\u56e2\u961f <code>Preventers</code>\uff0c\u800c ID <code>2</code> \u4ee3\u8868\u56e2\u961f <code>Z-Force</code>\u3002</p> <p>\u7531\u4e8e\u8fd9\u4e9b \u4e3b\u952e ID \u53ef\u4ee5\u552f\u4e00\u6807\u8bc6\u56e2\u961f\u8868\u683c\u4e2d\u7684\u6bcf\u4e00\u884c\uff0c\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5728\u82f1\u96c4\u7684\u8868\u683c\u4e2d\u5f15\u7528\u8fd9\u4e9b ID\u3002</p> <p></p> <p>\u56e0\u6b64\uff0c\u5728\u82f1\u96c4\u7684\u8868\u683c\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 <code>team_id</code> \u5217\u6765\u5b9a\u4e49\u4e0e\u56e2\u961f\u5916\u90e8\u8868\u683c\u7684\u5173\u7cfb\u3002\u82f1\u96c4\u8868\u683c\u4e2d\u7684\u6bcf\u4e2a <code>team_id</code> \u5217\u503c\u90fd\u5c06\u4e0e\u56e2\u961f\u8868\u683c\u4e2d\u4e00\u884c\u7684 <code>id</code> \u5217\u503c\u76f8\u540c\u3002</p> <p>\u5728\u82f1\u96c4\u8868\u683c\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a \u4e3b\u952e\uff0c\u5373 <code>id</code>\u3002\u4f46\u6211\u4eec\u8fd8\u6709\u4e00\u4e2a\u989d\u5916\u7684\u5217 <code>team_id</code>\uff0c\u5b83\u5f15\u7528\u4e86\u5916\u90e8\u8868\u683c\u4e2d\u7684 \u952e\u3002\u8fd9\u4e5f\u6709\u4e00\u4e2a\u6280\u672f\u672f\u8bed\uff0c<code>team_id</code> \u88ab\u79f0\u4e3a \"\u5916\u952e\"\u3002</p>"},{"location":"databases/#_11","title":"\u5173\u7cfb\u548c\u5173\u7cfb\u578b\u6570\u636e\u5e93","text":"<p>\u8fd9\u4e9b\u8868\u683c\u7684\u6280\u672f\u6027\u548c\u5b66\u672f\u6027\u672f\u8bed\u662f \"\u5173\u7cfb\"\u3002</p> <p>\u4f60\u5728\u8c08\u8bba\u8fd9\u4e9b\u6570\u636e\u5e93\u65f6\uff0c\u53ef\u80fd\u4f1a\u7ecf\u5e38\u542c\u5230\u8fd9\u4e2a\u672f\u8bed\u3002</p> <p>\u8fd9\u4e2a\u672f\u8bed\u7684\u610f\u4e49\u5e76\u4e0d\u662f\u4f60\u5728\u82f1\u8bed\u4e2d\u4f7f\u7528\u7684\u201c\u4e0e\u67d0\u4e8b\u76f8\u5173\u201d\u7684\u610f\u601d\uff0c\u5c3d\u7ba1\u8fd9\u4e9b\u8868\u683c\u4e4b\u95f4\u5b9e\u9645\u4e0a\u662f\u201c\u76f8\u5173\u201d\u7684\u3002</p> <p>\u6280\u672f\u672f\u8bed \u5173\u7cfb \u53ea\u662f\u6307\u6bcf\u4e00\u4e2a\u8868\u683c\u3002</p> <p>\u6b63\u56e0\u4e3a\u8fd9\u4e2a\u6280\u672f\u672f\u8bed\uff0c\u8fd9\u4e9b SQL \u6570\u636e\u5e93 \u4e5f\u88ab\u79f0\u4e3a \u5173\u7cfb\u578b\u6570\u636e\u5e93\uff08\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u662f\u6280\u672f\u4e0a\u6b63\u786e\u7684\u672f\u8bed\uff09\u3002\u4f46\u5b83\u4ecd\u7136\u53ea\u662f\u6307\u7531\u591a\u4e2a\u8868\u683c\u7ec4\u6210\u7684\u6570\u636e\u5e93\u3002</p>"},{"location":"databases/#sql-","title":"SQL - \u8bed\u8a00","text":"<p>\u5728\u53d1\u5c55\u51fa\u5982\u4f55\u5c06\u6570\u636e\u5b58\u50a8\u5728\u591a\u4e2a\u8868\u683c\u4e2d\u7684\u8fd9\u4e9b\u601d\u60f3\u540e\uff0c\u4ed6\u4eec\u8fd8\u521b\u5efa\u4e86\u4e00\u79cd \u8bed\u8a00\uff0c\u53ef\u4ee5\u7528\u6765\u4e0e\u8fd9\u4e9b\u6570\u636e\u5e93\u8fdb\u884c\u4ea4\u4e92\u3002</p> <p>\u8fd9\u79cd\u8bed\u8a00\u53eb\u505a SQL\uff0c\u5b83\u7684\u540d\u5b57\u6765\u81ea\u4e8e Structured Query Language\uff08\u7ed3\u6784\u5316\u67e5\u8be2\u8bed\u8a00\uff09\u3002</p> <p>\u7136\u800c\uff0c\u8fd9\u79cd\u8bed\u8a00\u4e0d\u4ec5\u4ec5\u7528\u4e8e \u67e5\u8be2 \u6570\u636e\u3002\u5b83\u4e5f\u7528\u4e8e\u521b\u5efa\u8bb0\u5f55/\u884c\u3001\u66f4\u65b0\u5b83\u4eec\u3001\u5220\u9664\u5b83\u4eec\uff0c\u4ee5\u53ca\u64cd\u4f5c\u6570\u636e\u5e93\u3001\u521b\u5efa\u8868\u683c\u7b49\u3002</p> <p>\u6240\u6709\u8fd9\u4e9b\u5904\u7406\u591a\u4e2a\u8868\u683c\u7684\u6570\u636e\u5e93\u90fd\u652f\u6301\u8fd9\u79cd\u8bed\u8a00\uff0c\u8fd9\u4e5f\u662f\u5b83\u4eec\u88ab\u79f0\u4e3a SQL \u6570\u636e\u5e93 \u7684\u539f\u56e0\u3002\u5c3d\u7ba1\uff0c\u6bcf\u4e2a\u6570\u636e\u5e93\u5728\u652f\u6301\u7684 SQL \u8bed\u8a00\u4e0a\u6709\u4e9b\u5c0f\u7684\u53d8\u5316\uff08\u65b9\u8a00\uff09\u3002</p> <p>\u5047\u8bbe\u5b58\u50a8\u82f1\u96c4\u6570\u636e\u7684\u8868\u683c\u53eb\u505a <code>hero</code> \u8868\u683c\u3002\u4e00\u4e2a\u67e5\u8be2\u6240\u6709\u6570\u636e\u7684 SQL \u67e5\u8be2\u53ef\u80fd\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>SELECT *\nFROM hero;\n</code></pre> <p>\u8fd9\u4e2a SQL \u67e5\u8be2\u5c06\u8fd4\u56de\u5982\u4e0b\u8868\u683c\uff1a</p> idnamesecret_nameageteam_id 1DeadpondDive Wilsonnull2 2Spider-BoyPedro Parqueadornull1 3Rusty-ManTommy Sharp481"},{"location":"databases/#sqlmodel-for-sql","title":"SQLModel for SQL","text":"<p>SQLModel \u662f\u4e00\u4e2a\u5e93\uff0c\u5e2e\u52a9\u4f60\u4f7f\u7528\u5e38\u89c4 Python \u5bf9\u8c61\u7f16\u5199 Python \u4ee3\u7801\uff0c\u7136\u540e\u5b83\u5c06\u8fd9\u4e9b\u4ee3\u7801\u8f6c\u6362\u4e3a\u53d1\u9001\u5230 SQL \u6570\u636e\u5e93 \u7684 SQL \u8bed\u53e5\u3002</p> <p>\u63a5\u4e0b\u6765\uff0c\u5b83\u63a5\u6536\u6570\u636e\u5e76\u5c06\u5176\u8f6c\u5316\u4e3a Python \u5bf9\u8c61\uff0c\u65b9\u4fbf\u4f60\u7ee7\u7eed\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528\u3002</p> <p>\u5728\u63a5\u4e0b\u6765\u7684\u90e8\u5206\uff0c\u6211\u5c06\u544a\u8bc9\u4f60\u66f4\u591a\u5173\u4e8e SQL\u3001SQLModel\u3001\u5982\u4f55\u4f7f\u7528\u5b83\u4eec\u4ee5\u53ca\u5b83\u4eec\u4e4b\u95f4\u7684\u5173\u7cfb\u3002</p> <p>\u6280\u672f\u7ec6\u8282</p> <p>SQLModel \u662f\u57fa\u4e8e SQLAlchemy \u6784\u5efa\u7684\u3002\u5b83\u5b9e\u9645\u4e0a\u5c31\u662f SQLAlchemy \u548c Pydantic \u7684\u7ed3\u5408\uff0c\u5916\u52a0\u4e00\u4e9b\u65b9\u4fbf\u7684\u529f\u80fd\u3002</p>"},{"location":"databases/#nosql","title":"NoSQL \u6570\u636e\u5e93","text":"<p>\u867d\u7136 SQL \u6570\u636e\u5e93\u662f\u6700\u53e4\u8001\u4e14\u6700\u5e38\u7528\u7684\u6570\u636e\u5e93\u7c7b\u578b\uff0c\u4f46\u8fd8\u6709\u53e6\u4e00\u7c7b\uff08\u975e\u5e38\u6709\u8da3\u7684\uff09\u7c7b\u578b\uff0c\u5373 NoSQL \u6570\u636e\u5e93\u3002</p> <p>NoSQL \u6570\u636e\u5e93 \u5305\u62ec\u8bb8\u591a\u4e0d\u540c\u7684\u5b50\u7c7b\u578b\uff0c\u5305\u62ec\u952e\u503c\u5b58\u50a8\u3001\u6587\u6863\u5b58\u50a8\u3001\u56fe\u6570\u636e\u5e93\u7b49\u3002</p> <p>SQLModel \u53ea\u80fd\u5e2e\u52a9\u4f60\u5904\u7406 SQL \u6570\u636e\u5e93\u3002\u6240\u4ee5\uff0c\u6587\u6863\u7684\u5176\u4f59\u90e8\u5206\u5c06\u96c6\u4e2d\u8ba8\u8bba SQL \u6570\u636e\u5e93\u3002</p>"},{"location":"db-to-code/","title":"\u6570\u636e\u5e93\u4e0e\u4ee3\u7801\uff08ORM\uff09","text":"<p>\u5728\u8fd9\u91cc\uff0c\u6211\u5c06\u544a\u8bc9\u4f60 SQLModel \u5982\u4f55\u4e0e\u6570\u636e\u5e93\u4ea4\u4e92\uff0c\u4e3a\u4ec0\u4e48\u4f60\u4f1a\u60f3\u4f7f\u7528\u5b83\uff08\u6216\u8005\u7c7b\u4f3c\u7684\u5de5\u5177\uff09\uff0c\u4ee5\u53ca\u5b83\u5982\u4f55\u4e0e SQL \u76f8\u5173\u8054\u3002</p>"},{"location":"db-to-code/#sql","title":"\u4ee3\u7801\u4e2d\u7684 SQL \u5185\u8054","text":"<p>\u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u7b80\u5355\u7684 SQL \u67e5\u8be2\u793a\u4f8b\uff0c\u7528\u4e8e\u83b7\u53d6 <code>hero</code> \u8868\u4e2d\u7684\u6240\u6709\u6570\u636e\uff1a</p> <pre><code>SELECT *\nFROM hero;\n</code></pre> <p>\u8fd9\u4e2a SQL \u67e5\u8be2\u5c06\u8fd4\u56de\u5982\u4e0b\u8868\u683c\uff1a</p> idnamesecret_nameageteam_id 1DeadpondDive Wilsonnull2 2Spider-BoyPedro Parqueadornull1 3Rusty-ManTommy Sharp481 <p>\u8fd9\u4e2a SQL \u8bed\u8a00\u6709\u4e00\u4e2a\u5c0f \u8b66\u544a\u3002\u5b83\u5e76\u4e0d\u662f\u4e3a\u4e86\u4e0e\u50cf Python \u8fd9\u6837\u7684\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u666e\u901a\u4ee3\u7801\u6df7\u5408\u4f7f\u7528\u800c\u8bbe\u8ba1\u7684\u3002\ud83d\udea8</p> <p>\u6240\u4ee5\uff0c\u5982\u679c\u4f60\u5728\u4f7f\u7528 Python\uff0c\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u5c06 SQL \u4ee3\u7801\u653e\u5728\u5b57\u7b26\u4e32\u4e2d\uff0c\u5e76\u5c06\u8be5\u5b57\u7b26\u4e32\u76f4\u63a5\u53d1\u9001\u5230\u6570\u636e\u5e93\u3002</p> <pre><code>statement = \"SELECT * FROM hero;\"\n\nresults = database.execute(statement)\n</code></pre> <p>\u4f46\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u5c06\u6ca1\u6709\u7f16\u8f91\u5668\u652f\u6301\u3001\u5185\u8054\u9519\u8bef\u63d0\u793a\u3001\u81ea\u52a8\u8865\u5168\u7b49\u529f\u80fd\u3002\u56e0\u4e3a\u5bf9\u7f16\u8f91\u5668\u6765\u8bf4\uff0cSQL \u8bed\u53e5\u53ea\u662f\u4e00\u4e2a\u6587\u672c\u5b57\u7b26\u4e32\u3002\u5982\u679c\u53d1\u751f\u9519\u8bef\uff0c\u7f16\u8f91\u5668\u5c06\u65e0\u6cd5\u63d0\u4f9b\u5e2e\u52a9\u3002\ud83d\ude14</p> <p>\u66f4\u91cd\u8981\u7684\u662f\uff0c\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4f60\u5c06\u53d1\u9001\u5e26\u6709\u4fee\u6539\u548c\u53c2\u6570\u7684 SQL \u5b57\u7b26\u4e32\u3002\u4f8b\u5982\uff0c\u8981\u83b7\u53d6\u67d0\u4e2a \u7279\u5b9a\u9879\u76ee ID \u7684\u6570\u636e\uff0c\u6216\u67d0\u4e2a \u65e5\u671f\u8303\u56f4 \u7684\u6570\u636e\u7b49\u3002</p> <p>\u800c\u4e14\uff0c\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4f60\u7684\u4ee3\u7801\u7528\u6765\u67e5\u8be2\u6216\u4fee\u6539\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u7684\u53c2\u6570\uff0c\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u662f\u6765\u81ea\u5916\u90e8\u7528\u6237\u3002</p> <p>\u4f8b\u5982\uff0c\u770b\u770b\u8fd9\u4e2a SQL \u67e5\u8be2\uff1a</p> <pre><code>SELECT *\nFROM hero\nWHERE id = 2;\n</code></pre> <p>\u5b83\u4f7f\u7528\u4e86\u53c2\u6570 <code>2</code>\u3002\u8fd9\u4e2a\u6570\u5b57 <code>2</code> \u53ef\u80fd\u662f\u67d0\u79cd\u65b9\u5f0f\u901a\u8fc7\u7528\u6237\u8f93\u5165\u5f97\u5230\u7684\u3002</p> <p>\u7528\u6237\u53ef\u80fd\u4ee5\u67d0\u79cd\u65b9\u5f0f\u544a\u8bc9\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\uff1a</p> <p>\u563f\uff0c\u6211\u60f3\u83b7\u53d6 ID \u4e3a\uff1a</p> <pre><code>2\n</code></pre> <p>\u67e5\u8be2\u7ed3\u679c\u5c06\u662f\u8fd9\u4e2a\u8868\u683c\uff08\u53ea\u6709\u4e00\u884c\u6570\u636e\uff09\uff1a</p> idnamesecret_nameageteam_id 2Spider-BoyPedro Parqueadornull1"},{"location":"db-to-code/#sql_1","title":"SQL \u6ce8\u5165","text":"<p>\u5047\u8bbe\u4f60\u7684\u4ee3\u7801\u5c06\u5916\u90e8\u7528\u6237\u63d0\u4f9b\u7684\u5185\u5bb9\u76f4\u63a5\u653e\u5165 SQL \u5b57\u7b26\u4e32\u4e2d\uff0c\u7136\u540e\u53d1\u9001\u7ed9\u6570\u636e\u5e93\u3002\u4ee3\u7801\u53ef\u80fd\u662f\u8fd9\u6837\u7684\uff1a</p> <pre><code># \u6c38\u8fdc\u4e0d\u8981\u8fd9\u6837\u505a\uff01\ud83d\udea8 \u7ee7\u7eed\u9605\u8bfb\u3002\n\nuser_id = input(\"\u8bf7\u8f93\u5165\u7528\u6237 ID: \")\n\nstatement = f\"SELECT * FROM hero WHERE id = {user_id};\"\n\nresults = database.execute(statement)\n</code></pre> <p>\u5982\u679c\u5916\u90e8\u7528\u6237\u5b9e\u9645\u4e0a\u662f\u653b\u51fb\u8005\uff0c\u4ed6\u4eec\u53ef\u80fd\u4f1a\u53d1\u9001\u4e00\u4e2a\u6076\u610f\u7684 SQL \u5b57\u7b26\u4e32\uff0c\u505a\u4e00\u4e9b\u53ef\u6015\u7684\u4e8b\u60c5\uff0c\u6bd4\u5982\u5220\u9664\u6240\u6709\u8bb0\u5f55\u3002\u8fd9\u5c31\u53eb\u505a \"SQL \u6ce8\u5165\"\u3002</p> <p>\u4f8b\u5982\uff0c\u5047\u8bbe\u8fd9\u4e2a\u65b0\u653b\u51fb\u8005\u7528\u6237\u8bf4\uff1a</p> <p>\u563f\uff0c\u6211\u60f3\u83b7\u53d6 ID \u4e3a\uff1a</p> <pre><code>2; DROP TABLE hero\n</code></pre> <p>\u7136\u540e\uff0c\u4e0a\u9762\u90a3\u4e2a\u5c06\u7528\u6237\u8f93\u5165\u653e\u5165 SQL \u7684\u4ee3\u7801\u5b9e\u9645\u4e0a\u4f1a\u5c06\u4ee5\u4e0b\u5185\u5bb9\u53d1\u9001\u5230\u6570\u636e\u5e93\uff1a</p> <pre><code>SELECT * FROM hero WHERE id = 2; DROP TABLE hero;\n</code></pre> <p>\u770b\u770b\u5728\u672b\u5c3e\u6dfb\u52a0\u7684\u90e8\u5206\u3002\u90a3\u662f\u53e6\u4e00\u4e2a\u5b8c\u6574\u7684 SQL \u8bed\u53e5\uff1a</p> <pre><code>DROP TABLE hero;\n</code></pre> <p>\u8fd9\u5c31\u662f\u4f60\u544a\u8bc9\u6570\u636e\u5e93\u5728 SQL \u4e2d\u5220\u9664\u6574\u4e2a <code>hero</code> \u8868\u7684\u65b9\u5f0f\u3002</p> <p>\u4e0d\uff01\uff01\uff01 \u6211\u4eec\u5931\u53bb\u4e86\u6240\u6709 <code>hero</code> \u8868\u4e2d\u7684\u6570\u636e\uff01\ud83d\udca5\ud83d\ude31</p>"},{"location":"db-to-code/#sql_2","title":"SQL \u6570\u636e\u6e05\u7406","text":"<p>\u786e\u4fdd\u5916\u90e8\u7528\u6237\u53d1\u9001\u7684\u5185\u5bb9\u5728 SQL \u5b57\u7b26\u4e32\u4e2d\u4f7f\u7528\u65f6\u662f\u5b89\u5168\u7684\u8fc7\u7a0b\u79f0\u4e3a \u6570\u636e\u6e05\u7406\u3002</p> <p>SQLModel\uff08\u5f97\u76ca\u4e8e SQLAlchemy\uff09\u9ed8\u8ba4\u63d0\u4f9b\u4e86\u8fd9\u4e2a\u529f\u80fd\u3002\u8bb8\u591a\u5176\u4ed6\u7c7b\u4f3c\u7684\u5de5\u5177\u4e5f\u4f1a\u63d0\u4f9b\u8be5\u529f\u80fd\u4ee5\u53ca\u8bb8\u591a\u5176\u4ed6\u7279\u6027\u3002</p> <p>\u73b0\u5728\u4f60\u51c6\u5907\u597d\u6b23\u8d4f\u6765\u81ea xkcd\u7684\u7b11\u8bdd\uff1a</p> <p></p>"},{"location":"db-to-code/#sqlmodel-sql","title":"\u4f7f\u7528 SQLModel \u8fdb\u884c SQL \u64cd\u4f5c","text":"<p>\u4f7f\u7528 SQLModel\uff0c\u4f60\u4e0d\u518d\u76f4\u63a5\u7f16\u5199 SQL \u8bed\u53e5\uff0c\u800c\u662f\u4f7f\u7528 Python \u7c7b\u548c\u5bf9\u8c61\u4e0e\u6570\u636e\u5e93\u4ea4\u4e92\u3002</p> <p>\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u4ee3\u7801\u5411\u6570\u636e\u5e93\u8bf7\u6c42 ID \u4e3a <code>2</code> \u7684\u82f1\u96c4\uff1a</p> <pre><code>user_id = input(\"\u8bf7\u8f93\u5165\u7528\u6237 ID: \")\n\nsession.exec(\n    select(Hero).where(Hero.id == user_id)\n).all()\n</code></pre> <p>\u5982\u679c\u7528\u6237\u63d0\u4f9b\u4e86\u8fd9\u4e2a ID\uff1a</p> <pre><code>2\n</code></pre> <p>...\u7ed3\u679c\u5c06\u662f\u4ee5\u4e0b\u8868\u683c\uff08\u4ec5\u4e00\u884c\uff09\uff1a</p> idnamesecret_nameageteam_id 2Spider-BoyPedro Parqueadornull1"},{"location":"db-to-code/#sql_3","title":"\u9632\u6b62 SQL \u6ce8\u5165","text":"<p>\u5982\u679c\u7528\u6237\u662f\u653b\u51fb\u8005\uff0c\u5e76\u8bd5\u56fe\u5c06\u4ee5\u4e0b\u5185\u5bb9\u4f5c\u4e3a\u201cID\u201d\u53d1\u9001\uff1a</p> <pre><code>2; DROP TABLE hero\n</code></pre> <p>\u90a3\u4e48 SQLModel \u4f1a\u5c06\u5176\u8f6c\u6362\u4e3a\u5b57\u9762\u5b57\u7b26\u4e32 <code>\"2; DROP TABLE hero\"</code>\u3002</p> <p>\u7136\u540e\uff0c\u5b83\u4f1a\u544a\u8bc9 SQL \u6570\u636e\u5e93\u5c1d\u8bd5\u67e5\u627e\u5177\u6709\u8be5\u786e\u5207 ID \u7684\u8bb0\u5f55\uff0c\u800c\u4e0d\u662f\u6ce8\u5165\u653b\u51fb\u3002</p> <p>\u6700\u7ec8 SQL \u8bed\u53e5\u4e2d\u7684\u5dee\u5f02\u662f\u5fae\u5999\u7684\uff0c\u4f46\u5b83\u5b8c\u5168\u6539\u53d8\u4e86\u542b\u4e49\uff1a</p> <pre><code>SELECT * FROM hero WHERE id = \"2; DROP TABLE hero;\";\n</code></pre> <p>Tip</p> <p>\u6ce8\u610f\u53cc\u5f15\u53f7 (<code>\"</code>) \u5c06\u5176\u53d8\u4e3a\u5b57\u7b26\u4e32\uff0c\u800c\u4e0d\u662f\u66f4\u591a\u7684\u539f\u59cb SQL\u3002</p> <p>\u6570\u636e\u5e93\u5c06\u4e0d\u4f1a\u627e\u5230\u4efb\u4f55\u5177\u6709\u8be5 ID \u7684\u8bb0\u5f55\uff1a</p> <pre><code>\"2; DROP TABLE hero;\"\n</code></pre> <p>\u7136\u540e\uff0c\u6570\u636e\u5e93\u4f1a\u8fd4\u56de\u4e00\u4e2a\u7a7a\u8868\u683c\u4f5c\u4e3a\u7ed3\u679c\uff0c\u56e0\u4e3a\u5b83\u6ca1\u6709\u627e\u5230\u4efb\u4f55\u5177\u6709\u8be5 ID \u7684\u8bb0\u5f55\u3002</p> <p>\u63a5\u7740\u4f60\u7684\u4ee3\u7801\u5c06\u7ee7\u7eed\u6267\u884c\uff0c\u5e76\u5e73\u9759\u5730\u544a\u8bc9\u7528\u6237\u6ca1\u6709\u627e\u5230\u4efb\u4f55\u5185\u5bb9\u3002</p> <p>\u4f46\u6211\u4eec\u4ece\u672a\u5220\u9664\u8fc7 <code>hero</code> \u8868\u3002\ud83c\udf89</p> <p>Info</p> <p>\u5f53\u7136\uff0c\u4e5f\u6709\u5176\u4ed6\u65b9\u6cd5\u53ef\u4ee5\u8fdb\u884c SQL \u6570\u636e\u6e05\u7406\uff0c\u800c\u65e0\u9700\u4f7f\u7528\u50cf SQLModel \u8fd9\u6837\u7684\u5de5\u5177\uff0c\u4f46\u8fd9\u4ecd\u7136\u662f\u4f60\u9ed8\u8ba4\u5f97\u5230\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u7279\u6027\u3002</p>"},{"location":"db-to-code/#_1","title":"\u7f16\u8f91\u5668\u652f\u6301","text":"<p>\u518d\u770b\u4e00\u4e0b\u4e0a\u9762\u7684 Python \u4ee3\u7801\u7247\u6bb5\u3002</p> <p>\u56e0\u4e3a\u6211\u4eec\u4f7f\u7528\u7684\u662f \u6807\u51c6 Python \u7c7b\u548c\u5bf9\u8c61\uff0c\u6240\u4ee5\u4f60\u7684\u7f16\u8f91\u5668\u5c06\u80fd\u591f\u4e3a\u4f60\u63d0\u4f9b\u81ea\u52a8\u8865\u5168\u3001\u5185\u8054\u9519\u8bef\u7b49\u529f\u80fd\u3002</p> <p>\u4f8b\u5982\uff0c\u5047\u8bbe\u4f60\u60f3\u8981\u67e5\u8be2\u6570\u636e\u5e93\uff0c\u67e5\u627e\u4e00\u4e2a\u57fa\u4e8e\u79d8\u5bc6\u8eab\u4efd\u7684\u82f1\u96c4\u3002</p> <p>\u4e5f\u8bb8\u4f60\u4e0d\u8bb0\u5f97\u4f60\u662f\u5982\u4f55\u547d\u540d\u8be5\u5217\u7684\u3002\u53ef\u80fd\u662f\uff1a</p> <ul> <li><code>secret_identity</code>?</li> </ul> <p>...\u8fd8\u662f\uff1a</p> <ul> <li><code>secretidentity</code>?</li> </ul> <p>...\u6216\u8005\uff1a</p> <ul> <li><code>private_name</code>?</li> <li><code>secret_name</code>?</li> <li><code>secretname</code>?</li> </ul> <p>\u5982\u679c\u4f60\u5728\u4ee3\u7801\u4e2d\u7684 SQL \u5b57\u7b26\u4e32\u91cc\u952e\u5165\u8fd9\u4e9b\uff0c\u7f16\u8f91\u5668 \u65e0\u6cd5\u5e2e\u52a9\u4f60\uff1a</p> <pre><code>statement = \"SELECT * FROM hero WHERE secret_identity = 'Dive Wilson';\"\n\nresults = database.execute(statement)\n</code></pre> <p>...\u7f16\u8f91\u5668\u4f1a\u628a\u5b83\u770b\u4f5c\u4e00\u4e2a \u957f\u5b57\u7b26\u4e32\uff0c\u5176\u4e2d\u6709\u4e00\u4e9b\u6587\u672c\uff0c\u5e76\u4e14 \u65e0\u6cd5\u81ea\u52a8\u8865\u5168 \u6216\u68c0\u6d4b <code>secret_identity</code> \u4e2d\u7684\u9519\u8bef\u3002</p> <p>\u4f46\u5982\u679c\u4f60\u4f7f\u7528\u5e38\u89c1\u7684 Python \u7c7b\u548c\u5bf9\u8c61\uff0c\u7f16\u8f91\u5668\u5c06\u80fd\u591f\u5e2e\u52a9\u4f60\uff1a</p> <pre><code>database.execute(\n    select(Hero).where(Hero.secret_name == \"Dive Wilson\")\n).all()\n</code></pre> <p></p>"},{"location":"db-to-code/#orm-sql","title":"ORM \u548c SQL","text":"<p>\u50cf SQLModel\uff08\u5f53\u7136\u8fd8\u6709 SQLAlchemy\uff09\u8fd9\u6837\u7684\u5e93\uff0c\u5b83\u4eec\u901a\u8fc7\u7c7b\u548c\u5bf9\u8c61\u5728 SQL \u548c\u4ee3\u7801\u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362\uff0c\u79f0\u4e3a ORM\u3002</p> <p>ORM \u4ee3\u8868 \u5bf9\u8c61\u5173\u7cfb\u6620\u5c04\u5668\uff08Object-Relational Mapper\uff09\u3002</p> <p>\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u5e38\u89c1\u7684\u672f\u8bed\uff0c\u4f46\u5b83\u4e5f\u6e90\u81ea\u76f8\u5f53\u6280\u672f\u6027\u548c \u5b66\u672f\u6027 \u7684\u6982\u5ff5 \ud83d\udc69\u200d\ud83c\udf93\uff1a</p> <ul> <li>\u5bf9\u8c61\uff1a\u6307\u7684\u662f\u4f7f\u7528\u7c7b\u548c\u5b9e\u4f8b\u7684\u4ee3\u7801\uff0c\u901a\u5e38\u79f0\u4e3a\u201c\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u201d\uff0c\u8fd9\u5c31\u662f\u201c\u5bf9\u8c61\u201d\u90e8\u5206\u7684\u6765\u6e90\u3002</li> </ul> <p>\u4f8b\u5982\uff0c\u8fd9\u4e2a\u7c7b\u5c31\u662f\u5c5e\u4e8e\u90a3\u79cd \u9762\u5411\u5bf9\u8c61\u7f16\u7a0b \u7684\u4e00\u90e8\u5206\uff1a</p> <pre><code>class Hero(SQLModel):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n</code></pre> <ul> <li>\u5173\u7cfb\uff1a\u6307\u7684\u662f SQL \u6570\u636e\u5e93\u3002\u8bb0\u4f4f\u5b83\u4eec\u4e5f\u88ab\u79f0\u4e3a \u5173\u7cfb\u578b\u6570\u636e\u5e93\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u8868\u4e5f\u88ab\u79f0\u4e3a\u201c\u5173\u7cfb\u201d\uff1f\u8fd9\u5c31\u662f\u201c\u5173\u7cfb\u201d\u90e8\u5206\u7684\u6765\u6e90\u3002</li> </ul> <p>\u4f8b\u5982\uff0c\u8fd9\u4e2a \u5173\u7cfb \u6216\u8868\uff1a</p> idnamesecret_nameageteam_id 1DeadpondDive Wilsonnull2 2Spider-BoyPedro Parqueadornull1 3Rusty-ManTommy Sharp481 <ul> <li>\u6620\u5c04\u5668\uff1a\u8fd9\u4e2a\u8bcd\u6765\u6e90\u4e8e\u6570\u5b66\uff0c\u5f53\u6709\u67d0\u4e9b\u4e1c\u897f\u80fd\u591f\u4ece\u4e00\u4e2a\u96c6\u5408\u8f6c\u6362\u5230\u53e6\u4e00\u4e2a\u96c6\u5408\u65f6\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a\u201c\u6620\u5c04\u51fd\u6570\u201d\u3002\u8fd9\u5c31\u662f \u6620\u5c04\u5668 \u7684\u6765\u6e90\u3002</li> </ul> <p></p> <p>\u6211\u4eec\u4e5f\u53ef\u4ee5\u5199\u4e00\u4e2a \u6620\u5c04\u51fd\u6570\uff0c\u5c06 \u5c0f\u5199\u5b57\u6bcd\u7684\u96c6\u5408 \u8f6c\u6362\u4e3a \u5927\u5199\u5b57\u6bcd\u7684\u96c6\u5408\uff0c\u50cf\u8fd9\u6837\uff1a</p> <pre><code>def map_lower_to_upper(value: str):\n    return value.upper()\n</code></pre> <p>\u8fd9\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u60f3\u6cd5\uff0c\u4f46\u5374\u6709\u4e00\u4e2a\u975e\u5e38\u5b66\u672f\u548c\u6570\u5b66\u7684\u540d\u79f0\u3002\ud83d\ude05</p> <p>\u56e0\u6b64\uff0cORM \u662f\u4e00\u4e2a\u5c06 SQL \u548c\u4ee3\u7801\u4e4b\u95f4\u76f8\u4e92\u8f6c\u6362\u7684\u5e93\uff0c\u4e14\u5168\u90e8\u4f7f\u7528\u7c7b\u548c\u5bf9\u8c61\u3002</p> <p>\u9664\u4e86 SQLModel\uff0c\u8fd8\u6709\u8bb8\u591a\u5176\u4ed6 ORM \u53ef\u7528\uff0c\u4f60\u53ef\u4ee5\u5728 \u66ff\u4ee3\u65b9\u6848\u3001\u7075\u611f\u548c\u6bd4\u8f83 \u4e2d\u4e86\u89e3\u66f4\u591a\u3002</p>"},{"location":"db-to-code/#sql_4","title":"SQL \u8868\u540d","text":"<p>\u6280\u672f\u80cc\u666f</p> <p>\u8fd9\u662f SQL \u7eaf\u7cb9\u4e3b\u4e49\u8005\u7684\u80cc\u666f\u77e5\u8bc6\u3002\u4f60\u53ef\u4ee5\u8df3\u8fc7\u8fd9\u4e00\u90e8\u5206\u3002\ud83d\ude09</p> <p>\u5728\u4f7f\u7528\u7eaf SQL \u65f6\uff0c\u901a\u5e38\u4f1a\u5c06\u8868\u547d\u540d\u4e3a\u590d\u6570\u5f62\u5f0f\u3002\u56e0\u6b64\uff0c\u8868\u4f1a\u547d\u540d\u4e3a <code>heroes</code> \u800c\u4e0d\u662f <code>hero</code>\uff0c\u56e0\u4e3a\u5b83\u53ef\u80fd\u5305\u542b\u591a\u884c\uff0c\u6bcf\u884c\u4ee3\u8868\u4e00\u4e2a\u82f1\u96c4\u3002</p> <p>\u7136\u800c\uff0cSQLModel \u548c\u8bb8\u591a\u5176\u4ed6\u7c7b\u4f3c\u5de5\u5177\u53ef\u4ee5\u6839\u636e\u4f60\u7684\u4ee3\u7801\u81ea\u52a8\u751f\u6210\u8868\u540d\uff0c\u6b63\u5982\u4f60\u5728\u672c\u6559\u7a0b\u7a0d\u540e\u4f1a\u770b\u5230\u7684\u90a3\u6837\u3002</p> <p>\u4f46\u662f\uff0c\u8fd9\u4e2a\u540d\u79f0\u662f\u4ece\u7c7b\u540d\u6d3e\u751f\u51fa\u6765\u7684\u3002\u901a\u5e38\u7684\u505a\u6cd5\u662f\u4e3a\u7c7b\u4f7f\u7528 \u5355\u6570 \u540d\u79f0\uff08\u4f8b\u5982 <code>class Hero</code>\uff0c\u800c\u4e0d\u662f <code>class Heroes</code>\uff09\u3002\u4e3a\u7c7b\u4f7f\u7528\u5355\u6570\u540d\u79f0\uff08\u5982 <code>class Hero</code>\uff09\u8fd8\u80fd\u8ba9\u4f60\u7684\u4ee3\u7801\u66f4\u52a0\u76f4\u89c2\u3002</p> <p>\u4f60\u4f1a\u770b\u5230 \u4f60\u81ea\u5df1\u7684\u4ee3\u7801 \u6bd4\u5185\u90e8\u8868\u540d\u8981\u591a\u5f97\u591a\uff0c\u56e0\u6b64\u4fdd\u6301\u7c7b/\u4ee3\u7801\u547d\u540d\u89c4\u8303\u6bd4 SQL \u547d\u540d\u89c4\u8303\u53ef\u80fd\u66f4\u5408\u9002\u3002</p> <p>\u6240\u4ee5\uff0c\u4e3a\u4e86\u4fdd\u6301\u4e00\u81f4\u6027\uff0c\u6211\u5c06\u7ee7\u7eed\u4f7f\u7528 SQLModel \u751f\u6210\u7684\u76f8\u540c\u8868\u540d\u3002</p> <p>Tip</p> <p>\u4f60\u4e5f\u53ef\u4ee5\u8986\u76d6\u8868\u540d\u3002\u4f60\u53ef\u4ee5\u5728\u9ad8\u7ea7\u7528\u6237\u6307\u5357\u4e2d\u4e86\u89e3\u66f4\u591a\u5185\u5bb9\u3002</p>"},{"location":"environment-variables/","title":"\u73af\u5883\u53d8\u91cf","text":"<p>\u5728\u6211\u4eec\u8fdb\u5165\u4ee3\u7801\u4e4b\u524d\uff0c\u5148\u4e86\u89e3\u4e00\u4e9b \u57fa\u7840\u77e5\u8bc6\uff0c\u5e2e\u52a9\u6211\u4eec\u7406\u89e3\u5982\u4f55\u4f7f\u7528 Python\uff08\u4ee5\u53ca\u4e00\u822c\u7684\u7f16\u7a0b\uff09\u3002\u8ba9\u6211\u4eec\u5148\u770b\u4e00\u4e0b \u73af\u5883\u53d8\u91cf\u3002</p> <p>Tip</p> <p>\u5982\u679c\u4f60\u5df2\u7ecf\u77e5\u9053\u4ec0\u4e48\u662f\u201c\u73af\u5883\u53d8\u91cf\u201d\u4ee5\u53ca\u5982\u4f55\u4f7f\u7528\u5b83\u4eec\uff0c\u53ef\u4ee5\u8df3\u8fc7\u8fd9\u4e00\u90e8\u5206\u3002</p> <p>\u73af\u5883\u53d8\u91cf\uff08\u4e5f\u79f0\u4e3a\u201cenv var\u201d\uff09\u662f\u4e00\u4e2a\u5b58\u5728\u4e8e \u64cd\u4f5c\u7cfb\u7edf \u4e2d\u7684\u53d8\u91cf\uff0c\u4e0d\u5728 Python \u4ee3\u7801\u5185\uff0c\u4f46\u53ef\u4ee5\u88ab Python \u4ee3\u7801\uff08\u6216\u8005\u5176\u4ed6\u7a0b\u5e8f\uff09\u8bfb\u53d6\u3002</p> <p>\u73af\u5883\u53d8\u91cf\u5bf9\u4e8e\u5904\u7406\u5e94\u7528\u7a0b\u5e8f\u7684 \u8bbe\u7f6e\u3001\u4f5c\u4e3a Python \u7684 \u5b89\u88c5 \u4e00\u90e8\u5206\u7b49\u975e\u5e38\u6709\u7528\u3002</p>"},{"location":"environment-variables/#_2","title":"\u521b\u5efa\u548c\u4f7f\u7528\u73af\u5883\u53d8\u91cf","text":"<p>\u4f60\u53ef\u4ee5\u5728 \u7ec8\u7aef\uff08Shell\uff09 \u4e2d \u521b\u5efa \u548c\u4f7f\u7528\u73af\u5883\u53d8\u91cf\uff0c\u65e0\u9700 Python\uff1a</p> Linux, macOS, Windows BashWindows PowerShell <pre><code>// \u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a MY_NAME \u7684\u73af\u5883\u53d8\u91cf\n$ export MY_NAME=\"Wade Wilson\"\n\n// \u7136\u540e\u4f60\u53ef\u4ee5\u5728\u5176\u4ed6\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u5b83\uff0c\u6bd4\u5982\uff1a\n$ echo \"Hello $MY_NAME\"\n\nHello Wade Wilson\n</code></pre> <pre><code>// \u521b\u5efa\u4e00\u4e2a\u73af\u5883\u53d8\u91cf MY_NAME\n$ $Env:MY_NAME = \"Wade Wilson\"\n\n// \u5728\u5176\u4ed6\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u5b83\uff0c\u6bd4\u5982\uff1a\n$ echo \"Hello $Env:MY_NAME\"\n\nHello Wade Wilson\n</code></pre>"},{"location":"environment-variables/#python","title":"\u5728 Python \u4e2d\u8bfb\u53d6\u73af\u5883\u53d8\u91cf","text":"<p>\u4f60\u4e5f\u53ef\u4ee5\u5728 Python \u5916\u90e8 \u521b\u5efa\u73af\u5883\u53d8\u91cf\uff08\u901a\u8fc7\u7ec8\u7aef\u6216\u5176\u4ed6\u65b9\u6cd5\uff09\uff0c\u7136\u540e \u5728 Python \u4e2d\u8bfb\u53d6\u5b83\u4eec\u3002</p> <p>\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u6709\u4e00\u4e2a\u6587\u4ef6 <code>main.py</code>\uff0c\u5176\u4e2d\u5305\u542b\uff1a</p> <pre><code>import os\n\nname = os.getenv(\"MY_NAME\", \"World\")\nprint(f\"Hello {name} from Python\")\n</code></pre> <p>Tip</p> <p><code>os.getenv()</code> \u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u9ed8\u8ba4\u503c\u3002\u5982\u679c\u6ca1\u6709\u63d0\u4f9b\uff0c\u9ed8\u8ba4\u4e3a <code>None</code>\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u63d0\u4f9b <code>\"World\"</code> \u4f5c\u4e3a\u9ed8\u8ba4\u503c\u3002</p> <p>\u7136\u540e\u4f60\u53ef\u4ee5\u8c03\u7528\u8fd9\u4e2a Python \u7a0b\u5e8f\uff1a</p> Linux, macOS, Windows BashWindows PowerShell <pre><code>// \u8fd9\u91cc\u6211\u4eec\u8fd8\u6ca1\u6709\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\n$ python main.py\n\n// \u56e0\u4e3a\u6211\u4eec\u6ca1\u6709\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\uff0c\u6240\u4ee5\u5f97\u5230\u9ed8\u8ba4\u503c\n\nHello World from Python\n\n// \u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u5148\u521b\u5efa\u73af\u5883\u53d8\u91cf\n$ export MY_NAME=\"Wade Wilson\"\n\n// \u7136\u540e\u518d\u6b21\u8c03\u7528\u7a0b\u5e8f\n$ python main.py\n\n// \u73b0\u5728\u5b83\u53ef\u4ee5\u8bfb\u53d6\u73af\u5883\u53d8\u91cf\n\nHello Wade Wilson from Python\n</code></pre> <pre><code>// \u8fd9\u91cc\u6211\u4eec\u8fd8\u6ca1\u6709\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\n$ python main.py\n\n// \u56e0\u4e3a\u6211\u4eec\u6ca1\u6709\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\uff0c\u6240\u4ee5\u5f97\u5230\u9ed8\u8ba4\u503c\n\nHello World from Python\n\n// \u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u5148\u521b\u5efa\u73af\u5883\u53d8\u91cf\n$ $Env:MY_NAME = \"Wade Wilson\"\n\n// \u7136\u540e\u518d\u6b21\u8c03\u7528\u7a0b\u5e8f\n$ python main.py\n\n// \u73b0\u5728\u5b83\u53ef\u4ee5\u8bfb\u53d6\u73af\u5883\u53d8\u91cf\n\nHello Wade Wilson from Python\n</code></pre> <p>\u7531\u4e8e\u73af\u5883\u53d8\u91cf\u53ef\u4ee5\u5728\u4ee3\u7801\u4e4b\u5916\u8bbe\u7f6e\uff0c\u4f46\u53ef\u4ee5\u88ab\u4ee3\u7801\u8bfb\u53d6\uff0c\u800c\u4e14\u4e0d\u9700\u8981\u548c\u5176\u4ed6\u6587\u4ef6\u4e00\u8d77\u5b58\u50a8\uff08\u63d0\u4ea4\u5230 <code>git</code>\uff09\uff0c\u56e0\u6b64\u901a\u5e38\u7528\u5b83\u4eec\u6765\u914d\u7f6e\u6216\u5b58\u50a8 \u8bbe\u7f6e\u3002</p> <p>\u4f60\u8fd8\u53ef\u4ee5\u4e3a \u7279\u5b9a\u7684\u7a0b\u5e8f\u8c03\u7528 \u521b\u5efa\u73af\u5883\u53d8\u91cf\uff0c\u5b83\u4ec5\u5bf9\u8be5\u7a0b\u5e8f\u6709\u6548\uff0c\u5e76\u4e14\u53ea\u5728\u7a0b\u5e8f\u8fd0\u884c\u671f\u95f4\u5b58\u5728\u3002</p> <p>\u4e3a\u6b64\uff0c\u53ef\u4ee5\u5728\u7a0b\u5e8f\u672c\u8eab\u4e4b\u524d\u7684\u540c\u4e00\u884c\u521b\u5efa\u73af\u5883\u53d8\u91cf\uff1a</p> <pre><code>// \u5728\u8fd9\u4e00\u884c\u4e2d\u4e3a\u8be5\u7a0b\u5e8f\u8c03\u7528\u521b\u5efa\u73af\u5883\u53d8\u91cf MY_NAME\n$ MY_NAME=\"Wade Wilson\" python main.py\n\n// \u73b0\u5728\u5b83\u53ef\u4ee5\u8bfb\u53d6\u73af\u5883\u53d8\u91cf\n\nHello Wade Wilson from Python\n\n// \u7a0b\u5e8f\u8c03\u7528\u540e\u73af\u5883\u53d8\u91cf\u4e0d\u518d\u5b58\u5728\n$ python main.py\n\nHello World from Python\n</code></pre> <p>Tip</p> <p>\u4f60\u53ef\u4ee5\u5728 \u300aThe Twelve-Factor App: Config\u300b \u4e2d\u9605\u8bfb\u66f4\u591a\u76f8\u5173\u5185\u5bb9\u3002</p>"},{"location":"environment-variables/#_3","title":"\u7c7b\u578b\u4e0e\u9a8c\u8bc1","text":"<p>\u8fd9\u4e9b\u73af\u5883\u53d8\u91cf\u53ea\u80fd\u5904\u7406 \u6587\u672c\u5b57\u7b26\u4e32\uff0c\u56e0\u4e3a\u5b83\u4eec\u5728 Python \u4e4b\u5916\uff0c\u5fc5\u987b\u4e0e\u5176\u4ed6\u7a0b\u5e8f\u548c\u6574\u4e2a\u7cfb\u7edf\u517c\u5bb9\uff08\u751a\u81f3\u4e0e\u4e0d\u540c\u64cd\u4f5c\u7cfb\u7edf\u5982 Linux\u3001Windows\u3001macOS \u517c\u5bb9\uff09\u3002</p> <p>\u8fd9\u610f\u5473\u7740 \u4ece\u73af\u5883\u53d8\u91cf\u8bfb\u53d6\u7684\u4efb\u4f55\u503c \u90fd\u5c06\u662f\u4e00\u4e2a <code>str</code> \u7c7b\u578b\uff0c\u4efb\u4f55\u8f6c\u6362\u4e3a\u5176\u4ed6\u7c7b\u578b\u6216\u9a8c\u8bc1\u90fd\u5fc5\u987b\u5728\u4ee3\u7801\u4e2d\u8fdb\u884c\u3002</p>"},{"location":"environment-variables/#path","title":"<code>PATH</code> \u73af\u5883\u53d8\u91cf","text":"<p>\u6709\u4e00\u4e2a \u7279\u6b8a\u7684 \u73af\u5883\u53d8\u91cf\u53eb\u505a <code>PATH</code>\uff0c\u64cd\u4f5c\u7cfb\u7edf\uff08Linux\u3001macOS\u3001Windows\uff09\u4f7f\u7528\u5b83\u6765\u67e5\u627e\u7a0b\u5e8f\u5e76\u6267\u884c\u3002</p> <p><code>PATH</code> \u53d8\u91cf\u7684\u503c\u662f\u4e00\u4e2a\u957f\u5b57\u7b26\u4e32\uff0c\u7531\u591a\u4e2a\u76ee\u5f55\u7ec4\u6210\uff0cLinux \u548c macOS \u7528\u5192\u53f7 <code>:</code> \u5206\u9694\uff0cWindows \u7528\u5206\u53f7 <code>;</code> \u5206\u9694\u3002</p> <p>\u4f8b\u5982\uff0c<code>PATH</code> \u73af\u5883\u53d8\u91cf\u53ef\u80fd\u662f\u8fd9\u6837\u7684\uff1a</p> Linux, macOSWindows <pre><code>/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\n</code></pre> <p>\u8fd9\u610f\u5473\u7740\u7cfb\u7edf\u5e94\u8be5\u5728\u4ee5\u4e0b\u76ee\u5f55\u4e2d\u67e5\u627e\u7a0b\u5e8f\uff1a</p> <ul> <li><code>/usr/local/bin</code></li> <li><code>/usr/bin</code></li> <li><code>/bin</code></li> <li><code>/usr/sbin</code></li> <li><code>/sbin</code></li> </ul> <pre><code>C:\\Program Files\\Python312\\Scripts;C:\\Program Files\\Python312;C:\\Windows\\System32\n</code></pre> <p>\u8fd9\u610f\u5473\u7740\u7cfb\u7edf\u5e94\u8be5\u5728\u4ee5\u4e0b\u76ee\u5f55\u4e2d\u67e5\u627e\u7a0b\u5e8f\uff1a</p> <ul> <li><code>C:\\Program Files\\Python312\\Scripts</code></li> <li><code>C:\\Program Files\\Python312</code></li> <li><code>C:\\Windows\\System32</code></li> </ul> <p>\u5f53\u4f60\u5728\u7ec8\u7aef\u4e2d\u8f93\u5165 \u547d\u4ee4 \u65f6\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a \u5728 <code>PATH</code> \u73af\u5883\u53d8\u91cf\u4e2d\u5217\u51fa\u7684\u6bcf\u4e2a\u76ee\u5f55\u4e2d\u67e5\u627e \u7a0b\u5e8f\u3002</p> <p>\u4f8b\u5982\uff0c\u5f53\u4f60\u5728\u7ec8\u7aef\u4e2d\u8f93\u5165 <code>python</code> \u65f6\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u9996\u5148\u5728 <code>PATH</code> \u4e2d\u7684 \u7b2c\u4e00\u4e2a\u76ee\u5f55 \u67e5\u627e\u540d\u4e3a <code>python</code> \u7684\u7a0b\u5e8f\u3002</p> <p>\u5982\u679c\u627e\u5230\uff0c\u5b83\u5c31\u4f1a \u4f7f\u7528 \u8be5\u7a0b\u5e8f\u3002\u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u5b83\u4f1a\u7ee7\u7eed\u5728 \u5176\u4ed6\u76ee\u5f55 \u4e2d\u67e5\u627e\u3002</p>"},{"location":"environment-variables/#python-path","title":"\u5b89\u88c5 Python \u548c\u66f4\u65b0 <code>PATH</code>","text":"<p>\u5f53\u4f60\u5b89\u88c5 Python \u65f6\uff0c\u53ef\u80fd\u4f1a\u88ab\u95ee\u5230\u662f\u5426\u8981\u66f4\u65b0 <code>PATH</code> \u73af\u5883\u53d8\u91cf\u3002</p> Linux, macOSWindows <p>\u5047\u8bbe\u4f60\u5b89\u88c5\u4e86 Python\uff0c\u5b89\u88c5\u76ee\u5f55\u662f <code>/opt/custompython/bin</code>\u3002</p> <p>\u5982\u679c\u4f60\u9009\u62e9\u66f4\u65b0 <code>PATH</code> \u73af\u5883\u53d8\u91cf\uff0c\u5b89\u88c5\u7a0b\u5e8f\u5c06\u4f1a\u628a <code>/opt/custompython/bin</code> \u6dfb\u52a0\u5230 <code>PATH</code> \u73af\u5883\u53d8\u91cf\u4e2d\u3002</p> <p>\u5b83\u53ef\u80fd\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a</p> <pre><code>/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/custompython/bin\n</code></pre> <p>\u8fd9\u6837\uff0c\u5f53\u4f60\u5728\u7ec8\u7aef\u4e2d\u8f93\u5165 <code>python</code> \u65f6\uff0c\u7cfb\u7edf\u5c31\u4f1a\u5728 <code>/opt/custompython/bin</code>\uff08\u6700\u540e\u4e00\u4e2a\u76ee\u5f55\uff09\u4e2d\u627e\u5230 Python \u7a0b\u5e8f\uff0c\u5e76\u4f7f\u7528\u8fd9\u4e2a\u7248\u672c\u3002</p> <p>\u5047\u8bbe\u4f60\u5b89\u88c5\u4e86 Python\uff0c\u5b89\u88c5\u76ee\u5f55\u662f <code>C:\\opt\\custompython\\bin</code>\u3002</p> <p>\u5982\u679c\u4f60\u9009\u62e9\u66f4\u65b0 <code>PATH</code> \u73af\u5883\u53d8\u91cf\uff0c\u5b89\u88c5\u7a0b\u5e8f\u5c06\u4f1a\u628a <code>C:\\opt\\custompython\\bin</code> \u6dfb\u52a0\u5230 <code>PATH</code> \u73af\u5883\u53d8\u91cf\u4e2d\u3002</p> <pre><code>C:\\Program Files\\Python312\\Scripts;C:\\Program Files\\Python312;C:\\Windows\\System32;C:\\opt\\custompython\\bin\n</code></pre> <p>\u8fd9\u6837\uff0c\u5f53\u4f60\u5728\u7ec8\u7aef\u4e2d\u8f93\u5165 <code>python</code> \u65f6\uff0c\u7cfb\u7edf\u5c31\u4f1a\u5728 <code>C:\\opt\\custompython\\bin</code>\uff08\u6700\u540e\u4e00\u4e2a\u76ee\u5f55\uff09\u4e2d\u627e\u5230 Python \u7a0b\u5e8f\uff0c\u5e76\u4f7f\u7528\u8fd9\u4e2a\u7248\u672c\u3002</p> <p>\u8fd9\u6837\uff0c\u5f53\u4f60\u5728\u7ec8\u7aef\u4e2d\u8f93\u5165 <code>python</code> \u65f6\uff0c\u7cfb\u7edf\u5c31\u4f1a\u5728 <code>/opt/custompython/bin</code>\uff08\u6700\u540e\u4e00\u4e2a\u76ee\u5f55\uff09\u4e2d\u627e\u5230 Python \u7a0b\u5e8f\uff0c\u5e76\u4f7f\u7528\u5b83\u3002</p> <p>\u56e0\u6b64\uff0c\u5982\u679c\u4f60\u8f93\u5165\uff1a</p> <pre><code>$ python\n</code></pre> Linux, macOSWindows <p>\u7cfb\u7edf\u5c06\u4f1a \u627e\u5230 <code>/opt/custompython/bin</code> \u4e2d\u7684 <code>python</code> \u7a0b\u5e8f\u5e76\u6267\u884c\u5b83\u3002</p> <p>\u8fd9\u5927\u81f4\u76f8\u5f53\u4e8e\u8f93\u5165\uff1a</p> <pre><code>$ /opt/custompython/bin/python\n</code></pre> <p>\u7cfb\u7edf\u5c06\u4f1a \u627e\u5230 <code>C:\\opt\\custompython\\bin\\python</code> \u4e2d\u7684 <code>python</code> \u7a0b\u5e8f\u5e76\u6267\u884c\u5b83\u3002</p> <p>\u8fd9\u5927\u81f4\u76f8\u5f53\u4e8e\u8f93\u5165\uff1a</p> <pre><code>$ C:\\opt\\custompython\\bin\\python\n</code></pre> <p>\u8fd9\u4e9b\u4fe1\u606f\u5c06\u5728\u5b66\u4e60 \u865a\u62df\u73af\u5883 \u65f6\u6d3e\u4e0a\u7528\u573a\u3002</p>"},{"location":"environment-variables/#_4","title":"\u7ed3\u8bba","text":"<p>\u901a\u8fc7\u8fd9\u4e9b\u5185\u5bb9\uff0c\u4f60\u5e94\u8be5\u5bf9 \u73af\u5883\u53d8\u91cf \u6709\u4e86\u57fa\u672c\u7684\u7406\u89e3\uff0c\u5e76\u77e5\u9053\u5982\u4f55\u5728 Python \u4e2d\u4f7f\u7528\u5b83\u4eec\u3002</p> <p>\u4f60\u4e5f\u53ef\u4ee5\u5728 \u7ef4\u57fa\u767e\u79d1 \u4e0a\u9605\u8bfb\u66f4\u591a\u6709\u5173\u73af\u5883\u53d8\u91cf\u7684\u4fe1\u606f\u3002</p> <p>\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u73af\u5883\u53d8\u91cf\u7684\u7528\u9014\u53ef\u80fd\u4e0d\u4f1a\u7acb\u5373\u663e\u73b0\u51fa\u6765\uff0c\u4f46\u5b83\u4eec\u4f1a\u5728\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u5728\u8bb8\u591a\u4e0d\u540c\u7684\u573a\u666f\u4e2d\uff0c\u56e0\u6b64\u4e86\u89e3\u5b83\u4eec\u662f\u5f88\u6709\u7528\u7684\u3002</p> <p>\u4f8b\u5982\uff0c\u4f60\u5c06\u5728\u4e0b\u4e00\u8282 \u865a\u62df\u73af\u5883 \u4e2d\u9700\u8981\u7528\u5230\u8fd9\u4e9b\u4fe1\u606f\u3002</p>"},{"location":"features/","title":"\u7279\u6027","text":""},{"location":"features/#fastapi","title":"\u4e3a FastAPI \u800c\u8bbe\u8ba1","text":"<p>SQLModel \u7531 FastAPI \u7684\u4f5c\u8005 \u521b\u5efa\u3002</p> <p></p> <p>\u5b83\u9075\u5faa\u76f8\u540c\u7684\u8bbe\u8ba1\u7406\u5ff5\uff0c\u65e8\u5728\u6210\u4e3a\u5728 FastAPI \u5e94\u7528\u4e2d\u4e0e SQL \u6570\u636e\u5e93\u4ea4\u4e92\u7684\u6700\u76f4\u89c2\u65b9\u5f0f\u3002</p> <p>\u5c3d\u7ba1\u5982\u6b64\uff0cSQLModel \u5b8c\u5168 \u72ec\u7acb \u4e8e FastAPI\uff0c\u53ef\u4ee5\u7528\u4e8e\u4efb\u4f55\u5176\u4ed6\u7c7b\u578b\u7684\u5e94\u7528\u4e2d\uff0c\u4f9d\u7136\u80fd\u591f\u4ece\u5176\u7279\u6027\u4e2d\u83b7\u76ca\u3002</p>"},{"location":"features/#python","title":"\u7eaf\u73b0\u4ee3 Python","text":"<p>SQLModel \u5b8c\u5168\u57fa\u4e8e\u6807\u51c6\u7684 \u73b0\u4ee3 Python \u7c7b\u578b\u6ce8\u89e3\u3002\u65e0\u9700\u5b66\u4e60\u65b0\u7684\u8bed\u6cd5\uff0c\u4ec5\u9700\u4f7f\u7528\u6807\u51c6\u7684\u73b0\u4ee3 Python\u3002</p> <p>\u5982\u679c\u60a8\u9700\u8981\u5feb\u901f\u56de\u987e\u5982\u4f55\u4f7f\u7528 Python \u7c7b\u578b\u6ce8\u89e3\uff08\u5373\u4f7f\u60a8\u4e0d\u4f7f\u7528 SQLModel \u6216 FastAPI\uff09\uff0c\u53ef\u4ee5\u67e5\u770b FastAPI \u7684\u6559\u7a0b\u90e8\u5206\uff1aPython \u7c7b\u578b\u7b80\u4ecb\u3002</p> <p>\u60a8\u8fd8\u53ef\u4ee5\u5728\u6559\u7a0b - \u7528\u6237\u6307\u5357\uff1a\u7b2c\u4e00\u6b65\u90e8\u5206\u627e\u5230\u4e00\u4e2a 20 \u79d2\u7684\u5feb\u901f\u56de\u987e\u3002</p>"},{"location":"features/#_2","title":"\u7f16\u8f91\u5668\u652f\u6301","text":"<p>SQLModel \u8bbe\u8ba1\u6613\u4e8e\u4f7f\u7528\u4e14\u76f4\u89c2\uff0c\u4ee5\u786e\u4fdd\u6700\u4f73\u7684\u5f00\u53d1\u4f53\u9a8c\uff0c\u540c\u65f6\u5b9e\u73b0\u5168\u9762\u7684\u81ea\u52a8\u8865\u5168\u529f\u80fd\u3002</p> <p>\u4f8b\u5982\uff0c\u5728 Visual Studio Code \u4e2d\uff1a</p> <p></p> <p>\u6216\u8005\u5728 PyCharm \u4e2d\uff1a</p> <p></p> <p>\u60a8\u53ef\u4ee5\u5728\u7f16\u5199**\u6700\u5c11**\u4ee3\u7801\u65f6\uff0c\u83b7\u5f97\u5168\u9762\u7684\u81ea\u52a8\u8865\u5168\u529f\u80fd\u3002</p> <p>\u60a8\u65e0\u9700\u731c\u6d4b\u6a21\u578b\u4e2d\u4e0d\u540c\u5c5e\u6027\u7684\u7c7b\u578b\u6216\u5b83\u4eec\u662f\u5426\u53ef\u80fd\u4e3a <code>None</code>\uff0c\u56e0\u4e3a SQLModel \u57fa\u4e8e \u6807\u51c6 Python \u7c7b\u578b\u6ce8\u89e3\uff0c\u7f16\u8f91\u5668\u80fd\u591f\u4e3a\u60a8\u63d0\u4f9b\u5168\u65b9\u4f4d\u7684\u5e2e\u52a9\u3002</p> <p>SQLModel \u91c7\u7528 PEP 681 \u6765\u652f\u6301 Python \u7c7b\u578b\u6ce8\u89e3\uff0c\u4ece\u800c\u786e\u4fdd\u6700\u4f73\u7684\u5f00\u53d1\u8005\u4f53\u9a8c\uff0c\u56e0\u6b64\u5373\u4f7f\u5728\u521b\u5efa\u65b0\u7684\u6a21\u578b\u5b9e\u4f8b\u65f6\uff0c\u60a8\u4e5f\u80fd\u83b7\u5f97\u5185\u8054\u9519\u8bef\u63d0\u793a\u548c\u81ea\u52a8\u8865\u5168\u529f\u80fd\u3002</p> <p></p>"},{"location":"features/#_3","title":"\u7b80\u6d01","text":"<p>SQLModel \u4e3a\u6240\u6709\u529f\u80fd\u63d0\u4f9b\u4e86**\u5408\u7406\u7684\u9ed8\u8ba4\u503c**\uff0c\u5e76\u5728\u4efb\u4f55\u5730\u65b9\u652f\u6301**\u53ef\u9009\u914d\u7f6e**\u3002</p> <p>\u4f46\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u529f\u80fd\u90fd**\u201c\u5f00\u7bb1\u5373\u7528\u201d**\u3002</p> <p>\u60a8\u53ef\u4ee5\u4ece\u6570\u636e\u7684\u6700\u7b80\u5355\uff08\u4e5f\u662f\u6700\u76f4\u89c2\uff09\u7684\u7c7b\u578b\u6ce8\u89e3\u5f00\u59cb\u3002</p> <p>\u4e4b\u540e\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 SQLAlchemy \u548c Pydantic \u7684\u5168\u90e8\u529f\u80fd\u5bf9\u5176\u8fdb\u884c\u7cbe\u7ec6\u5316\u914d\u7f6e\u3002</p>"},{"location":"features/#pydantic","title":"\u57fa\u4e8e Pydantic","text":"<p>SQLModel \u57fa\u4e8e Pydantic\uff0c\u5e76\u4fdd\u6301\u4e86\u76f8\u540c\u7684\u8bbe\u8ba1\u3001\u8bed\u6cd5\u548c\u7406\u5ff5\u3002</p> <p>\u672c\u8d28\u4e0a\uff0c\u2728 \u4e00\u4e2a SQLModel \u6a21\u578b\u4e5f\u662f\u4e00\u4e2a Pydantic \u6a21\u578b \u2728\u3002</p> <p>\u4e3a\u6b64\u8fdb\u884c\u4e86\u5927\u91cf\u7684\u7814\u7a76\u548c\u52aa\u529b\u3002</p> <p>\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u4f7f\u7528 Pydantic \u7684\u6240\u6709\u529f\u80fd\uff0c\u5305\u62ec\u81ea\u52a8\u7684\u6570\u636e**\u9a8c\u8bc1**\u3001\u5e8f\u5217\u5316**\u548c**\u6587\u6863\u5316\u3002\u60a8\u53ef\u4ee5\u50cf\u4f7f\u7528 Pydantic \u4e00\u6837\u4f7f\u7528 SQLModel\u3002</p> <p>\u60a8\u751a\u81f3\u53ef\u4ee5\u521b\u5efa**\u4e0d\u4ee3\u8868 SQL \u8868**\u7684 SQLModel \u6a21\u578b\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u4eec\u548c Pydantic \u6a21\u578b\u5b8c\u5168\u76f8\u540c\u3002</p> <p>\u8fd9\u7279\u522b\u6709\u7528\uff0c\u56e0\u4e3a\u60a8\u73b0\u5728\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u4ece\u975e SQL \u6a21\u578b\u7ee7\u627f\u7684 SQL \u6570\u636e\u5e93\u6a21\u578b\u3002\u8fd9\u6837\u53ef\u4ee5\u6781\u5927\u5730**\u51cf\u5c11\u4ee3\u7801\u91cd\u590d**\uff0c\u4f7f\u4ee3\u7801\u66f4\u52a0\u4e00\u81f4\uff0c\u63d0\u5347\u7f16\u8f91\u5668\u652f\u6301\u7b49\u3002</p> <p>\u8fd9\u4f7f\u5f97 SQLModel \u6210\u4e3a\u5728 FastAPI \u5e94\u7528\u4e2d\u5904\u7406 SQL \u6570\u636e\u5e93\u7684\u5b8c\u7f8e\u7ec4\u5408\u3002\ud83d\ude80</p> <p>\u60a8\u5c06\u5728\u6559\u7a0b\u7684\u540e\u7eed\u90e8\u5206\u5b66\u4e60\u66f4\u591a\u5173\u4e8e\u4e0d\u540c\u6a21\u578b\u7ec4\u5408\u7684\u5185\u5bb9\u3002</p>"},{"location":"features/#sqlalchemy","title":"\u57fa\u4e8e SQLAlchemy","text":"<p>SQLModel \u540c\u6837\u57fa\u4e8e SQLAlchemy\uff0c\u6240\u6709\u529f\u80fd\u7684\u5e95\u5c42\u5b9e\u73b0\u90fd\u4f9d\u8d56\u5b83\u3002</p> <p>\u672c\u8d28\u4e0a\uff0c\u2728 \u4e00\u4e2a SQLModel \u6a21\u578b\u4e5f\u662f\u4e00\u4e2a SQLAlchemy \u6a21\u578b\u3002\u2728</p> <p>\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u4ed8\u51fa\u4e86**\u5927\u91cf**\u7684\u7814\u7a76\u4e0e\u52aa\u529b\u3002\u5c24\u5176\u662f\u5728\u8ba9\u4e00\u4e2a\u6a21\u578b\u540c\u65f6\u6210\u4e3a **SQLAlchemy \u6a21\u578b\u548c Pydantic \u6a21\u578b**\u65b9\u9762\u8fdb\u884c\u4e86\u5927\u91cf\u5c1d\u8bd5\u548c\u5b9e\u9a8c\u3002</p> <p>\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u83b7\u5f97 SQLAlchemy \u7684\u6240\u6709\u529f\u80fd\u3001\u7a33\u5065\u6027\u4ee5\u53ca\u5176\u4f5c\u4e3a Python \u4e2d\u6700\u5e7f\u6cdb\u4f7f\u7528\u7684\u6570\u636e\u5e93\u5e93 \u6240\u5e26\u6765\u7684\u53ef\u9760\u6027\u3002</p> <p>SQLModel \u63d0\u4f9b\u4e86\u81ea\u5df1\u7684\u5de5\u5177\u6765 \u63d0\u5347\u5f00\u53d1\u8005\u4f53\u9a8c\uff0c\u4f46\u5e95\u5c42\u5b8c\u5168\u4f9d\u8d56 SQLAlchemy\u3002</p> <p>\u60a8\u751a\u81f3\u53ef\u4ee5\u5c06 SQLModel \u6a21\u578b\u4e0e SQLAlchemy \u6a21\u578b**\u7ed3\u5408\u4f7f\u7528**\u3002</p> <p>SQLModel \u7684\u8bbe\u8ba1\u521d\u8877\u662f\u6ee1\u8db3**\u6700\u5e38\u89c1\u7684\u4f7f\u7528\u573a\u666f**\uff0c\u5e76\u5c3d\u53ef\u80fd\u7b80\u5316\u548c\u65b9\u4fbf\u8fd9\u4e9b\u573a\u666f\u4e0b\u7684\u5f00\u53d1\uff0c\u63d0\u4f9b\u6700\u4f73\u7684\u5f00\u53d1\u8005\u4f53\u9a8c\u3002</p> <p>\u4f46\u5bf9\u4e8e\u4e00\u4e9b\u66f4\u590d\u6742\u3001\u66f4\u7279\u6b8a\u7684\u4f7f\u7528\u573a\u666f\uff0c\u60a8\u4ecd\u7136\u53ef\u4ee5\u76f4\u63a5\u5728 SQLModel \u4e2d\u96c6\u6210 SQLAlchemy\uff0c\u5e76\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528\u5b83\u7684\u6240\u6709\u529f\u80fd\u3002</p>"},{"location":"features/#_4","title":"\u7ecf\u8fc7\u6d4b\u8bd5","text":"<ul> <li>100% \u6d4b\u8bd5\u8986\u76d6\u7387\uff08\u76ee\u524d\u4e3a 97%\uff0c\u5c06\u5728\u672a\u6765\u51e0\u5929/\u51e0\u5468\u5185\u8fbe\u5230 100%\uff09\u3002</li> <li>100% \u7c7b\u578b\u6ce8\u89e3\u7684\u4ee3\u7801\u5e93\u3002</li> </ul>"},{"location":"help/","title":"Help SQLModel - Get Help","text":"<p>Do you like SQLModel?</p> <p>Would you like to help SQLModel, other users, and the author?</p> <p>Or would you like to get help with SQLModel?</p> <p>There are very simple ways to help (several involve just one or two clicks).</p> <p>And there are several ways to get help too.</p>"},{"location":"help/#subscribe-to-the-fastapi-and-friends-newsletter","title":"Subscribe to the FastAPI and Friends newsletter","text":"<p>You can subscribe to the (infrequent) FastAPI and friends newsletter to stay updated about:</p> <ul> <li>News about FastAPI and friends, including SQLModel \ud83d\ude80</li> <li>Guides \ud83d\udcdd</li> <li>Features \u2728</li> <li>Breaking changes \ud83d\udea8</li> <li>Tips and tricks \u2705</li> </ul>"},{"location":"help/#star-sqlmodel-in-github","title":"Star SQLModel in GitHub","text":"<p>You can \"star\" SQLModel in GitHub (clicking the star button at the top right): https://github.com/fastapi/sqlmodel. \u2b50\ufe0f</p> <p>By adding a star, other users will be able to find it more easily and see that it has been already useful for others.</p>"},{"location":"help/#watch-the-github-repository-for-releases","title":"Watch the GitHub repository for releases","text":"<p>You can \"watch\" SQLModel in GitHub (clicking the \"watch\" button at the top right): https://github.com/fastapi/sqlmodel. \ud83d\udc40</p> <p>There you can select \"Releases only\".</p> <p>By doing it, you will receive notifications (in your email) whenever there's a new release (a new version) of SQLModel with bug fixes and new features.</p>"},{"location":"help/#connect-with-the-author","title":"Connect with the author","text":"<p>You can connect with me (Sebasti\u00e1n Ram\u00edrez / <code>tiangolo</code>), the author.</p> <p>You can:</p> <ul> <li>Follow me on GitHub.<ul> <li>See other Open Source projects I have created that could help you.</li> <li>Follow me to see when I create a new Open Source project.</li> </ul> </li> <li>Follow me on Twitter.<ul> <li>Tell me how you use SQLModel (I love to hear that).</li> <li>Hear when I make announcements or release new tools.</li> </ul> </li> <li>Connect with me on Linkedin.<ul> <li>Hear when I make announcements or release new tools (although I use Twitter more often \ud83e\udd37\u200d\u2642).</li> </ul> </li> <li>Read what I write (or follow me) on Dev.to or Medium.<ul> <li>Read other ideas, articles, and read about tools I have created.</li> <li>Follow me to read when I publish something new.</li> </ul> </li> </ul>"},{"location":"help/#tweet-about-sqlmodel","title":"Tweet about SQLModel","text":"<p>Tweet about SQLModel and let me and others know why you like it. \ud83c\udf89</p> <p>I love to hear about how SQLModel is being used, what you have liked in it, in which project/company are you using it, etc.</p>"},{"location":"help/#help-others-with-questions-in-github","title":"Help others with questions in GitHub","text":"<p>You can try and help others with their questions in:</p> <ul> <li>GitHub Discussions</li> <li>GitHub Issues</li> </ul> <p>In many cases you might already know the answer for those questions. \ud83e\udd13</p> <p>Just remember, the most important point is: try to be kind. People come with their frustrations and in many cases don't ask in the best way, but try as best as you can to be kind. \ud83e\udd17</p> <p>The idea is for the SQLModel community to be kind and welcoming. At the same time, don't accept bullying or disrespectful behavior towards others. We have to take care of each other.</p> <p>Here's how to help others with questions (in discussions or issues):</p>"},{"location":"help/#understand-the-question","title":"Understand the question","text":"<ul> <li> <p>Check if you can understand what is the purpose and use case of the person asking.</p> </li> <li> <p>Then check if the question (the vast majority are questions) is clear.</p> </li> <li> <p>In many cases the question asked is about an imaginary solution from the user, but there might be a better one. If you can understand the problem and use case better, you might be able to suggest a better alternative solution.</p> </li> <li> <p>If you can't understand the question, ask for more details.</p> </li> </ul>"},{"location":"help/#reproduce-the-problem","title":"Reproduce the problem","text":"<p>For most of the cases and most of the questions there's something related to the person's original code.</p> <p>In many cases they will only copy a fragment of the code, but that's not enough to reproduce the problem.</p> <ul> <li> <p>You can ask them to provide a minimal, reproducible, example, that you can copy-paste and run locally to see the same error or behavior they are seeing, or to understand their use case better.</p> </li> <li> <p>If you are feeling too generous, you can try to create an example like that yourself, just based on the description of the problem. Just have in mind that this might take a lot of time and it might be better to ask them to clarify the problem first.</p> </li> </ul>"},{"location":"help/#suggest-solutions","title":"Suggest solutions","text":"<ul> <li> <p>After being able to understand the question, you can give them a possible answer.</p> </li> <li> <p>In many cases, it's better to understand their underlying problem or use case, because there might be a better way to solve it than what they are trying to do.</p> </li> </ul>"},{"location":"help/#ask-to-close","title":"Ask to close","text":"<p>If they reply, there's a high chance you would have solved their problem, congrats, you're a hero! \ud83e\uddb8</p> <ul> <li> <p>Now, if that solved their problem, you can ask them to:</p> <ul> <li>In GitHub Discussions: mark the comment as the answer.</li> <li>In GitHub Issues: close the issue**.</li> </ul> </li> </ul>"},{"location":"help/#watch-the-github-repository","title":"Watch the GitHub repository","text":"<p>You can \"watch\" SQLModel in GitHub (clicking the \"watch\" button at the top right): https://github.com/fastapi/sqlmodel. \ud83d\udc40</p> <p>If you select \"Watching\" instead of \"Releases only\" you will receive notifications when someone creates a new issue or question. You can also specify that you only want to be notified about new issues, or discussions, or PRs, etc.</p> <p>Then you can try and help them solve those questions.</p>"},{"location":"help/#ask-questions","title":"Ask Questions","text":"<p>You can create a new question in the GitHub repository, for example to:</p> <ul> <li>Ask a question or ask about a problem.</li> <li>Suggest a new feature.</li> </ul> <p>Note: if you do it, then I'm going to ask you to also help others. \ud83d\ude09</p>"},{"location":"help/#review-pull-requests","title":"Review Pull Requests","text":"<p>You can help me review pull requests from others.</p> <p>Again, please try your best to be kind. \ud83e\udd17</p> <p>Here's what to have in mind and how to review a pull request:</p>"},{"location":"help/#understand-the-problem","title":"Understand the problem","text":"<ul> <li> <p>First, make sure you understand the problem that the pull request is trying to solve. It might have a longer discussion in a GitHub Discussion or issue.</p> </li> <li> <p>There's also a good chance that the pull request is not actually needed because the problem can be solved in a different way. Then you can suggest or ask about that.</p> </li> </ul>"},{"location":"help/#dont-worry-about-style","title":"Don't worry about style","text":"<ul> <li> <p>Don't worry too much about things like commit message styles, I will squash and merge customizing the commit manually.</p> </li> <li> <p>Also don't worry about style rules, there are already automatized tools checking that.</p> </li> </ul> <p>And if there's any other style or consistency need, I'll ask directly for that, or I'll add commits on top with the needed changes.</p>"},{"location":"help/#check-the-code","title":"Check the code","text":"<ul> <li> <p>Check and read the code, see if it makes sense, run it locally and see if it actually solves the problem.</p> </li> <li> <p>Then comment saying that you did that, that's how I will know you really checked it.</p> </li> </ul> <p>Info</p> <p>Unfortunately, I can't simply trust PRs that just have several approvals.</p> <p>Several times it has happened that there are PRs with 3, 5 or more approvals, probably because the description is appealing, but when I check the PRs, they are actually broken, have a bug, or don't solve the problem they claim to solve. \ud83d\ude05</p> <p>So, it's really important that you actually read and run the code, and let me know in the comments that you did. \ud83e\udd13</p> <ul> <li>If the PR can be simplified in a way, you can ask for that, but there's no need to be too picky, there might be a lot of subjective points of view (and I will have my own as well \ud83d\ude48), so it's better if you can focus on the fundamental things.</li> </ul>"},{"location":"help/#tests","title":"Tests","text":"<ul> <li> <p>Help me check that the PR has tests.</p> </li> <li> <p>Check that the tests fail before the PR. \ud83d\udea8</p> </li> <li> <p>Then check that the tests pass after the PR. \u2705</p> </li> <li> <p>Many PRs don't have tests, you can remind them to add tests, or you can even suggest some tests yourself. That's one of the things that consume most time and you can help a lot with that.</p> </li> <li> <p>Then also comment what you tried, that way I'll know that you checked it. \ud83e\udd13</p> </li> </ul>"},{"location":"help/#create-a-pull-request","title":"Create a Pull Request","text":"<p>You can contribute to the source code with Pull Requests, for example:</p> <ul> <li>To fix a typo you found on the documentation.</li> <li>To propose new documentation sections.</li> <li>To fix an existing issue/bug.<ul> <li>Make sure to add tests.</li> </ul> </li> <li>To add a new feature.<ul> <li>Make sure to add tests.</li> <li>Make sure to add documentation if it's relevant.</li> </ul> </li> </ul>"},{"location":"help/#help-maintain-sqlmodel","title":"Help Maintain SQLModel","text":"<p>Help me maintain SQLModel! \ud83e\udd13</p> <p>There's a lot of work to do, and for most of it, YOU can do it.</p> <p>The main tasks that you can do right now are:</p> <ul> <li>Help others with questions in GitHub (see the section above).</li> <li>Review Pull Requests (see the section above).</li> </ul> <p>Those two tasks are what consume time the most. That's the main work of maintaining SQLModel.</p> <p>If you can help me with that, you are helping me maintain SQLModel and making sure it keeps advancing faster and better. \ud83d\ude80</p>"},{"location":"help/#join-the-chat","title":"Join the chat","text":"<p>Join the \ud83d\udc65 FastAPI and Friends Discord chat server \ud83d\udc65 and hang out with others in the community. There's a <code>#sqlmodel</code> channel.</p> <p>Tip</p> <p>For questions, ask them in GitHub Discussions, there's a much better chance you will receive help there.</p> <p>Use the chat only for other general conversations.</p>"},{"location":"help/#dont-use-the-chat-for-questions","title":"Don't use the chat for questions","text":"<p>Have in mind that as chats allow more \"free conversation\", it's easy to ask questions that are too general and more difficult to answer, so, you might not receive answers.</p> <p>In GitHub, the template will guide you to write the right question so that you can more easily get a good answer, or even solve the problem yourself even before asking. And in GitHub I can make sure I always answer everything, even if it takes some time. I can't personally do that with the chat. \ud83d\ude05</p> <p>Conversations in the chat are also not as easily searchable as in GitHub, so questions and answers might get lost in the conversation.</p> <p>On the other side, there are thousands of users in the chat, so there's a high chance you'll find someone to talk to there, almost all the time. \ud83d\ude04</p>"},{"location":"help/#sponsor-the-author","title":"Sponsor the author","text":"<p>You can also financially support the author (me) through GitHub sponsors.</p> <p>There you could buy me a coffee \u2615\ufe0f to say thanks. \ud83d\ude04</p>"},{"location":"help/#sponsor-the-tools-that-power-sqlmodel","title":"Sponsor the tools that power SQLModel","text":"<p>As you have seen in the documentation, SQLModel stands on the shoulders of giants, Pydantic and SQLAlchemy.</p> <p>You can also sponsor:</p> <ul> <li>Samuel Colvin (Pydantic)</li> <li>SQLAlchemy</li> </ul> <p>Thanks! \ud83d\ude80</p>"},{"location":"install/","title":"\u5b89\u88c5 SQLModel","text":"<p>\u521b\u5efa\u4e00\u4e2a\u9879\u76ee\u76ee\u5f55\uff0c\u521b\u5efa\u4e00\u4e2a \u865a\u62df\u73af\u5883\uff0c\u6fc0\u6d3b\u5b83\uff0c\u7136\u540e\u5b89\u88c5 SQLModel\uff0c\u4f8b\u5982\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\uff1a</p> <pre><code>$ pip install sqlmodel\n---&gt; 100%\nSuccessfully installed sqlmodel pydantic sqlalchemy\n</code></pre> <p>\u7531\u4e8e SQLModel \u662f\u5efa\u7acb\u5728 SQLAlchemy \u548c Pydantic \u4e4b\u4e0a\u7684\uff0c\u5f53\u4f60\u5b89\u88c5 <code>sqlmodel</code> \u65f6\uff0c\u5b83\u4eec\u4e5f\u4f1a\u88ab\u81ea\u52a8\u5b89\u88c5\u3002</p>"},{"location":"install/#sqlite","title":"\u5b89\u88c5 SQLite \u6570\u636e\u5e93\u6d4f\u89c8\u5668","text":"<p>\u8bb0\u5f97 SQLite \u662f\u4e00\u4e2a\u5355\u6587\u4ef6\u6570\u636e\u5e93 \u5417\uff1f</p> <p>\u5728\u672c\u6559\u7a0b\u7684\u5927\u591a\u6570\u793a\u4f8b\u4e2d\uff0c\u6211\u5c06\u4f7f\u7528 SQLite\u3002</p> <p>Python \u96c6\u6210\u4e86\u5bf9 SQLite \u7684\u652f\u6301\uff0c\u5b83\u662f\u4e00\u4e2a\u5355\u4e00\u7684\u6587\u4ef6\uff0c\u53ef\u4ee5\u76f4\u63a5\u4ece Python \u4e2d\u8bfb\u53d6\u548c\u5904\u7406\u3002\u800c\u4e14\u5b83\u4e0d\u9700\u8981 \u5916\u90e8\u6570\u636e\u5e93\u670d\u52a1\u5668\uff0c\u6240\u4ee5\u5b83\u975e\u5e38\u9002\u5408\u7528\u4e8e\u5b66\u4e60\u3002</p> <p>\u4e8b\u5b9e\u4e0a\uff0cSQLite \u5b8c\u5168\u53ef\u4ee5\u5904\u7406\u76f8\u5f53\u5927\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u67d0\u4e9b\u65f6\u5019\uff0c\u4f60\u53ef\u80fd\u4f1a\u60f3\u8fc1\u79fb\u5230\u57fa\u4e8e\u670d\u52a1\u5668\u7684\u6570\u636e\u5e93\uff0c\u6bd4\u5982 PostgreSQL\uff08\u5b83\u4e5f\u662f\u514d\u8d39\u7684\uff09\u3002\u4f46\u73b0\u5728\u6211\u4eec\u4f1a\u7ee7\u7eed\u4f7f\u7528 SQLite\u3002</p> <p>\u5728\u6559\u7a0b\u4e2d\uff0c\u6211\u4f1a\u5c55\u793a SQL \u7247\u6bb5\u548c Python \u793a\u4f8b\u3002\u6211\u5e0c\u671b\uff08\u5e76\u4e14\u9884\u671f \ud83e\uddd0\uff09\u4f60\u80fd\u591f\u5b9e\u9645\u8fd0\u884c\u5b83\u4eec\uff0c\u5e76\u9a8c\u8bc1\u6570\u636e\u5e93\u662f\u5426\u6309\u9884\u671f\u5de5\u4f5c\u5e76\u663e\u793a\u76f8\u540c\u7684\u6570\u636e\u3002</p> <p>\u4e3a\u4e86\u80fd\u591f\u72ec\u7acb\u4e8e Python \u4ee3\u7801\uff08\u5e76\u4e14\u53ef\u80fd\u540c\u65f6\uff09\u81ea\u5df1\u6d4f\u89c8 SQLite \u6587\u4ef6\uff0c\u6211\u63a8\u8350\u4f60\u4f7f\u7528 DB Browser for SQLite\u3002</p> <p>\u5b83\u662f\u4e00\u4e2a\u5f88\u68d2\u4e14\u7b80\u5355\u7684\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u901a\u8fc7\u53cb\u597d\u7684\u7528\u6237\u754c\u9762\u4e0e SQLite \u6570\u636e\u5e93\uff08SQLite \u6587\u4ef6\uff09\u8fdb\u884c\u4ea4\u4e92\u3002</p> <p></p> <p>\u7ee7\u7eed\u524d\u5f80\u5e76 \u5b89\u88c5 DB Browser for SQLite\uff0c\u5b83\u662f\u514d\u8d39\u7684\u3002</p>"},{"location":"install/#_1","title":"\u4e0b\u4e00\u6b65","text":"<p>\u597d\u4e86\uff0c\u5f00\u59cb\u5427\uff01\u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u5f00\u59cb \u6559\u7a0b - \u7528\u6237\u6307\u5357\u3002 \ud83d\ude80</p>"},{"location":"management-tasks/","title":"Repository Management Tasks","text":"<p>These are the tasks that can be performed to manage the SQLModel repository by team members.</p> <p>Tip</p> <p>This section is useful only to a handful of people, team members with permissions to manage the repository. You can probably skip it. \ud83d\ude09</p> <p>...so, you are a team member of SQLModel? Wow, you are so cool! \ud83d\ude0e</p> <p>You can help with everything on Help SQLModel - Get Help the same ways as external contributors. But additionally, there are some tasks that only you (as part of the team) can perform.</p> <p>Here are the general instructions for the tasks you can perform.</p> <p>Thanks a lot for your help. \ud83d\ude47</p>"},{"location":"management-tasks/#be-nice","title":"Be Nice","text":"<p>First of all, be nice. \ud83d\ude0a</p> <p>You probably are super nice if you were added to the team, but it's worth mentioning it. \ud83e\udd13</p>"},{"location":"management-tasks/#when-things-are-difficult","title":"When Things are Difficult","text":"<p>When things are great, everything is easier, so that doesn't need much instructions. But when things are difficult, here are some guidelines.</p> <p>Try to find the good side. In general, if people are not being unfriendly, try to thank their effort and interest, even if you disagree with the main subject (discussion, PR), just thank them for being interested in the project, or for having dedicated some time to try to do something.</p> <p>It's difficult to convey emotion in text, use emojis to help. \ud83d\ude05</p> <p>In discussions and PRs, in many cases, people bring their frustration and show it without filter, in many cases exaggerating, complaining, being entitled, etc. That's really not nice, and when it happens, it lowers our priority to solve their problems. But still, try to breath, and be gentle with your answers.</p> <p>Try to avoid using bitter sarcasm or potentially passive-aggressive comments. If something is wrong, it's better to be direct (try to be gentle) than sarcastic.</p> <p>Try to be as specific and objective as possible, avoid generalizations.</p> <p>For conversations that are more difficult, for example to reject a PR, you can ask me (@tiangolo) to handle it directly.</p>"},{"location":"management-tasks/#edit-pr-titles","title":"Edit PR Titles","text":"<ul> <li>Edit the PR title to start with an emoji from gitmoji.<ul> <li>Use the emoji character, not the GitHub code. So, use <code>\ud83d\udc1b</code> instead of <code>:bug:</code>. This is so that it shows up correctly outside of GitHub, for example in the release notes.</li> </ul> </li> <li>Start the title with a verb. For example <code>Add</code>, <code>Refactor</code>, <code>Fix</code>, etc. This way the title will say the action that the PR does. Like <code>Add support for teleporting</code>, instead of <code>Teleporting wasn't working, so this PR fixes it</code>.</li> <li>Edit the text of the PR title to start in \"imperative\", like giving an order. So, instead of <code>Adding support for teleporting</code> use <code>Add support for teleporting</code>.</li> <li>Try to make the title descriptive about what it achieves. If it's a feature, try to describe it, for example <code>Add support for teleporting</code> instead of <code>Create TeleportAdapter class</code>.</li> <li>Do not finish the title with a period (<code>.</code>).</li> </ul> <p>Once the PR is merged, a GitHub Action (latest-changes) will use the PR title to update the latest changes automatically.</p> <p>So, having a nice PR title will not only look nice in GitHub, but also in the release notes. \ud83d\udcdd</p>"},{"location":"management-tasks/#add-labels-to-prs","title":"Add Labels to PRs","text":"<p>The same GitHub Action latest-changes uses one label in the PR to decide the section in the release notes to put this PR in.</p> <p>Make sure you use a supported label from the latest-changes list of labels:</p> <ul> <li><code>breaking</code>: Breaking Changes<ul> <li>Existing code will break if they update the version without changing their code. This rarely happens, so this label is not frequently used.</li> </ul> </li> <li><code>security</code>: Security Fixes<ul> <li>This is for security fixes, like vulnerabilities. It would almost never be used.</li> </ul> </li> <li><code>feature</code>: Features<ul> <li>New features, adding support for things that didn't exist before.</li> </ul> </li> <li><code>bug</code>: Fixes<ul> <li>Something that was supported didn't work, and this fixes it. There are many PRs that claim to be bug fixes because the user is doing something in an unexpected way that is not supported, but they considered it what should be supported by default. Many of these are actually features or refactors. But in some cases there's an actual bug.</li> </ul> </li> <li><code>refactor</code>: Refactors<ul> <li>This is normally for changes to the internal code that don't change the behavior. Normally it improves maintainability, or enables future features, etc.</li> </ul> </li> <li><code>upgrade</code>: Upgrades<ul> <li>This is for upgrades to direct dependencies from the project, or extra optional dependencies, normally in <code>pyproject.toml</code>. So, things that would affect final users, they would end up receiving the upgrade in their code base once they update. But this is not for upgrades to internal dependencies used for development, testing, docs, etc. Those internal dependencies, normally in <code>requirements.txt</code> files or GitHub Action versions should be marked as <code>internal</code>, not <code>upgrade</code>.</li> </ul> </li> <li><code>docs</code>: Docs<ul> <li>Changes in docs. This includes updating the docs, fixing typos. But it doesn't include changes to translations.</li> <li>You can normally quickly detect it by going to the \"Files changed\" tab in the PR and checking if the updated file(s) starts with <code>docs/en/docs</code>. The original version of the docs is always in English, so in <code>docs/en/docs</code>.</li> </ul> </li> <li><code>internal</code>: Internal<ul> <li>Use this for changes that only affect how the repo is managed. For example upgrades to internal dependencies, changes in GitHub Actions or scripts, etc.</li> </ul> </li> </ul> <p>Tip</p> <p>Some tools like Dependabot, will add some labels, like <code>dependencies</code>, but have in mind that this label is not used by the <code>latest-changes</code> GitHub Action, so it won't be used in the release notes. Please make sure one of the labels above is added.</p>"},{"location":"management-tasks/#review-prs","title":"Review PRs","text":"<p>If a PR doesn't explain what it does or why, ask for more information.</p> <p>A PR should have a specific use case that it is solving.</p> <ul> <li>If the PR is for a feature, it should have docs.<ul> <li>Unless it's a feature we want to discourage, like support for a corner case that we don't want users to use.</li> </ul> </li> <li>The docs should include a source example file, not write Python directly in Markdown.</li> <li>If the source example(s) file can have different syntax for Python 3.8, 3.9, 3.10, there should be different versions of the file, and they should be shown in tabs in the docs.</li> <li>There should be tests testing the source example.</li> <li>Before the PR is applied, the new tests should fail.</li> <li>After applying the PR, the new tests should pass.</li> <li>Coverage should stay at 100%.</li> <li>If you see the PR makes sense, or we discussed it and considered it should be accepted, you can add commits on top of the PR to tweak it, to add docs, tests, format, refactor, remove extra files, etc.</li> <li>Feel free to comment in the PR to ask for more information, to suggest changes, etc.</li> <li>Once you think the PR is ready, move it in the internal GitHub project for me to review it.</li> </ul>"},{"location":"management-tasks/#dependabot-prs","title":"Dependabot PRs","text":"<p>Dependabot will create PRs to update dependencies for several things, and those PRs all look similar, but some are way more delicate than others.</p> <ul> <li>If the PR is for a direct dependency, so, Dependabot is modifying <code>pyproject.toml</code>, don't merge it. \ud83d\ude31 Let me check it first. There's a good chance that some additional tweaks or updates are needed.</li> <li>If the PR updates one of the internal dependencies, for example it's modifying <code>requirements.txt</code> files, or GitHub Action versions, if the tests are passing, the release notes (shown in a summary in the PR) don't show any obvious potential breaking change, you can merge it. \ud83d\ude0e</li> </ul>"},{"location":"management-tasks/#mark-github-discussions-answers","title":"Mark GitHub Discussions Answers","text":"<p>When a question in GitHub Discussions has been answered, mark the answer by clicking \"Mark as answer\".</p> <p>Many of the current Discussion Questions were migrated from old issues. Many have the label <code>answered</code>, that means they were answered when they were issues, but now in GitHub Discussions, it's not known what is the actual response from the messages.</p> <p>You can filter discussions by <code>Questions</code> that are <code>Unanswered</code>.</p>"},{"location":"management/","title":"Repository Management","text":"<p>Here's a short description of how the SQLModel repository is managed and maintained.</p>"},{"location":"management/#owner","title":"Owner","text":"<p>I, @tiangolo, am the creator and owner of the SQLModel repository. \ud83e\udd13</p> <p>I normally give the final review to each PR before merging them. I make the final decisions on the project, I'm the BDFL. \ud83d\ude05</p>"},{"location":"management/#team","title":"Team","text":"<p>There's a team of people that help manage and maintain the project. \ud83d\ude0e</p> <p>They have different levels of permissions and specific instructions.</p> <p>Some of the tasks they can perform include:</p> <ul> <li>Adding labels to PRs.</li> <li>Editing PR titles.</li> <li>Adding commits on top of PRs to tweak them.</li> <li>Mark answers in GitHub Discussions questions, etc.</li> <li>Merge some specific types of PRs.</li> </ul> <p>Joining the team is by invitation only, and I could update or remove permissions, instructions, or membership.</p>"},{"location":"management/#team-members","title":"Team Members","text":"<p>This is the current list of team members. \ud83d\ude0e</p> @tiangolo @estebanx64 @alejsdev <p>Additional to them, there's a large community of people helping each other and getting involved in the projects in different ways.</p>"},{"location":"management/#external-contributions","title":"External Contributions","text":"<p>External contributions are very welcome and appreciated, including answering questions, submitting PRs, etc. \ud83d\ude47\u200d\u2642\ufe0f</p> <p>There are many ways to help maintain SQLModel.</p>"},{"location":"release-notes/","title":"Release Notes","text":""},{"location":"release-notes/#latest-changes","title":"Latest Changes","text":""},{"location":"release-notes/#refactors","title":"Refactors","text":"<ul> <li>\ud83d\udea8 Fix types for new Pydantic. PR #1131 by @tiangolo.</li> </ul>"},{"location":"release-notes/#docs","title":"Docs","text":"<ul> <li>\u270f\ufe0f Fix typo in the release notes of v0.0.22. PR #1195 by @PipeKnight.</li> <li>\ud83d\udcdd Update includes for <code>docs/advanced/uuid.md</code>. PR #1151 by @tiangolo.</li> <li>\ud83d\udcdd Update includes for <code>docs/tutorial/create-db-and-table.md</code>. PR #1149 by @tiangolo.</li> <li>\ud83d\udcdd Fix internal links in docs. PR #1148 by @tiangolo.</li> <li>\u270f\ufe0f Fix typo in documentation. PR #1106 by @Solipsistmonkey.</li> <li>\ud83d\udcdd Remove highlights in <code>indexes.md</code> . PR #1100 by @alejsdev.</li> </ul>"},{"location":"release-notes/#internal","title":"Internal","text":"<ul> <li>\u2b06\ufe0f Upgrade markdown-include-variants to version 0.0.3. PR #1152 by @tiangolo.</li> <li>\ud83d\udc77 Update issue manager workflow. PR #1137 by @alejsdev.</li> <li>\ud83d\udc77 Fix smokeshow, checkout files on CI. PR #1136 by @tiangolo.</li> <li>\ud83d\udc77 Use uv in CI. PR #1135 by @tiangolo.</li> <li>\u2795 Add docs dependency markdown-include-variants. PR #1129 by @tiangolo.</li> <li>\ud83d\udd28 Update script to standardize format. PR #1130 by @tiangolo.</li> <li>\ud83d\udc77 Update <code>labeler.yml</code>. PR #1128 by @tiangolo.</li> <li>\ud83d\udc77 Update worfkow deploy-docs-notify URL. PR #1126 by @tiangolo.</li> <li>\ud83d\udc77 Upgrade Cloudflare GitHub Action. PR #1124 by @tiangolo.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #1097 by @pre-commit-ci[bot].</li> <li>\u2b06 Bump tiangolo/issue-manager from 0.5.0 to 0.5.1. PR #1107 by @dependabot[bot].</li> <li>\ud83d\udc77 Update <code>issue-manager.yml</code>. PR #1103 by @tiangolo.</li> <li>\ud83d\udc77 Fix coverage processing in CI, one name per matrix run. PR #1104 by @tiangolo.</li> <li>\ud83d\udc9a Set <code>include-hidden-files</code> to <code>True</code> when using the <code>upload-artifact</code> GH action. PR #1098 by @svlandeg.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #1088 by @pre-commit-ci[bot].</li> </ul>"},{"location":"release-notes/#0022","title":"0.0.22","text":""},{"location":"release-notes/#fixes","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix support for types with <code>Optional[Annotated[x, f()]]</code>, e.g. <code>id: Optional[pydantic.UUID4]</code>. PR #1093 by @tiangolo.</li> </ul>"},{"location":"release-notes/#docs_1","title":"Docs","text":"<ul> <li>\u270f\ufe0f Fix a typo in <code>docs/virtual-environments.md</code>. PR #1085 by @tiangolo.</li> <li>\ud83d\udcdd Add docs for virtual environments and environment variables, update contributing. PR #1082 by @tiangolo.</li> <li>\ud83d\udcdd Add docs about repo management and team. PR #1059 by @tiangolo.</li> <li>\u270f\ufe0f Fix typo in <code>cascade_delete</code> docs. PR #1030 by @tiangolo.</li> </ul>"},{"location":"release-notes/#internal_1","title":"Internal","text":"<ul> <li>\u2705 Refactor test_enums to make them independent of previous imports. PR #1095 by @tiangolo.</li> <li>\ud83d\udc77 Update <code>latest-changes</code> GitHub Action. PR #1087 by @tiangolo.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #1028 by @pre-commit-ci[bot].</li> <li>\u2b06 Bump ruff from 0.4.7 to 0.6.2. PR #1081 by @dependabot[bot].</li> <li>\ud83d\udd27 Update lint script. PR #1084 by @tiangolo.</li> <li>\ud83d\udc77 Update Python version for coverage. PR #1083 by @tiangolo.</li> <li>\ud83d\udd27 Update coverage config files. PR #1077 by @tiangolo.</li> <li>\ud83d\udd27 Add URLs to <code>pyproject.toml</code>, show up in PyPI. PR #1074 by @tiangolo.</li> <li>\ud83d\udc77 Do not sync labels as it overrides manually added labels. PR #1073 by @tiangolo.</li> <li>\ud83d\udc77 Update configs for GitHub Action labeler, to add only one label. PR #1072 by @tiangolo.</li> <li>\ud83d\udc77 Update labeler GitHub Actions permissions and dependencies. PR #1071 by @tiangolo.</li> <li>\ud83d\udc77 Add GitHub Action label-checker. PR #1069 by @tiangolo.</li> <li>\ud83d\udc77 Add GitHub Action labeler. PR #1068 by @tiangolo.</li> <li>\ud83d\udc77 Update GitHub Action add-to-project. PR #1067 by @tiangolo.</li> <li>\ud83d\udc77 Add GitHub Action add-to-project. PR #1066 by @tiangolo.</li> <li>\ud83d\udcdd Update admonitions in annotations. PR #1065 by @tiangolo.</li> <li>\ud83d\udcdd Update links from github.com/tiangolo/sqlmodel to github.com/fastapi/sqlmodel. PR #1064 by @tiangolo.</li> <li>\ud83d\udd27 Update members. PR #1063 by @tiangolo.</li> <li>\ud83d\udc84 Add dark-mode logo. PR #1061 by @tiangolo.</li> <li>\ud83d\udd28 Update docs.py script to enable dirty reload conditionally. PR #1060 by @tiangolo.</li> <li>\ud83d\udd27 Update MkDocs previews. PR #1058 by @tiangolo.</li> <li>\ud83d\udc84 Update Termynal line-height. PR #1057 by @tiangolo.</li> <li>\ud83d\udc77 Upgrade build docs configs. PR #1047 by @tiangolo.</li> <li>\ud83d\udc77 Add alls-green for test-redistribute. PR #1055 by @tiangolo.</li> <li>\ud83d\udc77 Update docs-previews to handle no docs changes. PR #1056 by @tiangolo.</li> <li>\ud83d\udc77\ud83c\udffb Show docs deployment status and preview URLs in comment. PR #1054 by @tiangolo.</li> <li>\ud83d\udd27 Enable auto dark mode. PR #1046 by @tiangolo.</li> <li>\ud83d\udc77 Update issue-manager. PR #1045 by @tiangolo.</li> <li>\ud83d\udc77 Update issue-manager.yml GitHub Action permissions. PR #1040 by @tiangolo.</li> <li>\u267b\ufe0f Refactor Deploy Docs GitHub Action to be a script and update token preparing for org. PR #1039 by @tiangolo.</li> </ul>"},{"location":"release-notes/#0021","title":"0.0.21","text":""},{"location":"release-notes/#features","title":"Features","text":"<ul> <li>\u2728 Add support for cascade delete relationships: <code>cascade_delete</code>, <code>ondelete</code>, and <code>passive_deletes</code>. Initial PR #983 by @estebanx64.</li> <li>New docs at: Cascade Delete Relationships.</li> </ul>"},{"location":"release-notes/#docs_2","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update docs . PR #1003 by @alejsdev.</li> </ul>"},{"location":"release-notes/#internal_2","title":"Internal","text":"<ul> <li>\u2b06 Bump actions/cache from 3 to 4. PR #783 by @dependabot[bot].</li> <li>\u2b06 Bump cairosvg from 2.7.0 to 2.7.1. PR #919 by @dependabot[bot].</li> <li>\u2b06 Bump jinja2 from 3.1.3 to 3.1.4. PR #974 by @dependabot[bot].</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.8.11 to 1.9.0. PR #987 by @dependabot[bot].</li> <li>\u2b06 Bump mkdocstrings[python] from 0.23.0 to 0.25.1. PR #927 by @dependabot[bot].</li> <li>\u2b06 Bump dorny/paths-filter from 2 to 3. PR #972 by @dependabot[bot].</li> </ul>"},{"location":"release-notes/#0020","title":"0.0.20","text":""},{"location":"release-notes/#features_1","title":"Features","text":"<ul> <li>\u2728 Add official UUID support, docs and tests, internally using new SQLAlchemy 2.0 types. Initial PR #992 by @estebanx64.</li> <li>New docs in the Advanced User Guide: UUID (Universally Unique Identifiers).</li> </ul>"},{"location":"release-notes/#docs_3","title":"Docs","text":"<ul> <li>\u270f\ufe0f Fix internal link in <code>docs/tutorial/create-db-and-table.md</code>. PR #911 by @tfpgh.</li> <li>\u270f\ufe0f Add missing step in <code>create-db-and-table-with-db-browser.md</code>. PR #976 by @alejsdev.</li> <li>\u270f\ufe0f Fix typo in <code>docs/tutorial</code>. PR #943 by @luco17.</li> <li>\u270f\ufe0f Fix typo in <code>sqlmodel/_compat.py</code>. PR #950 by @Highfire1.</li> <li>\u270f\ufe0f Update pip installation command in tutorial. PR #975 by @alejsdev.</li> <li>\u270f\ufe0f Fix typo in <code>docs/tutorial/relationship-attributes/index.md</code>. PR #880 by @UncleGoogle.</li> </ul>"},{"location":"release-notes/#internal_3","title":"Internal","text":"<ul> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #979 by @pre-commit-ci[bot].</li> <li>\ud83d\udd28 Update docs Termynal scripts to not include line nums for local dev. PR #1018 by @tiangolo.</li> </ul>"},{"location":"release-notes/#0019","title":"0.0.19","text":""},{"location":"release-notes/#fixes_1","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix pydantic <code>EmailStr</code> support and <code>max_length</code> in several String subclasses. PR #966 by @estebanx64.</li> <li>\ud83d\udc1b Fix set varchar limit when <code>max_length</code> is set on Pydantic models using Pydantic v2. PR #963 by @estebanx64.</li> </ul>"},{"location":"release-notes/#refactors_1","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Refactor generate select template to isolate templated code to the minimum. PR #967 by @tiangolo.</li> </ul>"},{"location":"release-notes/#upgrades","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Update minimum SQLAlchemy version to 2.0.14 as that one includes <code>TryCast</code> used internally. PR #964 by @tiangolo.</li> </ul>"},{"location":"release-notes/#docs_4","title":"Docs","text":"<ul> <li>\u270f\ufe0f Fix broken link to <code>@dataclass_transform</code> (now PEP 681) in <code>docs/features.md</code>. PR #753 by @soof-golan.</li> </ul>"},{"location":"release-notes/#internal_4","title":"Internal","text":"<ul> <li>\u2b06\ufe0f Upgrade Ruff and Black. PR #968 by @tiangolo.</li> <li>\u2b06 Bump tiangolo/issue-manager from 0.4.1 to 0.5.0. PR #922 by @dependabot[bot].</li> <li>\ud83d\udccc Pin typing-extensions in tests for compatiblity with Python 3.8, dirty-equals, Pydantic. PR #965 by @tiangolo.</li> <li>\ud83d\udc77 Update GitHub Actions to download and upload artifacts. PR #936 by @tiangolo.</li> <li>\ud83d\udc77 Tweak CI for test-redistribute, add needed env vars for slim. PR #929 by @tiangolo.</li> </ul>"},{"location":"release-notes/#0018","title":"0.0.18","text":""},{"location":"release-notes/#internal_5","title":"Internal","text":"<ul> <li>\u2728 Add <code>sqlmodel-slim</code> setup. PR #916 by @tiangolo.</li> </ul> <p>In the future SQLModel will include the standard default recommended packages, and <code>sqlmodel-slim</code> will come without those recommended standard packages and with a group of optional dependencies <code>sqlmodel-slim[standard]</code>, equivalent to <code>sqlmodel</code>, for those that want to opt out of those packages.</p> <ul> <li>\ud83d\udd27 Re-enable MkDocs Material Social plugin. PR #915 by @tiangolo.</li> </ul>"},{"location":"release-notes/#0017","title":"0.0.17","text":""},{"location":"release-notes/#refactors_2","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Refactor types to properly support Pydantic 2.7. PR #913 by @tiangolo.</li> </ul>"},{"location":"release-notes/#docs_5","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update ModelRead to ModelPublic documentation and examples. PR #885 by @estebanx64.</li> <li>\u2728 Add source examples for Python 3.10 and 3.9 with updated syntax. PR #842 by @tiangolo and @estebanx64.</li> </ul>"},{"location":"release-notes/#internal_6","title":"Internal","text":"<ul> <li>\u2b06 Bump actions/setup-python from 4 to 5. PR #733 by @dependabot[bot].</li> <li>\ud83d\udd28 Update internal scripts and remove unused ones. PR #914 by @tiangolo.</li> <li>\ud83d\udd27 Migrate from Poetry to PDM for the internal build config. PR #912 by @tiangolo.</li> <li>\ud83d\udd27 Update MkDocs, disable cards while I can upgrade to the latest MkDocs Material, that fixes an issue with social cards. PR #888 by @tiangolo.</li> <li>\ud83d\udc77 Add cron to run test once a week on monday. PR #869 by @estebanx64.</li> <li>\u2b06\ufe0f Upgrade Ruff version and configs. PR #859 by @tiangolo.</li> <li>\ud83d\udd25 Remove Jina QA Bot as it has been discontinued. PR #840 by @tiangolo.</li> </ul>"},{"location":"release-notes/#0016","title":"0.0.16","text":""},{"location":"release-notes/#features_2","title":"Features","text":"<ul> <li>\u2728 Add new method <code>.sqlmodel_update()</code> to update models in place, including an <code>update</code> parameter for extra data. And fix implementation for the (now documented) <code>update</code> parameter for <code>.model_validate()</code>. PR #804 by @tiangolo.<ul> <li>Updated docs: Update Data with FastAPI.</li> <li>New docs: Update with Extra Data (Hashed Passwords) with FastAPI.</li> </ul> </li> </ul>"},{"location":"release-notes/#0015","title":"0.0.15","text":""},{"location":"release-notes/#fixes_2","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix class initialization compatibility with Pydantic and SQLModel, fixing errors revealed by the latest Pydantic. PR #807 by @tiangolo.</li> </ul>"},{"location":"release-notes/#internal_7","title":"Internal","text":"<ul> <li>\u2b06 Bump tiangolo/issue-manager from 0.4.0 to 0.4.1. PR #775 by @dependabot[bot].</li> <li>\ud83d\udc77 Fix GitHub Actions build docs filter paths for GitHub workflows. PR #738 by @tiangolo.</li> </ul>"},{"location":"release-notes/#0014","title":"0.0.14","text":""},{"location":"release-notes/#features_3","title":"Features","text":"<ul> <li>\u2728 Add support for Pydantic v2 (while keeping support for v1 if v2 is not available). PR #722 by @tiangolo including initial work in PR #699 by @AntonDeMeester.</li> </ul>"},{"location":"release-notes/#0013","title":"0.0.13","text":""},{"location":"release-notes/#fixes_3","title":"Fixes","text":"<ul> <li>\u267b\ufe0f Refactor type generation of selects re-order to prioritize models to optimize editor support. PR #718 by @tiangolo.</li> </ul>"},{"location":"release-notes/#refactors_3","title":"Refactors","text":"<ul> <li>\ud83d\udd07 Do not raise deprecation warnings for execute as it's automatically used internally. PR #716 by @tiangolo.</li> <li>\u2705 Move OpenAPI tests inline to simplify updating them with Pydantic v2. PR #709 by @tiangolo.</li> </ul>"},{"location":"release-notes/#upgrades_1","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Add support for Python 3.11 and Python 3.12. PR #710 by @tiangolo.</li> </ul>"},{"location":"release-notes/#docs_6","title":"Docs","text":"<ul> <li>\u270f\ufe0f Fix typo, simplify single quote/apostrophe character in \"Sister Margaret's\" everywhere in the docs. PR #721 by @tiangolo.</li> <li>\ud83d\udcdd Update docs for Decimal, use proper types. PR #719 by @tiangolo.</li> <li>\ud83d\udcdd Add source examples for Python 3.9 and 3.10. PR #715 by @tiangolo.</li> </ul>"},{"location":"release-notes/#internal_8","title":"Internal","text":"<ul> <li>\ud83d\ude48 Update gitignore, include all coverage files. PR #711 by @tiangolo.</li> <li>\ud83d\udd27 Update config with new pymdown extensions. PR #712 by @tiangolo.</li> <li>\ud83d\udd27 Update docs build setup, add support for sponsors, add sponsor GOVCERT.LU. PR #720 by @tiangolo.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #697 by @pre-commit-ci[bot].</li> <li>\ud83d\udd27 Show line numbers in docs during local development. PR #714 by @tiangolo.</li> <li>\ud83d\udcdd Update details syntax with new pymdown extensions format. PR #713 by @tiangolo.</li> </ul>"},{"location":"release-notes/#0012","title":"0.0.12","text":""},{"location":"release-notes/#features_4","title":"Features","text":"<ul> <li>\u2728 Upgrade SQLAlchemy to 2.0. PR #700 by @tiangolo including initial work in PR #563 by @farahats9.</li> </ul>"},{"location":"release-notes/#internal_9","title":"Internal","text":"<ul> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #686 by @pre-commit-ci[bot].</li> <li>\ud83d\udc77 Upgrade latest-changes GitHub Action. PR #693 by @tiangolo.</li> </ul>"},{"location":"release-notes/#0011","title":"0.0.11","text":""},{"location":"release-notes/#features_5","title":"Features","text":"<ul> <li>\u2728 Add support for passing a custom SQLAlchemy type to <code>Field()</code> with <code>sa_type</code>. PR #505 by @maru0123-2004.<ul> <li>You might consider this a breaking change if you were using an incompatible combination of arguments, those arguments were not taking effect and now you will have a type error and runtime error telling you that.</li> </ul> </li> <li>\u2728 Do not allow invalid combinations of field parameters for columns and relationships, <code>sa_column</code> excludes <code>sa_column_args</code>, <code>primary_key</code>, <code>nullable</code>, etc. PR #681 by @tiangolo.</li> </ul>"},{"location":"release-notes/#docs_7","title":"Docs","text":"<ul> <li>\ud83c\udfa8 Update inline source examples, hide <code>#</code> in annotations (from MkDocs Material). PR #677 by @Matthieu-LAURENT39.</li> </ul>"},{"location":"release-notes/#internal_10","title":"Internal","text":"<ul> <li>\u2b06 Update coverage requirement from ^6.2 to &gt;=6.2,&lt;8.0. PR #663 by @dependabot[bot].</li> <li>\u2b06 Update mkdocs-material requirement from 9.1.21 to 9.2.7. PR #675 by @dependabot[bot].</li> <li>\u2b06\ufe0f Upgrade mypy manually. PR #684 by @tiangolo.</li> <li>\u2b06 Update black requirement from ^22.10.0 to &gt;=22.10,&lt;24.0. PR #664 by @dependabot[bot].</li> <li>\ud83d\udc77 Update CI to build MkDocs Insiders only when the secrets are available, for Dependabot. PR #683 by @tiangolo.</li> </ul>"},{"location":"release-notes/#0010","title":"0.0.10","text":""},{"location":"release-notes/#features_6","title":"Features","text":"<ul> <li>\u2728 Add support for all <code>Field</code> parameters from Pydantic <code>1.9.0</code> and above, make Pydantic <code>1.9.0</code> the minimum required version. PR #440 by @daniil-berg.</li> </ul>"},{"location":"release-notes/#internal_11","title":"Internal","text":"<ul> <li>\ud83d\udd27 Adopt Ruff for formatting. PR #679 by @tiangolo.</li> </ul>"},{"location":"release-notes/#009","title":"0.0.9","text":""},{"location":"release-notes/#breaking-changes","title":"Breaking Changes","text":"<ul> <li>\ud83d\uddd1\ufe0f Deprecate Python 3.6 and upgrade Poetry and Poetry Version Plugin. PR #627 by @tiangolo.</li> </ul>"},{"location":"release-notes/#features_7","title":"Features","text":"<ul> <li>\u2728 Raise a more clear error when a type is not valid. PR #425 by @ddanier.</li> </ul>"},{"location":"release-notes/#fixes_4","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix <code>AsyncSession</code> type annotations for <code>exec()</code>. PR #58 by @Bobronium.</li> <li>\ud83d\udc1b Fix allowing using a <code>ForeignKey</code> directly, remove repeated column construction from <code>SQLModelMetaclass.__init__</code> and upgrade minimum SQLAlchemy to <code>&gt;=1.4.36</code>. PR #443 by @daniil-berg.</li> <li>\ud83d\udc1b Fix enum type checks ordering in <code>get_sqlalchemy_type</code>. PR #669 by @tiangolo.</li> <li>\ud83d\udc1b Fix SQLAlchemy version 1.4.36 breaks SQLModel relationships (#315). PR #461 by @byrman.</li> </ul>"},{"location":"release-notes/#upgrades_2","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade support for SQLAlchemy 1.4.49, update tests. PR #519 by @sandrotosi.</li> <li>\u2b06 Raise SQLAlchemy version requirement to at least <code>1.4.29</code> (related to #434). PR #439 by @daniil-berg.</li> </ul>"},{"location":"release-notes/#docs_8","title":"Docs","text":"<ul> <li>\ud83d\udcdd Clarify description of in-memory SQLite database in <code>docs/tutorial/create-db-and-table.md</code>. PR #601 by @SimonCW.</li> <li>\ud83d\udcdd Tweak wording in <code>docs/tutorial/fastapi/multiple-models.md</code>. PR #674 by @tiangolo.</li> <li>\u270f\ufe0f Fix contributing instructions to run tests, update script name. PR #634 by @PookieBuns.</li> <li>\ud83d\udcdd Update link to docs for intro to databases. PR #593 by @abenezerBelachew.</li> <li>\ud83d\udcdd Update docs, use <code>offset</code> in example with <code>limit</code> and <code>where</code>. PR #273 by @jbmchuck.</li> <li>\ud83d\udcdd Fix docs for Pydantic's fields using <code>le</code> (<code>lte</code> is invalid, use <code>le</code> ). PR #207 by @jrycw.</li> <li>\ud83d\udcdd Update outdated link in <code>docs/db-to-code.md</code>. PR #649 by @MatveyF.</li> <li>\u270f\ufe0f Fix typos found with codespell. PR #520 by @kianmeng.</li> <li>\ud83d\udcdd Fix typos (duplication) in main page. PR #631 by @Mr-DRP.</li> <li>\ud83d\udcdd Update release notes, add second author to PR. PR #429 by @br-follow.</li> <li>\ud83d\udcdd Update instructions about how to make a foreign key required in <code>docs/tutorial/relationship-attributes/define-relationships-attributes.md</code>. PR #474 by @jalvaradosegura.</li> <li>\ud83d\udcdd Update help SQLModel docs. PR #548 by @tiangolo.</li> <li>\u270f\ufe0f Fix typo in internal function name <code>get_sqlachemy_type()</code>. PR #496 by @cmarqu.</li> <li>\u270f\ufe0f Fix typo in docs. PR #446 by @davidbrochart.</li> <li>\u270f\ufe0f Fix typo in <code>docs/tutorial/create-db-and-table.md</code>. PR #477 by @FluffyDietEngine.</li> <li>\u270f\ufe0f Fix small typos in docs. PR #481 by @micuffaro.</li> </ul>"},{"location":"release-notes/#internal_12","title":"Internal","text":"<ul> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #672 by @pre-commit-ci[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.24.2 to 2.28.0. PR #660 by @dependabot[bot].</li> <li>\u2705 Refactor OpenAPI FastAPI tests to simplify updating them later, this moves things around without changes. PR #671 by @tiangolo.</li> <li>\u2b06 Bump actions/checkout from 3 to 4. PR #670 by @dependabot[bot].</li> <li>\ud83d\udd27 Update mypy config, use <code>strict = true</code> instead of manual configs. PR #428 by @michaeloliverx.</li> <li>\u2b06\ufe0f Upgrade MkDocs Material. PR #668 by @tiangolo.</li> <li>\ud83c\udfa8 Update docs format and references with pre-commit and Ruff. PR #667 by @tiangolo.</li> <li>\ud83c\udfa8 Run pre-commit on all files and autoformat. PR #666 by @tiangolo.</li> <li>\ud83d\udc77 Move to Ruff and add pre-commit. PR #661 by @tiangolo.</li> <li>\ud83d\udee0\ufe0f Add <code>CITATION.cff</code> file for academic citations. PR #13 by @sugatoray.</li> <li>\ud83d\udc77 Update docs deployments to Cloudflare. PR #630 by @tiangolo.</li> <li>\ud83d\udc77\u200d\u2642\ufe0f Upgrade CI for docs. PR #628 by @tiangolo.</li> <li>\ud83d\udc77 Update CI debug mode with Tmate. PR #629 by @tiangolo.</li> <li>\ud83d\udc77 Update latest changes token. PR #616 by @tiangolo.</li> <li>\u2b06\ufe0f Upgrade analytics. PR #558 by @tiangolo.</li> <li>\ud83d\udd27 Update new issue chooser to point to GitHub Discussions. PR #546 by @tiangolo.</li> <li>\ud83d\udd27 Add template for GitHub Discussion questions and update issues template. PR #544 by @tiangolo.</li> <li>\ud83d\udc77 Refactor CI artifact upload/download for docs previews. PR #514 by @tiangolo.</li> <li>\u2b06 Bump actions/cache from 2 to 3. PR #497 by @dependabot[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.24.0 to 2.24.2. PR #493 by @dependabot[bot].</li> <li>\ud83d\udd27 Update Smokeshow coverage threshold. PR #487 by @tiangolo.</li> <li>\ud83d\udc77 Move from Codecov to Smokeshow. PR #486 by @tiangolo.</li> <li>\u2b06 Bump actions/setup-python from 2 to 4. PR #411 by @dependabot[bot].</li> <li>\u2b06 Update black requirement from ^21.5-beta.1 to ^22.10.0. PR #460 by @dependabot[bot].</li> <li>\u2795 Add extra dev dependencies for MkDocs Material. PR #485 by @tiangolo.</li> <li>\u2b06 Update mypy requirement from 0.930 to 0.971. PR #380 by @dependabot[bot].</li> <li>\u2b06 Update coverage requirement from ^5.5 to ^6.2. PR #171 by @dependabot[bot].</li> <li>\u2b06 Bump codecov/codecov-action from 2 to 3. PR #415 by @dependabot[bot].</li> <li>\u2b06 Bump actions/upload-artifact from 2 to 3. PR #412 by @dependabot[bot].</li> <li>\u2b06 Update flake8 requirement from ^3.9.2 to ^5.0.4. PR #396 by @dependabot[bot].</li> <li>\u2b06 Update pytest requirement from ^6.2.4 to ^7.0.1. PR #242 by @dependabot[bot].</li> <li>\u2b06 Bump actions/checkout from 2 to 3.1.0. PR #458 by @dependabot[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.9.0 to 2.24.0. PR #470 by @dependabot[bot].</li> <li>\ud83d\udc77 Update Dependabot config. PR #484 by @tiangolo.</li> </ul>"},{"location":"release-notes/#008","title":"0.0.8","text":""},{"location":"release-notes/#fixes_5","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix auto detecting and setting <code>nullable</code>, allowing overrides in field. PR #423 by @JonasKs and @br-follow.</li> <li>\u267b\ufe0f Update <code>expresion.py</code>, sync from Jinja2 template, implement <code>inherit_cache</code> to solve errors like: <code>SAWarning: Class SelectOfScalar will not make use of SQL compilation caching</code>. PR #422 by @tiangolo.</li> </ul>"},{"location":"release-notes/#docs_9","title":"Docs","text":"<ul> <li>\ud83d\udcdd Adjust and clarify docs for <code>docs/tutorial/create-db-and-table.md</code>. PR #426 by @tiangolo.</li> <li>\u270f Fix typo in <code>docs/tutorial/connect/remove-data-connections.md</code>. PR #421 by @VerdantFox.</li> </ul>"},{"location":"release-notes/#007","title":"0.0.7","text":""},{"location":"release-notes/#features_8","title":"Features","text":"<ul> <li>\u2728 Allow setting <code>unique</code> in <code>Field()</code> for a column. PR #83 by @raphaelgibson.</li> <li>\u2728 Update GUID handling to use stdlib <code>UUID.hex</code> instead of an <code>int</code>. PR #26 by @andrewbolster.</li> <li>\u2728 Raise an exception when using a Pydantic field type with no matching SQLAlchemy type. PR #18 by @elben10.</li> <li>\u2b06 Upgrade constrain for SQLAlchemy = \"&gt;=1.4.17,&lt;=1.4.41\". PR #371 by @RobertRosca.</li> <li>\u2728 Add new <code>Session.get()</code> parameter <code>execution_options</code>. PR #302 by @tiangolo.</li> </ul>"},{"location":"release-notes/#fixes_6","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix type annotations for <code>Model.parse_obj()</code>, and <code>Model.validate()</code>. PR #321 by @phi-friday.</li> <li>\ud83d\udc1b Fix <code>Select</code> and <code>SelectOfScalar</code> to inherit cache to avoid warning: <code>SAWarning: Class SelectOfScalar will not make use of SQL compilation caching</code>. PR #234 by @rabinadk1.</li> <li>\ud83d\udc1b Fix handling validators for non-default values. PR #253 by @byrman.</li> <li>\ud83d\udc1b Fix fields marked as \"set\" in models. PR #117 by @statt8900.</li> <li>\ud83d\udc1b Fix Enum handling in SQLAlchemy. PR #165 by @chriswhite199.</li> <li>\ud83d\udc1b Fix setting nullable property of Fields that don't accept <code>None</code>. PR #79 by @van51.</li> <li>\ud83d\udc1b Fix SQLAlchemy version 1.4.36 breaks SQLModel relationships (#315). PR #322 by @byrman.</li> </ul>"},{"location":"release-notes/#docs_10","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update docs for models for updating, <code>id</code> should not be updatable. PR #335 by @kurtportelli.</li> <li>\u270f Fix broken variable/typo in docs for Read Relationships, <code>hero_spider_boy.id</code> =&gt; <code>hero_spider_boy.team_id</code>. PR #106 by @yoannmos.</li> <li>\ud83c\udfa8 Remove unwanted highlight in the docs. PR #233 by @jalvaradosegura.</li> <li>\u270f Fix typos in <code>docs/databases.md</code> and <code>docs/tutorial/index.md</code>. PR #35 by @prrao87.</li> <li>\u270f Fix typo in <code>docs/tutorial/relationship-attributes/define-relationships-attributes.md</code>. PR #239 by @jalvaradosegura.</li> <li>\u270f Fix typo in <code>docs/tutorial/fastapi/simple-hero-api.md</code>. PR #80 by @joemudryk.</li> <li>\u270f Fix typos in multiple files in the docs. PR #400 by @VictorGambarini.</li> <li>\u270f Fix typo in <code>docs/tutorial/code-structure.md</code>. PR #344 by @marciomazza.</li> <li>\u270f Fix typo in <code>docs/db-to-code.md</code>. PR #155 by @gr8jam.</li> <li>\u270f Fix typo in <code>docs/contributing.md</code>. PR #323 by @Fardad13.</li> <li>\u270f Fix typo in <code>docs/tutorial/fastapi/tests.md</code>. PR #265 by @johnhoman.</li> <li>\u270f Fix typo in <code>docs/tutorial/where.md</code>. PR #286 by @jalvaradosegura.</li> <li>\u270f Fix typos in <code>docs/tutorial/fastapi/update.md</code>. PR #268 by @cirrusj.</li> <li>\u270f Fix typo in <code>docs/tutorial/fastapi/simple-hero-api.md</code>. PR #247 by @hao-wang.</li> <li>\u270f Fix typos in <code>docs/tutorial/automatic-id-none-refresh.md</code>, <code>docs/tutorial/fastapi/update.md</code>, <code>docs/tutorial/select.md</code>. PR #185 by @rootux.</li> <li>\u270f Fix typo in <code>docs/databases.md</code>. PR #177 by @seandlg.</li> <li>\u270f Fix typos in <code>docs/tutorial/fastapi/update.md</code>. PR #162 by @wmcgee3.</li> <li>\u270f Fix typos in <code>docs/tutorial/code-structure.md</code>, <code>docs/tutorial/fastapi/multiple-models.md</code>, <code>docs/tutorial/fastapi/simple-hero-api.md</code>, <code>docs/tutorial/many-to-many/index.md</code>. PR #116 by @moonso.</li> <li>\u270f Fix typo in <code>docs/tutorial/fastapi/teams.md</code>. PR #154 by @chrisgoddard.</li> <li>\u270f Fix typo variable in example about relationships and <code>back_populates</code>, always use <code>hero</code> instead of <code>owner</code>. PR #120 by @onionj.</li> <li>\u270f Fix typo in <code>docs/tutorial/fastapi/tests.md</code>. PR #113 by @feanil.</li> <li>\u270f Fix typo in <code>docs/tutorial/where.md</code>. PR #72 by @ZettZet.</li> <li>\u270f Fix typo in <code>docs/tutorial/code-structure.md</code>. PR #91 by @dhiraj.</li> <li>\u270f Fix broken link to newsletter sign-up in <code>docs/help.md</code>. PR #84 by @mborus.</li> <li>\u270f Fix typos in <code>docs/tutorial/many-to-many/create-models-with-link.md</code>. PR #45 by @xginn8.</li> <li>\u270f Fix typo in <code>docs/tutorial/index.md</code>. PR #398 by @ryangrose.</li> </ul>"},{"location":"release-notes/#internal_13","title":"Internal","text":"<ul> <li>\u267b Refactor internal statements to simplify code. PR #53 by @yezz123.</li> <li>\u267b Refactor internal imports to reduce redundancy. PR #272 by @aminalaee.</li> <li>\u2b06 Update development requirement for FastAPI from <code>^0.68.0</code> to <code>^0.68.1</code>. PR #48 by @alucarddelta.</li> <li>\u23ea Revert upgrade Poetry, to make a release that supports Python 3.6 first. PR #417 by @tiangolo.</li> <li>\ud83d\udc77 Add dependabot for GitHub Actions. PR #410 by @tiangolo.</li> <li>\u2b06\ufe0f Upgrade Poetry to version <code>==1.2.0b1</code>. PR #303 by @tiangolo.</li> <li>\ud83d\udc77 Add CI for Python 3.10. PR #305 by @tiangolo.</li> <li>\ud83d\udcdd Add Jina's QA Bot to the docs to help people that want to ask quick questions. PR #263 by @tiangolo.</li> <li>\ud83d\udc77 Upgrade Codecov GitHub Action. PR #304 by @tiangolo.</li> <li>\ud83d\udc9a Only run CI on push when on master, to avoid duplicate runs on PRs. PR #244 by @tiangolo.</li> <li>\ud83d\udd27 Upgrade MkDocs Material and update configs. PR #217 by @tiangolo.</li> <li>\u2b06 Upgrade mypy, fix type annotations. PR #218 by @tiangolo.</li> </ul>"},{"location":"release-notes/#006","title":"0.0.6","text":""},{"location":"release-notes/#breaking-changes_1","title":"Breaking Changes","text":"<p>SQLModel no longer creates indexes by default for every column, indexes are now opt-in. You can read more about it in PR #205.</p> <p>Before this change, if you had a model like this:</p> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, SQLModel\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n</code></pre> <p>...when creating the tables, SQLModel version <code>0.0.5</code> and below, would also create an index for <code>name</code>, one for <code>secret_name</code>, and one for <code>age</code> (<code>id</code> is the primary key, so it doesn't need an additional index).</p> <p>If you depended on having an index for each one of those columns, now you can (and would have to) define them explicitly:</p> <pre><code>class Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str = Field(index=True)\n    age: Optional[int] = Field(default=None, index=True)\n</code></pre> <p>There's a high chance you don't need indexes for all the columns. For example, you might only need indexes for <code>name</code> and <code>age</code>, but not for <code>secret_name</code>. In that case, you could define the model as:</p> <pre><code>class Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n</code></pre> <p>If you already created your database tables with SQLModel using versions <code>0.0.5</code> or below, it would have also created those indexes in the database. In that case, you might want to manually drop (remove) some of those indexes, if they are unnecessary, to avoid the extra cost in performance and space.</p> <p>Depending on the database you are using, there will be a different way to find the available indexes.</p> <p>For example, let's say you no longer need the index for <code>secret_name</code>. You could check the current indexes in the database and find the one for <code>secret_name</code>, it could be named <code>ix_hero_secret_name</code>. Then you can remove it with SQL:</p> <pre><code>DROP INDEX ix_hero_secret_name\n</code></pre> <p>or</p> <pre><code>DROP INDEX ix_hero_secret_name ON hero;\n</code></pre> <p>Here's the new, extensive documentation explaining indexes and how to use them: Indexes - Optimize Queries.</p>"},{"location":"release-notes/#docs_11","title":"Docs","text":"<ul> <li>\u2728 Document indexes and make them opt-in. Here's the new documentation: Indexes - Optimize Queries. This is the same change described above in Breaking Changes. PR #205 by @tiangolo.</li> <li>\u270f Fix typo in FastAPI tutorial. PR #192 by @yaquelinehoyos.</li> <li>\ud83d\udcdd Add links to the license file. PR #29 by @sobolevn.</li> <li>\u270f Fix typos in docs titles. PR #28 by @Batalex.</li> <li>\u270f Fix multiple typos and some rewording. PR #22 by @egrim.</li> <li>\u270f Fix typo in <code>docs/tutorial/automatic-id-none-refresh.md</code>. PR #14 by @leynier.</li> <li>\u270f Fix typos in <code>docs/tutorial/index.md</code> and <code>docs/databases.md</code>. PR #5 by @sebastianmarines.</li> </ul>"},{"location":"release-notes/#005","title":"0.0.5","text":""},{"location":"release-notes/#features_9","title":"Features","text":"<ul> <li>\u2728 Add support for Decimal fields from Pydantic and SQLAlchemy. Original PR #103 by @robcxyz. New docs: Advanced User Guide - Decimal Numbers.</li> </ul>"},{"location":"release-notes/#docs_12","title":"Docs","text":"<ul> <li>\u270f Update decimal tutorial source for consistency. PR #188 by @tiangolo.</li> </ul>"},{"location":"release-notes/#internal_14","title":"Internal","text":"<ul> <li>\ud83d\udd27 Split MkDocs insiders build in CI to support building from PRs. PR #186 by @tiangolo.</li> <li>\ud83c\udfa8 Format <code>expression.py</code> and expression template, currently needed by CI. PR #187 by @tiangolo.</li> <li>\ud83d\udc1bFix docs light/dark theme switcher. PR #1 by @Lehoczky.</li> <li>\ud83d\udd27 Add MkDocs Material social cards. PR #90 by @tiangolo.</li> <li>\u2728 Update type annotations and upgrade mypy. PR #173 by @tiangolo.</li> </ul>"},{"location":"release-notes/#004","title":"0.0.4","text":"<ul> <li>\ud83c\udfa8 Fix type detection of select results in PyCharm. PR #15 by @tiangolo.</li> </ul>"},{"location":"release-notes/#003","title":"0.0.3","text":"<ul> <li>\u2b06\ufe0f Update and relax specification range for <code>sqlalchemy-stubs</code>. PR #4 by @tiangolo.</li> </ul>"},{"location":"release-notes/#002","title":"0.0.2","text":"<ul> <li>This includes several small bug fixes detected during the first CI runs.</li> <li>\ud83d\udc9a Fix CI installs and tests. PR #2 by @tiangolo.</li> </ul>"},{"location":"release-notes/#001","title":"0.0.1","text":"<ul> <li>First release. \ud83c\udf89</li> </ul>"},{"location":"virtual-environments/","title":"\u865a\u62df\u73af\u5883","text":"<p>\u5728\u8fdb\u884c Python \u9879\u76ee\u5f00\u53d1\u65f6\uff0c\u4f60\u901a\u5e38\u5e94\u8be5\u4f7f\u7528 \u865a\u62df\u73af\u5883\uff08\u6216\u7c7b\u4f3c\u7684\u673a\u5236\uff09\u6765\u9694\u79bb\u4e3a\u6bcf\u4e2a\u9879\u76ee\u5b89\u88c5\u7684\u5305\u3002</p> <p>Info</p> <p>\u5982\u679c\u4f60\u5df2\u7ecf\u4e86\u89e3\u865a\u62df\u73af\u5883\u3001\u5982\u4f55\u521b\u5efa\u548c\u4f7f\u7528\u5b83\u4eec\uff0c\u4f60\u53ef\u4ee5\u8df3\u8fc7\u8fd9\u4e00\u90e8\u5206\u3002\ud83e\udd13</p> <p>Tip</p> <p>\u865a\u62df\u73af\u5883 \u4e0e \u73af\u5883\u53d8\u91cf \u4e0d\u540c\u3002</p> <p>\u73af\u5883\u53d8\u91cf \u662f\u7cfb\u7edf\u4e2d\u7684\u4e00\u4e2a\u53d8\u91cf\uff0c\u53ef\u4ee5\u88ab\u7a0b\u5e8f\u4f7f\u7528\u3002</p> <p>\u865a\u62df\u73af\u5883 \u662f\u4e00\u4e2a\u5305\u542b\u4e00\u4e9b\u6587\u4ef6\u7684\u76ee\u5f55\u3002</p> <p>Info</p> <p>\u672c\u9875\u9762\u5c06\u6559\u4f60\u5982\u4f55\u4f7f\u7528 \u865a\u62df\u73af\u5883 \u4ee5\u53ca\u5b83\u4eec\u7684\u5de5\u4f5c\u539f\u7406\u3002</p> <p>\u5982\u679c\u4f60\u51c6\u5907\u597d\u91c7\u7528\u4e00\u4e2a \u4e3a\u4f60\u7ba1\u7406\u4e00\u5207\u7684\u5de5\u5177\uff08\u5305\u62ec\u5b89\u88c5 Python\uff09\uff0c\u53ef\u4ee5\u8bd5\u8bd5 uv\u3002</p>"},{"location":"virtual-environments/#_2","title":"\u521b\u5efa\u9879\u76ee","text":"<p>\u9996\u5148\uff0c\u4e3a\u4f60\u7684\u9879\u76ee\u521b\u5efa\u4e00\u4e2a\u76ee\u5f55\u3002</p> <p>\u6211\u901a\u5e38\u505a\u7684\u662f\uff0c\u5728\u6211\u7684\u4e3b\u76ee\u5f55/user \u76ee\u5f55\u4e0b\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a <code>code</code> \u7684\u76ee\u5f55\u3002</p> <p>\u7136\u540e\u5728\u8fd9\u4e2a\u76ee\u5f55\u4e0b\u4e3a\u6bcf\u4e2a\u9879\u76ee\u521b\u5efa\u4e00\u4e2a\u5b50\u76ee\u5f55\u3002</p> <pre><code>// \u8fdb\u5165\u4e3b\u76ee\u5f55\n$ cd\n// \u521b\u5efa\u4e00\u4e2a\u7528\u4e8e\u5b58\u653e\u6240\u6709\u4ee3\u7801\u9879\u76ee\u7684\u76ee\u5f55\n$ mkdir code\n// \u8fdb\u5165\u8fd9\u4e2a code \u76ee\u5f55\n$ cd code\n// \u4e3a\u6b64\u9879\u76ee\u521b\u5efa\u4e00\u4e2a\u76ee\u5f55\n$ mkdir awesome-project\n// \u8fdb\u5165\u8be5\u9879\u76ee\u76ee\u5f55\n$ cd awesome-project\n</code></pre>"},{"location":"virtual-environments/#_3","title":"\u521b\u5efa\u865a\u62df\u73af\u5883","text":"<p>\u5f53\u4f60\u5f00\u59cb\u7b2c\u4e00\u6b21\u8fdb\u884c Python \u9879\u76ee\u5f00\u53d1\u65f6\uff0c\u5e94\u8be5\u5728 \u9879\u76ee\u5185\u90e8 \u521b\u5efa\u4e00\u4e2a\u865a\u62df\u73af\u5883\u3002</p> <p>Tip</p> <p>\u4f60\u53ea\u9700\u8981\u4e3a\u6bcf\u4e2a\u9879\u76ee\u505a\u4e00\u6b21\u8fd9\u4ef6\u4e8b\uff0c\u800c\u4e0d\u662f\u6bcf\u6b21\u5de5\u4f5c\u65f6\u90fd\u505a\u3002</p> <code>venv</code><code>uv</code> <p>\u8981\u521b\u5efa\u865a\u62df\u73af\u5883\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 Python \u5185\u7f6e\u7684 <code>venv</code> \u6a21\u5757\u3002</p> <pre><code>$ python -m venv .venv\n</code></pre> \u8be5\u547d\u4ee4\u7684\u542b\u4e49 <ul> <li><code>python</code>\uff1a\u4f7f\u7528\u540d\u4e3a <code>python</code> \u7684\u7a0b\u5e8f</li> <li><code>-m</code>\uff1a\u5c06\u6a21\u5757\u4f5c\u4e3a\u811a\u672c\u6267\u884c\uff0c\u6211\u4eec\u63a5\u4e0b\u6765\u4f1a\u544a\u8bc9\u5b83\u4f7f\u7528\u54ea\u4e2a\u6a21\u5757</li> <li><code>venv</code>\uff1a\u4f7f\u7528\u540d\u4e3a <code>venv</code> \u7684\u6a21\u5757\uff0c\u5b83\u901a\u5e38\u968f Python \u4e00\u8d77\u5b89\u88c5</li> <li><code>.venv</code>\uff1a\u5728\u65b0\u76ee\u5f55 <code>.venv</code> \u4e2d\u521b\u5efa\u865a\u62df\u73af\u5883</li> </ul> <p>\u5982\u679c\u4f60\u5df2\u7ecf\u5b89\u88c5\u4e86 <code>uv</code>\uff0c\u4f60\u53ef\u4ee5\u7528\u5b83\u6765\u521b\u5efa\u865a\u62df\u73af\u5883\u3002</p> <pre><code>$ uv venv\n</code></pre> <p>Tip</p> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c<code>uv</code> \u4f1a\u5728\u540d\u4e3a <code>.venv</code> \u7684\u76ee\u5f55\u4e2d\u521b\u5efa\u865a\u62df\u73af\u5883\u3002</p> <p>\u4e0d\u8fc7\uff0c\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u4e00\u4e2a\u989d\u5916\u7684\u53c2\u6570\u6765\u5b9a\u5236\u76ee\u5f55\u540d\u79f0\u3002</p> <p>\u8be5\u547d\u4ee4\u4f1a\u5728\u4e00\u4e2a\u540d\u4e3a <code>.venv</code> \u7684\u76ee\u5f55\u4e2d\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u865a\u62df\u73af\u5883\u3002</p> <code>.venv</code> \u6216\u5176\u4ed6\u540d\u79f0 <p>\u4f60\u53ef\u4ee5\u5728\u5176\u4ed6\u76ee\u5f55\u4e2d\u521b\u5efa\u865a\u62df\u73af\u5883\uff0c\u4f46\u901a\u5e38\u7ea6\u5b9a\u4f7f\u7528 <code>.venv</code> \u4f5c\u4e3a\u76ee\u5f55\u540d\u79f0\u3002</p>"},{"location":"virtual-environments/#_4","title":"\u6fc0\u6d3b\u865a\u62df\u73af\u5883","text":"<p>\u6fc0\u6d3b\u65b0\u7684\u865a\u62df\u73af\u5883\uff0c\u4ee5\u4fbf\u4f60\u8fd0\u884c\u7684\u4efb\u4f55 Python \u547d\u4ee4\u6216\u5b89\u88c5\u7684\u5305\u90fd\u4f7f\u7528\u5b83\u3002</p> <p>Tip</p> <p>\u6bcf\u6b21\u5f00\u59cb\u4e00\u4e2a \u65b0\u7684\u7ec8\u7aef\u4f1a\u8bdd \u6765\u5904\u7406\u9879\u76ee\u65f6\uff0c\u90fd\u9700\u8981\u6267\u884c\u6b64\u64cd\u4f5c\u3002</p> Linux, macOSWindows PowerShellWindows Bash <pre><code>$ source .venv/bin/activate\n</code></pre> <pre><code>$ .venv\\Scripts\\Activate.ps1\n</code></pre> <p>\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f Windows \u7684 Bash\uff08\u4f8b\u5982 Git Bash\uff09\uff1a</p> <pre><code>$ source .venv/Scripts/activate\n</code></pre> <p>Tip</p> <p>\u6bcf\u6b21\u5728\u8be5\u73af\u5883\u4e2d\u5b89\u88c5 \u65b0\u5305 \u65f6\uff0c\u90fd\u8981\u91cd\u65b0 \u6fc0\u6d3b \u73af\u5883\u3002</p> <p>\u8fd9\u6837\u53ef\u4ee5\u786e\u4fdd\u4f60\u4f7f\u7528\u7684\u662f\u865a\u62df\u73af\u5883\u4e2d\u7684\u7a0b\u5e8f\uff0c\u800c\u4e0d\u662f\u4efb\u4f55\u53ef\u80fd\u5df2\u7ecf\u5168\u5c40\u5b89\u88c5\u7684\u7a0b\u5e8f\uff0c\u540e\u8005\u53ef\u80fd\u662f\u4e0d\u540c\u7248\u672c\u7684\u3002</p>"},{"location":"virtual-environments/#_5","title":"\u68c0\u67e5\u865a\u62df\u73af\u5883\u662f\u5426\u5df2\u6fc0\u6d3b","text":"<p>\u68c0\u67e5\u865a\u62df\u73af\u5883\u662f\u5426\u5df2\u6fc0\u6d3b\uff08\u5373\u4e4b\u524d\u7684\u547d\u4ee4\u662f\u5426\u6210\u529f\uff09\u3002</p> <p>Tip</p> <p>\u8fd9**\u662f\u53ef\u9009\u7684**\uff0c\u4f46\u5b83\u662f**\u68c0\u67e5**\u4e00\u5207\u662f\u5426\u6309\u9884\u671f\u5de5\u4f5c\uff0c\u786e\u4fdd\u4f60\u4f7f\u7528\u7684\u662f\u9884\u5b9a\u7684\u865a\u62df\u73af\u5883\u7684\u597d\u65b9\u6cd5\u3002</p> Linux, macOS, Windows BashWindows PowerShell <pre><code>$ which python\n\n/home/user/code/awesome-project/.venv/bin/python\n</code></pre> <p>\u5982\u679c\u5b83\u663e\u793a\u7684 <code>python</code> \u4e8c\u8fdb\u5236\u6587\u4ef6\u5728 <code>.venv/bin/python</code>\uff0c\u5e76\u4e14\u4f4d\u4e8e\u4f60\u7684\u9879\u76ee\u76ee\u5f55\uff08\u6b64\u5904\u4e3a <code>awesome-project</code>\uff09\u5185\uff0c\u90a3\u4e48\u8bf4\u660e\u5b83\u6210\u529f\u4e86\u3002\ud83c\udf89</p> <pre><code>$ Get-Command python\n\nC:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\\python\n</code></pre> <p>\u5982\u679c\u5b83\u663e\u793a\u7684 <code>python</code> \u4e8c\u8fdb\u5236\u6587\u4ef6\u5728 <code>.venv\\Scripts\\python</code>\uff0c\u5e76\u4e14\u4f4d\u4e8e\u4f60\u7684\u9879\u76ee\u76ee\u5f55\uff08\u6b64\u5904\u4e3a <code>awesome-project</code>\uff09\u5185\uff0c\u90a3\u4e48\u8bf4\u660e\u5b83\u6210\u529f\u4e86\u3002\ud83c\udf89</p>"},{"location":"virtual-environments/#pip","title":"\u5347\u7ea7 <code>pip</code>","text":"<p>Tip</p> <p>\u5982\u679c\u4f60\u4f7f\u7528 <code>uv</code>\uff0c\u4f60\u5c06\u4f7f\u7528\u5b83\u6765\u5b89\u88c5\u8f6f\u4ef6\u5305\uff0c\u800c\u4e0d\u662f <code>pip</code>\uff0c\u56e0\u6b64\u4f60\u65e0\u9700\u5347\u7ea7 <code>pip</code>\u3002\ud83d\ude0e</p> <p>\u5982\u679c\u4f60\u4f7f\u7528 <code>pip</code> \u5b89\u88c5\u5305\uff08\u5b83\u662f Python \u7684\u9ed8\u8ba4\u5b89\u88c5\u5de5\u5177\uff09\uff0c\u4f60\u5e94\u8be5**\u5347\u7ea7**\u5230\u6700\u65b0\u7248\u672c\u3002</p> <p>\u8bb8\u591a\u5b89\u88c5\u5305\u65f6\u9047\u5230\u7684\u5f02\u5e38\u9519\u8bef\uff0c\u4ec5\u901a\u8fc7\u5148\u5347\u7ea7 <code>pip</code> \u5c31\u80fd\u89e3\u51b3\u3002</p> <p>Tip</p> <p>\u901a\u5e38\u53ea\u9700\u5728\u521b\u5efa\u865a\u62df\u73af\u5883\u4e4b\u540e \u4e00\u6b21\u6027 \u6267\u884c\u6b64\u64cd\u4f5c\u3002</p> <p>\u786e\u4fdd\u865a\u62df\u73af\u5883\u5df2\u6fc0\u6d3b\uff08\u4f7f\u7528\u4e0a\u9762\u7684\u547d\u4ee4\uff09\uff0c\u7136\u540e\u8fd0\u884c\uff1a</p> <pre><code>$ python -m pip install --upgrade pip\n\n---&gt; 100%\n</code></pre>"},{"location":"virtual-environments/#gitignore","title":"\u6dfb\u52a0 <code>.gitignore</code>","text":"<p>\u5982\u679c\u4f60\u4f7f\u7528 Git\uff08\u5e94\u8be5\u4f7f\u7528\uff09\uff0c\u5219\u5e94\u6dfb\u52a0\u4e00\u4e2a <code>.gitignore</code> \u6587\u4ef6\uff0c\u4ee5\u5c06 <code>.venv</code> \u4e2d\u7684\u6240\u6709\u5185\u5bb9\u6392\u9664\u5728 Git \u4e4b\u5916\u3002</p> <p>Tip</p> <p>\u5982\u679c\u4f60\u4f7f\u7528 <code>uv</code> \u521b\u5efa\u865a\u62df\u73af\u5883\uff0c\u5b83\u5df2\u7ecf\u4e3a\u4f60\u5b8c\u6210\u4e86\u8fd9\u4e2a\u6b65\u9aa4\uff0c\u53ef\u4ee5\u8df3\u8fc7\u6b64\u6b65\u9aa4\u3002\ud83d\ude0e</p> <p>Tip</p> <p>\u53ea\u9700\u5728\u521b\u5efa\u865a\u62df\u73af\u5883\u4e4b\u540e \u4e00\u6b21\u6027 \u6267\u884c\u6b64\u64cd\u4f5c\u3002</p> <pre><code>$ echo \"*\" &gt; .venv/.gitignore\n</code></pre> \u8be5\u547d\u4ee4\u7684\u542b\u4e49 <ul> <li><code>echo \"*\"</code>\uff1a\u5c06\u5728\u7ec8\u7aef\u6253\u5370\u6587\u672c <code>*</code>\uff08\u63a5\u4e0b\u6765\u7684\u90e8\u5206\u7a0d\u4f5c\u8c03\u6574\uff09</li> <li><code>&gt;</code>\uff1a\u547d\u4ee4\u5de6\u4fa7\u7684\u8f93\u51fa\u5c06\u4e0d\u4f1a\u6253\u5370\u5230\u7ec8\u7aef\uff0c\u800c\u662f\u5199\u5165\u53f3\u4fa7\u6307\u5b9a\u7684\u6587\u4ef6</li> <li><code>.gitignore</code>\uff1a\u6587\u4ef6\u7684\u540d\u79f0\uff0c\u7528\u6765\u5b58\u50a8\u8f93\u51fa\u5185\u5bb9</li> </ul> <p>\u5728 Git \u4e2d\uff0c<code>*</code> \u8868\u793a\u201c\u6240\u6709\u5185\u5bb9\u201d\u3002\u56e0\u6b64\uff0c\u5b83\u4f1a\u5ffd\u7565 <code>.venv</code> \u76ee\u5f55\u4e2d\u7684\u6240\u6709\u5185\u5bb9\u3002</p> <p>\u8be5\u547d\u4ee4\u5c06\u521b\u5efa\u4e00\u4e2a <code>.gitignore</code> \u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1a</p> <pre><code>*\n</code></pre>"},{"location":"virtual-environments/#_6","title":"\u5b89\u88c5\u5305","text":"<p>\u6fc0\u6d3b\u865a\u62df\u73af\u5883\u540e\uff0c\u4f60\u53ef\u4ee5\u5728\u5176\u4e2d\u5b89\u88c5\u5305\u3002</p> <p>Tip</p> <p>\u5b89\u88c5\u6216\u5347\u7ea7\u9879\u76ee\u6240\u9700\u7684\u5305\u65f6\uff0c\u53ea\u9700\u6267\u884c\u4e00\u6b21\u3002</p> <p>\u5982\u679c\u4f60\u9700\u8981\u5347\u7ea7\u7248\u672c\u6216\u6dfb\u52a0\u65b0\u5305\uff0c**\u518d\u6b21\u6267\u884c**\u6b64\u64cd\u4f5c\u3002</p>"},{"location":"virtual-environments/#_7","title":"\u76f4\u63a5\u5b89\u88c5\u5305","text":"<p>\u5982\u679c\u4f60\u5f88\u6025\uff0c\u5e76\u4e14\u4e0d\u60f3\u4f7f\u7528\u6587\u4ef6\u6765\u58f0\u660e\u9879\u76ee\u6240\u9700\u7684\u5305\uff0c\u53ef\u4ee5\u76f4\u63a5\u5b89\u88c5\u5b83\u4eec\u3002</p> <p>Tip</p> <p>\u5c06\u7a0b\u5e8f\u6240\u9700\u7684\u5305\u53ca\u7248\u672c\u653e\u5165\u6587\u4ef6\uff08\u4f8b\u5982 <code>requirements.txt</code> \u6216 <code>pyproject.toml</code>\uff09\u662f\u4e00\u4e2a\uff08\u975e\u5e38\uff09\u597d\u7684\u505a\u6cd5\u3002</p> <code>pip</code><code>uv</code> <pre><code>$ pip install sqlmodel\n\n---&gt; 100%\n</code></pre> <p>\u5982\u679c\u4f60\u4f7f\u7528 <code>uv</code>\uff1a</p> <pre><code>$ uv pip install sqlmodel\n---&gt; 100%\n</code></pre>"},{"location":"virtual-environments/#requirementstxt","title":"\u4ece <code>requirements.txt</code> \u5b89\u88c5","text":"<p>\u5982\u679c\u4f60\u6709\u4e00\u4e2a <code>requirements.txt</code> \u6587\u4ef6\uff0c\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u5b89\u88c5\u6587\u4ef6\u4e2d\u7684\u5305\u3002</p> <code>pip</code><code>uv</code> <pre><code>$ pip install -r requirements.txt\n---&gt; 100%\n</code></pre> <p>\u5982\u679c\u4f60\u4f7f\u7528 <code>uv</code>\uff1a</p> <pre><code>$ uv pip install -r requirements.txt\n---&gt; 100%\n</code></pre> <code>requirements.txt</code> <p>\u4e00\u4e2a\u5305\u542b\u4e00\u4e9b\u5305\u7684 <code>requirements.txt</code> \u6587\u4ef6\u53ef\u80fd\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>sqlmodel==0.13.0\nrich==13.7.1\n</code></pre>"},{"location":"virtual-environments/#_8","title":"\u8fd0\u884c\u4f60\u7684\u7a0b\u5e8f","text":"<p>\u6fc0\u6d3b\u865a\u62df\u73af\u5883\u540e\uff0c\u4f60\u53ef\u4ee5\u8fd0\u884c\u4f60\u7684\u7a0b\u5e8f\uff0c\u5b83\u5c06\u4f7f\u7528\u865a\u62df\u73af\u5883\u4e2d\u7684 Python \u548c\u4f60\u5728\u90a3\u91cc\u5b89\u88c5\u7684\u5305\u3002</p> <pre><code>$ python main.py\n\nHello World\n</code></pre>"},{"location":"virtual-environments/#_9","title":"\u914d\u7f6e\u4f60\u7684\u7f16\u8f91\u5668","text":"<p>\u4f60\u53ef\u80fd\u4f1a\u4f7f\u7528\u4e00\u4e2a\u7f16\u8f91\u5668\uff0c\u786e\u4fdd\u4f60\u914d\u7f6e\u5b83\u4f7f\u7528\u4f60\u521b\u5efa\u7684\u865a\u62df\u73af\u5883\uff08\u5b83\u53ef\u80fd\u4f1a\u81ea\u52a8\u68c0\u6d4b\u5230\uff09\uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u83b7\u5f97\u81ea\u52a8\u8865\u5168\u548c\u5185\u8054\u9519\u8bef\u3002</p> <p>\u4f8b\u5982\uff1a</p> <ul> <li>VS Code</li> <li>PyCharm</li> </ul> <p>Tip</p> <p>\u901a\u5e38\u4f60\u53ea\u9700\u8981\u5728\u521b\u5efa\u865a\u62df\u73af\u5883\u65f6 \u6267\u884c\u4e00\u6b21 \u8fd9\u4e2a\u64cd\u4f5c\u3002</p>"},{"location":"virtual-environments/#_10","title":"\u505c\u7528\u865a\u62df\u73af\u5883","text":"<p>\u5b8c\u6210\u9879\u76ee\u5de5\u4f5c\u540e\uff0c\u4f60\u53ef\u4ee5 \u505c\u7528 \u865a\u62df\u73af\u5883\u3002</p> <pre><code>$ deactivate\n</code></pre> <p>\u8fd9\u6837\uff0c\u5f53\u4f60\u8fd0\u884c <code>python</code> \u65f6\uff0c\u5b83\u5c31\u4e0d\u4f1a\u518d\u5c1d\u8bd5\u4ece\u8be5\u865a\u62df\u73af\u5883\u4e2d\u8fd0\u884c Python\uff0c\u4e5f\u4e0d\u4f1a\u4f7f\u7528\u5176\u4e2d\u5b89\u88c5\u7684\u5305\u3002</p>"},{"location":"virtual-environments/#_11","title":"\u51c6\u5907\u5de5\u4f5c","text":"<p>\u73b0\u5728\u4f60\u51c6\u5907\u597d\u5f00\u59cb\u4f60\u7684\u9879\u76ee\u4e86\u3002</p> <p>Tip</p> <p>\u60f3\u4e86\u89e3\u4e0a\u9762\u6240\u6709\u5185\u5bb9\u5417\uff1f</p> <p>\u7ee7\u7eed\u9605\u8bfb\u3002\ud83d\udc47\ud83e\udd13</p>"},{"location":"virtual-environments/#_12","title":"\u4e3a\u4ec0\u4e48\u4f7f\u7528\u865a\u62df\u73af\u5883","text":"<p>\u8981\u4f7f\u7528 SQLModel\uff0c\u4f60\u9700\u8981\u5b89\u88c5 Python\u3002</p> <p>\u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u4f60\u8fd8\u9700\u8981 \u5b89\u88c5 SQLModel \u548c\u4f60\u60f3\u4f7f\u7528\u7684\u5176\u4ed6 \u5305\u3002</p> <p>\u5b89\u88c5\u5305\u65f6\uff0c\u4f60\u901a\u5e38\u4f1a\u4f7f\u7528 Python \u81ea\u5e26\u7684 <code>pip</code> \u547d\u4ee4\uff08\u6216\u8005\u7c7b\u4f3c\u7684\u66ff\u4ee3\u5de5\u5177\uff09\u3002</p> <p>\u7136\u800c\uff0c\u5982\u679c\u4f60\u76f4\u63a5\u4f7f\u7528 <code>pip</code>\uff0c\u5305\u5c06\u4f1a\u5b89\u88c5\u5230\u4f60\u7684 \u5168\u5c40 Python \u73af\u5883\uff08\u5168\u5c40\u5b89\u88c5\u7684 Python\uff09\u4e2d\u3002</p>"},{"location":"virtual-environments/#_13","title":"\u95ee\u9898","text":"<p>\u90a3\u4e48\uff0c\u5728\u5168\u5c40 Python \u73af\u5883\u4e2d\u5b89\u88c5\u5305\u6709\u4ec0\u4e48\u95ee\u9898\u5462\uff1f</p> <p>\u5230\u67d0\u4e2a\u65f6\u5019\uff0c\u4f60\u53ef\u80fd\u4f1a\u5199\u8bb8\u591a\u4e0d\u540c\u7684\u7a0b\u5e8f\uff0c\u8fd9\u4e9b\u7a0b\u5e8f\u4f9d\u8d56\u4e8e \u4e0d\u540c\u7684\u5305\u3002\u5e76\u4e14\u8fd9\u4e9b\u9879\u76ee\u4e2d\uff0c\u67d0\u4e9b\u4f9d\u8d56\u4e8e \u76f8\u540c\u5305\u7684\u4e0d\u540c\u7248\u672c\u3002 \ud83d\ude31</p> <p>\u4f8b\u5982\uff0c\u4f60\u53ef\u80fd\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a <code>philosophers-stone</code> \u7684\u9879\u76ee\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u4f9d\u8d56\u4e8e\u53e6\u4e00\u4e2a\u5305 <code>harry</code>\uff0c\u7248\u672c <code>1</code>\u3002\u6240\u4ee5\uff0c\u4f60\u9700\u8981\u5b89\u88c5 <code>harry</code>\u3002</p> <pre><code>flowchart LR\n    stone(philosophers-stone) --&gt;|requires| harry-1[harry v1]</code></pre> <p>\u7136\u540e\uff0c\u5728\u67d0\u4e2a\u65f6\u95f4\u70b9\uff0c\u4f60\u53c8\u521b\u5efa\u4e86\u4e00\u4e2a\u540d\u4e3a <code>prisoner-of-azkaban</code> \u7684\u9879\u76ee\uff0c\u8fd9\u4e2a\u9879\u76ee\u4e5f\u4f9d\u8d56\u4e8e <code>harry</code>\uff0c\u4f46\u5b83\u9700\u8981 <code>harry</code> \u7248\u672c <code>3</code>\u3002</p> <pre><code>flowchart LR\n    azkaban(prisoner-of-azkaban) --&gt; |requires| harry-3[harry v3]</code></pre> <p>\u4f46\u73b0\u5728\u7684\u95ee\u9898\u662f\uff0c\u5982\u679c\u4f60\u5c06\u5305\u5b89\u88c5\u5728\u5168\u5c40\uff08\u5168\u5c40\u73af\u5883\uff09\u4e2d\uff0c\u800c\u4e0d\u662f\u5728\u672c\u5730\u7684 \u865a\u62df\u73af\u5883 \u4e2d\uff0c\u4f60\u5c31\u5fc5\u987b\u9009\u62e9\u5b89\u88c5\u54ea\u4e2a\u7248\u672c\u7684 <code>harry</code>\u3002</p> <p>\u5982\u679c\u4f60\u60f3\u8fd0\u884c <code>philosophers-stone</code>\uff0c\u4f60\u9700\u8981\u9996\u5148\u5b89\u88c5 <code>harry</code> \u7248\u672c <code>1</code>\uff0c\u4f8b\u5982\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\uff1a</p> <pre><code>$ pip install \"harry==1\"\n</code></pre> <p>\u7136\u540e\u4f60\u4f1a\u5728\u5168\u5c40 Python \u73af\u5883\u4e2d\u5b89\u88c5 <code>harry</code> \u7248\u672c <code>1</code>\u3002</p> <pre><code>flowchart LR\n    subgraph global[global env]\n        harry-1[harry v1]\n    end\n    subgraph stone-project[philosophers-stone project]\n        stone(philosophers-stone) --&gt;|requires| harry-1\n    end</code></pre> <p>\u4f46\u662f\u5982\u679c\u4f60\u60f3\u8fd0\u884c <code>prisoner-of-azkaban</code>\uff0c\u4f60\u5c31\u9700\u8981\u5148\u5378\u8f7d <code>harry</code> \u7248\u672c <code>1</code>\uff0c\u7136\u540e\u5b89\u88c5 <code>harry</code> \u7248\u672c <code>3</code>\uff08\u6216\u8005\u76f4\u63a5\u5b89\u88c5\u7248\u672c <code>3</code>\uff0c\u5b83\u4f1a\u81ea\u52a8\u5378\u8f7d\u7248\u672c <code>1</code>\uff09\u3002</p> <pre><code>$ pip install \"harry==3\"\n</code></pre> <p>\u7136\u540e\u4f60\u4f1a\u5728\u5168\u5c40 Python \u73af\u5883\u4e2d\u5b89\u88c5 <code>harry</code> \u7248\u672c <code>3</code>\u3002</p> <p>\u5982\u679c\u4f60\u518d\u6b21\u5c1d\u8bd5\u8fd0\u884c <code>philosophers-stone</code>\uff0c\u5b83\u53ef\u80fd\u4f1a \u65e0\u6cd5\u8fd0\u884c\uff0c\u56e0\u4e3a\u5b83\u9700\u8981\u7684\u662f <code>harry</code> \u7248\u672c <code>1</code>\u3002</p> <pre><code>flowchart LR\n    subgraph global[global env]\n        harry-1[&lt;strike&gt;harry v1&lt;/strike&gt;]\n        style harry-1 fill:#ccc,stroke-dasharray: 5 5\n        harry-3[harry v3]\n    end\n    subgraph stone-project[philosophers-stone project]\n        stone(philosophers-stone) -.-x|\u26d4\ufe0f| harry-1\n    end\n    subgraph azkaban-project[prisoner-of-azkaban project]\n        azkaban(prisoner-of-azkaban) --&gt; |requires| harry-3\n    end</code></pre> <p>Tip</p> <p>\u5728 Python \u5305\u4e2d\uff0c\u5c3d\u91cf\u907f\u514d\u5728 \u65b0\u7248\u672c \u4e2d\u5f15\u5165 \u7834\u574f\u6027\u66f4\u6539 \u662f\u5f88\u5e38\u89c1\u7684\uff0c\u4f46\u4e3a\u4e86\u5b89\u5168\u8d77\u89c1\uff0c\u6700\u597d\u5728\u53ef\u4ee5\u8fd0\u884c\u6d4b\u8bd5\u5e76\u68c0\u67e5\u4e00\u5207\u662f\u5426\u6b63\u5e38\u5de5\u4f5c\u7684\u60c5\u51b5\u4e0b\uff0c\u6709\u610f\u8bc6\u5730\u5b89\u88c5\u8f83\u65b0\u7684\u7248\u672c\u3002</p> <p>\u73b0\u5728\uff0c\u60f3\u8c61\u4e00\u4e0b\uff0c\u6240\u6709 \u9879\u76ee\u6240\u4f9d\u8d56\u7684 \u5176\u4ed6 \u5305\u3002\u90a3\u5c06\u53d8\u5f97\u975e\u5e38\u96be\u4ee5\u7ba1\u7406\u3002\u4f60\u53ef\u80fd\u4f1a\u6700\u7ec8\u5728\u67d0\u4e9b\u9879\u76ee\u4e2d\u8fd0\u884c\u4e00\u4e9b \u4e0d\u517c\u5bb9\u7248\u672c \u7684\u5305\uff0c\u800c\u4f60\u4e5f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u67d0\u4e9b\u529f\u80fd\u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c\u3002</p> <p>\u53e6\u5916\uff0c\u53d6\u51b3\u4e8e\u4f60\u7684\u64cd\u4f5c\u7cfb\u7edf\uff08\u4f8b\u5982 Linux\u3001Windows\u3001macOS\uff09\uff0c\u5b83\u53ef\u80fd\u5df2\u7ecf\u9884\u88c5\u4e86 Python\u3002\u5982\u679c\u662f\u8fd9\u6837\uff0c\u7cfb\u7edf\u53ef\u80fd\u5df2\u7ecf\u9884\u88c5\u4e86\u4e00\u4e9b\u5177\u6709\u7279\u5b9a\u7248\u672c\u7684\u5305\uff0c\u8fd9\u4e9b\u5305 \u662f\u4f60\u7684\u7cfb\u7edf\u6240\u9700\u8981\u7684\u3002\u5982\u679c\u4f60\u5c06\u5305\u5b89\u88c5\u5230\u5168\u5c40 Python \u73af\u5883\u4e2d\uff0c\u53ef\u80fd\u4f1a \u7834\u574f \u64cd\u4f5c\u7cfb\u7edf\u4e2d\u9884\u88c5\u7684\u67d0\u4e9b\u7a0b\u5e8f\u3002</p>"},{"location":"virtual-environments/#_14","title":"\u5305\u5b89\u88c5\u7684\u4f4d\u7f6e","text":"<p>\u5f53\u4f60\u5b89\u88c5 Python \u65f6\uff0c\u5b83\u4f1a\u5728\u4f60\u7684\u8ba1\u7b97\u673a\u4e0a\u521b\u5efa\u4e00\u4e9b\u76ee\u5f55\u548c\u6587\u4ef6\u3002</p> <p>\u5176\u4e2d\u4e00\u4e9b\u76ee\u5f55\u4e13\u95e8\u7528\u4e8e\u5b58\u653e\u4f60\u5b89\u88c5\u7684\u6240\u6709\u5305\u3002</p> <p>\u5f53\u4f60\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u65f6\uff1a</p> <pre><code>// \u73b0\u5728\u4e0d\u8981\u8fd0\u884c\u8fd9\u4e2a\uff0c\u53ea\u662f\u4e00\u4e2a\u793a\u4f8b \ud83e\udd13\n$ pip install sqlmodel\n---&gt; 100%\n</code></pre> <p>\u8fd9\u4e2a\u547d\u4ee4\u4f1a\u4e0b\u8f7d\u4e00\u4e2a\u538b\u7f29\u5305\uff0c\u5176\u4e2d\u5305\u542b SQLModel \u7684\u4ee3\u7801\uff0c\u901a\u5e38\u4f1a\u4ece PyPI \u4e0b\u8f7d\u3002</p> <p>\u5b83\u8fd8\u4f1a \u4e0b\u8f7d SQLModel \u6240\u4f9d\u8d56\u7684\u5176\u4ed6\u5305\u7684\u6587\u4ef6\u3002</p> <p>\u7136\u540e\uff0c\u5b83\u4f1a \u89e3\u538b \u8fd9\u4e9b\u6587\u4ef6\u5e76\u5c06\u5176\u653e\u5230\u8ba1\u7b97\u673a\u4e0a\u7684\u67d0\u4e2a\u76ee\u5f55\u4e2d\u3002</p> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5b83\u4f1a\u5c06\u8fd9\u4e9b\u4e0b\u8f7d\u5e76\u89e3\u538b\u7684\u6587\u4ef6\u653e\u5230\u4f60\u7684 Python \u5b89\u88c5\u76ee\u5f55\u4e2d\u7684\u67d0\u4e2a\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u662f \u5168\u5c40\u73af\u5883 \u4e2d\u3002</p>"},{"location":"virtual-environments/#_15","title":"\u4ec0\u4e48\u662f\u865a\u62df\u73af\u5883","text":"<p>\u89e3\u51b3\u5c06\u6240\u6709\u5305\u5b89\u88c5\u5728\u5168\u5c40\u73af\u5883\u4e2d\u7684\u95ee\u9898\u7684\u65b9\u6cd5\u662f\uff0c\u4e3a\u4f60\u5de5\u4f5c\u7684\u6bcf\u4e2a\u9879\u76ee\u4f7f\u7528 \u865a\u62df\u73af\u5883\u3002</p> <p>\u865a\u62df\u73af\u5883\u662f\u4e00\u4e2a \u76ee\u5f55\uff0c\u4e0e\u5168\u5c40\u73af\u5883\u975e\u5e38\u76f8\u4f3c\uff0c\u4f60\u53ef\u4ee5\u5728\u5176\u4e2d\u4e3a\u4e00\u4e2a\u9879\u76ee\u5b89\u88c5\u5305\u3002</p> <p>\u8fd9\u6837\uff0c\u6bcf\u4e2a\u9879\u76ee\u90fd\u4f1a\u6709\u81ea\u5df1\u7684\u865a\u62df\u73af\u5883\uff08<code>.venv</code> \u76ee\u5f55\uff09\u548c\u81ea\u5df1\u7684\u5305\u3002</p> <pre><code>flowchart TB\n    subgraph stone-project[philosophers-stone project]\n        stone(philosophers-stone) ---&gt;|requires| harry-1\n        subgraph venv1[.venv]\n            harry-1[harry v1]\n        end\n    end\n    subgraph azkaban-project[prisoner-of-azkaban project]\n        azkaban(prisoner-of-azkaban) ---&gt;|requires| harry-3\n        subgraph venv2[.venv]\n            harry-3[harry v3]\n        end\n    end\n    stone-project ~~~ azkaban-project</code></pre>"},{"location":"virtual-environments/#_16","title":"\u6fc0\u6d3b\u865a\u62df\u73af\u5883\u610f\u5473\u7740\u4ec0\u4e48","text":"<p>\u5f53\u4f60\u6fc0\u6d3b\u4e00\u4e2a\u865a\u62df\u73af\u5883\u65f6\uff0c\u4f8b\u5982\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\uff1a</p> Linux, macOSWindows PowerShellWindows Bash <pre><code>$ source .venv/bin/activate\n</code></pre> <pre><code>$ .venv\\Scripts\\Activate.ps1\n</code></pre> <p>\u6216\u8005\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f Windows \u4e0a\u7684 Bash\uff08\u4f8b\u5982 Git Bash\uff09\uff1a</p> <pre><code>$ source .venv/Scripts/activate\n</code></pre> <p>\u8be5\u547d\u4ee4\u4f1a\u521b\u5efa\u6216\u4fee\u6539\u4e00\u4e9b \u73af\u5883\u53d8\u91cf\uff0c\u8fd9\u4e9b\u53d8\u91cf\u5c06\u5728\u63a5\u4e0b\u6765\u7684\u547d\u4ee4\u4e2d\u53ef\u7528\u3002</p> <p>\u5176\u4e2d\u4e00\u4e2a\u53d8\u91cf\u5c31\u662f <code>PATH</code> \u53d8\u91cf\u3002</p> <p>Tip</p> <p>\u4f60\u53ef\u4ee5\u5728 \u73af\u5883\u53d8\u91cf \u90e8\u5206\u4e86\u89e3\u66f4\u591a\u5173\u4e8e <code>PATH</code> \u73af\u5883\u53d8\u91cf\u7684\u5185\u5bb9\u3002</p> <p>\u6fc0\u6d3b\u865a\u62df\u73af\u5883\u4f1a\u5c06\u5176\u8def\u5f84 <code>.venv/bin</code>\uff08\u5728 Linux \u548c macOS \u4e0a\uff09\u6216 <code>.venv\\Scripts</code>\uff08\u5728 Windows \u4e0a\uff09\u6dfb\u52a0\u5230 <code>PATH</code> \u73af\u5883\u53d8\u91cf\u4e2d\u3002</p> <p>\u5047\u8bbe\u5728\u6fc0\u6d3b\u73af\u5883\u4e4b\u524d\uff0c<code>PATH</code> \u53d8\u91cf\u5982\u4e0b\u6240\u793a\uff1a</p> Linux, macOSWindows <pre><code>/usr/bin:/bin:/usr/sbin:/sbin\n</code></pre> <p>\u8fd9\u610f\u5473\u7740\u7cfb\u7edf\u4f1a\u5728\u4ee5\u4e0b\u76ee\u5f55\u4e2d\u67e5\u627e\u7a0b\u5e8f\uff1a</p> <ul> <li><code>/usr/bin</code></li> <li><code>/bin</code></li> <li><code>/usr/sbin</code></li> <li><code>/sbin</code></li> </ul> <pre><code>C:\\Windows\\System32\n</code></pre> <p>\u8fd9\u610f\u5473\u7740\u7cfb\u7edf\u4f1a\u5728\u4ee5\u4e0b\u76ee\u5f55\u4e2d\u67e5\u627e\u7a0b\u5e8f\uff1a</p> <ul> <li><code>C:\\Windows\\System32</code></li> </ul> <p>\u6fc0\u6d3b\u865a\u62df\u73af\u5883\u540e\uff0c<code>PATH</code> \u53d8\u91cf\u4f1a\u53d8\u6210\u5982\u4e0b\u6240\u793a\uff1a</p> Linux, macOSWindows <pre><code>/home/user/code/awesome-project/.venv/bin:/usr/bin:/bin:/usr/sbin:/sbin\n</code></pre> <p>\u8fd9\u610f\u5473\u7740\u7cfb\u7edf\u73b0\u5728\u4f1a\u9996\u5148\u5728\u4ee5\u4e0b\u76ee\u5f55\u4e2d\u67e5\u627e\u7a0b\u5e8f\uff1a</p> <pre><code>/home/user/code/awesome-project/.venv/bin\n</code></pre> <p>\u7136\u540e\u518d\u53bb\u5176\u4ed6\u76ee\u5f55\u67e5\u627e\u3002</p> <p>\u56e0\u6b64\uff0c\u5f53\u4f60\u5728\u7ec8\u7aef\u4e2d\u8f93\u5165 <code>python</code> \u65f6\uff0c\u7cfb\u7edf\u4f1a\u9996\u5148\u5728\u4ee5\u4e0b\u8def\u5f84\u627e\u5230 Python \u7a0b\u5e8f\uff1a</p> <pre><code>/home/user/code/awesome-project/.venv/bin/python\n</code></pre> <p>\u5e76\u4f7f\u7528\u8be5\u7a0b\u5e8f\u3002</p> <pre><code>C:\\Users\\user\\code\\awesome-project\\.venv\\Scripts;C:\\Windows\\System32\n</code></pre> <p>\u8fd9\u610f\u5473\u7740\u7cfb\u7edf\u73b0\u5728\u4f1a\u9996\u5148\u5728\u4ee5\u4e0b\u76ee\u5f55\u4e2d\u67e5\u627e\u7a0b\u5e8f\uff1a</p> <pre><code>C:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\n</code></pre> <p>\u7136\u540e\u518d\u53bb\u5176\u4ed6\u76ee\u5f55\u67e5\u627e\u3002</p> <p>\u56e0\u6b64\uff0c\u5f53\u4f60\u5728\u7ec8\u7aef\u4e2d\u8f93\u5165 <code>python</code> \u65f6\uff0c\u7cfb\u7edf\u4f1a\u9996\u5148\u5728\u4ee5\u4e0b\u8def\u5f84\u627e\u5230 Python \u7a0b\u5e8f\uff1a</p> <pre><code>C:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\\python\n</code></pre> <p>\u5e76\u4f7f\u7528\u8be5\u7a0b\u5e8f\u3002</p> <p>\u4e00\u4e2a\u91cd\u8981\u7684\u7ec6\u8282\u662f\uff0c\u5b83\u4f1a\u5c06\u865a\u62df\u73af\u5883\u8def\u5f84\u653e\u5728 <code>PATH</code> \u53d8\u91cf\u7684 \u524d\u9762\u3002\u7cfb\u7edf\u4f1a \u5148 \u627e\u5230\u5b83\uff0c\u800c\u4e0d\u662f\u5176\u4ed6 Python \u7a0b\u5e8f\u3002\u56e0\u6b64\uff0c\u5f53\u4f60\u8fd0\u884c <code>python</code> \u65f6\uff0c\u7cfb\u7edf\u4f1a\u4f7f\u7528 \u865a\u62df\u73af\u5883\u4e2d\u7684 Python\uff0c\u800c\u4e0d\u662f\u5168\u5c40\u73af\u5883\u4e2d\u7684\u4efb\u4f55\u5176\u4ed6 <code>python</code>\u3002</p> <p>\u6fc0\u6d3b\u865a\u62df\u73af\u5883\u8fd8\u4f1a\u6539\u53d8\u5176\u4ed6\u4e00\u4e9b\u8bbe\u7f6e\uff0c\u4f46\u8fd9\u662f\u5b83\u6700\u91cd\u8981\u7684\u529f\u80fd\u4e4b\u4e00\u3002</p>"},{"location":"virtual-environments/#_17","title":"\u68c0\u67e5\u865a\u62df\u73af\u5883","text":"<p>\u5f53\u4f60\u68c0\u67e5\u865a\u62df\u73af\u5883\u662f\u5426\u6fc0\u6d3b\u65f6\uff0c\u4f8b\u5982\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\uff1a</p> Linux, macOS, Windows BashWindows PowerShell <pre><code>$ which python\n\n/home/user/code/awesome-project/.venv/bin/python\n</code></pre> <pre><code>$ Get-Command python\n\nC:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\\python\n</code></pre> <p>\u8fd9\u610f\u5473\u7740\u5c06\u4f7f\u7528\u7684 <code>python</code> \u7a0b\u5e8f\u6765\u81ea \u865a\u62df\u73af\u5883\u3002</p> <p>\u5728 Linux \u548c macOS \u4e0a\u4f60\u4f7f\u7528 <code>which</code>\uff0c\u5728 Windows PowerShell \u4e2d\u4f7f\u7528 <code>Get-Command</code>\u3002</p> <p>\u8be5\u547d\u4ee4\u7684\u5de5\u4f5c\u65b9\u5f0f\u662f\uff0c\u5b83\u4f1a\u68c0\u67e5 <code>PATH</code> \u73af\u5883\u53d8\u91cf\uff0c\u6309\u987a\u5e8f\u904d\u5386 \u6bcf\u4e00\u4e2a\u8def\u5f84\uff0c\u5bfb\u627e\u540d\u4e3a <code>python</code> \u7684\u7a0b\u5e8f\u3002\u4e00\u65e6\u627e\u5230\uff0c\u5b83\u4f1a \u663e\u793a\u8be5\u7a0b\u5e8f\u7684\u8def\u5f84\u3002</p> <p>\u6700\u91cd\u8981\u7684\u662f\uff0c\u5f53\u4f60\u8c03\u7528 <code>python</code> \u65f6\uff0c\u7cfb\u7edf\u4f1a\u6267\u884c\u7684\u5c31\u662f\u8fd9\u4e2a \"<code>python</code>\" \u7a0b\u5e8f\u3002</p> <p>\u56e0\u6b64\uff0c\u4f60\u53ef\u4ee5\u786e\u8ba4\u81ea\u5df1\u662f\u5426\u5904\u4e8e\u6b63\u786e\u7684\u865a\u62df\u73af\u5883\u4e2d\u3002</p> <p>Tip</p> <p>\u6fc0\u6d3b\u4e00\u4e2a\u865a\u62df\u73af\u5883\uff0c\u4f7f\u7528\u5176\u4e2d\u7684 Python\uff0c\u7136\u540e \u5207\u6362\u5230\u53e6\u4e00\u4e2a\u9879\u76ee\u3002</p> <p>\u5982\u679c\u6ca1\u6709\u9000\u51fa\u7b2c\u4e00\u4e2a\u9879\u76ee\u7684\u865a\u62df\u73af\u5883\uff0c\u7b2c\u4e8c\u4e2a\u9879\u76ee \u53ef\u80fd\u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c\uff0c\u56e0\u4e3a\u4f60\u4ecd\u5728\u4f7f\u7528\u7b2c\u4e00\u4e2a\u9879\u76ee\u7684\u865a\u62df\u73af\u5883\u4e2d\u7684 Python\u3002</p> <p>\u80fd\u591f\u68c0\u67e5\u6b63\u5728\u4f7f\u7528\u7684 <code>python</code> \u662f\u975e\u5e38\u6709\u7528\u7684\u3002\ud83e\udd13</p>"},{"location":"virtual-environments/#_18","title":"\u4e3a\u4ec0\u4e48\u8981\u9000\u51fa\u865a\u62df\u73af\u5883","text":"<p>\u4f8b\u5982\uff0c\u4f60\u53ef\u80fd\u5728\u4e00\u4e2a\u9879\u76ee <code>philosophers-stone</code> \u4e0a\u5de5\u4f5c\uff0c\u6fc0\u6d3b\u8be5\u865a\u62df\u73af\u5883\uff0c\u5b89\u88c5\u5305\u5e76\u5728\u8be5\u73af\u5883\u4e2d\u5de5\u4f5c\u3002</p> <p>\u7136\u540e\u4f60\u60f3\u8981\u5207\u6362\u5230 \u53e6\u4e00\u4e2a\u9879\u76ee <code>prisoner-of-azkaban</code>\u3002</p> <p>\u4f60\u8fdb\u5165\u90a3\u4e2a\u9879\u76ee\u76ee\u5f55\uff1a</p> <pre><code>$ cd ~/code/prisoner-of-azkaban\n</code></pre> <p>\u5982\u679c\u4f60\u4e0d\u9000\u51fa <code>philosophers-stone</code> \u7684\u865a\u62df\u73af\u5883\uff0c\u5f53\u4f60\u5728\u7ec8\u7aef\u8fd0\u884c <code>python</code> \u65f6\uff0c\u5b83\u4f1a\u5c1d\u8bd5\u4f7f\u7528 <code>philosophers-stone</code> \u4e2d\u7684 Python\u3002</p> <pre><code>$ cd ~/code/prisoner-of-azkaban\n\n$ python main.py\n\n// \u5bfc\u5165 sirius \u65f6\u51fa\u9519\uff0c\u56e0\u4e3a\u5b83\u6ca1\u6709\u5b89\u88c5 \ud83d\ude31\nTraceback (most recent call last):\n    File \"main.py\", line 1, in &lt;module&gt;\n        import sirius\n</code></pre> <p>\u4f46\u662f\u5982\u679c\u4f60\u9000\u51fa\u865a\u62df\u73af\u5883\u5e76\u6fc0\u6d3b <code>prisoner-of-azkaban</code> \u7684\u65b0\u73af\u5883\uff0c\u90a3\u4e48\u5f53\u4f60\u8fd0\u884c <code>python</code> \u65f6\uff0c\u5b83\u4f1a\u4f7f\u7528 <code>prisoner-of-azkaban</code> \u4e2d\u865a\u62df\u73af\u5883\u7684 Python\u3002</p> <pre><code>$ cd ~/code/prisoner-of-azkaban\n\n// \u4f60\u4e0d\u9700\u8981\u5728\u539f\u9879\u76ee\u76ee\u5f55\u4e2d\u624d\u80fd\u9000\u51fa\u73af\u5883\uff0c\u5b9e\u9645\u4e0a\u5373\u4f7f\u4f60\u5df2\u7ecf\u5207\u6362\u5230\u53e6\u4e00\u4e2a\u9879\u76ee\u4e5f\u53ef\u4ee5\u9000\u51fa \ud83d\ude0e\n$ deactivate\n\n// \u6fc0\u6d3b prisoner-of-azkaban/.venv \u4e2d\u7684\u865a\u62df\u73af\u5883 \ud83d\ude80\n$ source .venv/bin/activate\n\n// \u73b0\u5728\uff0c\u5f53\u4f60\u8fd0\u884c python \u65f6\uff0c\u5b83\u4f1a\u627e\u5230\u5b89\u88c5\u5728\u6b64\u865a\u62df\u73af\u5883\u4e2d\u7684 sirius \u5305 \u2728\n$ python main.py\n\nI solemnly swear \ud83d\udc3a\n</code></pre>"},{"location":"virtual-environments/#_19","title":"\u66ff\u4ee3\u65b9\u6848","text":"<p>\u8fd9\u53ea\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u6307\u5357\uff0c\u5e2e\u52a9\u4f60\u5165\u95e8\u5e76\u4e86\u89e3 \u5e95\u5c42 \u7684\u5de5\u4f5c\u539f\u7406\u3002</p> <p>\u6709\u8bb8\u591a \u66ff\u4ee3\u65b9\u6cd5 \u53ef\u4ee5\u7528\u6765\u7ba1\u7406\u865a\u62df\u73af\u5883\u3001\u5305\u4f9d\u8d56\uff08requirements\uff09\u548c\u9879\u76ee\u3002</p> <p>\u4e00\u65e6\u4f60\u51c6\u5907\u597d\u5e76\u5e0c\u671b\u4f7f\u7528\u4e00\u4e2a\u5de5\u5177\u6765 \u7ba1\u7406\u6574\u4e2a\u9879\u76ee\uff0c\u5305\u62ec\u5305\u4f9d\u8d56\u3001\u865a\u62df\u73af\u5883\u7b49\uff0c\u6211\u5efa\u8bae\u4f60\u5c1d\u8bd5 uv\u3002</p> <p><code>uv</code> \u53ef\u4ee5\u505a\u5f88\u591a\u4e8b\u60c5\uff0c\u5305\u62ec\uff1a</p> <ul> <li>\u4e3a\u4f60\u5b89\u88c5 Python\uff0c\u5305\u62ec\u4e0d\u540c\u7248\u672c\u7684 Python</li> <li>\u7ba1\u7406\u4f60\u9879\u76ee\u7684 \u865a\u62df\u73af\u5883</li> <li>\u5b89\u88c5 \u5305</li> <li>\u7ba1\u7406\u9879\u76ee\u7684 \u5305\u4f9d\u8d56\u548c\u7248\u672c</li> <li>\u786e\u4fdd\u4f60\u62e5\u6709 \u7cbe\u786e \u7684\u5305\u548c\u7248\u672c\u96c6\uff0c\u8fde\u540c\u5b83\u4eec\u7684\u4f9d\u8d56\u9879\uff0c\u8fd9\u6837\u4f60\u5c31\u80fd\u786e\u4fdd\u5728\u5f00\u53d1\u65f6\u4e0e\u751f\u4ea7\u73af\u5883\u4e2d\u8fd0\u884c\u7684\u9879\u76ee\u5b8c\u5168\u76f8\u540c\uff0c\u8fd9\u88ab\u79f0\u4e3a \u9501\u5b9a\uff08locking\uff09</li> <li>\u8fd8\u6709\u8bb8\u591a\u5176\u4ed6\u529f\u80fd</li> </ul>"},{"location":"virtual-environments/#_20","title":"\u603b\u7ed3","text":"<p>\u5982\u679c\u4f60\u9605\u8bfb\u5e76\u7406\u89e3\u4e86\u6240\u6709\u8fd9\u4e9b\u5185\u5bb9\uff0c\u90a3\u4e48\u73b0\u5728 \u4f60\u6bd4\u5f88\u591a\u5f00\u53d1\u8005\u4e86\u89e3\u5f97\u66f4\u591a \u5173\u4e8e\u865a\u62df\u73af\u5883\u7684\u77e5\u8bc6\u3002\ud83e\udd13</p> <p>\u4e86\u89e3\u8fd9\u4e9b\u7ec6\u8282\uff0c\u53ef\u80fd\u5728\u4f60\u672a\u6765\u8c03\u8bd5\u4e00\u4e9b\u770b\u4f3c\u590d\u6742\u7684\u95ee\u9898\u65f6\u4f1a\u975e\u5e38\u6709\u7528\uff0c\u56e0\u4e3a\u4f60\u4f1a\u77e5\u9053 \u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002\ud83d\ude0e</p>"},{"location":"about/","title":"About","text":"<p>About SQLModel, its design, inspiration, and more. \ud83e\udd13</p>"},{"location":"advanced/","title":"Advanced User Guide","text":"<p>The Advanced User Guide is gradually growing, you can already read about some advanced topics.</p> <p>At some point it will include:</p> <ul> <li>How to use <code>async</code> and <code>await</code> with the async session.</li> <li>How to run migrations.</li> <li>How to combine SQLModel models with SQLAlchemy.</li> <li>...and more. \ud83e\udd13</li> </ul>"},{"location":"advanced/decimal/","title":"Decimal Numbers","text":"<p>In some cases you might need to be able to store decimal numbers with guarantees about the precision.</p> <p>This is particularly important if you are storing things like currencies, prices, accounts, and others, as you would want to know that you wouldn't have rounding errors.</p> <p>As an example, if you open Python and sum <code>1.1</code> + <code>2.2</code> you would expect to see <code>3.3</code>, but you will actually get <code>3.3000000000000003</code>:</p> <pre><code>&gt;&gt;&gt; 1.1 + 2.2\n3.3000000000000003\n</code></pre> <p>This is because of the way numbers are stored in \"ones and zeros\" (binary). But Python has a module and some types to have strict decimal values. You can read more about it in the official Python docs for Decimal.</p> <p>Because databases store data in the same ways as computers (in binary), they would have the same types of issues. And because of that, they also have a special decimal type.</p> <p>In most cases this would probably not be a problem, for example measuring views in a video, or the life bar in a videogame. But as you can imagine, this is particularly important when dealing with money and finances.</p>"},{"location":"advanced/decimal/#decimal-types","title":"Decimal Types","text":"<p>Pydantic has special support for <code>Decimal</code> types.</p> <p>When you use <code>Decimal</code> you can specify the number of digits and decimal places to support in the <code>Field()</code> function. They will be validated by Pydantic (for example when using FastAPI) and the same information will also be used for the database columns.</p> <p>Info</p> <p>For the database, SQLModel will use SQLAlchemy's <code>DECIMAL</code> type.</p>"},{"location":"advanced/decimal/#decimals-in-sqlmodel","title":"Decimals in SQLModel","text":"<p>Let's say that each hero in the database will have an amount of money. We could make that field a <code>Decimal</code> type using the <code>condecimal()</code> function:</p> Python 3.10+Python 3.7+ <pre><code>from decimal import Decimal\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n    money: Decimal = Field(default=0, max_digits=5, decimal_places=3)\n\n# More code here later \ud83d\udc47\n</code></pre> <pre><code>from decimal import Decimal\nfrom typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n    money: Decimal = Field(default=0, max_digits=5, decimal_places=3)\n\n# More code here later \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from decimal import Decimal\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n    money: Decimal = Field(default=0, max_digits=5, decimal_places=3)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\", money=1.1)\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", money=0.001)\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, money=2.2)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Rusty-Man\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        total_money = hero_1.money + hero_2.money\n        print(f\"Total money: {total_money}\")\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from decimal import Decimal\nfrom typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n    money: Decimal = Field(default=0, max_digits=5, decimal_places=3)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\", money=1.1)\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", money=0.001)\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, money=2.2)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Rusty-Man\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        total_money = hero_1.money + hero_2.money\n        print(f\"Total money: {total_money}\")\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Here we are saying that <code>money</code> can have at most <code>5</code> digits with <code>max_digits</code>, this includes the integers (to the left of the decimal dot) and the decimals (to the right of the decimal dot).</p> <p>We are also saying that the number of decimal places (to the right of the decimal dot) is <code>3</code>, so we can have 3 decimal digits for these numbers in the <code>money</code> field. This means that we will have 2 digits for the integer part and 3 digits for the decimal part.</p> <p>\u2705 So, for example, these are all valid numbers for the <code>money</code> field:</p> <ul> <li><code>12.345</code></li> <li><code>12.3</code></li> <li><code>12</code></li> <li><code>1.2</code></li> <li><code>0.123</code></li> <li><code>0</code></li> </ul> <p>\ud83d\udeab But these are all invalid numbers for that <code>money</code> field:</p> <ul> <li><code>1.2345</code></li> <li>This number has more than 3 decimal places.</li> <li><code>123.234</code></li> <li>This number has more than 5 digits in total (integer and decimal part).</li> <li><code>123</code></li> <li>Even though this number doesn't have any decimals, we still have 3 places saved for them, which means that we can only use 2 places for the integer part, and this number has 3 integer digits. So, the allowed number of integer digits is <code>max_digits</code> - <code>decimal_places</code> = 2.</li> </ul> <p>Tip</p> <p>Make sure you adjust the number of digits and decimal places for your own needs, in your own application. \ud83e\udd13</p>"},{"location":"advanced/decimal/#create-models-with-decimals","title":"Create models with Decimals","text":"<p>When creating new models you can actually pass normal (<code>float</code>) numbers, Pydantic will automatically convert them to <code>Decimal</code> types, and SQLModel will store them as <code>Decimal</code> types in the database (using SQLAlchemy).</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\", money=1.1)\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", money=0.001)\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, money=2.2)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\", money=1.1)\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", money=0.001)\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, money=2.2)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from decimal import Decimal\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n    money: Decimal = Field(default=0, max_digits=5, decimal_places=3)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\", money=1.1)\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", money=0.001)\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, money=2.2)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Rusty-Man\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        total_money = hero_1.money + hero_2.money\n        print(f\"Total money: {total_money}\")\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from decimal import Decimal\nfrom typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n    money: Decimal = Field(default=0, max_digits=5, decimal_places=3)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\", money=1.1)\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", money=0.001)\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, money=2.2)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Rusty-Man\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        total_money = hero_1.money + hero_2.money\n        print(f\"Total money: {total_money}\")\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"advanced/decimal/#select-decimal-data","title":"Select Decimal data","text":"<p>Then, when working with Decimal types, you can confirm that they indeed avoid those rounding errors from floats:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Rusty-Man\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        total_money = hero_1.money + hero_2.money\n        print(f\"Total money: {total_money}\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Rusty-Man\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        total_money = hero_1.money + hero_2.money\n        print(f\"Total money: {total_money}\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from decimal import Decimal\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n    money: Decimal = Field(default=0, max_digits=5, decimal_places=3)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\", money=1.1)\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", money=0.001)\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, money=2.2)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Rusty-Man\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        total_money = hero_1.money + hero_2.money\n        print(f\"Total money: {total_money}\")\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from decimal import Decimal\nfrom typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n    money: Decimal = Field(default=0, max_digits=5, decimal_places=3)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\", money=1.1)\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", money=0.001)\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, money=2.2)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Rusty-Man\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        total_money = hero_1.money + hero_2.money\n        print(f\"Total money: {total_money}\")\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"advanced/decimal/#review-the-results","title":"Review the results","text":"<p>Now if you run this, instead of printing the unexpected number <code>3.3000000000000003</code>, it prints <code>3.300</code>:</p> <pre><code>$ python app.py\n\n// Some boilerplate and previous output omitted \ud83d\ude09\n\n// The type of money is Decimal('1.100')\nHero 1: id=1 secret_name='Dive Wilson' age=None name='Deadpond' money=Decimal('1.100')\n\n// More output omitted here \ud83e\udd13\n\n// The type of money is Decimal('1.100')\nHero 2: id=3 secret_name='Tommy Sharp' age=48 name='Rusty-Man' money=Decimal('2.200')\n\n// No rounding errors, just 3.3! \ud83c\udf89\nTotal money: 3.300\n</code></pre> <p>Warning</p> <p>Although Decimal types are supported and used in the Python side, not all databases support it. In particular, SQLite doesn't support decimals, so it will convert them to the same floating <code>NUMERIC</code> type it supports.</p> <p>But decimals are supported by most of the other SQL databases. \ud83c\udf89</p>"},{"location":"advanced/uuid/","title":"UUID (Universally Unique Identifiers)","text":"<p>We have discussed some data types like <code>str</code>, <code>int</code>, etc.</p> <p>There's another data type called <code>UUID</code> (Universally Unique Identifier).</p> <p>You might have seen UUIDs, for example in URLs. They look something like this:</p> <pre><code>4ff2dab7-bffe-414d-88a5-1826b9fea8df\n</code></pre> <p>UUIDs can be particularly useful as an alternative to auto-incrementing integers for primary keys.</p> <p>Info</p> <p>Official support for UUIDs was added in SQLModel version <code>0.0.20</code>.</p>"},{"location":"advanced/uuid/#about-uuids","title":"About UUIDs","text":"<p>UUIDs are numbers with 128 bits, that is, 16 bytes.</p> <p>They are normally seen as 32 hexadecimal characters separated by dashes.</p> <p>There are several versions of UUID, some versions include the current time in the bytes, but UUIDs version 4 are mainly random, the way they are generated makes them virtually unique.</p>"},{"location":"advanced/uuid/#distributed-uuids","title":"Distributed UUIDs","text":"<p>You could generate one UUID in one computer, and someone else could generate another UUID in another computer, and it would be almost impossible for both UUIDs to be the same.</p> <p>This means that you don't have to wait for the DB to generate the ID for you, you can generate it in code before sending it to the database, because you can be quite certain it will be unique.</p> <p>Technical Details</p> <p>Because the number of possible UUIDs is so large (2^128), the probability of generating the same UUID version 4 (the random ones) twice is very low.</p> <p>If you had 103 trillion version 4 UUIDs stored in the database, the probability of generating a duplicated new one is one in a billion. \ud83e\udd13</p> <p>For the same reason, if you decided to migrate your database, combine it with another database and mix records, etc. you would most probably be able to just use the same UUIDs you had originally.</p> <p>Warning</p> <p>There's still a chance you could have a collision, but it's very low. In most cases you could assume you wouldn't have it, but it would be good to be prepared for it.</p>"},{"location":"advanced/uuid/#uuids-prevent-information-leakage","title":"UUIDs Prevent Information Leakage","text":"<p>Because UUIDs version 4 are random, you could give these IDs to the application users or to other systems, without exposing information about your application.</p> <p>When using auto-incremented integers for primary keys, you could implicitly expose information about your system. For example, someone could create a new hero, and by getting the hero ID <code>20</code> they would know that you have 20 heroes in your system (or even less, if some heroes were already deleted).</p>"},{"location":"advanced/uuid/#uuid-storage","title":"UUID Storage","text":"<p>Because UUIDs are 16 bytes, they would consume more space in the database than a smaller auto-incremented integer (commonly 4 bytes).</p> <p>Depending on the database you use, UUIDs could have better or worse performance. If you are concerned about that, you should check the documentation for the specific database.</p> <p>SQLite doesn't have a specific UUID type, so it will store the UUID as a string. Other databases like Postgres have a specific UUID type which would result in better performance and space usage than strings.</p>"},{"location":"advanced/uuid/#models-with-uuids","title":"Models with UUIDs","text":"<p>To use UUIDs as primary keys we need to import <code>uuid</code>, which is part of the Python standard library (we don't have to install anything) and use <code>uuid.UUID</code> as the type for the ID field.</p> <p>We also want the Python code to generate a new UUID when creating a new instance, so we use <code>default_factory</code>.</p> <p>The parameter <code>default_factory</code> takes a function (or in general, a \"callable\"). This function will be called when creating a new instance of the model and the value returned by the function will be used as the default value for the field.</p> <p>For the function in <code>default_factory</code> we pass <code>uuid.uuid4</code>, which is a function that generates a new UUID version 4.</p> <p>Tip</p> <p>We don't call <code>uuid.uuid4()</code> ourselves in the code (we don't put the parenthesis). Instead, we pass the function itself, just <code>uuid.uuid4</code>, so that SQLModel can call it every time we create a new instance.</p> <p>This means that the UUID will be generated in the Python code, before sending the data to the database.</p> Python 3.10+ <pre><code>import uuid\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: uuid.UUID = Field(default_factory=uuid.uuid4, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview <pre><code>import uuid\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: uuid.UUID = Field(default_factory=uuid.uuid4, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_hero():\n    with Session(engine) as session:\n        hero = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n        print(\"The hero before saving in the DB\")\n        print(hero)\n        print(\"The hero ID was already set\")\n        print(hero.id)\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"After saving in the DB\")\n        print(hero)\n\n\ndef select_hero():\n    with Session(engine) as session:\n        hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_2)\n        session.commit()\n        session.refresh(hero_2)\n        hero_id = hero_2.id\n        print(\"Created hero:\")\n        print(hero_2)\n        print(\"Created hero ID:\")\n        print(hero_id)\n\n        statement = select(Hero).where(Hero.id == hero_id)\n        selected_hero = session.exec(statement).one()\n        print(\"Selected hero:\")\n        print(selected_hero)\n        print(\"Selected hero ID:\")\n        print(selected_hero.id)\n\n\ndef main() -&gt; None:\n    create_db_and_tables()\n    create_hero()\n    select_hero()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>import uuid\nfrom typing import Union\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: uuid.UUID = Field(default_factory=uuid.uuid4, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_hero():\n    with Session(engine) as session:\n        hero = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n        print(\"The hero before saving in the DB\")\n        print(hero)\n        print(\"The hero ID was already set\")\n        print(hero.id)\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"After saving in the DB\")\n        print(hero)\n\n\ndef select_hero():\n    with Session(engine) as session:\n        hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_2)\n        session.commit()\n        session.refresh(hero_2)\n        hero_id = hero_2.id\n        print(\"Created hero:\")\n        print(hero_2)\n        print(\"Created hero ID:\")\n        print(hero_id)\n\n        statement = select(Hero).where(Hero.id == hero_id)\n        selected_hero = session.exec(statement).one()\n        print(\"Selected hero:\")\n        print(selected_hero)\n        print(\"Selected hero ID:\")\n        print(selected_hero.id)\n\n\ndef main() -&gt; None:\n    create_db_and_tables()\n    create_hero()\n    select_hero()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Pydantic has support for <code>UUID</code> types.</p> <p>For the database, SQLModel internally uses SQLAlchemy's <code>Uuid</code> type.</p>"},{"location":"advanced/uuid/#create-a-record-with-a-uuid","title":"Create a Record with a UUID","text":"<p>When creating a <code>Hero</code> record, the <code>id</code> field will be automatically populated with a new UUID because we set <code>default_factory=uuid.uuid4</code>.</p> <p>As <code>uuid.uuid4</code> will be called when creating the model instance, even before sending it to the database, we can access and use the ID right away.</p> <p>And that same ID (a UUID) will be saved in the database.</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\ndef create_hero():\n    with Session(engine) as session:\n        hero = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n        print(\"The hero before saving in the DB\")\n        print(hero)\n        print(\"The hero ID was already set\")\n        print(hero.id)\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"After saving in the DB\")\n        print(hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview <pre><code>import uuid\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: uuid.UUID = Field(default_factory=uuid.uuid4, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_hero():\n    with Session(engine) as session:\n        hero = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n        print(\"The hero before saving in the DB\")\n        print(hero)\n        print(\"The hero ID was already set\")\n        print(hero.id)\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"After saving in the DB\")\n        print(hero)\n\n\ndef select_hero():\n    with Session(engine) as session:\n        hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_2)\n        session.commit()\n        session.refresh(hero_2)\n        hero_id = hero_2.id\n        print(\"Created hero:\")\n        print(hero_2)\n        print(\"Created hero ID:\")\n        print(hero_id)\n\n        statement = select(Hero).where(Hero.id == hero_id)\n        selected_hero = session.exec(statement).one()\n        print(\"Selected hero:\")\n        print(selected_hero)\n        print(\"Selected hero ID:\")\n        print(selected_hero.id)\n\n\ndef main() -&gt; None:\n    create_db_and_tables()\n    create_hero()\n    select_hero()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>import uuid\nfrom typing import Union\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: uuid.UUID = Field(default_factory=uuid.uuid4, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_hero():\n    with Session(engine) as session:\n        hero = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n        print(\"The hero before saving in the DB\")\n        print(hero)\n        print(\"The hero ID was already set\")\n        print(hero.id)\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"After saving in the DB\")\n        print(hero)\n\n\ndef select_hero():\n    with Session(engine) as session:\n        hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_2)\n        session.commit()\n        session.refresh(hero_2)\n        hero_id = hero_2.id\n        print(\"Created hero:\")\n        print(hero_2)\n        print(\"Created hero ID:\")\n        print(hero_id)\n\n        statement = select(Hero).where(Hero.id == hero_id)\n        selected_hero = session.exec(statement).one()\n        print(\"Selected hero:\")\n        print(selected_hero)\n        print(\"Selected hero ID:\")\n        print(selected_hero.id)\n\n\ndef main() -&gt; None:\n    create_db_and_tables()\n    create_hero()\n    select_hero()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"advanced/uuid/#select-a-hero","title":"Select a Hero","text":"<p>We can do the same operations we could do with other fields.</p> <p>For example we can select a hero by ID:</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_hero():\n    with Session(engine) as session:\n        hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_2)\n        session.commit()\n        session.refresh(hero_2)\n        hero_id = hero_2.id\n        print(\"Created hero:\")\n        print(hero_2)\n        print(\"Created hero ID:\")\n        print(hero_id)\n\n        statement = select(Hero).where(Hero.id == hero_id)\n        selected_hero = session.exec(statement).one()\n        print(\"Selected hero:\")\n        print(selected_hero)\n        print(\"Selected hero ID:\")\n        print(selected_hero.id)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview <pre><code>import uuid\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: uuid.UUID = Field(default_factory=uuid.uuid4, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_hero():\n    with Session(engine) as session:\n        hero = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n        print(\"The hero before saving in the DB\")\n        print(hero)\n        print(\"The hero ID was already set\")\n        print(hero.id)\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"After saving in the DB\")\n        print(hero)\n\n\ndef select_hero():\n    with Session(engine) as session:\n        hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_2)\n        session.commit()\n        session.refresh(hero_2)\n        hero_id = hero_2.id\n        print(\"Created hero:\")\n        print(hero_2)\n        print(\"Created hero ID:\")\n        print(hero_id)\n\n        statement = select(Hero).where(Hero.id == hero_id)\n        selected_hero = session.exec(statement).one()\n        print(\"Selected hero:\")\n        print(selected_hero)\n        print(\"Selected hero ID:\")\n        print(selected_hero.id)\n\n\ndef main() -&gt; None:\n    create_db_and_tables()\n    create_hero()\n    select_hero()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>import uuid\nfrom typing import Union\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: uuid.UUID = Field(default_factory=uuid.uuid4, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_hero():\n    with Session(engine) as session:\n        hero = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n        print(\"The hero before saving in the DB\")\n        print(hero)\n        print(\"The hero ID was already set\")\n        print(hero.id)\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"After saving in the DB\")\n        print(hero)\n\n\ndef select_hero():\n    with Session(engine) as session:\n        hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_2)\n        session.commit()\n        session.refresh(hero_2)\n        hero_id = hero_2.id\n        print(\"Created hero:\")\n        print(hero_2)\n        print(\"Created hero ID:\")\n        print(hero_id)\n\n        statement = select(Hero).where(Hero.id == hero_id)\n        selected_hero = session.exec(statement).one()\n        print(\"Selected hero:\")\n        print(selected_hero)\n        print(\"Selected hero ID:\")\n        print(selected_hero.id)\n\n\ndef main() -&gt; None:\n    create_db_and_tables()\n    create_hero()\n    select_hero()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Tip</p> <p>Even if a database like SQLite stores the UUID as a string, we can select and run comparisons using a Python UUID object and it will work.</p> <p>SQLModel (actually SQLAlchemy) will take care of making it work. \u2728</p>"},{"location":"advanced/uuid/#select-with-sessionget","title":"Select with <code>session.get()</code>","text":"<p>We could also select by ID with <code>session.get()</code>:</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_hero():\n    with Session(engine) as session:\n        hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_2)\n        session.commit()\n        session.refresh(hero_2)\n        hero_id = hero_2.id\n        print(\"Created hero:\")\n        print(hero_2)\n        print(\"Created hero ID:\")\n        print(hero_id)\n\n        selected_hero = session.get(Hero, hero_id)\n        print(\"Selected hero:\")\n        print(selected_hero)\n        print(\"Selected hero ID:\")\n        print(selected_hero.id)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview <pre><code>import uuid\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: uuid.UUID = Field(default_factory=uuid.uuid4, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_hero():\n    with Session(engine) as session:\n        hero = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n        print(\"The hero before saving in the DB\")\n        print(hero)\n        print(\"The hero ID was already set\")\n        print(hero.id)\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"After saving in the DB\")\n        print(hero)\n\n\ndef select_hero():\n    with Session(engine) as session:\n        hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_2)\n        session.commit()\n        session.refresh(hero_2)\n        hero_id = hero_2.id\n        print(\"Created hero:\")\n        print(hero_2)\n        print(\"Created hero ID:\")\n        print(hero_id)\n\n        selected_hero = session.get(Hero, hero_id)\n        print(\"Selected hero:\")\n        print(selected_hero)\n        print(\"Selected hero ID:\")\n        print(selected_hero.id)\n\n\ndef main() -&gt; None:\n    create_db_and_tables()\n    create_hero()\n    select_hero()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>import uuid\nfrom typing import Union\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: uuid.UUID = Field(default_factory=uuid.uuid4, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_hero():\n    with Session(engine) as session:\n        hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n        print(\"The hero before saving in the DB\")\n        print(hero_1)\n        print(\"The hero ID was already set\")\n        print(hero_1.id)\n        session.add(hero_1)\n        session.commit()\n        session.refresh(hero_1)\n        print(\"After saving in the DB\")\n        print(hero_1)\n\n\ndef select_hero():\n    with Session(engine) as session:\n        hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_2)\n        session.commit()\n        session.refresh(hero_2)\n        hero_id = hero_2.id\n        print(\"Created hero:\")\n        print(hero_2)\n        print(\"Created hero ID:\")\n        print(hero_id)\n\n        selected_hero = session.get(Hero, hero_id)\n        print(\"Selected hero:\")\n        print(selected_hero)\n        print(\"Selected hero ID:\")\n        print(selected_hero.id)\n\n\ndef main() -&gt; None:\n    create_db_and_tables()\n    create_hero()\n    select_hero()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>The same way as with other fields, we could update, delete, etc. \ud83d\ude80</p>"},{"location":"advanced/uuid/#run-the-program","title":"Run the program","text":"<p>If you run the program, you will see the UUID generated in the Python code, and then the record saved in the database with the same UUID.</p> <pre><code>$ python app.py\n\n// Some boilerplate and previous output omitted \ud83d\ude09\n\n// In SQLite, the UUID will be stored as a string\n// other DBs like Postgres have a specific UUID type\nCREATE TABLE hero (\n        id CHAR(32) NOT NULL,\n        name VARCHAR NOT NULL,\n        secret_name VARCHAR NOT NULL,\n        age INTEGER,\n        PRIMARY KEY (id)\n)\n\n// Before saving in the DB we already have the UUID\nThe hero before saving in the DB\nname='Deadpond' secret_name='Dive Wilson' id=UUID('0e44c1a6-88d3-4a35-8b8a-307faa2def28') age=None\nThe hero ID was already set\n0e44c1a6-88d3-4a35-8b8a-307faa2def28\n\n// The SQL statement to insert the record uses our UUID\nINSERT INTO hero (id, name, secret_name, age) VALUES (?, ?, ?, ?)\n('0e44c1a688d34a358b8a307faa2def28', 'Deadpond', 'Dive Wilson', None)\n\n// And indeed, the record was saved with the UUID we created \ud83d\ude0e\nAfter saving in the DB\nage=None id=UUID('0e44c1a6-88d3-4a35-8b8a-307faa2def28') name='Deadpond' secret_name='Dive Wilson'\n\n// Now we create a new hero (to select it in a bit)\nCreated hero:\nage=None id=UUID('9d90d186-85db-4eaa-891a-def7b4ae2dab') name='Spider-Boy' secret_name='Pedro Parqueador'\nCreated hero ID:\n9d90d186-85db-4eaa-891a-def7b4ae2dab\n\n// And now we select it\nSelected hero:\nage=None id=UUID('9d90d186-85db-4eaa-891a-def7b4ae2dab') name='Spider-Boy' secret_name='Pedro Parqueador'\nSelected hero ID:\n9d90d186-85db-4eaa-891a-def7b4ae2dab\n</code></pre>"},{"location":"advanced/uuid/#learn-more","title":"Learn More","text":"<p>You can learn more about UUIDs in:</p> <ul> <li>The official Python docs for UUID.</li> <li>The Wikipedia for UUID.</li> </ul>"},{"location":"learn/","title":"\u5b66\u4e60","text":"<p>\u5728\u8fd9\u91cc\u5b66\u4e60\u5982\u4f55\u4f7f\u7528 SQLModel\u3002</p> <p>\u5185\u5bb9\u5305\u62ec \u6570\u636e\u5e93\u3001SQL \u7684\u7b80\u4ecb\uff0c\u4ee5\u53ca\u5982\u4f55\u901a\u8fc7 **\u4ee3\u7801**\u4e0e\u6570\u636e\u5e93\u4ea4\u4e92\u7b49\u3002</p> <p>\u60a8\u53ef\u4ee5\u5c06\u5176\u89c6\u4e3a\u4e00\u672c**\u4e66**\u3001\u4e00\u95e8**\u8bfe\u7a0b**\uff0c\u4e5f\u662f\u5b66\u4e60 SQLModel \u7684**\u5b98\u65b9**\u4e14\u63a8\u8350\u7684\u65b9\u6cd5\u3002\ud83d\ude0e</p>"},{"location":"resources/","title":"Resources","text":"<p>Additional resources, how to help and get help, how to contribute, and more. \u2708\ufe0f</p>"},{"location":"tutorial/","title":"\u6559\u7a0b - \u7528\u6237\u6307\u5357","text":"<p>\u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u4f60\u5c06\u5b66\u4e60\u5982\u4f55\u4f7f\u7528 SQLModel\u3002</p>"},{"location":"tutorial/#_1","title":"\u7c7b\u578b\u63d0\u793a","text":"<p>\u5982\u679c\u4f60\u9700\u8981\u590d\u4e60\u5982\u4f55\u4f7f\u7528 Python \u7c7b\u578b\u63d0\u793a\uff08\u7c7b\u578b\u6ce8\u89e3\uff09\uff0c\u53ef\u4ee5\u67e5\u770b FastAPI \u7684 Python \u7c7b\u578b\u4ecb\u7ecd\u3002</p> <p>\u4f60\u4e5f\u53ef\u4ee5\u67e5\u770b mypy \u5907\u5fd8\u5355\u3002</p> <p>SQLModel \u4e3a\u6240\u6709\u5185\u5bb9\u90fd\u4f7f\u7528\u7c7b\u578b\u6ce8\u89e3\uff0c\u8fd9\u6837\u4f60\u53ef\u4ee5\u4f7f\u7528\u719f\u6089\u7684 Python \u8bed\u6cd5\uff0c\u5e76\u83b7\u5f97\u7f16\u8f91\u5668\u7684\u6240\u6709\u652f\u6301\uff0c\u5982\u81ea\u52a8\u8865\u5168\u548c\u7f16\u8f91\u5668\u5185\u9519\u8bef\u68c0\u67e5\u3002</p>"},{"location":"tutorial/#_2","title":"\u7b80\u4ecb","text":"<p>\u672c\u6559\u7a0b\u5c06\u4e00\u6b65\u6b65\u5c55\u793a\u5982\u4f55\u4f7f\u7528 SQLModel \u7684\u6240\u6709\u529f\u80fd\u3002</p> <p>\u6bcf\u4e2a\u7ae0\u8282\u90fd\u4f1a\u5728\u524d\u9762\u7684\u57fa\u7840\u4e0a\u9010\u6b65\u6784\u5efa\uff0c\u4f46\u5b83\u662f\u6309\u4e3b\u9898\u7ed3\u6784\u5316\u7684\uff0c\u56e0\u6b64\u4f60\u53ef\u4ee5\u76f4\u63a5\u8df3\u5230\u4efb\u4f55\u4e00\u4e2a\u5177\u4f53\u90e8\u5206\uff0c\u4ee5\u89e3\u51b3\u4f60\u7684\u7279\u5b9a\u9700\u6c42\u3002</p> <p>\u5b83\u8fd8\u88ab\u8bbe\u8ba1\u4e3a\u672a\u6765\u7684\u53c2\u8003\u8d44\u6599\u3002</p> <p>\u8fd9\u6837\uff0c\u4f60\u53ef\u4ee5\u56de\u6765\u67e5\u770b\u4f60\u9700\u8981\u7684\u5185\u5bb9\u3002</p>"},{"location":"tutorial/#_3","title":"\u8fd0\u884c\u4ee3\u7801","text":"<p>\u6240\u6709\u7684\u4ee3\u7801\u5757\u90fd\u53ef\u4ee5\u76f4\u63a5\u590d\u5236\u5e76\u4f7f\u7528\uff08\u5b83\u4eec\u662f\u7ecf\u8fc7\u6d4b\u8bd5\u7684 Python \u6587\u4ef6\uff09\u3002</p> <p>\u5f3a\u70c8\u5efa\u8bae\u4f60\u4eb2\u81ea\u7f16\u5199\u6216\u590d\u5236\u4ee3\u7801\u3001\u7f16\u8f91\u5e76\u5728\u672c\u5730\u8fd0\u884c\u3002</p> <p>\u5728\u7f16\u8f91\u5668\u4e2d\u4f7f\u7528\u8fd9\u4e9b\u4ee3\u7801\uff0c\u624d\u80fd\u771f\u6b63\u5c55\u793a SQLModel \u7684\u4f18\u52bf\uff0c\u770b\u5230\u5b83\u4e3a\u4f60\u8282\u7701\u4e86\u591a\u5c11\u4ee3\u7801\uff0c\u5e76\u4e14\u83b7\u5f97\u6240\u6709\u7684\u7f16\u8f91\u5668\u652f\u6301\uff0c\u5305\u62ec\u81ea\u52a8\u8865\u5168\u548c\u7f16\u8f91\u5668\u5185\u9519\u8bef\u68c0\u67e5\uff0c\u5e2e\u52a9\u4f60\u907f\u514d\u5f88\u591a bug\u3002</p> <p>\u8fd0\u884c\u793a\u4f8b\u4ee3\u7801\u5c06\u771f\u6b63\u5e2e\u52a9\u4f60\u7406\u89e3\u53d1\u751f\u4e86\u4ec0\u4e48\u3002</p> <p>\u901a\u8fc7\u8fd0\u884c\u4e00\u4e9b\u793a\u4f8b\u5e76\u8fdb\u884c\u5c1d\u8bd5\uff0c\u4f60\u5c06\u5b66\u5230\u6bd4\u9605\u8bfb\u8fd9\u91cc\u7684\u6240\u6709\u6587\u6863\u66f4\u591a\u7684\u4e1c\u897f\u3002</p>"},{"location":"tutorial/automatic-id-none-refresh/","title":"Automatic IDs, None Defaults, and Refreshing Data","text":"<p>In the previous chapter, we saw how to add rows to the database using SQLModel.</p> <p>Now let's talk a bit about why the <code>id</code> field can't be <code>NULL</code> on the database because it's a primary key, and we declare it using <code>Field(primary_key=True)</code>.</p> <p>But the same <code>id</code> field actually can be <code>None</code> in the Python code, so we declare the type with <code>int | None (or Optional[int])</code>, and set the default value to <code>Field(default=None)</code>:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    print(\"Before interacting with the database\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        print(\"After committing the session, show IDs\")\n        print(\"Hero 1 ID:\", hero_1.id)\n        print(\"Hero 2 ID:\", hero_2.id)\n        print(\"Hero 3 ID:\", hero_3.id)\n\n        print(\"After committing the session, show names\")\n        print(\"Hero 1 name:\", hero_1.name)\n        print(\"Hero 2 name:\", hero_2.name)\n        print(\"Hero 3 name:\", hero_3.name)\n\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n        session.refresh(hero_3)\n\n        print(\"After refreshing the heroes\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n    print(\"After the session closes\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    print(\"Before interacting with the database\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        print(\"After committing the session, show IDs\")\n        print(\"Hero 1 ID:\", hero_1.id)\n        print(\"Hero 2 ID:\", hero_2.id)\n        print(\"Hero 3 ID:\", hero_3.id)\n\n        print(\"After committing the session, show names\")\n        print(\"Hero 1 name:\", hero_1.name)\n        print(\"Hero 2 name:\", hero_2.name)\n        print(\"Hero 3 name:\", hero_3.name)\n\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n        session.refresh(hero_3)\n\n        print(\"After refreshing the heroes\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n    print(\"After the session closes\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Next, I'll show you a bit more about the synchronization of data between the database and the Python code.</p> <p>When do we get an actual <code>int</code> from the database in that <code>id</code> field? Let's see all that. \ud83d\udc47</p>"},{"location":"tutorial/automatic-id-none-refresh/#create-a-new-hero-instance","title":"Create a New <code>Hero</code> Instance","text":"<p>When we create a new <code>Hero</code> instance, we don't set the <code>id</code>:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    print(\"Before interacting with the database\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        print(\"After committing the session, show IDs\")\n        print(\"Hero 1 ID:\", hero_1.id)\n        print(\"Hero 2 ID:\", hero_2.id)\n        print(\"Hero 3 ID:\", hero_3.id)\n\n        print(\"After committing the session, show names\")\n        print(\"Hero 1 name:\", hero_1.name)\n        print(\"Hero 2 name:\", hero_2.name)\n        print(\"Hero 3 name:\", hero_3.name)\n\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n        session.refresh(hero_3)\n\n        print(\"After refreshing the heroes\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n    print(\"After the session closes\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    print(\"Before interacting with the database\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        print(\"After committing the session, show IDs\")\n        print(\"Hero 1 ID:\", hero_1.id)\n        print(\"Hero 2 ID:\", hero_2.id)\n        print(\"Hero 3 ID:\", hero_3.id)\n\n        print(\"After committing the session, show names\")\n        print(\"Hero 1 name:\", hero_1.name)\n        print(\"Hero 2 name:\", hero_2.name)\n        print(\"Hero 3 name:\", hero_3.name)\n\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n        session.refresh(hero_3)\n\n        print(\"After refreshing the heroes\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n    print(\"After the session closes\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/automatic-id-none-refresh/#how-optional-helps","title":"How <code>Optional</code> Helps","text":"<p>Because we don't set the <code>id</code>, it takes the Python's default value of <code>None</code> that we set in <code>Field(default=None)</code>.</p> <p>This is the only reason why we define it with <code>Optional</code> and with a default value of <code>None</code>.</p> <p>Because at this point in the code, before interacting with the database, the Python value could actually be <code>None</code>.</p> <p>If we assumed that the <code>id</code> was always an <code>int</code> and added the type annotation without <code>Optional</code>, we could end up writing broken code, like:</p> <pre><code>next_hero_id = hero_1.id + 1\n</code></pre> <p>If we ran this code before saving the hero to the database and the <code>hero_1.id</code> was still <code>None</code>, we would get an error like:</p> <pre><code>TypeError: unsupported operand type(s) for +: 'NoneType' and 'int'\n</code></pre> <p>But by declaring it with <code>Optional[int]</code>, the editor will help us to avoid writing broken code by showing us a warning telling us that the code could be invalid if <code>hero_1.id</code> is <code>None</code>. \ud83d\udd0d</p>"},{"location":"tutorial/automatic-id-none-refresh/#print-the-default-id-values","title":"Print the Default <code>id</code> Values","text":"<p>We can confirm that by printing our heroes before adding them to the database:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    print(\"Before interacting with the database\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    print(\"Before interacting with the database\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    print(\"Before interacting with the database\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        print(\"After committing the session, show IDs\")\n        print(\"Hero 1 ID:\", hero_1.id)\n        print(\"Hero 2 ID:\", hero_2.id)\n        print(\"Hero 3 ID:\", hero_3.id)\n\n        print(\"After committing the session, show names\")\n        print(\"Hero 1 name:\", hero_1.name)\n        print(\"Hero 2 name:\", hero_2.name)\n        print(\"Hero 3 name:\", hero_3.name)\n\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n        session.refresh(hero_3)\n\n        print(\"After refreshing the heroes\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n    print(\"After the session closes\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    print(\"Before interacting with the database\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        print(\"After committing the session, show IDs\")\n        print(\"Hero 1 ID:\", hero_1.id)\n        print(\"Hero 2 ID:\", hero_2.id)\n        print(\"Hero 3 ID:\", hero_3.id)\n\n        print(\"After committing the session, show names\")\n        print(\"Hero 1 name:\", hero_1.name)\n        print(\"Hero 2 name:\", hero_2.name)\n        print(\"Hero 3 name:\", hero_3.name)\n\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n        session.refresh(hero_3)\n\n        print(\"After refreshing the heroes\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n    print(\"After the session closes\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>That will output:</p> <pre><code>$ python app.py\n\n// Output above omitted \ud83d\udc46\n\nBefore interacting with the database\nHero 1: id=None name='Deadpond' secret_name='Dive Wilson' age=None\nHero 2: id=None name='Spider-Boy' secret_name='Pedro Parqueador' age=None\nHero 3: id=None name='Rusty-Man' secret_name='Tommy Sharp' age=48\n</code></pre> <p>Notice they all have <code>id=None</code>.</p> <p>That's the default value we defined in the <code>Hero</code> model class.</p> <p>What happens when we <code>add</code> these objects to the session?</p>"},{"location":"tutorial/automatic-id-none-refresh/#add-the-objects-to-the-session","title":"Add the Objects to the Session","text":"<p>After we add the <code>Hero</code> instance objects to the session, the IDs are still <code>None</code>.</p> <p>We can verify by creating a session using a <code>with</code> block and adding the objects. And then printing them again:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    print(\"Before interacting with the database\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    print(\"Before interacting with the database\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    print(\"Before interacting with the database\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        print(\"After committing the session, show IDs\")\n        print(\"Hero 1 ID:\", hero_1.id)\n        print(\"Hero 2 ID:\", hero_2.id)\n        print(\"Hero 3 ID:\", hero_3.id)\n\n        print(\"After committing the session, show names\")\n        print(\"Hero 1 name:\", hero_1.name)\n        print(\"Hero 2 name:\", hero_2.name)\n        print(\"Hero 3 name:\", hero_3.name)\n\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n        session.refresh(hero_3)\n\n        print(\"After refreshing the heroes\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n    print(\"After the session closes\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    print(\"Before interacting with the database\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        print(\"After committing the session, show IDs\")\n        print(\"Hero 1 ID:\", hero_1.id)\n        print(\"Hero 2 ID:\", hero_2.id)\n        print(\"Hero 3 ID:\", hero_3.id)\n\n        print(\"After committing the session, show names\")\n        print(\"Hero 1 name:\", hero_1.name)\n        print(\"Hero 2 name:\", hero_2.name)\n        print(\"Hero 3 name:\", hero_3.name)\n\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n        session.refresh(hero_3)\n\n        print(\"After refreshing the heroes\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n    print(\"After the session closes\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>This will, again, output the <code>id</code>s of the objects as <code>None</code>:</p> <pre><code>$ python app.py\n\n// Output above omitted \ud83d\udc46\n\nAfter adding to the session\nHero 1: id=None name='Deadpond' secret_name='Dive Wilson' age=None\nHero 2: id=None name='Spider-Boy' secret_name='Pedro Parqueador' age=None\nHero 3: id=None name='Rusty-Man' secret_name='Tommy Sharp' age=48\n</code></pre> <p>As we saw before, the session is smart and doesn't talk to the database every time we prepare something to be changed, only after we are ready and tell it to <code>commit</code> the changes it goes and sends all the SQL to the database to store the data.</p>"},{"location":"tutorial/automatic-id-none-refresh/#commit-the-changes-to-the-database","title":"Commit the Changes to the Database","text":"<p>Then we can <code>commit</code> the changes in the session, and print again:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    print(\"Before interacting with the database\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        print(\"After committing the session, show IDs\")\n        print(\"Hero 1 ID:\", hero_1.id)\n        print(\"Hero 2 ID:\", hero_2.id)\n        print(\"Hero 3 ID:\", hero_3.id)\n\n        print(\"After committing the session, show names\")\n        print(\"Hero 1 name:\", hero_1.name)\n        print(\"Hero 2 name:\", hero_2.name)\n        print(\"Hero 3 name:\", hero_3.name)\n\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n        session.refresh(hero_3)\n\n        print(\"After refreshing the heroes\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n    print(\"After the session closes\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    print(\"Before interacting with the database\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        print(\"After committing the session, show IDs\")\n        print(\"Hero 1 ID:\", hero_1.id)\n        print(\"Hero 2 ID:\", hero_2.id)\n        print(\"Hero 3 ID:\", hero_3.id)\n\n        print(\"After committing the session, show names\")\n        print(\"Hero 1 name:\", hero_1.name)\n        print(\"Hero 2 name:\", hero_2.name)\n        print(\"Hero 3 name:\", hero_3.name)\n\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n        session.refresh(hero_3)\n\n        print(\"After refreshing the heroes\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n    print(\"After the session closes\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>And now, something unexpected happens, look at the output, it seems as if the <code>Hero</code> instance objects had no data at all:</p> <pre><code>$ python app.py\n\n// Output above omitted \ud83d\udc46\n\n// Here the engine talks to the database, the SQL part\nINFO Engine BEGIN (implicit)\nINFO Engine INSERT INTO hero (name, secret_name, age) VALUES (?, ?, ?)\nINFO Engine [generated in 0.00018s] ('Deadpond', 'Dive Wilson', None)\nINFO Engine INSERT INTO hero (name, secret_name, age) VALUES (?, ?, ?)\nINFO Engine [cached since 0.0008968s ago] ('Spider-Boy', 'Pedro Parqueador', None)\nINFO Engine INSERT INTO hero (name, secret_name, age) VALUES (?, ?, ?)\nINFO Engine [cached since 0.001143s ago] ('Rusty-Man', 'Tommy Sharp', 48)\nINFO Engine COMMIT\n\n// And now our prints\nAfter committing the session\nHero 1:\nHero 2:\nHero 3:\n\n// What is happening here? \ud83d\ude31\n</code></pre> <p>What happens is that SQLModel (actually SQLAlchemy) is internally marking those objects as \"expired\", they don't have the latest version of their data. This is because we could have some fields updated in the database, for example, imagine a field <code>updated_at: datetime</code> that was automatically updated when we saved changes.</p> <p>The same way, other values could have changed, so the option the session has to be sure and safe is to just internally mark the objects as expired.</p> <p>And then, next time we access each attribute, for example with:</p> <pre><code>current_hero_name = hero_1.name\n</code></pre> <p>...SQLModel (actually SQLAlchemy) will make sure to contact the database and get the most recent version of the data, updating that field <code>name</code> in our object and then making it available for the rest of the Python expression. In the example above, at that point, Python would be able to continue executing and use that <code>hero_1.name</code> value (just updated) to put it in the variable <code>current_hero_name</code>.</p> <p>All this happens automatically and behind the scenes. \u2728</p> <p>And here's the funny and strange thing with our example:</p> <pre><code>print(\"Hero 1:\", hero_1)\n</code></pre> <p>We didn't access the object's attributes, like <code>hero.name</code>. We only accessed the entire object and printed it, so SQLAlchemy has no way of knowing that we want to access this object's data.</p>"},{"location":"tutorial/automatic-id-none-refresh/#print-a-single-field","title":"Print a Single Field","text":"<p>To confirm and understand how this automatic expiration and refresh of data when accessing attributes work, we can print some individual fields (instance attributes):</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        print(\"After committing the session, show IDs\")\n        print(\"Hero 1 ID:\", hero_1.id)\n        print(\"Hero 2 ID:\", hero_2.id)\n        print(\"Hero 3 ID:\", hero_3.id)\n\n        print(\"After committing the session, show names\")\n        print(\"Hero 1 name:\", hero_1.name)\n        print(\"Hero 2 name:\", hero_2.name)\n        print(\"Hero 3 name:\", hero_3.name)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        print(\"After committing the session, show IDs\")\n        print(\"Hero 1 ID:\", hero_1.id)\n        print(\"Hero 2 ID:\", hero_2.id)\n        print(\"Hero 3 ID:\", hero_3.id)\n\n        print(\"After committing the session, show names\")\n        print(\"Hero 1 name:\", hero_1.name)\n        print(\"Hero 2 name:\", hero_2.name)\n        print(\"Hero 3 name:\", hero_3.name)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    print(\"Before interacting with the database\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        print(\"After committing the session, show IDs\")\n        print(\"Hero 1 ID:\", hero_1.id)\n        print(\"Hero 2 ID:\", hero_2.id)\n        print(\"Hero 3 ID:\", hero_3.id)\n\n        print(\"After committing the session, show names\")\n        print(\"Hero 1 name:\", hero_1.name)\n        print(\"Hero 2 name:\", hero_2.name)\n        print(\"Hero 3 name:\", hero_3.name)\n\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n        session.refresh(hero_3)\n\n        print(\"After refreshing the heroes\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n    print(\"After the session closes\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    print(\"Before interacting with the database\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        print(\"After committing the session, show IDs\")\n        print(\"Hero 1 ID:\", hero_1.id)\n        print(\"Hero 2 ID:\", hero_2.id)\n        print(\"Hero 3 ID:\", hero_3.id)\n\n        print(\"After committing the session, show names\")\n        print(\"Hero 1 name:\", hero_1.name)\n        print(\"Hero 2 name:\", hero_2.name)\n        print(\"Hero 3 name:\", hero_3.name)\n\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n        session.refresh(hero_3)\n\n        print(\"After refreshing the heroes\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n    print(\"After the session closes\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Now we are actually accessing the attributes, because instead of printing the whole object <code>hero_1</code>:</p> <pre><code>print(\"Hero 1:\", hero_1)\n</code></pre> <p>...we are now printing the <code>id</code> attribute in <code>hero.id</code>:</p> <pre><code>print(\"Hero 1 ID:\", hero_1.id)\n</code></pre> <p>By accessing the attribute, that triggers a lot of work done by SQLModel (actually SQLAlchemy) underneath to refresh the data from the database, set it in the object's <code>id</code> attribute, and make it available for the Python expression (in this case just to print it).</p> <p>Let's see how it works:</p> <pre><code>$ python app.py\n\n// Output above omitted \ud83d\udc46\n\n// After committing, the objects are expired and have no values\nAfter committing the session\nHero 1:\nHero 2:\nHero 3:\n\n// Now we will access an attribute like the ID, this is the first print\nAfter committing the session, show IDs\n\n// Notice that before printing the first ID, the Session makes the Engine go to the database to refresh the data \ud83e\udd13\nINFO Engine BEGIN (implicit)\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [generated in 0.00017s] (1,)\n\n// Here's our first print, now we have the database-generated ID\nHero 1 ID: 1\n\n// Before the next print, refresh the data for the second object\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.001245s ago] (2,)\n\n// Here's our print for the second hero with its auto-generated ID\nHero 2 ID: 2\n\n// Before the third print, refresh its data\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.002215s ago] (3,)\n\n// And here's our print for the third hero\nHero 3 ID: 3\n\n// What if we print another attribute like the name?\nAfter committing the session, show names\nHero 1 name: Deadpond\nHero 2 name: Spider-Boy\nHero 3 name: Rusty-Man\n\n// Because the Session already refreshed these objects with all their data and the session knows they are not expired, it doesn't have to go again to the database for the names \ud83e\udd13\n</code></pre>"},{"location":"tutorial/automatic-id-none-refresh/#refresh-objects-explicitly","title":"Refresh Objects Explicitly","text":"<p>You just learnt how the session refreshes the data automatically behind the scenes, as a side effect, when you access an attribute.</p> <p>But what if you want to explicitly refresh the data?</p> <p>You can do that too with <code>session.refresh(object)</code>:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        print(\"After committing the session, show IDs\")\n        print(\"Hero 1 ID:\", hero_1.id)\n        print(\"Hero 2 ID:\", hero_2.id)\n        print(\"Hero 3 ID:\", hero_3.id)\n\n        print(\"After committing the session, show names\")\n        print(\"Hero 1 name:\", hero_1.name)\n        print(\"Hero 2 name:\", hero_2.name)\n        print(\"Hero 3 name:\", hero_3.name)\n\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n        session.refresh(hero_3)\n\n        print(\"After refreshing the heroes\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        print(\"After committing the session, show IDs\")\n        print(\"Hero 1 ID:\", hero_1.id)\n        print(\"Hero 2 ID:\", hero_2.id)\n        print(\"Hero 3 ID:\", hero_3.id)\n\n        print(\"After committing the session, show names\")\n        print(\"Hero 1 name:\", hero_1.name)\n        print(\"Hero 2 name:\", hero_2.name)\n        print(\"Hero 3 name:\", hero_3.name)\n\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n        session.refresh(hero_3)\n\n        print(\"After refreshing the heroes\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    print(\"Before interacting with the database\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        print(\"After committing the session, show IDs\")\n        print(\"Hero 1 ID:\", hero_1.id)\n        print(\"Hero 2 ID:\", hero_2.id)\n        print(\"Hero 3 ID:\", hero_3.id)\n\n        print(\"After committing the session, show names\")\n        print(\"Hero 1 name:\", hero_1.name)\n        print(\"Hero 2 name:\", hero_2.name)\n        print(\"Hero 3 name:\", hero_3.name)\n\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n        session.refresh(hero_3)\n\n        print(\"After refreshing the heroes\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n    print(\"After the session closes\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    print(\"Before interacting with the database\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        print(\"After committing the session, show IDs\")\n        print(\"Hero 1 ID:\", hero_1.id)\n        print(\"Hero 2 ID:\", hero_2.id)\n        print(\"Hero 3 ID:\", hero_3.id)\n\n        print(\"After committing the session, show names\")\n        print(\"Hero 1 name:\", hero_1.name)\n        print(\"Hero 2 name:\", hero_2.name)\n        print(\"Hero 3 name:\", hero_3.name)\n\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n        session.refresh(hero_3)\n\n        print(\"After refreshing the heroes\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n    print(\"After the session closes\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>When Python executes this code:</p> <pre><code>session.refresh(hero_1)\n</code></pre> <p>...the session goes and makes the engine communicate with the database to get the recent data for this object <code>hero_1</code>, and then the session puts the data in the <code>hero_1</code> object and marks it as \"fresh\" or \"not expired\".</p> <p>Here's how the output would look like:</p> <pre><code>$ python app.py\n\n// Output above omitted \ud83d\udc46\n\n// The first refresh\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [generated in 0.00024s] (1,)\n\n// The second refresh\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.001487s ago] (2,)\n\n// The third refresh\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.002377s ago] (3,)\n\n// Now print the data, as it's already refreshed there's no need for the Session to go and refresh it again\nAfter refreshing the heroes\nHero 1: age=None id=1 name='Deadpond' secret_name='Dive Wilson'\nHero 2: age=None id=2 name='Spider-Boy' secret_name='Pedro Parqueador'\nHero 3: age=48 id=3 name='Rusty-Man' secret_name='Tommy Sharp'\n</code></pre> <p>This could be useful, for example, if you are building a web API to create heroes. And once a hero is created with some data, you return it to the client.</p> <p>You wouldn't want to return an object that looks empty because the automatic magic to refresh the data was not triggered.</p> <p>In this case, after committing the object to the database with the session, you could refresh it, and then return it to the client. This would ensure that the object has its fresh data.</p>"},{"location":"tutorial/automatic-id-none-refresh/#print-data-after-closing-the-session","title":"Print Data After Closing the Session","text":"<p>Now, as a final experiment, we can also print data after the session is closed.</p> <p>There are no surprises here, it still works:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        print(\"After committing the session, show IDs\")\n        print(\"Hero 1 ID:\", hero_1.id)\n        print(\"Hero 2 ID:\", hero_2.id)\n        print(\"Hero 3 ID:\", hero_3.id)\n\n        print(\"After committing the session, show names\")\n        print(\"Hero 1 name:\", hero_1.name)\n        print(\"Hero 2 name:\", hero_2.name)\n        print(\"Hero 3 name:\", hero_3.name)\n\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n        session.refresh(hero_3)\n\n        print(\"After refreshing the heroes\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n    print(\"After the session closes\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        print(\"After committing the session, show IDs\")\n        print(\"Hero 1 ID:\", hero_1.id)\n        print(\"Hero 2 ID:\", hero_2.id)\n        print(\"Hero 3 ID:\", hero_3.id)\n\n        print(\"After committing the session, show names\")\n        print(\"Hero 1 name:\", hero_1.name)\n        print(\"Hero 2 name:\", hero_2.name)\n        print(\"Hero 3 name:\", hero_3.name)\n\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n        session.refresh(hero_3)\n\n        print(\"After refreshing the heroes\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n    print(\"After the session closes\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    print(\"Before interacting with the database\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        print(\"After committing the session, show IDs\")\n        print(\"Hero 1 ID:\", hero_1.id)\n        print(\"Hero 2 ID:\", hero_2.id)\n        print(\"Hero 3 ID:\", hero_3.id)\n\n        print(\"After committing the session, show names\")\n        print(\"Hero 1 name:\", hero_1.name)\n        print(\"Hero 2 name:\", hero_2.name)\n        print(\"Hero 3 name:\", hero_3.name)\n\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n        session.refresh(hero_3)\n\n        print(\"After refreshing the heroes\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n    print(\"After the session closes\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    print(\"Before interacting with the database\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        print(\"After adding to the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        session.commit()\n\n        print(\"After committing the session\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n        print(\"After committing the session, show IDs\")\n        print(\"Hero 1 ID:\", hero_1.id)\n        print(\"Hero 2 ID:\", hero_2.id)\n        print(\"Hero 3 ID:\", hero_3.id)\n\n        print(\"After committing the session, show names\")\n        print(\"Hero 1 name:\", hero_1.name)\n        print(\"Hero 2 name:\", hero_2.name)\n        print(\"Hero 3 name:\", hero_3.name)\n\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n        session.refresh(hero_3)\n\n        print(\"After refreshing the heroes\")\n        print(\"Hero 1:\", hero_1)\n        print(\"Hero 2:\", hero_2)\n        print(\"Hero 3:\", hero_3)\n\n    print(\"After the session closes\")\n    print(\"Hero 1:\", hero_1)\n    print(\"Hero 2:\", hero_2)\n    print(\"Hero 3:\", hero_3)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>And the output shows again the same data:</p> <pre><code>$ python app.py\n\n// Output above omitted \ud83d\udc46\n\n// By finishing the with block, the Session is closed, including a rollback of any pending transaction that could have been there and was not committed\nINFO Engine ROLLBACK\n\n// Then we print the data, it works normally\nAfter the session closes\nHero 1: age=None id=1 name='Deadpond' secret_name='Dive Wilson'\nHero 2: age=None id=2 name='Spider-Boy' secret_name='Pedro Parqueador'\nHero 3: age=48 id=3 name='Rusty-Man' secret_name='Tommy Sharp'\n</code></pre>"},{"location":"tutorial/automatic-id-none-refresh/#review-all-the-code","title":"Review All the Code","text":"<p>Now let's review all this code once again.</p> <p>Tip</p> <p>Each one of the numbered bubbles shows what each line will print in the output.</p> <p>And as we created the engine with <code>echo=True</code>, we can see the SQL statements being executed at each step.</p> Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")  # (1)!\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")  # (2)!\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)  # (3)!\n\n    print(\"Before interacting with the database\")  # (4)!\n    print(\"Hero 1:\", hero_1)  # (5)!\n    print(\"Hero 2:\", hero_2)  # (6)!\n    print(\"Hero 3:\", hero_3)  # (7)!\n\n    with Session(engine) as session:  # (8)!\n        session.add(hero_1)  # (9)!\n        session.add(hero_2)  # (10)!\n        session.add(hero_3)  # (11)!\n\n        print(\"After adding to the session\")  # (12)!\n        print(\"Hero 1:\", hero_1)  # (13)!\n        print(\"Hero 2:\", hero_2)  # (14)!\n        print(\"Hero 3:\", hero_3)  # (15)!\n\n        session.commit()  # (16)!\n\n        print(\"After committing the session\")  # (17)!\n        print(\"Hero 1:\", hero_1)  # (18)!\n        print(\"Hero 2:\", hero_2)  # (19)!\n        print(\"Hero 3:\", hero_3)  # (20)!\n\n        print(\"After committing the session, show IDs\")  # (21)!\n        print(\"Hero 1 ID:\", hero_1.id)  # (22)!\n        print(\"Hero 2 ID:\", hero_2.id)  # (23)!\n        print(\"Hero 3 ID:\", hero_3.id)  # (24)!\n\n        print(\"After committing the session, show names\")  # (25)!\n        print(\"Hero 1 name:\", hero_1.name)  # (26)!\n        print(\"Hero 2 name:\", hero_2.name)  # (27)!\n        print(\"Hero 3 name:\", hero_3.name)  # (28)!\n\n        session.refresh(hero_1)  # (29)!\n        session.refresh(hero_2)  # (30)!\n        session.refresh(hero_3)  # (31)!\n\n        print(\"After refreshing the heroes\")  # (32)!\n        print(\"Hero 1:\", hero_1)  # (33)!\n        print(\"Hero 2:\", hero_2)  # (34)!\n        print(\"Hero 3:\", hero_3)  # (35)!\n    # (36)!\n\n    print(\"After the session closes\")  # (37)!\n    print(\"Hero 1:\", hero_1)  # (38)!\n    print(\"Hero 2:\", hero_2)  # (39)!\n    print(\"Hero 3:\", hero_3)  # (40)!\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <ol> <li> <p>Create the <code>hero_1</code>.</p> <p>Doesn't generate any output.</p> </li> <li> <p>Create the <code>hero_2</code>.</p> <p>Doesn't generate any output.</p> </li> <li> <p>Create the <code>hero_3</code>.</p> <p>Doesn't generate any output.</p> </li> <li> <p>Print the line <code>\"Before interacting with the database\"</code>.</p> <p>Generates the output:</p> <pre><code>Before interacting with the database\n</code></pre> </li> <li> <p>Print the <code>hero_1</code> before interacting with the database.</p> <p>Generates the output:</p> <pre><code>Hero 1: id=None name='Deadpond' secret_name='Dive Wilson' age=None\n</code></pre> </li> <li> <p>Print the <code>hero_2</code> before interacting with the database.</p> <p>Generates the output:</p> <pre><code>Hero 2: id=None name='Spider-Boy' secret_name='Pedro Parqueador' age=None\n</code></pre> </li> <li> <p>Print the <code>hero_3</code> before interacting with the database.</p> <p>Generates the output:</p> <pre><code>Hero 3: id=None name='Rusty-Man' secret_name='Tommy Sharp' age=48\n</code></pre> </li> <li> <p>Create the <code>Session</code> in a <code>with</code> block.</p> <p>Doesn't generate any output.</p> </li> <li> <p>Add the <code>hero_1</code> to the session.</p> <p>This still doesn't save it to the database.</p> <p>Doesn't generate any output.</p> </li> <li> <p>Add the <code>hero_2</code> to the session.</p> <p>This still doesn't save it to the database.</p> <p>Doesn't generate any output.</p> </li> <li> <p>Add the <code>hero_3</code> to the session.</p> <p>This still doesn't save it to the database.</p> <p>Doesn't generate any output.</p> </li> <li> <p>Print the line <code>\"After adding to the session\"</code>.</p> <p>Generates the output:</p> <pre><code>After adding to the session\n</code></pre> </li> <li> <p>Print the <code>hero_1</code> after adding it to the session.</p> <p>It still has the same data as there hasn't been any interaction with the database yet. Notice that the <code>id</code> is still <code>None</code>.</p> <p>Generates the output:</p> <pre><code>Hero 1: id=None name='Deadpond' secret_name='Dive Wilson' age=None\n</code></pre> </li> <li> <p>Print the <code>hero_2</code> after adding it to the session.</p> <p>It still has the same data as there hasn't been any interaction with the database yet. Notice that the <code>id</code> is still <code>None</code>.</p> <p>Generates the output:</p> <pre><code>Hero 2: id=None name='Spider-Boy' secret_name='Pedro Parqueador' age=None\n</code></pre> </li> <li> <p>Print the <code>hero_3</code> after adding it to the session.</p> <p>It still has the same data as there hasn't been any interaction with the database yet. Notice that the <code>id</code> is still <code>None</code>.</p> <p>Generates the output:</p> <pre><code>Hero 3: id=None name='Rusty-Man' secret_name='Tommy Sharp' age=48\n</code></pre> </li> <li> <p><code>commit</code> the session.</p> <p>This will save all the data to the database. The session will use the engine to run a lot of SQL.</p> <p>Generates the output:</p> <pre><code>INFO Engine BEGIN (implicit)\nINFO Engine INSERT INTO hero (name, secret_name, age) VALUES (?, ?, ?)\nINFO Engine [generated in 0.00018s] ('Deadpond', 'Dive Wilson', None)\nINFO Engine INSERT INTO hero (name, secret_name, age) VALUES (?, ?, ?)\nINFO Engine [cached since 0.0008968s ago] ('Spider-Boy', 'Pedro Parqueador', None)\nINFO Engine INSERT INTO hero (name, secret_name, age) VALUES (?, ?, ?)\nINFO Engine [cached since 0.001143s ago] ('Rusty-Man', 'Tommy Sharp', 48)\nINFO Engine COMMIT\n</code></pre> </li> <li> <p>Print the line <code>\"After committing the session\"</code>.</p> <p>Generates the output:</p> <pre><code>After committing the session\n</code></pre> </li> <li> <p>Print the <code>hero_1</code> after committing the session.</p> <p>The <code>hero_1</code> is now internally marked as expired, and until it is refreshed, it looks like if it didn't contain any data.</p> <p>Generates the output:</p> <pre><code>Hero 1:\n</code></pre> </li> <li> <p>Print the <code>hero_2</code> after committing the session.</p> <p>The <code>hero_2</code> is now internally marked as expired, and until it is refreshed, it looks like if it didn't contain any data.</p> <p>Generates the output:</p> <pre><code>Hero 2:\n</code></pre> </li> <li> <p>Print the <code>hero_3</code> after committing the session.</p> <p>The <code>hero_3</code> is now internally marked as expired, and until it is refreshed, it looks like if it didn't contain any data.</p> <p>Generates the output:</p> <pre><code>Hero 3:\n</code></pre> </li> <li> <p>Print the line <code>\"After committing the session, show IDs\"</code>.</p> <p>Generates the output:</p> <pre><code>After committing the session, show IDs\n</code></pre> </li> <li> <p>Print the <code>hero_1.id</code>. A lot happens here.</p> <p>Because we are accessing the attribute <code>id</code> of <code>hero_1</code>, SQLModel (actually SQLAlchemy) can detect that we are trying to access data from the <code>hero_1</code>.</p> <p>It then detects that <code>hero_1</code> is currently associated with a session (because we added it to the session and committed it), and it is marked as expired.</p> <p>Then with the session, it uses the engine to execute all the SQL to fetch the data for this object from the database.</p> <p>Next it updates the object with the new data and marks it internally as \"fresh\" or \"not expired\".</p> <p>Finally, it makes the ID value available for the rest of the Python expression. In this case, the Python expression just prints the ID.</p> <p>Generates the output:</p> <pre><code>INFO Engine BEGIN (implicit)\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [generated in 0.00017s] (1,)\n\nHero 1 ID: 1\n</code></pre> </li> <li> <p>Print the <code>hero_2.id</code>.</p> <p>A lot happens here, all the same stuff that happened at point 22, but for this <code>hero_2</code> object.</p> <p>Generates the output:</p> <pre><code>INFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.001245s ago] (2,)\n\nHero 2 ID: 2\n</code></pre> </li> <li> <p>Print the <code>hero_3.id</code>.</p> <p>A lot happens here, all the same stuff that happened at point 22, but for this <code>hero_3</code> object.</p> <p>Generates the output:</p> <pre><code>INFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.002215s ago] (3,)\n\n\nHero 3 ID: 3\n</code></pre> </li> <li> <p>Print the line <code>\"After committing the session, show names\"</code>.</p> <p>Generates the output:</p> <pre><code>After committing the session, show names\n</code></pre> </li> <li> <p>Print the <code>hero_1.name</code>.</p> <p>Because <code>hero_1</code> is still fresh, no additional data is fetched, no additional SQL is executed, and the name is available.</p> <p>Generates the output:</p> <pre><code>Hero 1 name: Deadpond\n</code></pre> </li> <li> <p>Print the <code>hero_2.name</code>.</p> <p>Because <code>hero_2</code> is still fresh, no additional data is fetched, no additional SQL is executed, and the name is available.</p> <p>Generates the output:</p> <pre><code>Hero 2 name: Spider-Boy\n</code></pre> </li> <li> <p>Print the <code>hero_3.name</code>.</p> <p>Because <code>hero_3</code> is still fresh, no additional data is fetched, no additional SQL is executed, and the name is available.</p> <p>Generates the output:</p> <pre><code>Hero 3 name: Rusty-Man\n</code></pre> </li> <li> <p>Explicitly refresh the <code>hero_1</code> object.</p> <p>The session will use the engine to execute the SQL necessary to fetch fresh data from the database for the <code>hero_1</code> object.</p> <p>Generates the output:</p> <pre><code>INFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [generated in 0.00024s] (1,)\n</code></pre> </li> <li> <p>Explicitly refresh the <code>hero_2</code> object.</p> <p>The session will use the engine to execute the SQL necessary to fetch fresh data from the database for the <code>hero_2</code> object.</p> <p>Generates the output:</p> <pre><code>INFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.001487s ago] (2,)\n</code></pre> </li> <li> <p>Explicitly refresh the <code>hero_3</code> object.</p> <p>The session will use the engine to execute the SQL necessary to fetch fresh data from the database for the <code>hero_3</code> object.</p> <p>Generates the output:</p> <pre><code>INFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.002377s ago] (3,)\n</code></pre> </li> <li> <p>Print the line <code>\"After refreshing the heroes\"</code>.</p> <p>Generates the output:</p> <pre><code>After refreshing the heroes\n</code></pre> </li> <li> <p>Print the <code>hero_1</code>.</p> <p>Info</p> <p>Even if the <code>hero_1</code> wasn't fresh, this would not trigger a <code>refresh</code> making the session use the engine to fetch data from the database because it is not accessing an attribute.</p> <p>Because the <code>hero_1</code> is fresh it has all it's data available.</p> <p>Generates the output:</p> <pre><code>Hero 1: age=None id=1 name='Deadpond' secret_name='Dive Wilson'\n</code></pre> </li> <li> <p>Print the <code>hero_2</code>.</p> <p>Info</p> <p>Even if the <code>hero_2</code> wasn't fresh, this would not trigger a <code>refresh</code> making the session use the engine to fetch data from the database because it is not accessing an attribute.</p> <p>Because the <code>hero_2</code> is fresh it has all it's data available.</p> <p>Generates the output:</p> <pre><code>Hero 2: age=None id=2 name='Spider-Boy' secret_name='Pedro Parqueador'\n</code></pre> </li> <li> <p>Print the <code>hero_3</code>.</p> <p>Info</p> <p>Even if the <code>hero_3</code> wasn't fresh, this would not trigger a <code>refresh</code> making the session use the engine to fetch data from the database because it is not accessing an attribute.</p> <p>Because the <code>hero_3</code> is fresh it has all it's data available.</p> <p>Generates the output:</p> <pre><code>Hero 3: age=48 id=3 name='Rusty-Man' secret_name='Tommy Sharp'\n</code></pre> </li> <li> <p>The <code>with</code> block ends here (there's no more indented code), so the session is closed, running all it's closing code.</p> <p>This includes doing a <code>ROLLBACK</code> of any possible transaction that could have been started.</p> <p>Generates the output:</p> <pre><code>INFO Engine ROLLBACK\n</code></pre> </li> <li> <p>Print the line <code>\"After the session closes\"</code>.</p> <p>Generates the output:</p> <pre><code>After the session closes\n</code></pre> </li> <li> <p>Print the <code>hero_1</code> after closing the session.</p> <p>Generates the output:</p> <pre><code>Hero 1: age=None id=1 name='Deadpond' secret_name='Dive Wilson'\n</code></pre> </li> <li> <p>Print the <code>hero_2</code> after closing the session.</p> <p>Generates the output:</p> <pre><code>Hero 2: age=None id=2 name='Spider-Boy' secret_name='Pedro Parqueador'\n</code></pre> </li> <li> <p>Print the <code>hero_3</code> after closing the session.</p> <p>Generates the output:</p> <pre><code>Hero 3: age=48 id=3 name='Rusty-Man' secret_name='Tommy Sharp'\n</code></pre> </li> </ol> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")  # (1)!\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")  # (2)!\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)  # (3)!\n\n    print(\"Before interacting with the database\")  # (4)!\n    print(\"Hero 1:\", hero_1)  # (5)!\n    print(\"Hero 2:\", hero_2)  # (6)!\n    print(\"Hero 3:\", hero_3)  # (7)!\n\n    with Session(engine) as session:  # (8)!\n        session.add(hero_1)  # (9)!\n        session.add(hero_2)  # (10)!\n        session.add(hero_3)  # (11)!\n\n        print(\"After adding to the session\")  # (12)!\n        print(\"Hero 1:\", hero_1)  # (13)!\n        print(\"Hero 2:\", hero_2)  # (14)!\n        print(\"Hero 3:\", hero_3)  # (15)!\n\n        session.commit()  # (16)!\n\n        print(\"After committing the session\")  # (17)!\n        print(\"Hero 1:\", hero_1)  # (18)!\n        print(\"Hero 2:\", hero_2)  # (19)!\n        print(\"Hero 3:\", hero_3)  # (20)!\n\n        print(\"After committing the session, show IDs\")  # (21)!\n        print(\"Hero 1 ID:\", hero_1.id)  # (22)!\n        print(\"Hero 2 ID:\", hero_2.id)  # (23)!\n        print(\"Hero 3 ID:\", hero_3.id)  # (24)!\n\n        print(\"After committing the session, show names\")  # (25)!\n        print(\"Hero 1 name:\", hero_1.name)  # (26)!\n        print(\"Hero 2 name:\", hero_2.name)  # (27)!\n        print(\"Hero 3 name:\", hero_3.name)  # (28)!\n\n        session.refresh(hero_1)  # (29)!\n        session.refresh(hero_2)  # (30)!\n        session.refresh(hero_3)  # (31)!\n\n        print(\"After refreshing the heroes\")  # (32)!\n        print(\"Hero 1:\", hero_1)  # (33)!\n        print(\"Hero 2:\", hero_2)  # (34)!\n        print(\"Hero 3:\", hero_3)  # (35)!\n    # (36)!\n\n    print(\"After the session closes\")  # (37)!\n    print(\"Hero 1:\", hero_1)  # (38)!\n    print(\"Hero 2:\", hero_2)  # (39)!\n    print(\"Hero 3:\", hero_3)  # (40)!\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <ol> <li> <p>Create the <code>hero_1</code>.</p> <p>Doesn't generate any output.</p> </li> <li> <p>Create the <code>hero_2</code>.</p> <p>Doesn't generate any output.</p> </li> <li> <p>Create the <code>hero_3</code>.</p> <p>Doesn't generate any output.</p> </li> <li> <p>Print the line <code>\"Before interacting with the database\"</code>.</p> <p>Generates the output:</p> <pre><code>Before interacting with the database\n</code></pre> </li> <li> <p>Print the <code>hero_1</code> before interacting with the database.</p> <p>Generates the output:</p> <pre><code>Hero 1: id=None name='Deadpond' secret_name='Dive Wilson' age=None\n</code></pre> </li> <li> <p>Print the <code>hero_2</code> before interacting with the database.</p> <p>Generates the output:</p> <pre><code>Hero 2: id=None name='Spider-Boy' secret_name='Pedro Parqueador' age=None\n</code></pre> </li> <li> <p>Print the <code>hero_3</code> before interacting with the database.</p> <p>Generates the output:</p> <pre><code>Hero 3: id=None name='Rusty-Man' secret_name='Tommy Sharp' age=48\n</code></pre> </li> <li> <p>Create the <code>Session</code> in a <code>with</code> block.</p> <p>Doesn't generate any output.</p> </li> <li> <p>Add the <code>hero_1</code> to the session.</p> <p>This still doesn't save it to the database.</p> <p>Doesn't generate any output.</p> </li> <li> <p>Add the <code>hero_2</code> to the session.</p> <p>This still doesn't save it to the database.</p> <p>Doesn't generate any output.</p> </li> <li> <p>Add the <code>hero_3</code> to the session.</p> <p>This still doesn't save it to the database.</p> <p>Doesn't generate any output.</p> </li> <li> <p>Print the line <code>\"After adding to the session\"</code>.</p> <p>Generates the output:</p> <pre><code>After adding to the session\n</code></pre> </li> <li> <p>Print the <code>hero_1</code> after adding it to the session.</p> <p>It still has the same data as there hasn't been any interaction with the database yet. Notice that the <code>id</code> is still <code>None</code>.</p> <p>Generates the output:</p> <pre><code>Hero 1: id=None name='Deadpond' secret_name='Dive Wilson' age=None\n</code></pre> </li> <li> <p>Print the <code>hero_2</code> after adding it to the session.</p> <p>It still has the same data as there hasn't been any interaction with the database yet. Notice that the <code>id</code> is still <code>None</code>.</p> <p>Generates the output:</p> <pre><code>Hero 2: id=None name='Spider-Boy' secret_name='Pedro Parqueador' age=None\n</code></pre> </li> <li> <p>Print the <code>hero_3</code> after adding it to the session.</p> <p>It still has the same data as there hasn't been any interaction with the database yet. Notice that the <code>id</code> is still <code>None</code>.</p> <p>Generates the output:</p> <pre><code>Hero 3: id=None name='Rusty-Man' secret_name='Tommy Sharp' age=48\n</code></pre> </li> <li> <p><code>commit</code> the session.</p> <p>This will save all the data to the database. The session will use the engine to run a lot of SQL.</p> <p>Generates the output:</p> <pre><code>INFO Engine BEGIN (implicit)\nINFO Engine INSERT INTO hero (name, secret_name, age) VALUES (?, ?, ?)\nINFO Engine [generated in 0.00018s] ('Deadpond', 'Dive Wilson', None)\nINFO Engine INSERT INTO hero (name, secret_name, age) VALUES (?, ?, ?)\nINFO Engine [cached since 0.0008968s ago] ('Spider-Boy', 'Pedro Parqueador', None)\nINFO Engine INSERT INTO hero (name, secret_name, age) VALUES (?, ?, ?)\nINFO Engine [cached since 0.001143s ago] ('Rusty-Man', 'Tommy Sharp', 48)\nINFO Engine COMMIT\n</code></pre> </li> <li> <p>Print the line <code>\"After committing the session\"</code>.</p> <p>Generates the output:</p> <pre><code>After committing the session\n</code></pre> </li> <li> <p>Print the <code>hero_1</code> after committing the session.</p> <p>The <code>hero_1</code> is now internally marked as expired, and until it is refreshed, it looks like if it didn't contain any data.</p> <p>Generates the output:</p> <pre><code>Hero 1:\n</code></pre> </li> <li> <p>Print the <code>hero_2</code> after committing the session.</p> <p>The <code>hero_2</code> is now internally marked as expired, and until it is refreshed, it looks like if it didn't contain any data.</p> <p>Generates the output:</p> <pre><code>Hero 2:\n</code></pre> </li> <li> <p>Print the <code>hero_3</code> after committing the session.</p> <p>The <code>hero_3</code> is now internally marked as expired, and until it is refreshed, it looks like if it didn't contain any data.</p> <p>Generates the output:</p> <pre><code>Hero 3:\n</code></pre> </li> <li> <p>Print the line <code>\"After committing the session, show IDs\"</code>.</p> <p>Generates the output:</p> <pre><code>After committing the session, show IDs\n</code></pre> </li> <li> <p>Print the <code>hero_1.id</code>. A lot happens here.</p> <p>Because we are accessing the attribute <code>id</code> of <code>hero_1</code>, SQLModel (actually SQLAlchemy) can detect that we are trying to access data from the <code>hero_1</code>.</p> <p>It then detects that <code>hero_1</code> is currently associated with a session (because we added it to the session and committed it), and it is marked as expired.</p> <p>Then with the session, it uses the engine to execute all the SQL to fetch the data for this object from the database.</p> <p>Next it updates the object with the new data and marks it internally as \"fresh\" or \"not expired\".</p> <p>Finally, it makes the ID value available for the rest of the Python expression. In this case, the Python expression just prints the ID.</p> <p>Generates the output:</p> <pre><code>INFO Engine BEGIN (implicit)\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [generated in 0.00017s] (1,)\n\nHero 1 ID: 1\n</code></pre> </li> <li> <p>Print the <code>hero_2.id</code>.</p> <p>A lot happens here, all the same stuff that happened at point 22, but for this <code>hero_2</code> object.</p> <p>Generates the output:</p> <pre><code>INFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.001245s ago] (2,)\n\nHero 2 ID: 2\n</code></pre> </li> <li> <p>Print the <code>hero_3.id</code>.</p> <p>A lot happens here, all the same stuff that happened at point 22, but for this <code>hero_3</code> object.</p> <p>Generates the output:</p> <pre><code>INFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.002215s ago] (3,)\n\n\nHero 3 ID: 3\n</code></pre> </li> <li> <p>Print the line <code>\"After committing the session, show names\"</code>.</p> <p>Generates the output:</p> <pre><code>After committing the session, show names\n</code></pre> </li> <li> <p>Print the <code>hero_1.name</code>.</p> <p>Because <code>hero_1</code> is still fresh, no additional data is fetched, no additional SQL is executed, and the name is available.</p> <p>Generates the output:</p> <pre><code>Hero 1 name: Deadpond\n</code></pre> </li> <li> <p>Print the <code>hero_2.name</code>.</p> <p>Because <code>hero_2</code> is still fresh, no additional data is fetched, no additional SQL is executed, and the name is available.</p> <p>Generates the output:</p> <pre><code>Hero 2 name: Spider-Boy\n</code></pre> </li> <li> <p>Print the <code>hero_3.name</code>.</p> <p>Because <code>hero_3</code> is still fresh, no additional data is fetched, no additional SQL is executed, and the name is available.</p> <p>Generates the output:</p> <pre><code>Hero 3 name: Rusty-Man\n</code></pre> </li> <li> <p>Explicitly refresh the <code>hero_1</code> object.</p> <p>The session will use the engine to execute the SQL necessary to fetch fresh data from the database for the <code>hero_1</code> object.</p> <p>Generates the output:</p> <pre><code>INFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [generated in 0.00024s] (1,)\n</code></pre> </li> <li> <p>Explicitly refresh the <code>hero_2</code> object.</p> <p>The session will use the engine to execute the SQL necessary to fetch fresh data from the database for the <code>hero_2</code> object.</p> <p>Generates the output:</p> <pre><code>INFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.001487s ago] (2,)\n</code></pre> </li> <li> <p>Explicitly refresh the <code>hero_3</code> object.</p> <p>The session will use the engine to execute the SQL necessary to fetch fresh data from the database for the <code>hero_3</code> object.</p> <p>Generates the output:</p> <pre><code>INFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.002377s ago] (3,)\n</code></pre> </li> <li> <p>Print the line <code>\"After refreshing the heroes\"</code>.</p> <p>Generates the output:</p> <pre><code>After refreshing the heroes\n</code></pre> </li> <li> <p>Print the <code>hero_1</code>.</p> <p>Info</p> <p>Even if the <code>hero_1</code> wasn't fresh, this would not trigger a <code>refresh</code> making the session use the engine to fetch data from the database because it is not accessing an attribute.</p> <p>Because the <code>hero_1</code> is fresh it has all it's data available.</p> <p>Generates the output:</p> <pre><code>Hero 1: age=None id=1 name='Deadpond' secret_name='Dive Wilson'\n</code></pre> </li> <li> <p>Print the <code>hero_2</code>.</p> <p>Info</p> <p>Even if the <code>hero_2</code> wasn't fresh, this would not trigger a <code>refresh</code> making the session use the engine to fetch data from the database because it is not accessing an attribute.</p> <p>Because the <code>hero_2</code> is fresh it has all it's data available.</p> <p>Generates the output:</p> <pre><code>Hero 2: age=None id=2 name='Spider-Boy' secret_name='Pedro Parqueador'\n</code></pre> </li> <li> <p>Print the <code>hero_3</code>.</p> <p>Info</p> <p>Even if the <code>hero_3</code> wasn't fresh, this would not trigger a <code>refresh</code> making the session use the engine to fetch data from the database because it is not accessing an attribute.</p> <p>Because the <code>hero_3</code> is fresh it has all it's data available.</p> <p>Generates the output:</p> <pre><code>Hero 3: age=48 id=3 name='Rusty-Man' secret_name='Tommy Sharp'\n</code></pre> </li> <li> <p>The <code>with</code> block ends here (there's no more indented code), so the session is closed, running all it's closing code.</p> <p>This includes doing a <code>ROLLBACK</code> of any possible transaction that could have been started.</p> <p>Generates the output:</p> <pre><code>INFO Engine ROLLBACK\n</code></pre> </li> <li> <p>Print the line <code>\"After the session closes\"</code>.</p> <p>Generates the output:</p> <pre><code>After the session closes\n</code></pre> </li> <li> <p>Print the <code>hero_1</code> after closing the session.</p> <p>Generates the output:</p> <pre><code>Hero 1: age=None id=1 name='Deadpond' secret_name='Dive Wilson'\n</code></pre> </li> <li> <p>Print the <code>hero_2</code> after closing the session.</p> <p>Generates the output:</p> <pre><code>Hero 2: age=None id=2 name='Spider-Boy' secret_name='Pedro Parqueador'\n</code></pre> </li> <li> <p>Print the <code>hero_3</code> after closing the session.</p> <p>Generates the output:</p> <pre><code>Hero 3: age=48 id=3 name='Rusty-Man' secret_name='Tommy Sharp'\n</code></pre> </li> </ol> <p>And here's all the output generated by running this program, all together:</p> <pre><code>$ python app.py\n\nINFO Engine BEGIN (implicit)\nINFO Engine PRAGMA main.table_info(\"hero\")\nINFO Engine [raw sql] ()\nINFO Engine PRAGMA temp.table_info(\"hero\")\nINFO Engine [raw sql] ()\nINFO Engine\nCREATE TABLE hero (\n        id INTEGER,\n        name VARCHAR NOT NULL,\n        secret_name VARCHAR NOT NULL,\n        age INTEGER,\n        PRIMARY KEY (id)\n)\n\n\nINFO Engine [no key 0.00018s] ()\nINFO Engine COMMIT\nBefore interacting with the database\nHero 1: id=None name='Deadpond' secret_name='Dive Wilson' age=None\nHero 2: id=None name='Spider-Boy' secret_name='Pedro Parqueador' age=None\nHero 3: id=None name='Rusty-Man' secret_name='Tommy Sharp' age=48\nAfter adding to the session\nHero 1: id=None name='Deadpond' secret_name='Dive Wilson' age=None\nHero 2: id=None name='Spider-Boy' secret_name='Pedro Parqueador' age=None\nHero 3: id=None name='Rusty-Man' secret_name='Tommy Sharp' age=48\nINFO Engine BEGIN (implicit)\nINFO Engine INSERT INTO hero (name, secret_name, age) VALUES (?, ?, ?)\nINFO Engine [generated in 0.00022s] ('Deadpond', 'Dive Wilson', None)\nINFO Engine INSERT INTO hero (name, secret_name, age) VALUES (?, ?, ?)\nINFO Engine [cached since 0.001127s ago] ('Spider-Boy', 'Pedro Parqueador', None)\nINFO Engine INSERT INTO hero (name, secret_name, age) VALUES (?, ?, ?)\nINFO Engine [cached since 0.001483s ago] ('Rusty-Man', 'Tommy Sharp', 48)\nINFO Engine COMMIT\nAfter committing the session\nHero 1:\nHero 2:\nHero 3:\nAfter committing the session, show IDs\nINFO Engine BEGIN (implicit)\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [generated in 0.00029s] (1,)\nHero 1 ID: 1\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.002132s ago] (2,)\nHero 2 ID: 2\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.003367s ago] (3,)\nHero 3 ID: 3\nAfter committing the session, show names\nHero 1 name: Deadpond\nHero 2 name: Spider-Boy\nHero 3 name: Rusty-Man\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [generated in 0.00025s] (1,)\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.001583s ago] (2,)\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.002722s ago] (3,)\nAfter refreshing the heroes\nHero 1: age=None id=1 name='Deadpond' secret_name='Dive Wilson'\nHero 2: age=None id=2 name='Spider-Boy' secret_name='Pedro Parqueador'\nHero 3: age=48 id=3 name='Rusty-Man' secret_name='Tommy Sharp'\nINFO Engine ROLLBACK\nAfter the session closes\nHero 1: age=None id=1 name='Deadpond' secret_name='Dive Wilson'\nHero 2: age=None id=2 name='Spider-Boy' secret_name='Pedro Parqueador'\nHero 3: age=48 id=3 name='Rusty-Man' secret_name='Tommy Sharp'\n</code></pre>"},{"location":"tutorial/automatic-id-none-refresh/#recap","title":"Recap","text":"<p>You read all that! That was a lot! Have some cake, you earned it. \ud83c\udf70</p> <p>We discussed how the session uses the engine to send SQL to the database, to create data and to fetch data too. How it keeps track of \"expired\" and \"fresh\" data. At which moments it fetches data automatically (when accessing instance attributes) and how that data is synchronized between objects in memory and the database via the session.</p> <p>If you understood all that, now you know a lot about SQLModel, SQLAlchemy, and how the interactions from Python with databases work in general.</p> <p>If you didn't get all that, it's fine, you can always come back later to <code>refresh</code> the concepts.</p> <p>I think this might be one of the main types of bugs that cause problems and makes you scratch your head. So, good job studying it! \ud83d\udcaa</p>"},{"location":"tutorial/code-structure/","title":"Code Structure and Multiple Files","text":"<p>Let's stop for a second to think about how to structure the code, particularly in large projects with multiple files.</p>"},{"location":"tutorial/code-structure/#circular-imports","title":"Circular Imports","text":"<p>The class <code>Hero</code> has a reference to the class <code>Team</code> internally.</p> <p>But the class <code>Team</code> also has a reference to the class <code>Hero</code>.</p> <p>So, if those two classes were in separate files and you tried to import the classes in each other's file directly, it would result in a circular import. \ud83d\udd04</p> <p>And Python will not be able to handle it and will throw an error. \ud83d\udea8</p> <p>But we actually want to mean that circular reference, because in our code, we would be able to do crazy things like:</p> <pre><code>hero.team.heroes[0].team.heroes[1].team.heroes[2].name\n</code></pre> <p>And that circular reference is what we are expressing with these relationship attributes, that:</p> <ul> <li>A hero can have a team<ul> <li>That team can have a list of heroes<ul> <li>Each of those heroes can have a team<ul> <li>...and so on.</li> </ul> </li> </ul> </li> </ul> </li> </ul> <p>Let's see different strategies to structure the code accounting for this.</p>"},{"location":"tutorial/code-structure/#single-module-for-models","title":"Single Module for Models","text":"<p>This is the simplest way. \u2728</p> <p>In this solution we are still using multiple files, for the <code>models</code>, for the <code>database</code>, and for the <code>app</code>.</p> <p>And we could have any other files necessary.</p> <p>But in this first case, all the models would live in a single file.</p> <p>The file structure of the project could be:</p> <pre><code>.\n\u251c\u2500\u2500 project\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 app.py\n    \u251c\u2500\u2500 database.py\n    \u2514\u2500\u2500 models.py\n</code></pre> <p>We have 3 Python modules (or files):</p> <ul> <li><code>app</code></li> <li><code>database</code></li> <li><code>models</code></li> </ul> <p>And we also have an empty <code>__init__.py</code> file to make this project a \"Python package\" (a collection of Python modules). This way we can use relative imports in the <code>app.py</code> file/module, like:</p> <pre><code>from .models import Hero, Team\nfrom .database import engine\n</code></pre> <p>We can use these relative imports because, for example, in the file <code>app.py</code> (the <code>app</code> module) Python knows that it is part of our Python package because it is in the same directory as the file <code>__init__.py</code>. And all the Python files on the same directory are part of the same Python package too.</p>"},{"location":"tutorial/code-structure/#models-file","title":"Models File","text":"<p>You could put all the database Models in a single Python module (a single Python file), for example <code>models.py</code>:</p> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, SQLModel\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n</code></pre> <p>This way, you wouldn't have to deal with circular imports for other models.</p> <p>And then you could import the models from this file/module in any other file/module in your application.</p>"},{"location":"tutorial/code-structure/#database-file","title":"Database File","text":"<p>Then you could put the code creating the engine and the function to create all the tables (if you are not using migrations) in another file <code>database.py</code>:</p> <pre><code>from sqlmodel import SQLModel, create_engine\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n</code></pre> <p>This file would also be imported by your application code, to use the shared engine and to get and call the function <code>create_db_and_tables()</code>.</p>"},{"location":"tutorial/code-structure/#application-file","title":"Application File","text":"<p>Finally, you could put the code to create the app in another file <code>app.py</code>:</p> <pre><code>from sqlmodel import Session\n\nfrom .database import create_db_and_tables, engine\nfrom .models import Hero, Team\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        session.add(hero_deadpond)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Hero's team:\", hero_deadpond.team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Here we import the models, the engine, and the function to create all the tables and then we can use them all internally.</p>"},{"location":"tutorial/code-structure/#order-matters","title":"Order Matters","text":"<p>Remember that Order Matters when calling <code>SQLModel.metadata.create_all()</code>?</p> <p>The point of that section in the docs is that you have to import the module that has the models before calling <code>SQLModel.metadata.create_all()</code>.</p> <p>We are doing that here, we import the models in <code>app.py</code> and after that we create the database and tables, so we are fine and everything works correctly. \ud83d\udc4c</p>"},{"location":"tutorial/code-structure/#run-it-in-the-command-line","title":"Run It in the Command Line","text":"<p>Because now this is a larger project with a Python package and not a single Python file, we cannot call it just passing a single file name as we did before with:</p> <pre><code>$ python app.py\n</code></pre> <p>Now we have to tell Python that we want it to execute a module that is part of a package:</p> <pre><code>$ python -m project.app\n</code></pre> <p>The <code>-m</code> is to tell Python to call a module. And the next thing we pass is a string with <code>project.app</code>, that is the same format we would use in an import:</p> <pre><code>import project.app\n</code></pre> <p>Then Python will execute that module inside of that package, and because Python is executing it directly, the same trick with the main block that we have in <code>app.py</code> will still work:</p> <pre><code>if __name__ == '__main__':\n    main()\n</code></pre> <p>So, the output would be:</p> <pre><code>$ python -m project.app\n\nCreated hero: id=1 secret_name='Dive Wilson' team_id=1 name='Deadpond' age=None\nHero's team: name='Z-Force' headquarters='Sister Margaret's Bar' id=1\n</code></pre>"},{"location":"tutorial/code-structure/#make-circular-imports-work","title":"Make Circular Imports Work","text":"<p>Let's say that for some reason you hate the idea of having all the database models together in a single file, and you really want to have separate files a <code>hero_model.py</code> file and a <code>team_model.py</code> file.</p> <p>You can also do it. \ud83d\ude0e There's a couple of things to keep in mind. \ud83e\udd13</p> <p>Warning</p> <p>This is a bit more advanced.</p> <p>If the solution above already worked for you, that might be enough for you, and you can continue in the next chapter. \ud83e\udd13</p> <p>Let's assume that now the file structure is:</p> <pre><code>.\n\u251c\u2500\u2500 project\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 app.py\n    \u251c\u2500\u2500 database.py\n    \u251c\u2500\u2500 hero_model.py\n    \u2514\u2500\u2500 team_model.py\n</code></pre>"},{"location":"tutorial/code-structure/#circular-imports-and-type-annotations","title":"Circular Imports and Type Annotations","text":"<p>The problem with circular imports is that Python can't resolve them at runtime.</p> <p>But when using Python type annotations it's very common to need to declare the type of some variables with classes imported from other files.</p> <p>And the files with those classes might also need to import more things from the first files.</p> <p>And this ends up requiring the same circular imports that are not supported in Python at runtime.</p>"},{"location":"tutorial/code-structure/#type-annotations-and-runtime","title":"Type Annotations and Runtime","text":"<p>But these type annotations we want to declare are not needed at runtime.</p> <p>In fact, remember that we used <code>List[\"Hero\"]</code>, with a <code>\"Hero\"</code> in a string?</p> <p>For Python, at runtime, that is just a string.</p> <p>So, if we could add the type annotations we need using the string versions, Python wouldn't have a problem.</p> <p>But if we just put strings in the type annotations, without importing anything, the editor wouldn't know what we mean, and wouldn't be able to help us with autocompletion and inline errors.</p> <p>So, if there was a way to \"import\" some things that act as \"imported\" only while editing the code but not at runtime, that would solve it... And it exists! Exactly that. \ud83c\udf89</p>"},{"location":"tutorial/code-structure/#import-only-while-editing-with-type_checking","title":"Import Only While Editing with <code>TYPE_CHECKING</code>","text":"<p>To solve it, there's a special trick with a special variable <code>TYPE_CHECKING</code> in the <code>typing</code> module.</p> <p>It has a value of <code>True</code> for editors and tools that analyze the code with the type annotations.</p> <p>But when Python is executing, its value is <code>False</code>.</p> <p>So, we can use it in an <code>if</code> block and import things inside the <code>if</code> block. And they will be \"imported\" only for editors, but not at runtime.</p>"},{"location":"tutorial/code-structure/#hero-model-file","title":"Hero Model File","text":"<p>Using that trick of <code>TYPE_CHECKING</code> we can \"import\" the <code>Team</code> in <code>hero_model.py</code>:</p> <pre><code>from typing import TYPE_CHECKING, Optional\n\nfrom sqlmodel import Field, Relationship, SQLModel\n\nif TYPE_CHECKING:\n    from .team_model import Team\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[\"Team\"] = Relationship(back_populates=\"heroes\")\n</code></pre> <p>Have in mind that now we have to put the annotation of <code>Team</code> as a string: <code>\"Team\"</code>, so that Python doesn't have errors at runtime.</p>"},{"location":"tutorial/code-structure/#team-model-file","title":"Team Model File","text":"<p>We use the same trick in the <code>team_model.py</code> file:</p> <pre><code>from typing import TYPE_CHECKING, List, Optional\n\nfrom sqlmodel import Field, Relationship, SQLModel\n\nif TYPE_CHECKING:\n    from .hero_model import Hero\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n</code></pre> <p>Now we get editor support, autocompletion, inline errors, and SQLModel keeps working. \ud83c\udf89</p>"},{"location":"tutorial/code-structure/#app-file","title":"App File","text":"<p>Now, just for completeness, the <code>app.py</code> file would import the models from both modules:</p> <pre><code>from sqlmodel import Session\n\nfrom .database import create_db_and_tables, engine\nfrom .hero_model import Hero\nfrom .team_model import Team\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        session.add(hero_deadpond)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Hero's team:\", hero_deadpond.team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>And of course, all the tricks with <code>TYPE_CHECKING</code> and type annotations in strings are only needed in the files with circular imports.</p> <p>As there are no circular imports with <code>app.py</code>, we can just use normal imports and use the classes as normally here.</p> <p>And running that achieves the same result as before:</p> <pre><code>$ python -m project.app\n\nCreated hero: id=1 age=None name='Deadpond' secret_name='Dive Wilson' team_id=1\nHero's team: id=1 name='Z-Force' headquarters='Sister Margaret's Bar'\n</code></pre>"},{"location":"tutorial/code-structure/#recap","title":"Recap","text":"<p>For the simplest cases (for most of the cases) you can just keep all the models in a single file, and structure the rest of the application (including setting up the engine) in as many files as you want.</p> <p>And for the complex cases that really need separating all the models in different files, you can use the <code>TYPE_CHECKING</code> to make it all work and still have the best developer experience with the best editor support. \u2728</p>"},{"location":"tutorial/create-db-and-table-with-db-browser/","title":"\u4f7f\u7528 SQL \u521b\u5efa\u8868","text":"<p>\u8ba9\u6211\u4eec\u5f00\u59cb\u5427\uff01</p> <p>\u6211\u4eec\u5c06\uff1a</p> <ul> <li>\u4f7f\u7528 DB Browser for SQLite \u521b\u5efa\u4e00\u4e2a SQLite \u6570\u636e\u5e93</li> <li>\u4f7f\u7528 DB Browser for SQLite \u5728\u6570\u636e\u5e93\u4e2d\u521b\u5efa\u4e00\u4e2a\u8868</li> </ul> <p>\u6211\u4eec\u7a0d\u540e\u4f1a\u6dfb\u52a0\u6570\u636e\u3002\u73b0\u5728\uff0c\u6211\u4eec\u5c06\u521b\u5efa\u6570\u636e\u5e93\u548c\u7b2c\u4e00\u4e2a\u8868\u7ed3\u6784\u3002</p> <p>\u6211\u4eec\u5c06\u521b\u5efa\u4e00\u4e2a\u8868\u6765\u5b58\u50a8\u4ee5\u4e0b\u6570\u636e\uff1a</p> idnamesecret_nameage 1DeadpondDive Wilsonnull 2Spider-BoyPedro Parqueadornull 3Rusty-ManTommy Sharp48"},{"location":"tutorial/create-db-and-table-with-db-browser/#_1","title":"\u521b\u5efa\u6570\u636e\u5e93","text":"<p>SQLModel \u548c SQLAlchemy \u57fa\u4e8e SQL\u3002</p> <p>\u5b83\u4eec\u7684\u8bbe\u8ba1\u65e8\u5728\u901a\u8fc7 Python \u7c7b\u548c\u5bf9\u8c61\u5e2e\u52a9\u4f60\u4f7f\u7528 SQL\u3002\u4f46\u7406\u89e3 SQL \u603b\u662f\u975e\u5e38\u6709\u7528\u7684\u3002</p> <p>\u56e0\u6b64\uff0c\u8ba9\u6211\u4eec\u4ece\u4e00\u4e2a\u7b80\u5355\u7684\u7eaf SQL \u793a\u4f8b\u5f00\u59cb\u3002</p> <p>\u6253\u5f00 DB Browser for SQLite\u3002</p> <p>\u70b9\u51fb New Database \u6309\u94ae\u3002</p> <p></p> <p>\u4f1a\u5f39\u51fa\u4e00\u4e2a\u5bf9\u8bdd\u6846\u3002\u8fdb\u5165\u4f60\u521b\u5efa\u7684 \u9879\u76ee\u76ee\u5f55\uff0c\u5e76\u5c06\u6587\u4ef6\u4fdd\u5b58\u4e3a <code>database.db</code>\u3002</p> <p>Tip</p> <p>SQLite \u6570\u636e\u5e93\u6587\u4ef6\u901a\u5e38\u4ee5 <code>.db</code> \u6269\u5c55\u540d\u4fdd\u5b58\u3002\u6709\u65f6\u4e5f\u4f1a\u4f7f\u7528 <code>.sqlite</code>\u3002</p>"},{"location":"tutorial/create-db-and-table-with-db-browser/#_2","title":"\u521b\u5efa\u8868","text":"<p>\u5b8c\u6210\u6b64\u64cd\u4f5c\u540e\uff0c\u5b83\u53ef\u80fd\u4f1a\u63d0\u793a\u4f60\u7acb\u5373\u521b\u5efa\u4e00\u4e2a\u65b0\u8868\u3002</p> <p>\u5982\u679c\u6ca1\u6709\u63d0\u793a\uff0c\u70b9\u51fb Create Table \u6309\u94ae\u3002</p> <p></p> <p>\u7136\u540e\uff0c\u4f60\u5c06\u770b\u5230\u521b\u5efa\u65b0\u8868\u7684\u5bf9\u8bdd\u6846\u3002</p> <p>\u73b0\u5728\uff0c\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a <code>hero</code> \u7684\u65b0\u8868\uff0c\u5305\u542b\u4ee5\u4e0b\u5217\uff1a</p> <ul> <li><code>id</code>\uff1a\u4e00\u4e2a <code>INTEGER</code> \u7c7b\u578b\u7684\u5b57\u6bb5\uff0c\u5c06\u4f5c\u4e3a \u4e3b\u952e\uff08\u52fe\u9009 <code>PK</code> \u2705\uff09\u3002</li> <li><code>name</code>\uff1a\u4e00\u4e2a <code>TEXT</code> \u7c7b\u578b\u7684\u5b57\u6bb5\uff0c\u5e94\u8be5\u4e3a <code>NOT NULL</code>\uff08\u52fe\u9009 <code>NN</code> \u2705\uff09\uff0c\u6240\u4ee5\u5b83\u5e94\u8be5\u59cb\u7ec8\u6709\u4e00\u4e2a\u503c\u3002</li> <li><code>secret_name</code>\uff1a\u4e00\u4e2a <code>TEXT</code> \u7c7b\u578b\u7684\u5b57\u6bb5\uff0c\u5e94\u8be5\u4e3a <code>NOT NULL</code>\uff08\u52fe\u9009 <code>NN</code> \u2705\uff09\u3002</li> <li><code>age</code>\uff1a\u4e00\u4e2a <code>INTEGER</code> \u7c7b\u578b\u7684\u5b57\u6bb5\uff0c\u53ef\u4ee5\u4e3a <code>NULL</code>\uff0c\u56e0\u6b64\u4f60\u4e0d\u9700\u8981\u52fe\u9009\u5176\u4ed6\u4efb\u4f55\u9009\u9879\u3002</li> </ul> <p></p> <p>\u70b9\u51fb OK \u521b\u5efa\u8868\u3002</p> <p>\u5f53\u4f60\u70b9\u51fb Add \u6309\u94ae\u5e76\u6dfb\u52a0\u4fe1\u606f\u65f6\uff0c\u5b83\u4f1a\u521b\u5efa\u5e76\u66f4\u65b0\u6267\u884c\u521b\u5efa\u8868\u7684 SQL \u8bed\u53e5\uff1a</p> <pre><code>CREATE TABLE \"hero\" ( --(1)\n  \"id\"  INTEGER, --(2)\n  \"name\"  TEXT NOT NULL, --(3)\n  \"secret_name\" TEXT NOT NULL, --(4)\n  \"age\" INTEGER, --(5)\n  PRIMARY KEY(\"id\") --(6)\n); --(7)\n</code></pre> <ol> <li>\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a <code>hero</code> \u7684\u8868\u3002\u6ce8\u610f\uff0c\u8fd9\u4e2a\u8868\u7684\u5217\u5728\u62ec\u53f7 \"<code>(</code>\" \u5185\u58f0\u660e\uff0c\u4ece\u8fd9\u91cc\u5f00\u59cb\u3002</li> <li><code>id</code> \u5217\uff0c\u7c7b\u578b\u4e3a <code>INTEGER</code>\u3002\u5b83\u88ab\u58f0\u660e\u4e3a\u4e3b\u952e\uff0c\u4f4d\u4e8e\u6700\u540e\u3002</li> <li><code>name</code> \u5217\uff0c\u7c7b\u578b\u4e3a <code>TEXT</code>\uff0c\u5e76\u4e14\u5b83\u5fc5\u987b\u59cb\u7ec8\u6709\u4e00\u4e2a\u503c\uff0c<code>NOT NULL</code>\u3002</li> <li><code>secret_name</code> \u5217\uff0c\u7c7b\u578b\u4e3a <code>TEXT</code>\uff0c\u540c\u6837\u662f <code>NOT NULL</code>\u3002</li> <li><code>age</code> \u5217\uff0c\u7c7b\u578b\u4e3a <code>INTEGER</code>\u3002\u8fd9\u4e2a\u5217\u6ca1\u6709 <code>NOT NULL</code>\uff0c\u6240\u4ee5\u5b83\u53ef\u4ee5\u4e3a <code>NULL</code>\u3002</li> <li>\u8fd9\u4e2a\u8868\u7684\u4e3b\u952e\u662f <code>id</code> \u5217\u3002</li> <li>\u8fd9\u662f SQL \u8868\u7684\u7ed3\u675f\u90e8\u5206\uff0c\u6700\u540e\u4e00\u4e2a\u62ec\u53f7 \"<code>)</code>\" \u548c\u5206\u53f7 \"<code>;</code>\" \u8868\u793a SQL \u8bed\u53e5\u7684\u7ed3\u675f\u3002\u8fd9\u4e2a SQL \u5b57\u7b26\u4e32\u53ef\u80fd\u8fd8\u4f1a\u5305\u542b\u5176\u4ed6 SQL \u8bed\u53e5\u3002</li> </ol> <p>\u73b0\u5728\u4f60\u5c06\u770b\u5230\u5b83\u51fa\u73b0\u5728\u8868\u7684\u5217\u8868\u4e2d\uff0c\u4e14\u5305\u542b\u6211\u4eec\u6307\u5b9a\u7684\u5217\u3002\ud83c\udf89</p> <p></p> <p>\u5269\u4e0b\u7684\u6b65\u9aa4\u662f\u70b9\u51fb Write Changes \u4fdd\u5b58\u66f4\u6539\u5230\u6587\u4ef6\u3002</p> <p></p> <p>\u4e4b\u540e\uff0c\u65b0\u8868\u5c06\u4fdd\u5b58\u5728 <code>./database.db</code> \u6587\u4ef6\u4e2d\u3002</p>"},{"location":"tutorial/create-db-and-table-with-db-browser/#_3","title":"\u786e\u8ba4\u8868\u7684\u521b\u5efa","text":"<p>\u8ba9\u6211\u4eec\u786e\u8ba4\u5b83\u662f\u5426\u5df2\u4fdd\u5b58\u3002</p> <p>\u9996\u5148\u70b9\u51fb Close Database \u6309\u94ae\u5173\u95ed\u6570\u636e\u5e93\u3002</p> <p></p> <p>\u7136\u540e\u70b9\u51fb Open Database \u6309\u94ae\u91cd\u65b0\u6253\u5f00\u6570\u636e\u5e93\uff0c\u9009\u62e9\u76f8\u540c\u7684 <code>./database.db</code> \u6587\u4ef6\u3002</p> <p></p> <p>\u4f60\u5c06\u518d\u6b21\u770b\u5230\u6211\u4eec\u521b\u5efa\u7684\u76f8\u540c\u8868\u3002</p> <p></p>"},{"location":"tutorial/create-db-and-table-with-db-browser/#sql_1","title":"\u4f7f\u7528 SQL \u518d\u6b21\u521b\u5efa\u8868","text":"<p>\u73b0\u5728\uff0c\u4e3a\u4e86\u4e86\u89e3 SQL \u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u8ba9\u6211\u4eec\u7528 SQL \u518d\u6b21\u521b\u5efa\u8868\u3002</p> <p>\u518d\u6b21\u70b9\u51fb Close Database \u6309\u94ae\u3002</p> <p>\u5220\u9664\u9879\u76ee\u76ee\u5f55\u4e2d\u7684 <code>./database.db</code> \u6587\u4ef6\u3002</p> <p>\u7136\u540e\u518d\u6b21\u70b9\u51fb New Database\u3002</p> <p>\u518d\u6b21\u5c06\u6587\u4ef6\u4fdd\u5b58\u4e3a <code>database.db</code>\u3002</p> <p>\u8fd9\u4e00\u6b21\uff0c\u5982\u679c\u4f60\u770b\u5230\u521b\u5efa\u65b0\u8868\u7684\u5bf9\u8bdd\u6846\uff0c\u53ea\u9700\u70b9\u51fb Cancel \u6309\u94ae\u5173\u95ed\u5b83\u3002</p> <p>\u73b0\u5728\uff0c\u5207\u6362\u5230 Execute SQL \u6807\u7b7e\u3002</p> <p>\u5199\u4e0b\u4e4b\u524d\u6b65\u9aa4\u4e2d\u751f\u6210\u7684\u76f8\u540c SQL\uff1a</p> <pre><code>CREATE TABLE \"hero\" (\n  \"id\"  INTEGER,\n  \"name\"  TEXT NOT NULL,\n  \"secret_name\" TEXT NOT NULL,\n  \"age\" INTEGER,\n  PRIMARY KEY(\"id\")\n);\n</code></pre> <p>\u7136\u540e\u70b9\u51fb \"Execute all\" \u25b6 \u6309\u94ae\u3002</p> <p></p> <p>\u4f60\u5c06\u770b\u5230 \"execution finished successfully\" \u7684\u63d0\u793a\u4fe1\u606f\u3002</p> <p></p> <p>\u5982\u679c\u4f60\u56de\u5230 Database Structure \u6807\u7b7e\uff0c\u4f60\u4f1a\u770b\u5230\u4f60\u786e\u5b9e\u518d\u6b21\u521b\u5efa\u4e86\u76f8\u540c\u7684\u8868\u3002</p> <p></p>"},{"location":"tutorial/create-db-and-table-with-db-browser/#sql_2","title":"\u8fdb\u4e00\u6b65\u5b66\u4e60 SQL","text":"<p>\u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u5c06\u7ee7\u7eed\u5411\u4f60\u5c55\u793a\u4e00\u4e9b SQL \u7684\u5c0f\u7247\u6bb5\u3002\u4f60\u4e0d\u9700\u8981\u6210\u4e3a SQL \u4e13\u5bb6\u5c31\u80fd\u4f7f\u7528 SQLModel\u3002</p> <p>\u4f46\u662f\uff0c\u5982\u679c\u4f60\u611f\u5174\u8da3\u5e76\u5e0c\u671b\u5feb\u901f\u4e86\u89e3 SQL\uff0c\u6211\u63a8\u8350\u4f60\u9605\u8bfb SQLite \u7684\u53ef\u89c6\u5316\u6587\u6863\uff0c\u94fe\u63a5\u5728\u8fd9\u91cc\uff1aSQL As Understood By SQLite\u3002</p> <p>\u4f60\u53ef\u4ee5\u4ece <code>CREATE TABLE</code> \u5f00\u59cb\u3002</p> <p>\u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u9009\u62e9\u53c2\u52a0\u5b8c\u6574\u7684 SQL \u8bfe\u7a0b\u6216\u9605\u8bfb\u6709\u5173 SQL \u7684\u4e66\u7c4d\uff0c\u4f46\u4f60\u4e0d\u9700\u8981\u6bd4\u6211\u5728\u672c\u6559\u7a0b\u4e2d\u89e3\u91ca\u7684\u5185\u5bb9\u66f4\u591a\uff0c\u5c31\u80fd\u5f00\u59cb\u9ad8\u6548\u5730\u4f7f\u7528 SQLModel\u3002\ud83e\udd13</p>"},{"location":"tutorial/create-db-and-table-with-db-browser/#_4","title":"\u5c0f\u7ed3","text":"<p>\u6211\u4eec\u5b66\u4e60\u4e86\u5982\u4f55\u4f7f\u7528 DB Browser for SQLite \u901a\u8fc7\u53ef\u89c6\u5316\u7528\u6237\u754c\u9762\u4e0e SQLite \u6570\u636e\u5e93\u6587\u4ef6\u8fdb\u884c\u4ea4\u4e92\u3002</p> <p>\u6211\u4eec\u8fd8\u4e86\u89e3\u4e86\u5982\u4f55\u76f4\u63a5\u5411 SQLite \u6570\u636e\u5e93\u5199\u5165 SQL \u8bed\u53e5\u3002\u8fd9\u5728\u9a8c\u8bc1\u6570\u636e\u5e93\u6570\u636e\u662f\u5426\u6b63\u786e\u3001\u8c03\u8bd5\u7b49\u65b9\u9762\u975e\u5e38\u6709\u7528\u3002</p> <p>\u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u5f00\u59cb\u4f7f\u7528 SQLModel \u4e0e\u6570\u636e\u5e93\u4ea4\u4e92\uff0c\u5e76\u4e14\u6211\u4eec\u5c06\u7ee7\u7eed\u540c\u65f6\u4f7f\u7528 DB Browser for SQLite \u6765\u67e5\u770b\u5e95\u5c42\u7684\u6570\u636e\u5e93\u3002\ud83d\udd0d</p>"},{"location":"tutorial/create-db-and-table/","title":"\u4f7f\u7528 SQLModel \u521b\u5efa\u8868 - \u4f7f\u7528\u5f15\u64ce","text":"<p>\u73b0\u5728\u8ba9\u6211\u4eec\u5f00\u59cb\u7f16\u5199\u4ee3\u7801\u5427\u3002\ud83d\udc69\u200d\ud83d\udcbb</p> <p>\u786e\u4fdd\u4f60\u5df2\u7ecf\u8fdb\u5165\u4f60\u7684\u9879\u76ee\u76ee\u5f55\u5e76\u6fc0\u6d3b\u4e86\u865a\u62df\u73af\u5883\uff0c\u6b63\u5982\u4e0a\u4e00\u7ae0\u8282\u6240\u89e3\u91ca\u7684\u3002</p> <p>\u6211\u4eec\u5c06\uff1a</p> <ul> <li>\u4f7f\u7528 SQLModel \u5b9a\u4e49\u4e00\u4e2a\u8868</li> <li>\u4f7f\u7528 SQLModel \u521b\u5efa\u76f8\u540c\u7684 SQLite \u6570\u636e\u5e93\u548c\u8868</li> <li>\u4f7f\u7528 DB Browser for SQLite \u6765\u786e\u8ba4\u64cd\u4f5c</li> </ul> <p>\u8fd9\u91cc\u662f\u6211\u4eec\u60f3\u8981\u7684\u8868\u7ed3\u6784\u7684\u63d0\u9192\uff1a</p> idnamesecret_nameage 1DeadpondDive Wilsonnull 2Spider-BoyPedro Parqueadornull 3Rusty-ManTommy Sharp48"},{"location":"tutorial/create-db-and-table/#_1","title":"\u521b\u5efa\u8868\u6a21\u578b\u7c7b","text":"<p>\u6211\u4eec\u9700\u8981\u505a\u7684\u7b2c\u4e00\u4ef6\u4e8b\u662f\u521b\u5efa\u4e00\u4e2a\u7c7b\u6765\u8868\u793a\u8868\u4e2d\u7684\u6570\u636e\u3002</p> <p>\u8fd9\u6837\u7684\u7c7b\u901a\u5e38\u88ab\u79f0\u4e3a \u6a21\u578b\u3002</p> <p>Tip</p> <p>\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u8fd9\u4e2a\u5305\u53eb\u505a <code>SQLModel</code>\u3002\u56e0\u4e3a\u5b83\u4e3b\u8981\u7528\u4e8e\u521b\u5efa SQL \u6a21\u578b\u3002</p> <p>\u4e3a\u6b64\uff0c\u6211\u4eec\u5c06\u5bfc\u5165 <code>SQLModel</code>\uff08\u4ee5\u53ca\u6211\u4eec\u8fd8\u5c06\u4f7f\u7528\u7684\u5176\u4ed6\u5185\u5bb9\uff09\uff0c\u5e76\u521b\u5efa\u4e00\u4e2a\u7ee7\u627f\u81ea <code>SQLModel</code> \u7684\u7c7b <code>Hero</code>\uff0c\u5b83\u8868\u793a\u6211\u4eec\u7684\u82f1\u96c4\u7684 \u8868\u6a21\u578b\uff1a</p> Python 3.10+ <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\nSQLModel.metadata.create_all(engine)\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\nSQLModel.metadata.create_all(engine)\n</code></pre> <p>\u8fd9\u4e2a <code>Hero</code> \u7c7b \u8868\u793a\u8868\uff0c\u6211\u4eec\u7a0d\u540e\u521b\u5efa\u7684\u6bcf\u4e2a\u5b9e\u4f8b\u5c06 \u8868\u793a\u8868\u4e2d\u7684\u4e00\u884c\u3002</p> <p>\u6211\u4eec\u4f7f\u7528\u914d\u7f6e <code>table=True</code> \u6765\u544a\u8bc9 SQLModel \u8fd9\u662f\u4e00\u4e2a \u8868\u6a21\u578b\uff0c\u5b83\u4ee3\u8868\u4e00\u4e2a\u8868\u3002</p> <p>Info</p> <p>\u4e5f\u53ef\u4ee5\u6ca1\u6709 <code>table=True</code> \u7684\u6a21\u578b\uff0c\u90a3\u4e9b\u53ea\u662f \u6570\u636e\u6a21\u578b\uff0c\u6ca1\u6709\u6570\u636e\u5e93\u4e2d\u7684\u8868\uff0c\u5b83\u4eec\u4e0d\u4f1a\u662f \u8868\u6a21\u578b\u3002</p> <p>\u8fd9\u4e9b \u6570\u636e\u6a21\u578b \u5728\u4ee5\u540e\u4f1a\u975e\u5e38\u6709\u7528\uff0c\u4f46\u73b0\u5728\uff0c\u6211\u4eec\u53ea\u9700\u7ee7\u7eed\u6dfb\u52a0 <code>table=True</code> \u914d\u7f6e\u3002</p>"},{"location":"tutorial/create-db-and-table/#_2","title":"\u5b9a\u4e49\u5b57\u6bb5\u3001\u5217","text":"<p>\u4e0b\u4e00\u6b65\u662f\u901a\u8fc7\u4f7f\u7528\u6807\u51c6\u7684 Python \u7c7b\u578b\u6ce8\u91ca\u6765\u5b9a\u4e49\u7c7b\u7684\u5b57\u6bb5\u6216\u5217\u3002</p> <p>\u8fd9\u4e9b\u53d8\u91cf\u7684\u540d\u79f0\u5c06\u6210\u4e3a\u8868\u4e2d\u5217\u7684\u540d\u79f0\u3002</p> <p>\u800c\u6bcf\u4e2a\u5b57\u6bb5\u7684\u7c7b\u578b\u4e5f\u5c06\u5bf9\u5e94\u8868\u5217\u7684\u7c7b\u578b\uff1a</p> Python 3.10+ <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\nSQLModel.metadata.create_all(engine)\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\nSQLModel.metadata.create_all(engine)\n</code></pre> <p>\u73b0\u5728\u6211\u4eec\u66f4\u8be6\u7ec6\u5730\u770b\u4e00\u4e0b\u8fd9\u4e9b\u5b57\u6bb5/\u5217\u7684\u58f0\u660e\u3002</p>"},{"location":"tutorial/create-db-and-table/#_3","title":"\u53ef\u9009\u5b57\u6bb5\uff0c\u5141\u8bb8\u4e3a\u7a7a\u7684\u5217","text":"<p>\u4ece <code>age</code> \u5f00\u59cb\u6ce8\u610f\uff0c\u5b83\u7684\u7c7b\u578b\u662f <code>int | None</code>\uff08\u6216 <code>Optional[int]</code>\uff09\u3002</p> <p>\u6211\u4eec\u4ece <code>typing</code> \u6807\u51c6\u6a21\u5757\u5bfc\u5165\u4e86 <code>Optional</code>\u3002</p> <p>\u8fd9\u662f\u5728 Python \u4e2d\u58f0\u660e\u67d0\u4e2a\u4e1c\u897f \"\u53ef\u4ee5\u662f <code>int</code> \u6216 <code>None</code>\" \u7684\u6807\u51c6\u65b9\u5f0f\u3002</p> <p>\u6211\u4eec\u8fd8\u5c06 <code>age</code> \u7684\u9ed8\u8ba4\u503c\u8bbe\u7f6e\u4e3a <code>None</code>\u3002</p> Python 3.10+ <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\nSQLModel.metadata.create_all(engine)\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\nSQLModel.metadata.create_all(engine)\n</code></pre> <p>Tip</p> <p>\u6211\u4eec\u4e5f\u5c06 <code>id</code> \u5b9a\u4e49\u4e3a <code>Optional</code>\u3002\u4f46\u662f\u6211\u4eec\u5c06\u5728\u4e0b\u9762\u8ba8\u8bba <code>id</code>\u3002</p> <p>\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6211\u4eec\u544a\u8bc9 SQLModel \u5728\u9a8c\u8bc1\u6570\u636e\u65f6\uff0c<code>age</code> \u4e0d\u662f\u5fc5\u9700\u7684\uff0c\u5e76\u4e14\u5b83\u7684\u9ed8\u8ba4\u503c\u662f <code>None</code>\u3002</p> <p>\u6211\u4eec\u8fd8\u544a\u8bc9\u5b83\uff0c\u5728 SQL \u6570\u636e\u5e93\u4e2d\uff0c<code>age</code> \u7684\u9ed8\u8ba4\u503c\u662f <code>NULL</code>\uff08\u4e0e Python \u4e2d\u7684 <code>None</code> \u7b49\u4ef7\uff09\u3002</p> <p>\u56e0\u6b64\uff0c\u8fd9\u4e2a\u5217\u662f \"\u53ef\u4e3a\u7a7a\u7684\"\uff08\u53ef\u4ee5\u8bbe\u7f6e\u4e3a <code>NULL</code>\uff09\u3002</p> <p>Info</p> <p>\u5728 Pydantic \u4e2d\uff0c<code>age</code> \u662f\u4e00\u4e2a \u53ef\u9009\u5b57\u6bb5\u3002</p> <p>\u5728 SQLAlchemy \u4e2d\uff0c<code>age</code> \u662f\u4e00\u4e2a \u5141\u8bb8\u4e3a\u7a7a\u7684\u5217\u3002</p>"},{"location":"tutorial/create-db-and-table/#id","title":"\u4e3b\u952e <code>id</code>","text":"<p>\u73b0\u5728\u8ba9\u6211\u4eec\u56de\u987e\u4e00\u4e0b <code>id</code> \u5b57\u6bb5\u3002\u5b83\u662f\u8868\u7684 \u4e3b\u952e\u3002</p> <p>\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u5c06 <code>id</code> \u6807\u8bb0\u4e3a \u4e3b\u952e\u3002</p> <p>\u4e3a\u6b64\uff0c\u6211\u4eec\u4f7f\u7528\u6765\u81ea <code>sqlmodel</code> \u7684\u7279\u6b8a <code>Field</code> \u51fd\u6570\uff0c\u5e76\u8bbe\u7f6e\u53c2\u6570 <code>primary_key=True</code>\uff1a</p> Python 3.10+ <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\nSQLModel.metadata.create_all(engine)\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\nSQLModel.metadata.create_all(engine)\n</code></pre> <p>\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6211\u4eec\u544a\u8bc9 SQLModel \u8fd9\u4e2a <code>id</code> \u5b57\u6bb5/\u5217\u662f\u8868\u7684\u4e3b\u952e\u3002</p> <p>\u4f46\u662f\u5728 SQL \u6570\u636e\u5e93\u4e2d\uff0c\u5b83\u662f \u59cb\u7ec8\u5fc5\u987b\u7684\uff0c\u5e76\u4e14\u4e0d\u80fd\u4e3a <code>NULL</code>\u3002\u4e3a\u4ec0\u4e48\u6211\u4eec\u8981\u7528 <code>Optional</code> \u6765\u58f0\u660e\u5b83\u5462\uff1f</p> <p><code>id</code> \u5728\u6570\u636e\u5e93\u4e2d\u662f\u5fc5\u987b\u7684\uff0c\u4f46\u5b83\u5c06\u7531\u6570\u636e\u5e93\u751f\u6210\uff0c\u800c\u4e0d\u662f\u7531\u6211\u4eec\u7684\u4ee3\u7801\u751f\u6210\u3002</p> <p>\u56e0\u6b64\uff0c\u6bcf\u5f53\u6211\u4eec\u521b\u5efa\u8fd9\u4e2a\u7c7b\u7684\u5b9e\u4f8b\uff08\u5728\u540e\u7eed\u7ae0\u8282\u4e2d\uff09\uff0c\u6211\u4eec \u4e0d\u4f1a\u8bbe\u7f6e <code>id</code>\u3002\u5e76\u4e14 <code>id</code> \u7684\u503c\u5c06\u662f <code>None</code> \u76f4\u5230\u6211\u4eec\u5c06\u5176\u4fdd\u5b58\u5230\u6570\u636e\u5e93\u4e2d\uff0c\u7136\u540e\u5b83\u624d\u4f1a\u6700\u7ec8\u6709\u4e00\u4e2a\u503c\u3002</p> <pre><code>my_hero = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n\ndo_something(my_hero.id)  # \u54ce\u5440\uff01 my_hero.id \u662f None\uff01 \ud83d\ude31\ud83d\udea8\n\n# \u60f3\u8c61\u4e00\u4e0b\u8fd9\u5c06\u5b83\u4fdd\u5b58\u5230\u6570\u636e\u5e93\u4e2d\nsomehow_save_in_db(my_hero)\n\ndo_something(my_hero.id)  # \u73b0\u5728 my_hero.id \u6709\u4e00\u4e2a\u7531\u6570\u636e\u5e93\u751f\u6210\u7684\u503c \ud83c\udf89\n</code></pre> <p>\u56e0\u6b64\uff0c\u56e0\u4e3a\u5728 \u6211\u4eec\u7684\u4ee3\u7801\u4e2d\uff08\u800c\u4e0d\u662f\u6570\u636e\u5e93\u4e2d\uff09<code>id</code> \u7684\u503c \u53ef\u80fd\u662f <code>None</code>\uff0c\u6240\u4ee5\u6211\u4eec\u4f7f\u7528 <code>Optional</code>\u3002\u8fd9\u6837 \u7f16\u8f91\u5668\u5c06\u80fd\u591f\u5e2e\u52a9\u6211\u4eec\uff0c\u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u8bbf\u95ee\u4e00\u4e2a\u5c1a\u672a\u4fdd\u5b58\u5230\u6570\u636e\u5e93\u4e2d\u7684\u5bf9\u8c61\u7684 <code>id</code>\uff0c\u5b83\u4ecd\u7136\u4f1a\u662f <code>None</code>\u3002</p> <p></p> <p>\u73b0\u5728\uff0c\u7531\u4e8e\u6211\u4eec\u7528 <code>Field()</code> \u51fd\u6570\u53d6\u4ee3\u4e86\u9ed8\u8ba4\u503c\uff0c\u6211\u4eec\u5728 <code>Field()</code> \u4e2d\u901a\u8fc7\u53c2\u6570 <code>default=None</code> \u8bbe\u7f6e\u4e86 <code>id</code> \u7684 \u5b9e\u9645\u9ed8\u8ba4\u503c\uff1a</p> <pre><code>Field(default=None)\n</code></pre> <p>\u5982\u679c\u6211\u4eec\u6ca1\u6709\u8bbe\u7f6e <code>default</code> \u503c\uff0c\u6bcf\u5f53\u6211\u4eec\u7a0d\u540e\u4f7f\u7528\u8fd9\u4e2a\u6a21\u578b\u8fdb\u884c\u6570\u636e\u9a8c\u8bc1\u65f6\uff08\u7531 Pydantic \u63d0\u4f9b\u652f\u6301\uff09\uff0c\u5b83\u5c06 \u63a5\u53d7 <code>None</code> \u548c <code>int</code> \u7684\u503c\uff0c\u4f46\u4ecd\u7136 \u8981\u6c42 \u4f20\u9012\u90a3\u4e2a <code>None</code> \u503c\u3002\u8fd9\u5bf9\u4e8e\u540e\u7eed\u4f7f\u7528\u8be5\u6a21\u578b\u7684\u4eba\uff08\u53ef\u80fd\u662f\u6211\u4eec\u81ea\u5df1\uff09\u6765\u8bf4\u4f1a\u975e\u5e38\u56f0\u60d1\uff0c\u56e0\u6b64 \u6700\u597d\u5728\u8fd9\u91cc\u8bbe\u7f6e\u9ed8\u8ba4\u503c \u3002</p>"},{"location":"tutorial/create-db-and-table/#_4","title":"\u521b\u5efa\u5f15\u64ce","text":"<p>\u73b0\u5728\u6211\u4eec\u9700\u8981\u521b\u5efa SQLAlchemy \u5f15\u64ce\u3002</p> <p>\u5b83\u662f\u4e00\u4e2a\u5904\u7406\u4e0e\u6570\u636e\u5e93\u901a\u4fe1\u7684\u5bf9\u8c61\u3002</p> <p>\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f\u670d\u52a1\u5668\u6570\u636e\u5e93\uff08\u4f8b\u5982 PostgreSQL \u6216 MySQL\uff09\uff0c\u5f15\u64ce**\u5c06\u4fdd\u5b58\u4e0e\u8be5\u6570\u636e\u5e93\u7684 **\u7f51\u7edc\u8fde\u63a5\u3002</p> <p>\u521b\u5efa \u5f15\u64ce \u975e\u5e38\u7b80\u5355\uff0c\u53ea\u9700\u8c03\u7528 <code>create_engine()</code> \u5e76\u63d0\u4f9b\u6570\u636e\u5e93\u7684 URL\uff1a</p> Python 3.10+ <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\nSQLModel.metadata.create_all(engine)\n</code></pre> \ud83d\udc40 Full file preview <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\nSQLModel.metadata.create_all(engine)\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\nSQLModel.metadata.create_all(engine)\n</code></pre> <p>\u901a\u5e38\uff0c\u4f60\u5e94\u8be5\u4e3a\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u521b\u5efa\u4e00\u4e2a \u5f15\u64ce \u5bf9\u8c61\uff0c\u5e76\u5728\u5404\u4e2a\u5730\u65b9\u91cd\u7528\u5b83\u3002</p> <p>Tip</p> <p>\u8fd8\u6709\u4e00\u4e2a\u76f8\u5173\u7684\u6982\u5ff5\u53eb\u505a \u4f1a\u8bdd\uff0c\u5b83\u901a\u5e38\u4e0d\u5e94\u8be5\u662f\u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u5355\u4e2a\u5bf9\u8c61\u3002</p> <p>\u4f46\u6211\u4eec\u7a0d\u540e\u4f1a\u8ba8\u8bba\u8fd9\u4e2a\u95ee\u9898\u3002</p>"},{"location":"tutorial/create-db-and-table/#url","title":"\u5f15\u64ce\u6570\u636e\u5e93 URL","text":"<p>\u6bcf\u4e2a\u652f\u6301\u7684\u6570\u636e\u5e93\u90fd\u6709\u5176\u81ea\u5df1\u7684 URL \u7c7b\u578b\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e SQLite\uff0c\u5b83\u662f <code>sqlite:///</code> \u540e\u8ddf\u6587\u4ef6\u8def\u5f84\u3002\u4f8b\u5982\uff1a</p> <ul> <li><code>sqlite:///database.db</code></li> <li><code>sqlite:///databases/local/application.db</code></li> <li><code>sqlite:///db.sqlite</code></li> </ul> <p>SQLite \u652f\u6301\u4e00\u4e2a\u7279\u6b8a\u7684\u6570\u636e\u5e93\uff0c\u5b83\u5b8c\u5168\u5b58\u5728\u4e8e \u5185\u5b58\u4e2d\u3002\u56e0\u6b64\uff0c\u5b83\u975e\u5e38\u5feb\u901f\uff0c\u4f46\u8bf7\u5c0f\u5fc3\uff0c\u7a0b\u5e8f\u7ec8\u6b62\u540e\u6570\u636e\u5e93\u4f1a\u88ab\u5220\u9664\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u53ea\u4f7f\u7528\u4e24\u4e2a\u659c\u6760\u5b57\u7b26\uff08<code>//</code>\uff09\u800c\u4e0d\u6307\u5b9a\u6587\u4ef6\u540d\u6765\u6307\u5b9a\u8fd9\u4e2a\u5185\u5b58\u6570\u636e\u5e93\uff1a</p> <ul> <li><code>sqlite://</code></li> </ul> Python 3.10+ <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\nSQLModel.metadata.create_all(engine)\n</code></pre> \ud83d\udc40 Full file preview <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\nSQLModel.metadata.create_all(engine)\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\nSQLModel.metadata.create_all(engine)\n</code></pre> <p>\u4f60\u53ef\u4ee5\u5728 SQLAlchemy \u6587\u6863 \u4e2d\u9605\u8bfb\u66f4\u591a\u5173\u4e8e SQLAlchemy \u652f\u6301\u7684\u6240\u6709\u6570\u636e\u5e93\u7684\u4fe1\u606f\uff08\u4ece\u800c\u4e5f\u652f\u6301 SQLModel\uff09\u3002</p>"},{"location":"tutorial/create-db-and-table/#_5","title":"\u5f15\u64ce\u56de\u663e","text":"<p>\u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u8fd8\u4f7f\u7528\u4e86 <code>echo=True</code> \u53c2\u6570\u3002</p> <p>\u5b83\u4f1a\u8ba9\u5f15\u64ce\u6253\u5370\u51fa\u5b83\u6267\u884c\u7684\u6240\u6709 SQL \u8bed\u53e5\uff0c\u8fd9\u6709\u52a9\u4e8e\u4f60\u7406\u89e3\u53d1\u751f\u4e86\u4ec0\u4e48\u3002</p> <p>\u5b83\u7279\u522b\u6709\u52a9\u4e8e \u5b66\u4e60 \u548c \u8c03\u8bd5\uff1a</p> Python 3.10+ <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\nSQLModel.metadata.create_all(engine)\n</code></pre> \ud83d\udc40 Full file preview <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\nSQLModel.metadata.create_all(engine)\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\nSQLModel.metadata.create_all(engine)\n</code></pre> <p>\u4f46\u5728\u751f\u4ea7\u73af\u5883\u4e2d\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u53bb\u6389 <code>echo=True</code>\uff1a</p> <pre><code>engine = create_engine(sqlite_url)\n</code></pre>"},{"location":"tutorial/create-db-and-table/#_6","title":"\u5f15\u64ce\u6280\u672f\u7ec6\u8282","text":"<p>Tip</p> <p>\u5982\u679c\u4f60\u4e4b\u524d\u5bf9 SQLAlchemy \u4e0d\u719f\u6089\uff0c\u73b0\u5728\u53ea\u662f\u5b66\u4e60 SQLModel\uff0c\u4f60\u53ef\u4ee5\u8df3\u8fc7\u8fd9\u4e00\u90e8\u5206\uff0c\u7ee7\u7eed\u5f80\u4e0b\u770b\u3002</p> <p>\u4f60\u53ef\u4ee5\u5728 SQLAlchemy \u6587\u6863 \u4e2d\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u5f15\u64ce\u7684\u5185\u5bb9\u3002</p> <p>SQLModel \u5b9a\u4e49\u4e86\u5b83\u81ea\u5df1\u7684 <code>create_engine()</code> \u51fd\u6570\u3002\u5b83\u4e0e SQLAlchemy \u7684 <code>create_engine()</code> \u76f8\u540c\uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u5b83\u9ed8\u8ba4\u4f7f\u7528 <code>future=True</code>\uff08\u8fd9\u610f\u5473\u7740\u5b83\u4f7f\u7528\u7684\u662f SQLAlchemy \u6700\u65b0\u7248\u672c 1.4 \u4ee5\u53ca\u672a\u6765\u7248\u672c 2.0 \u7684\u98ce\u683c\uff09\u3002</p> <p>\u800c\u4e14 SQLModel \u7684\u7248\u672c <code>create_engine()</code> \u662f\u5185\u90e8\u8fdb\u884c\u7c7b\u578b\u6ce8\u89e3\u7684\uff0c\u56e0\u6b64\u4f60\u7684\u7f16\u8f91\u5668\u5c06\u80fd\u591f\u901a\u8fc7\u81ea\u52a8\u5b8c\u6210\u548c\u5185\u8054\u9519\u8bef\u6765\u5e2e\u52a9\u4f60\u3002</p>"},{"location":"tutorial/create-db-and-table/#_7","title":"\u521b\u5efa\u6570\u636e\u5e93\u548c\u8868","text":"<p>\u73b0\u5728\u4e00\u5207\u90fd\u51c6\u5907\u5c31\u7eea\uff0c\u53ef\u4ee5\u6700\u7ec8\u521b\u5efa\u6570\u636e\u5e93\u548c\u8868\uff1a</p> Python 3.10+ <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\nSQLModel.metadata.create_all(engine)\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\nSQLModel.metadata.create_all(engine)\n</code></pre> <p>Tip</p> <p>\u521b\u5efa\u5f15\u64ce\u5e76\u4e0d\u4f1a\u521b\u5efa <code>database.db</code> \u6587\u4ef6\u3002</p> <p>\u4f46\u4e00\u65e6\u6211\u4eec\u8fd0\u884c <code>SQLModel.metadata.create_all(engine)</code>\uff0c\u5b83\u5c06\u521b\u5efa <code>database.db</code> \u6587\u4ef6 \u5e76\u4e14 \u5728\u8be5\u6570\u636e\u5e93\u4e2d\u521b\u5efa <code>hero</code> \u8868\u3002</p> <p>\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u4f1a\u5728\u4e00\u4e2a\u6b65\u9aa4\u4e2d\u5b8c\u6210\u3002</p> <p>\u8ba9\u6211\u4eec\u8be6\u7ec6\u89e3\u91ca\u4e00\u4e0b\uff1a</p> <pre><code>SQLModel.metadata.create_all(engine)\n</code></pre>"},{"location":"tutorial/create-db-and-table/#sqlmodel","title":"SQLModel \u5143\u6570\u636e","text":"<p><code>SQLModel</code> \u7c7b\u6709\u4e00\u4e2a <code>metadata</code> \u5c5e\u6027\u3002\u5b83\u662f <code>MetaData</code> \u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002</p> <p>\u6bcf\u5f53\u4f60\u521b\u5efa\u4e00\u4e2a\u7ee7\u627f\u81ea <code>SQLModel</code> \u5e76\u4e14\u914d\u7f6e\u4e86 <code>table = True</code> \u7684\u7c7b\u65f6\uff0c\u5b83\u4f1a\u5728\u8fd9\u4e2a <code>metadata</code> \u5c5e\u6027\u4e2d\u6ce8\u518c\u3002</p> <p>\u56e0\u6b64\uff0c\u5728\u6700\u540e\u4e00\u884c\u4e2d\uff0c<code>SQLModel.metadata</code> \u5df2\u7ecf\u6ce8\u518c\u4e86 <code>Hero</code>\u3002</p>"},{"location":"tutorial/create-db-and-table/#create_all","title":"\u8c03\u7528 <code>create_all()</code>","text":"<p><code>SQLModel.metadata</code> \u4e2d\u7684\u8fd9\u4e2a <code>MetaData</code> \u5bf9\u8c61\u6709\u4e00\u4e2a <code>create_all()</code> \u65b9\u6cd5\u3002</p> <p>\u5b83\u63a5\u6536\u4e00\u4e2a \u5f15\u64ce\uff0c\u5e76\u4f7f\u7528\u8be5\u5f15\u64ce\u6765\u521b\u5efa\u6570\u636e\u5e93\u548c\u6240\u6709\u5728\u8be5 <code>MetaData</code> \u5bf9\u8c61\u4e2d\u6ce8\u518c\u7684\u8868\u3002</p>"},{"location":"tutorial/create-db-and-table/#sqlmodel_1","title":"SQLModel \u5143\u6570\u636e\u7684\u987a\u5e8f\u5f88\u91cd\u8981","text":"<p>\u8fd9\u4e5f\u610f\u5473\u7740\u4f60\u5fc5\u987b\u5728\u521b\u5efa\u7ee7\u627f\u81ea <code>SQLModel</code> \u7684\u65b0\u6a21\u578b\u7c7b\u7684\u4ee3\u7801 \u4e4b\u540e \u8c03\u7528 <code>SQLModel.metadata.create_all()</code>\u3002</p> <p>\u4f8b\u5982\uff0c\u5047\u8bbe\u4f60\u8fd9\u6837\u505a\uff1a</p> <ul> <li>\u5728\u4e00\u4e2a Python \u6587\u4ef6 <code>models.py</code> \u4e2d\u521b\u5efa\u6a21\u578b\u3002</li> <li>\u5728\u6587\u4ef6 <code>db.py</code> \u4e2d\u521b\u5efa\u5f15\u64ce\u5bf9\u8c61\u3002</li> <li>\u5728\u4e3b\u5e94\u7528\u7a0b\u5e8f <code>app.py</code> \u4e2d\u8c03\u7528 <code>SQLModel.metadata.create_all()</code>\u3002</li> </ul> <p>\u5982\u679c\u4f60\u4ec5\u4ec5\u5bfc\u5165 <code>SQLModel</code> \u5e76\u5c1d\u8bd5\u5728 <code>app.py</code> \u4e2d\u8c03\u7528 <code>SQLModel.metadata.create_all()</code>\uff0c\u5b83\u5c06\u4e0d\u4f1a\u521b\u5efa\u4f60\u7684\u8868\uff1a</p> <pre><code># \u8fd9\u6837\u505a\u662f\u884c\u4e0d\u901a\u7684\uff01\ud83d\udea8\nfrom sqlmodel import SQLModel\n\nfrom .db import engine\n\nSQLModel.metadata.create_all(engine)\n</code></pre> <p>\u4e4b\u6240\u4ee5\u884c\u4e0d\u901a\uff0c\u662f\u56e0\u4e3a\u5f53\u4f60\u5355\u72ec\u5bfc\u5165 <code>SQLModel</code> \u65f6\uff0cPython \u5e76\u6ca1\u6709\u6267\u884c\u6240\u6709\u521b\u5efa\u7ee7\u627f\u81ea\u5b83\u7684\u7c7b\uff08\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\u662f <code>Hero</code> \u7c7b\uff09\u7684\u4ee3\u7801\uff0c\u56e0\u6b64 <code>SQLModel.metadata</code> \u4ecd\u7136\u4e3a\u7a7a\u3002</p> <p>\u4f46\u662f\uff0c\u5982\u679c\u4f60\u5728\u8c03\u7528 <code>SQLModel.metadata.create_all()</code> \u4e4b\u524d\u5bfc\u5165\u6a21\u578b\uff0c\u5b83\u5c06\u4f1a\u751f\u6548\uff1a</p> <pre><code>from sqlmodel import SQLModel\n\nfrom . import models\nfrom .db import engine\n\nSQLModel.metadata.create_all(engine)\n</code></pre> <p>\u8fd9\u6837\u505a\u662f\u6709\u6548\u7684\uff0c\u56e0\u4e3a\u901a\u8fc7\u5bfc\u5165\u6a21\u578b\uff0cPython \u4f1a\u6267\u884c\u6240\u6709\u521b\u5efa\u7ee7\u627f\u81ea <code>SQLModel</code> \u7684\u7c7b\u7684\u4ee3\u7801\uff0c\u5e76\u5c06\u5b83\u4eec\u6ce8\u518c\u5230 <code>SQLModel.metadata</code> \u4e2d\u3002</p> <p>\u4f5c\u4e3a\u4e00\u79cd\u66ff\u4ee3\u65b9\u6cd5\uff0c\u4f60\u53ef\u4ee5\u5728 <code>db.py</code> \u4e2d\u5bfc\u5165 <code>SQLModel</code> \u548c\u4f60\u7684\u6a21\u578b\uff1a</p> <pre><code># db.py\nfrom sqlmodel import SQLModel, create_engine\nfrom . import models\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url)\n</code></pre> <p>\u7136\u540e\u5728 <code>app.py</code> \u4e2d\u4ece <code>db.py</code> \u5bfc\u5165 <code>SQLModel</code>\uff0c\u5e76\u5728\u5176\u4e2d\u8c03\u7528 <code>SQLModel.metadata.create_all()</code>\uff1a</p> <pre><code># app.py\nfrom .db import engine, SQLModel\n\nSQLModel.metadata.create_all(engine)\n</code></pre> <p>\u4ece <code>db.py</code> \u5bfc\u5165 <code>SQLModel</code> \u662f\u6709\u6548\u7684\uff0c\u56e0\u4e3a <code>SQLModel</code> \u4e5f\u5728 <code>db.py</code> \u4e2d\u88ab\u5bfc\u5165\u3002</p> <p>\u8fd9\u4e2a\u6280\u5de7\u80fd\u591f\u6b63\u786e\u5730\u5de5\u4f5c\uff0c\u5e76\u521b\u5efa\u6570\u636e\u5e93\u4e2d\u7684\u8868\uff0c\u56e0\u4e3a\u901a\u8fc7\u4ece <code>db.py</code> \u5bfc\u5165 <code>SQLModel</code>\uff0cPython \u4f1a\u6267\u884c\u6240\u6709\u5728 <code>db.py</code> \u6587\u4ef6\u4e2d\u521b\u5efa\u7ee7\u627f\u81ea <code>SQLModel</code> \u7684\u7c7b\u7684\u4ee3\u7801\uff0c\u4f8b\u5982 <code>Hero</code> \u7c7b\u3002</p>"},{"location":"tutorial/create-db-and-table/#_8","title":"\u6570\u636e\u5e93\u8fc1\u79fb","text":"<p>\u5bf9\u4e8e\u8fd9\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\uff0c\u4ee5\u53ca \u6559\u7a0b - \u7528\u6237\u6307\u5357 \u4e2d\u7684\u5927\u591a\u6570\u5185\u5bb9\uff0c\u4f7f\u7528 <code>SQLModel.metadata.create_all()</code> \u5c31\u8db3\u591f\u4e86\u3002</p> <p>\u4f46\u5bf9\u4e8e\u751f\u4ea7\u7cfb\u7edf\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u4f7f\u7528\u4e00\u4e2a\u6570\u636e\u5e93\u8fc1\u79fb\u7cfb\u7edf\u3002</p> <p>\u4f8b\u5982\uff0c\u6bcf\u5f53\u4f60\u6dfb\u52a0\u6216\u5220\u9664\u5217\u3001\u6dfb\u52a0\u65b0\u8868\u3001\u66f4\u6539\u6570\u636e\u7c7b\u578b\u7b49\u65f6\uff0c\u8fd9\u5c06\u975e\u5e38\u6709\u7528\u548c\u91cd\u8981\u3002</p> <p>\u4e0d\u8fc7\uff0c\u4f60\u5c06\u5728\u540e\u9762\u7684\u9ad8\u7ea7\u7528\u6237\u6307\u5357\u4e2d\u5b66\u4e60\u6570\u636e\u5e93\u8fc1\u79fb\u3002</p>"},{"location":"tutorial/create-db-and-table/#_9","title":"\u8fd0\u884c\u7a0b\u5e8f","text":"<p>\u73b0\u5728\u8fd0\u884c\u7a0b\u5e8f\uff0c\u770b\u770b\u4e00\u5207\u662f\u5426\u6b63\u5e38\u5de5\u4f5c\u3002</p> <p>\u5982\u679c\u4f60\u8fd8\u6ca1\u6709\uff0c\u5c06\u4ee3\u7801\u653e\u5728 <code>app.py</code> \u6587\u4ef6\u4e2d\u3002</p> Python 3.10+ <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\nSQLModel.metadata.create_all(engine)\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\nSQLModel.metadata.create_all(engine)\n</code></pre> <p>Tip</p> <p>\u8bb0\u5f97\u5728\u8fd0\u884c\u4e4b\u524d \u6fc0\u6d3b\u865a\u62df\u73af\u5883\u3002</p> <p>\u73b0\u5728\u4f7f\u7528 Python \u8fd0\u884c\u7a0b\u5e8f\uff1a</p> <pre><code>// \u6211\u4eec\u8bbe\u7f6e\u4e86 echo=True\uff0c\u6240\u4ee5\u8fd9\u5c06\u663e\u793a SQL \u4ee3\u7801\n$ python app.py\n\n// \u9996\u5148\uff0c\u4e00\u4e9b\u6211\u4eec\u4e0d\u592a\u5173\u5fc3\u7684 SQL \u6837\u677f\u4ee3\u7801\n\nINFO Engine BEGIN (implicit)\nINFO Engine PRAGMA main.table_info(\"hero\")\nINFO Engine [raw sql] ()\nINFO Engine PRAGMA temp.table_info(\"hero\")\nINFO Engine [raw sql] ()\nINFO Engine\n\n// \u6700\u540e\uff0c\u521b\u5efa\u8868\u7684\u7cbe\u5f69 SQL \u2728\n\nCREATE TABLE hero (\n        id INTEGER,\n        name VARCHAR NOT NULL,\n        secret_name VARCHAR NOT NULL,\n        age INTEGER,\n        PRIMARY KEY (id)\n)\n\n// \u66f4\u591a SQL \u6837\u677f\u4ee3\u7801\n\nINFO Engine [no key 0.00020s] ()\nINFO Engine COMMIT\n</code></pre> <p>Info</p> <p>\u4e3a\u4e86\u4f7f\u8f93\u51fa\u66f4\u6613\u4e8e\u9605\u8bfb\uff0c\u6211\u5bf9\u4e0a\u9762\u7684\u8f93\u51fa\u505a\u4e86\u4e00\u4e9b\u7b80\u5316\u3002</p> <p>\u4f46\u5b9e\u9645\u4e0a\uff0c\u5b83\u663e\u793a\u7684\u5185\u5bb9\u53ef\u80fd\u662f\uff1a</p> <pre><code>2021-07-25 21:37:39,175 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n</code></pre>"},{"location":"tutorial/create-db-and-table/#text-varchar","title":"<code>TEXT</code> \u6216 <code>VARCHAR</code>","text":"<p>\u5728\u4e0a\u4e00\u7ae0\u8282\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 <code>TEXT</code> \u4e3a\u67d0\u4e9b\u5217\u521b\u5efa\u4e86\u8868\u683c\u3002</p> <p>\u4f46\u5728\u8fd9\u4e2a\u8f93\u51fa\u4e2d\uff0cSQLAlchemy \u4f7f\u7528\u7684\u662f <code>VARCHAR</code>\u3002\u8ba9\u6211\u4eec\u770b\u770b\u53d1\u751f\u4e86\u4ec0\u4e48\u3002</p> <p>\u8bb0\u4f4f\u5417\uff1f\u6bcf\u4e2a SQL \u6570\u636e\u5e93\u5728\u652f\u6301\u7684\u5185\u5bb9\u4e0a\u90fd\u6709\u4e00\u4e9b\u4e0d\u540c\u7684\u53d8\u79cd\uff1f</p> <p>\u8fd9\u5c31\u662f\u5176\u4e2d\u7684\u4e00\u4e2a\u5dee\u5f02\u3002\u6bcf\u4e2a\u6570\u636e\u5e93\u652f\u6301\u67d0\u4e9b\u7279\u5b9a\u7684 \u6570\u636e\u7c7b\u578b\uff0c\u6bd4\u5982 <code>INTEGER</code> \u548c <code>TEXT</code>\u3002</p> <p>\u4e00\u4e9b\u6570\u636e\u5e93\u6709\u4e00\u4e9b\u7279\u5b9a\u7684\u7c7b\u578b\uff0c\u4e13\u95e8\u7528\u4e8e\u67d0\u4e9b\u7279\u5b9a\u7684\u7528\u9014\u3002\u4f8b\u5982\uff0cPostgreSQL \u548c MySQL \u652f\u6301 <code>BOOLEAN</code> \u7c7b\u578b\uff0c\u7528\u4e8e\u8868\u793a <code>True</code> \u548c <code>False</code> \u7684\u503c\u3002SQLite \u4e5f\u63a5\u53d7\u5e26\u6709\u5e03\u5c14\u503c\u7684 SQL\uff0c\u751a\u81f3\u5728\u5b9a\u4e49\u8868\u683c\u5217\u65f6\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5e03\u5c14\u503c\uff0c\u4f46\u5b83\u5185\u90e8\u5b9e\u9645\u4f7f\u7528\u7684\u662f <code>INTEGER</code> \u7c7b\u578b\uff0c\u7528 <code>1</code> \u8868\u793a <code>True</code>\uff0c\u7528 <code>0</code> \u8868\u793a <code>False</code>\u3002</p> <p>\u540c\u6837\u5730\uff0c\u5b58\u50a8\u5b57\u7b26\u4e32\u6709\u51e0\u79cd\u53ef\u80fd\u7684\u7c7b\u578b\u3002SQLite \u4f7f\u7528 <code>TEXT</code> \u7c7b\u578b\uff0c\u4f46\u50cf PostgreSQL \u548c MySQL \u8fd9\u6837\u7684\u5176\u4ed6\u6570\u636e\u5e93\u9ed8\u8ba4\u4f7f\u7528 <code>VARCHAR</code> \u7c7b\u578b\uff0c<code>VARCHAR</code> \u662f\u6700\u5e38\u89c1\u7684\u5b57\u7b26\u4e32\u6570\u636e\u7c7b\u578b\u4e4b\u4e00\u3002</p> <p><code>VARCHAR</code> \u6765\u81ea \u53ef\u53d8 \u957f\u5ea6 \u5b57\u7b26\u3002</p> <p>SQLAlchemy \u751f\u6210\u7684 SQL \u8bed\u53e5\u4f7f\u7528 <code>VARCHAR</code>\uff0c\u7136\u540e SQLite \u63a5\u6536\u8fd9\u4e9b\u8bed\u53e5\uff0c\u5e76\u5185\u90e8\u5c06\u5b83\u4eec\u8f6c\u6362\u4e3a <code>TEXT</code>\u3002</p> <p>\u9664\u4e86\u8fd9\u4e24\u79cd\u6570\u636e\u7c7b\u578b\u4e4b\u95f4\u7684\u5dee\u5f02\u5916\uff0c\u4e00\u4e9b\u6570\u636e\u5e93\uff0c\u5982 MySQL\uff0c\u8981\u6c42\u4e3a <code>VARCHAR</code> \u7c7b\u578b\u8bbe\u7f6e\u6700\u5927\u957f\u5ea6\u3002\u4f8b\u5982\uff0c<code>VARCHAR(255)</code> \u8bbe\u7f6e\u4e86\u5b57\u7b26\u6570\u7684\u6700\u5927\u503c\u4e3a 255\u3002</p> <p>\u4e3a\u4e86\u4f7f\u5f97 SQLModel \u80fd\u591f\u66f4\u65b9\u4fbf\u5730\u5728\u4efb\u4f55\u6570\u636e\u5e93\u4e0a\u7acb\u5373\u4f7f\u7528\uff08\u5373\u4f7f\u662f MySQL\uff09\uff0c\u5e76\u4e14\u4e0d\u9700\u8981\u4efb\u4f55\u989d\u5916\u914d\u7f6e\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c<code>str</code> \u7c7b\u578b\u7684\u5b57\u6bb5\u5728\u5927\u591a\u6570\u6570\u636e\u5e93\u4e2d\u4f1a\u88ab\u89e3\u91ca\u4e3a <code>VARCHAR</code>\uff0c\u5728 MySQL \u4e2d\u5219\u662f <code>VARCHAR(255)</code>\u3002\u8fd9\u6837\uff0c\u4f60\u5c31\u53ef\u4ee5\u786e\u4fdd\u540c\u4e00\u4e2a\u7c7b\u53ef\u4ee5\u517c\u5bb9\u5927\u591a\u6570\u6d41\u884c\u6570\u636e\u5e93\uff0c\u65e0\u9700\u989d\u5916\u7684\u52aa\u529b\u3002</p> <p>Tip</p> <p>\u4f60\u5c06\u5728\u540e\u7eed\u7684\u9ad8\u7ea7\u6559\u7a0b - \u7528\u6237\u6307\u5357\u4e2d\u5b66\u4e60\u5982\u4f55\u66f4\u6539\u5b57\u7b26\u4e32\u5217\u7684\u6700\u5927\u957f\u5ea6\u3002</p>"},{"location":"tutorial/create-db-and-table/#_10","title":"\u9a8c\u8bc1\u6570\u636e\u5e93","text":"<p>\u73b0\u5728\uff0c\u4f7f\u7528 DB Browser for SQLite \u6253\u5f00\u6570\u636e\u5e93\uff0c\u4f60\u4f1a\u770b\u5230\u7a0b\u5e8f\u5df2\u7ecf\u521b\u5efa\u4e86 <code>hero</code> \u8868\uff0c\u6b63\u5982\u4e4b\u524d\u4e00\u6837\u3002\ud83c\udf89</p> <p></p>"},{"location":"tutorial/create-db-and-table/#_11","title":"\u91cd\u6784\u6570\u636e\u521b\u5efa","text":"<p>\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u7a0d\u5fae\u91cd\u6784\u4e00\u4e0b\u4ee3\u7801\uff0c\u4f7f\u5176\u66f4\u5bb9\u6613 \u91cd\u7528\u3001\u5171\u4eab \u548c \u6d4b\u8bd5\u3002</p> <p>\u6211\u4eec\u5c06\u628a\u90a3\u4e9b\u4e3b\u8981\u6709 \u526f\u4f5c\u7528\uff08\u5373\u6539\u53d8\u6570\u636e\u2014\u2014\u521b\u5efa\u4e00\u4e2a\u6570\u636e\u5e93\u6587\u4ef6\u548c\u8868\uff09\u7684\u4ee3\u7801\u79fb\u5230\u4e00\u4e2a\u51fd\u6570\u4e2d\u3002</p> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u552f\u4e00\u7684\u4ee3\u7801\u5c31\u662f <code>SQLModel.metadata.create_all(engine)</code>\u3002</p> <p>\u8ba9\u6211\u4eec\u5c06\u5b83\u653e\u5230\u4e00\u4e2a\u540d\u4e3a <code>create_db_and_tables()</code> \u7684\u51fd\u6570\u4e2d\uff1a</p> Python 3.10+ <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\nif __name__ == \"__main__\":\n    create_db_and_tables()\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\nif __name__ == \"__main__\":\n    create_db_and_tables()\n</code></pre> <p>\u5982\u679c <code>SQLModel.metadata.create_all(engine)</code> \u4e0d\u5728\u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u5c1d\u8bd5\u4ece\u5176\u4ed6\u6587\u4ef6\u5bfc\u5165\u8fd9\u4e2a\u6a21\u5757\u7684\u5185\u5bb9\u65f6\uff0c\u5b83\u4f1a \u6bcf\u6b21 \u6267\u884c\u5bfc\u5165\u8be5\u6a21\u5757\u7684\u6587\u4ef6\u65f6\uff0c\u90fd\u4f1a\u5c1d\u8bd5\u521b\u5efa\u6570\u636e\u5e93\u548c\u8868\u683c\u3002</p> <p>\u6211\u4eec\u4e0d\u5e0c\u671b\u8fd9\u6837\u53d1\u751f\uff0c\u53ea\u6709\u5728\u6211\u4eec \u6253\u7b97 \u8fd9\u4e48\u505a\u65f6\u624d\u4f1a\u6267\u884c\uff0c\u56e0\u6b64\u6211\u4eec\u628a\u5b83\u653e\u5230\u4e00\u4e2a\u51fd\u6570\u4e2d\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u786e\u4fdd\u53ea\u6709\u5728\u8c03\u7528\u8be5\u51fd\u6570\u65f6\u624d\u4f1a\u521b\u5efa\u8868\u683c\uff0c\u800c\u4e0d\u662f\u5728\u6a21\u5757\u88ab\u5bfc\u5165\u65f6\u81ea\u52a8\u6267\u884c\u3002</p> <p>\u73b0\u5728\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u5176\u4ed6\u6587\u4ef6\u4e2d\u5bfc\u5165 <code>Hero</code> \u7c7b\uff0c\u800c\u4e0d\u4f1a\u53d1\u751f\u90a3\u4e9b \u526f\u4f5c\u7528\u3002</p> <p>Tip</p> <p>\ud83d\ude05 \u5267\u900f\uff1a\u8fd9\u4e2a\u51fd\u6570\u88ab\u547d\u540d\u4e3a <code>create_db_and_tables()</code>\uff0c\u56e0\u4e3a\u672a\u6765\u6211\u4eec\u8fd8\u4f1a\u6709\u5176\u4ed6 \u8868\u683c\uff0c\u5305\u542b\u9664\u4e86 <code>Hero</code> \u7c7b\u4ee5\u5916\u7684\u5176\u4ed6\u7c7b\u3002\ud83d\ude80</p>"},{"location":"tutorial/create-db-and-table/#_12","title":"\u5c06\u6570\u636e\u521b\u5efa\u4f5c\u4e3a\u811a\u672c\u6267\u884c","text":"<p>\u6211\u4eec\u5df2\u7ecf\u9632\u6b62\u4e86\u4ece <code>app.py</code> \u6587\u4ef6\u5bfc\u5165\u65f6\u7684\u526f\u4f5c\u7528\u3002</p> <p>\u4f46\u6211\u4eec\u4ecd\u7136\u5e0c\u671b\u5f53\u6211\u4eec\u4ece\u7ec8\u7aef\u76f4\u63a5\u4ee5\u72ec\u7acb\u811a\u672c\u7684\u65b9\u5f0f\u8fd0\u884c\u65f6\uff0c\u80fd\u591f \u521b\u5efa\u6570\u636e\u5e93\u548c\u8868\u683c\uff0c\u5c31\u50cf\u4e4b\u524d\u90a3\u6837\u3002</p> <p>Tip</p> <p>\u53ef\u4ee5\u5c06 \u811a\u672c \u548c \u7a0b\u5e8f \u770b\u4f5c\u662f\u53ef\u4e92\u6362\u7684\u3002</p> <p>\u811a\u672c \u8fd9\u4e2a\u8bcd\u901a\u5e38\u610f\u5473\u7740\u4ee3\u7801\u53ef\u4ee5\u72ec\u7acb\u4e14\u5bb9\u6613\u5730\u8fd0\u884c\uff0c\u6216\u8005\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5b83\u6307\u7684\u662f\u4e00\u4e2a\u76f8\u5bf9\u7b80\u5355\u7684\u7a0b\u5e8f\u3002</p> <p>\u4e3a\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 <code>if</code> \u8bed\u53e5\u5757\u4e2d\u4f7f\u7528\u7279\u6b8a\u53d8\u91cf <code>__name__</code>\uff1a</p> Python 3.10+ <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\nif __name__ == \"__main__\":\n    create_db_and_tables()\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\nif __name__ == \"__main__\":\n    create_db_and_tables()\n</code></pre>"},{"location":"tutorial/create-db-and-table/#__name__-__main__","title":"\u5173\u4e8e <code>__name__ == \"__main__\"</code>","text":"<p><code>__name__ == \"__main__\"</code> \u7684\u4e3b\u8981\u76ee\u7684\u662f\u5728\u6587\u4ef6\u88ab\u76f4\u63a5\u6267\u884c\u65f6\u6267\u884c\u67d0\u4e9b\u4ee3\u7801\uff1a</p> <pre><code>$ python app.py\n\n// \u8fd9\u91cc\u4f1a\u53d1\u751f\u4e00\u4e9b\u4e8b\u60c5 \u2728\n</code></pre> <p>...\u4f46\u5f53\u5176\u4ed6\u6587\u4ef6\u5bfc\u5165\u5b83\u65f6\uff0c\u4ee3\u7801\u4e0d\u4f1a\u88ab\u6267\u884c\uff0c\u4f8b\u5982\uff1a</p> <pre><code>from app import Hero\n</code></pre> <p>Tip</p> <p>\u4f7f\u7528 <code>if __name__ == \"__main__\":</code> \u7684 <code>if</code> \u8bed\u53e5\u5757\u6709\u65f6\u88ab\u79f0\u4e3a \"\u4e3b\u5757\"\u3002</p> <p>\u5728 Python \u6587\u6863 \u4e2d\uff0c\u5b98\u65b9\u540d\u79f0\u662f \"\u9876\u7ea7\u811a\u672c\u73af\u5883\"\u3002</p>"},{"location":"tutorial/create-db-and-table/#_13","title":"\u66f4\u591a\u7ec6\u8282","text":"<p>\u5047\u8bbe\u4f60\u7684\u6587\u4ef6\u540d\u4e3a <code>myapp.py</code>\u3002</p> <p>\u5982\u679c\u4f60\u8fd0\u884c\u5b83\uff1a</p> <pre><code>$ python myapp.py\n\n// \u8fd9\u5c06\u8c03\u7528 create_db_and_tables()\n</code></pre> <p>...\u90a3\u4e48 Python \u81ea\u52a8\u521b\u5efa\u7684\u6587\u4ef6\u5185\u90e8\u53d8\u91cf <code>__name__</code> \u7684\u503c\u5c06\u662f\u5b57\u7b26\u4e32 <code>\"__main__\"</code>\u3002</p> <p>\u56e0\u6b64\uff0c\u4ee5\u4e0b\u51fd\u6570\u5c06\u4f1a\u6267\u884c\uff1a</p> <pre><code>if __name__ == \"__main__\":\n    create_db_and_tables()\n</code></pre> <p>\u5982\u679c\u4f60\u5bfc\u5165\u4e86\u8be5\u6a21\u5757\uff08\u6587\u4ef6\uff09\uff0c\u5c31\u4e0d\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u3002</p> <p>\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u6709\u53e6\u4e00\u4e2a\u6587\u4ef6 <code>importer.py</code>\uff0c\u5176\u4e2d\u5305\u542b\uff1a</p> <pre><code>from myapp import Hero\n\n# \u5176\u4ed6\u4ee3\u7801\n</code></pre> <p>...\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c<code>myapp.py</code> \u5185\u90e8\u7684\u81ea\u52a8\u53d8\u91cf <code>__name__</code> \u7684\u503c\u4e0d\u4f1a\u662f <code>\"__main__\"</code>\u3002</p> <p>\u56e0\u6b64\uff0c\u4ee5\u4e0b\u4ee3\u7801\uff1a</p> <pre><code>if __name__ == \"__main__\":\n    create_db_and_tables()\n</code></pre> <p>...\u4e0d\u4f1a \u6267\u884c\u3002</p> <p>Info</p> <p>\u6b32\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u67e5\u770b \u5b98\u65b9 Python \u6587\u6863\u3002</p>"},{"location":"tutorial/create-db-and-table/#_14","title":"\u6700\u7ec8\u56de\u987e","text":"<p>\u5728\u505a\u4e86\u8fd9\u4e9b\u66f4\u6539\u4e4b\u540e\uff0c\u4f60\u53ef\u4ee5\u518d\u6b21\u8fd0\u884c\u5b83\uff0c\u8f93\u51fa\u5c06\u4e0e\u4e4b\u524d\u76f8\u540c\u3002</p> <p>\u4f46\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u4ece\u5176\u4ed6\u6587\u4ef6\u4e2d\u5bfc\u5165\u8be5\u6a21\u5757\u4e2d\u7684\u5185\u5bb9\u3002</p> <p>\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u6700\u7ec8\u68c0\u67e5\u4e00\u4e0b\u4ee3\u7801\uff1a</p> Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, SQLModel, create_engine  # (2)!\n\n\nclass Hero(SQLModel, table=True):  # (3)!\n    id: int | None = Field(default=None, primary_key=True)  # (4)!\n    name: str  # (5)!\n    secret_name: str  # (6)!\n    age: int | None = None  # (7)!\n\n\nsqlite_file_name = \"database.db\"  # (8)!\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"  # (9)!\n\nengine = create_engine(sqlite_url, echo=True)  # (10)!\n\n\ndef create_db_and_tables():  # (11)!\n    SQLModel.metadata.create_all(engine)  # (12)!\n\n\nif __name__ == \"__main__\":  # (13)!\n    create_db_and_tables()  # (14)!\n</code></pre> <ol> <li>Import <code>Optional</code> from <code>typing</code> to declare fields that could be <code>None</code>.</li> <li>Import the things we will need from <code>sqlmodel</code>: <code>Field</code>, <code>SQLModel</code>, <code>create_engine</code>.</li> <li> <p>Create the <code>Hero</code> model class, representing the <code>hero</code> table in the database.</p> <p>And also mark this class as a table model with <code>table=True</code>.</p> </li> <li> <p>Create the <code>id</code> field:</p> <p>It could be <code>None</code> until the database assigns a value to it, so we annotate it with <code>Optional</code>.</p> <p>It is a primary key, so we use <code>Field()</code> and the argument <code>primary_key=True</code>.</p> </li> <li> <p>Create the <code>name</code> field.</p> <p>It is required, so there's no default value, and it's not <code>Optional</code>.</p> </li> <li> <p>Create the <code>secret_name</code> field.</p> <p>Also required.</p> </li> <li> <p>Create the <code>age</code> field.</p> <p>It is not required, the default value is <code>None</code>.</p> <p>In the database, the default value will be <code>NULL</code>, the SQL equivalent of <code>None</code>.</p> <p>As this field could be <code>None</code> (and <code>NULL</code> in the database), we annotate it with <code>Optional</code>.</p> </li> <li> <p>Write the name of the database file.</p> </li> <li>Use the name of the database file to create the database URL.</li> <li> <p>Create the engine using the URL.</p> <p>This doesn't create the database yet, no file or table is created at this point, only the engine object that will handle the connections with this specific database, and with specific support for SQLite (based on the URL).</p> </li> <li> <p>Put the code that creates side effects in a function.</p> <p>In this case, only one line that creates the database file with the table.</p> </li> <li> <p>Create all the tables that were automatically registered in <code>SQLModel.metadata</code>.</p> </li> <li> <p>Add a main block, or \"Top-level script environment\".</p> <p>And put some logic to be executed when this is called directly with Python, as in:</p> <pre><code>$ python app.py\n\n// Execute all the stuff and show the output\n</code></pre> <p>...but that is not executed when importing something from this module, like:</p> <pre><code>from app import Hero\n</code></pre> </li> <li> <p>In this main block, call the function that creates the database file and the table.</p> <p>This way when we call it with:</p> <pre><code>$ python app.py\n\n// Doing stuff \u2728\n</code></pre> <p>...it will create the database file and the table.</p> </li> </ol> <pre><code>from typing import Optional  # (1)!\n\nfrom sqlmodel import Field, SQLModel, create_engine  # (2)!\n\n\nclass Hero(SQLModel, table=True):  # (3)!\n    id: Optional[int] = Field(default=None, primary_key=True)  # (4)!\n    name: str  # (5)!\n    secret_name: str  # (6)!\n    age: Optional[int] = None  # (7)!\n\n\nsqlite_file_name = \"database.db\"  # (8)!\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"  # (9)!\n\nengine = create_engine(sqlite_url, echo=True)  # (10)!\n\n\ndef create_db_and_tables():  # (11)!\n    SQLModel.metadata.create_all(engine)  # (12)!\n\n\nif __name__ == \"__main__\":  # (13)!\n    create_db_and_tables()  # (14)!\n</code></pre> <ol> <li>Import <code>Optional</code> from <code>typing</code> to declare fields that could be <code>None</code>.</li> <li>Import the things we will need from <code>sqlmodel</code>: <code>Field</code>, <code>SQLModel</code>, <code>create_engine</code>.</li> <li> <p>Create the <code>Hero</code> model class, representing the <code>hero</code> table in the database.</p> <p>And also mark this class as a table model with <code>table=True</code>.</p> </li> <li> <p>Create the <code>id</code> field:</p> <p>It could be <code>None</code> until the database assigns a value to it, so we annotate it with <code>Optional</code>.</p> <p>It is a primary key, so we use <code>Field()</code> and the argument <code>primary_key=True</code>.</p> </li> <li> <p>Create the <code>name</code> field.</p> <p>It is required, so there's no default value, and it's not <code>Optional</code>.</p> </li> <li> <p>Create the <code>secret_name</code> field.</p> <p>Also required.</p> </li> <li> <p>Create the <code>age</code> field.</p> <p>It is not required, the default value is <code>None</code>.</p> <p>In the database, the default value will be <code>NULL</code>, the SQL equivalent of <code>None</code>.</p> <p>As this field could be <code>None</code> (and <code>NULL</code> in the database), we annotate it with <code>Optional</code>.</p> </li> <li> <p>Write the name of the database file.</p> </li> <li>Use the name of the database file to create the database URL.</li> <li> <p>Create the engine using the URL.</p> <p>This doesn't create the database yet, no file or table is created at this point, only the engine object that will handle the connections with this specific database, and with specific support for SQLite (based on the URL).</p> </li> <li> <p>Put the code that creates side effects in a function.</p> <p>In this case, only one line that creates the database file with the table.</p> </li> <li> <p>Create all the tables that were automatically registered in <code>SQLModel.metadata</code>.</p> </li> <li> <p>Add a main block, or \"Top-level script environment\".</p> <p>And put some logic to be executed when this is called directly with Python, as in:</p> <pre><code>$ python app.py\n\n// Execute all the stuff and show the output\n</code></pre> <p>...but that is not executed when importing something from this module, like:</p> <pre><code>from app import Hero\n</code></pre> </li> <li> <p>In this main block, call the function that creates the database file and the table.</p> <p>This way when we call it with:</p> <pre><code>$ python app.py\n\n// Doing stuff \u2728\n</code></pre> <p>...it will create the database file and the table.</p> </li> </ol> <p>Tip</p> <p>\u901a\u8fc7\u70b9\u51fb\u4ee3\u7801\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u6c14\u6ce1\uff0c\u56de\u987e\u6bcf\u884c\u4ee3\u7801\u7684\u4f5c\u7528\u3002\ud83d\udc46</p>"},{"location":"tutorial/create-db-and-table/#_15","title":"\u603b\u7ed3","text":"<p>\u6211\u4eec\u5b66\u4e60\u4e86\u5982\u4f55\u4f7f\u7528 SQLModel \u6765\u5b9a\u4e49\u6570\u636e\u5e93\u4e2d\u8868\u683c\u7684\u7ed3\u6784\uff0c\u5e76\u4e14\u6211\u4eec\u4f7f\u7528 SQLModel \u521b\u5efa\u4e86\u4e00\u4e2a\u6570\u636e\u5e93\u548c\u8868\u683c\u3002</p> <p>\u6211\u4eec\u8fd8\u91cd\u6784\u4e86\u4ee3\u7801\uff0c\u4f7f\u5176\u66f4\u5bb9\u6613\u91cd\u7528\u3001\u5171\u4eab\u548c\u6d4b\u8bd5\u3002</p> <p>\u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u770b\u5230 SQLModel \u5982\u4f55\u5e2e\u52a9\u6211\u4eec\u901a\u8fc7\u4ee3\u7801\u4e0e SQL \u6570\u636e\u5e93\u8fdb\u884c\u4ea4\u4e92\u3002\ud83e\udd13</p>"},{"location":"tutorial/delete/","title":"Delete Data - DELETE","text":"<p>Now let's delete some data using SQLModel.</p>"},{"location":"tutorial/delete/#continue-from-previous-code","title":"Continue From Previous Code","text":"<p>As before, we'll continue from where we left off with the previous code.</p> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Captain North America\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        hero_1.age = 16\n        hero_1.name = \"Spider-Youngster\"\n        session.add(hero_1)\n\n        hero_2.name = \"Captain North America Except Canada\"\n        hero_2.age = 110\n        session.add(hero_2)\n\n        session.commit()\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n\n        print(\"Updated hero 1:\", hero_1)\n        print(\"Updated hero 2:\", hero_2)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Captain North America\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        hero_1.age = 16\n        hero_1.name = \"Spider-Youngster\"\n        session.add(hero_1)\n\n        hero_2.name = \"Captain North America Except Canada\"\n        hero_2.age = 110\n        session.add(hero_2)\n\n        session.commit()\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n\n        print(\"Updated hero 1:\", hero_1)\n        print(\"Updated hero 2:\", hero_2)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Remember to remove the <code>database.db</code> file before running the examples to get the same results.</p>"},{"location":"tutorial/delete/#delete-with-sql","title":"Delete with SQL","text":"<p>This <code>Spider-Youngster</code> is getting too weird, so let's just delete it.</p> <p>But don't worry, we'll reboot it later with a new story. \ud83d\ude05</p> <p>Let's see how to delete it with SQL:</p> <pre><code>DELETE\nFROM hero\nWHERE name = \"Spider-Youngster\"\n</code></pre> <p>This means, more or less:</p> <p>Hey SQL database \ud83d\udc4b, I want to <code>DELETE</code> rows <code>FROM</code> the table called <code>hero</code>.</p> <p>Please delete all the rows <code>WHERE</code> the value of the column <code>name</code> is equal to <code>\"Spider-Youngster\"</code>.</p> <p>Remember that when using a <code>SELECT</code> statement it has the form:</p> <pre><code>SELECT [some stuff here]\nFROM [name of a table here]\nWHERE [some condition here]\n</code></pre> <p><code>DELETE</code> is very similar, and again we use <code>FROM</code> to tell the table to work on, and we use <code>WHERE</code> to tell the condition to use to match the rows that we want to delete.</p> <p>You can try that in DB Browser for SQLite:</p> <p></p> <p>Have in mind that <code>DELETE</code> is to delete entire rows, not single values in a row.</p> <p>If you want to \"delete\" a single value in a column while keeping the row, you would instead update the row as explained in the previous chapter, setting the specific value of the column in that row to <code>NULL</code> (to <code>None</code> in Python).</p> <p>Now let's delete with SQLModel.</p> <p>To get the same results, delete the <code>database.db</code> file before running the examples.</p>"},{"location":"tutorial/delete/#read-from-the-database","title":"Read From the Database","text":"<p>We'll start by selecting the hero <code>\"Spider-Youngster\"</code> that we updated in the previous chapter, this is the one we will delete:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Captain North America\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        hero_1.age = 16\n        hero_1.name = \"Spider-Youngster\"\n        session.add(hero_1)\n\n        hero_2.name = \"Captain North America Except Canada\"\n        hero_2.age = 110\n        session.add(hero_2)\n\n        session.commit()\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n\n        print(\"Updated hero 1:\", hero_1)\n        print(\"Updated hero 2:\", hero_2)\n\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n        session.commit()\n\n        print(\"Deleted hero:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.first()\n\n        if hero is None:\n            print(\"There's no hero named Spider-Youngster\")\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n    delete_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Captain North America\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        hero_1.age = 16\n        hero_1.name = \"Spider-Youngster\"\n        session.add(hero_1)\n\n        hero_2.name = \"Captain North America Except Canada\"\n        hero_2.age = 110\n        session.add(hero_2)\n\n        session.commit()\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n\n        print(\"Updated hero 1:\", hero_1)\n        print(\"Updated hero 2:\", hero_2)\n\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n        session.commit()\n\n        print(\"Deleted hero:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.first()\n\n        if hero is None:\n            print(\"There's no hero named Spider-Youngster\")\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n    delete_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>As this is a new function <code>delete_heroes()</code>, we'll also add it to the <code>main()</code> function so that we call it when executing the program from the command line:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n    delete_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n    delete_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Captain North America\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        hero_1.age = 16\n        hero_1.name = \"Spider-Youngster\"\n        session.add(hero_1)\n\n        hero_2.name = \"Captain North America Except Canada\"\n        hero_2.age = 110\n        session.add(hero_2)\n\n        session.commit()\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n\n        print(\"Updated hero 1:\", hero_1)\n        print(\"Updated hero 2:\", hero_2)\n\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n        session.commit()\n\n        print(\"Deleted hero:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.first()\n\n        if hero is None:\n            print(\"There's no hero named Spider-Youngster\")\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n    delete_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Captain North America\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        hero_1.age = 16\n        hero_1.name = \"Spider-Youngster\"\n        session.add(hero_1)\n\n        hero_2.name = \"Captain North America Except Canada\"\n        hero_2.age = 110\n        session.add(hero_2)\n\n        session.commit()\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n\n        print(\"Updated hero 1:\", hero_1)\n        print(\"Updated hero 2:\", hero_2)\n\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n        session.commit()\n\n        print(\"Deleted hero:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.first()\n\n        if hero is None:\n            print(\"There's no hero named Spider-Youngster\")\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n    delete_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>That will print the same existing hero Spider-Youngster:</p> <pre><code>$ python app.py\n\n// Some boilerplate and previous output omitted \ud83d\ude09\n\n// The SELECT with WHERE\nINFO Engine BEGIN (implicit)\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.name = ?\nINFO Engine [no key 0.00011s] ('Spider-Youngster',)\n\n// Print the hero as obtained from the database\nHero:  name='Spider-Youngster' secret_name='Pedro Parqueador' age=16 id=2\n</code></pre>"},{"location":"tutorial/delete/#delete-the-hero-from-the-session","title":"Delete the Hero from the Session","text":"<p>Now, very similar to how we used <code>session.add()</code> to add or update new heroes, we can use <code>session.delete()</code> to delete the hero from the session:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Captain North America\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        hero_1.age = 16\n        hero_1.name = \"Spider-Youngster\"\n        session.add(hero_1)\n\n        hero_2.name = \"Captain North America Except Canada\"\n        hero_2.age = 110\n        session.add(hero_2)\n\n        session.commit()\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n\n        print(\"Updated hero 1:\", hero_1)\n        print(\"Updated hero 2:\", hero_2)\n\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n        session.commit()\n\n        print(\"Deleted hero:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.first()\n\n        if hero is None:\n            print(\"There's no hero named Spider-Youngster\")\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n    delete_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Captain North America\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        hero_1.age = 16\n        hero_1.name = \"Spider-Youngster\"\n        session.add(hero_1)\n\n        hero_2.name = \"Captain North America Except Canada\"\n        hero_2.age = 110\n        session.add(hero_2)\n\n        session.commit()\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n\n        print(\"Updated hero 1:\", hero_1)\n        print(\"Updated hero 2:\", hero_2)\n\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n        session.commit()\n\n        print(\"Deleted hero:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.first()\n\n        if hero is None:\n            print(\"There's no hero named Spider-Youngster\")\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n    delete_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/delete/#commit-the-session","title":"Commit the Session","text":"<p>To save the current changes in the session, commit it.</p> <p>This will save all the changes stored in the session, like the deleted hero:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n        session.commit()\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n        session.commit()\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Captain North America\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        hero_1.age = 16\n        hero_1.name = \"Spider-Youngster\"\n        session.add(hero_1)\n\n        hero_2.name = \"Captain North America Except Canada\"\n        hero_2.age = 110\n        session.add(hero_2)\n\n        session.commit()\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n\n        print(\"Updated hero 1:\", hero_1)\n        print(\"Updated hero 2:\", hero_2)\n\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n        session.commit()\n\n        print(\"Deleted hero:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.first()\n\n        if hero is None:\n            print(\"There's no hero named Spider-Youngster\")\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n    delete_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Captain North America\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        hero_1.age = 16\n        hero_1.name = \"Spider-Youngster\"\n        session.add(hero_1)\n\n        hero_2.name = \"Captain North America Except Canada\"\n        hero_2.age = 110\n        session.add(hero_2)\n\n        session.commit()\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n\n        print(\"Updated hero 1:\", hero_1)\n        print(\"Updated hero 2:\", hero_2)\n\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n        session.commit()\n\n        print(\"Deleted hero:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.first()\n\n        if hero is None:\n            print(\"There's no hero named Spider-Youngster\")\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n    delete_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>The same as we have seen before, <code>.commit()</code> will also save anything else that was added to the session. Including updates, or created heroes.</p> <p>This commit after deleting the hero will generate this output:</p> <pre><code>$ python app.py\n\n// Some boilerplate output omitted \ud83d\ude09\n\n// Previous output omitted \ud83d\ude48\n\n// The SQL to update the hero in the database\nINFO Engine DELETE FROM hero WHERE hero.id = ?\nINFO Engine [generated in 0.00020s] (2,)\nINFO Engine COMMIT\n</code></pre>"},{"location":"tutorial/delete/#print-the-deleted-object","title":"Print the Deleted Object","text":"<p>Now the hero is deleted from the database.</p> <p>If we tried to use <code>session.refresh()</code> with it, it would raise an exception, because there's no data in the database for this hero.</p> <p>Nevertheless, the object is still available with its data, but now it's not connected to the session and it no longer exists in the database.</p> <p>As the object is not connected to the session, it is not marked as \"expired\", the session doesn't even care much about this object anymore.</p> <p>Because of that, the object still contains its attributes with the data in it, so we can print it:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n        session.commit()\n\n        print(\"Deleted hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n        session.commit()\n\n        print(\"Deleted hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Captain North America\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        hero_1.age = 16\n        hero_1.name = \"Spider-Youngster\"\n        session.add(hero_1)\n\n        hero_2.name = \"Captain North America Except Canada\"\n        hero_2.age = 110\n        session.add(hero_2)\n\n        session.commit()\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n\n        print(\"Updated hero 1:\", hero_1)\n        print(\"Updated hero 2:\", hero_2)\n\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n        session.commit()\n\n        print(\"Deleted hero:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.first()\n\n        if hero is None:\n            print(\"There's no hero named Spider-Youngster\")\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n    delete_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Captain North America\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        hero_1.age = 16\n        hero_1.name = \"Spider-Youngster\"\n        session.add(hero_1)\n\n        hero_2.name = \"Captain North America Except Canada\"\n        hero_2.age = 110\n        session.add(hero_2)\n\n        session.commit()\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n\n        print(\"Updated hero 1:\", hero_1)\n        print(\"Updated hero 2:\", hero_2)\n\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n        session.commit()\n\n        print(\"Deleted hero:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.first()\n\n        if hero is None:\n            print(\"There's no hero named Spider-Youngster\")\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n    delete_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>This will output:</p> <pre><code>$ python app.py\n\n// Some boilerplate output omitted \ud83d\ude09\n\n// Previous output omitted \ud83d\ude48\n\n// Print the deleted hero\nDeleted hero: name='Spider-Youngster' secret_name='Pedro Parqueador' age=16 id=2\n</code></pre>"},{"location":"tutorial/delete/#query-the-database-for-the-same-row","title":"Query the Database for the Same Row","text":"<p>To confirm if it was deleted, now let's query the database again, with the same <code>\"Spider-Youngster\"</code> name:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n        session.commit()\n\n        print(\"Deleted hero:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.first()\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n        session.commit()\n\n        print(\"Deleted hero:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.first()\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Captain North America\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        hero_1.age = 16\n        hero_1.name = \"Spider-Youngster\"\n        session.add(hero_1)\n\n        hero_2.name = \"Captain North America Except Canada\"\n        hero_2.age = 110\n        session.add(hero_2)\n\n        session.commit()\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n\n        print(\"Updated hero 1:\", hero_1)\n        print(\"Updated hero 2:\", hero_2)\n\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n        session.commit()\n\n        print(\"Deleted hero:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.first()\n\n        if hero is None:\n            print(\"There's no hero named Spider-Youngster\")\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n    delete_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Captain North America\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        hero_1.age = 16\n        hero_1.name = \"Spider-Youngster\"\n        session.add(hero_1)\n\n        hero_2.name = \"Captain North America Except Canada\"\n        hero_2.age = 110\n        session.add(hero_2)\n\n        session.commit()\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n\n        print(\"Updated hero 1:\", hero_1)\n        print(\"Updated hero 2:\", hero_2)\n\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n        session.commit()\n\n        print(\"Deleted hero:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.first()\n\n        if hero is None:\n            print(\"There's no hero named Spider-Youngster\")\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n    delete_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Here we are using <code>results.first()</code> to get the first object found (in case it found multiple) or <code>None</code>, if it didn't find anything.</p> <p>If we used <code>results.one()</code> instead, it would raise an exception, because it expects exactly one result.</p> <p>And because we just deleted that hero, this should not find anything and we should get <code>None</code>.</p> <p>This will execute some SQL in the database and output:</p> <pre><code>$ python app.py\n\n// Some boilerplate output omitted \ud83d\ude09\n\n// Previous output omitted \ud83d\ude48\n\n// Automatically start a new transaction\nINFO Engine BEGIN (implicit)\n\n// SQL to search for the hero\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.name = ?\nINFO Engine [no key 0.00013s] ('Spider-Youngster',)\n</code></pre>"},{"location":"tutorial/delete/#confirm-the-deletion","title":"Confirm the Deletion","text":"<p>Now let's just confirm that, indeed, no hero was found in the database with that name.</p> <p>We'll do it by checking that the \"first\" item in the <code>results</code> is <code>None</code>:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n        session.commit()\n\n        print(\"Deleted hero:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.first()\n\n        if hero is None:\n            print(\"There's no hero named Spider-Youngster\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n        session.commit()\n\n        print(\"Deleted hero:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.first()\n\n        if hero is None:\n            print(\"There's no hero named Spider-Youngster\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Captain North America\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        hero_1.age = 16\n        hero_1.name = \"Spider-Youngster\"\n        session.add(hero_1)\n\n        hero_2.name = \"Captain North America Except Canada\"\n        hero_2.age = 110\n        session.add(hero_2)\n\n        session.commit()\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n\n        print(\"Updated hero 1:\", hero_1)\n        print(\"Updated hero 2:\", hero_2)\n\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n        session.commit()\n\n        print(\"Deleted hero:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.first()\n\n        if hero is None:\n            print(\"There's no hero named Spider-Youngster\")\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n    delete_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Captain North America\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        hero_1.age = 16\n        hero_1.name = \"Spider-Youngster\"\n        session.add(hero_1)\n\n        hero_2.name = \"Captain North America Except Canada\"\n        hero_2.age = 110\n        session.add(hero_2)\n\n        session.commit()\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n\n        print(\"Updated hero 1:\", hero_1)\n        print(\"Updated hero 2:\", hero_2)\n\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero: \", hero)\n\n        session.delete(hero)\n        session.commit()\n\n        print(\"Deleted hero:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\n        results = session.exec(statement)\n        hero = results.first()\n\n        if hero is None:\n            print(\"There's no hero named Spider-Youngster\")\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n    delete_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>This will output:</p> <pre><code>$ python app.py\n\n// Some boilerplate output omitted \ud83d\ude09\n\n// Previous output omitted \ud83d\ude48\n\n// Indeed, the hero was deleted \ud83d\udd25\nThere's no hero named Spider-Youngster\n\n// Cleanup after the with block\nINFO Engine ROLLBACK\n</code></pre>"},{"location":"tutorial/delete/#review-the-code","title":"Review the Code","text":"<p>Now let's review all that code:</p> Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Captain North America\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        hero_1.age = 16\n        hero_1.name = \"Spider-Youngster\"\n        session.add(hero_1)\n\n        hero_2.name = \"Captain North America Except Canada\"\n        hero_2.age = 110\n        session.add(hero_2)\n\n        session.commit()\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n\n        print(\"Updated hero 1:\", hero_1)\n        print(\"Updated hero 2:\", hero_2)\n\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")  # (1)!\n        results = session.exec(statement)  # (2)!\n        hero = results.one()  # (3)!\n        print(\"Hero: \", hero)  # (4)!\n\n        session.delete(hero)  # (5)!\n        session.commit()  # (6)!\n\n        print(\"Deleted hero:\", hero)  # (7)!\n\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")  # (8)!\n        results = session.exec(statement)  # (9)!\n        hero = results.first()  # (10)!\n\n        if hero is None:  # (11)!\n            print(\"There's no hero named Spider-Youngster\")  # (12)!\n    # (13)!\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n    delete_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <ol> <li> <p>Select the hero we will delete.</p> </li> <li> <p>Execute the query with the select statement object.</p> <p>This generates the output:</p> <pre><code>INFO Engine BEGIN (implicit)\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.name = ?\nINFO Engine [no key 0.00011s] ('Spider-Youngster',)\n</code></pre> </li> <li> <p>Get one hero object, expecting exactly one.</p> <p>Tip</p> <p>This ensures there's no more than one, and that there's exactly one, not <code>None</code>.</p> <p>This would never return <code>None</code>, instead it would raise an exception.</p> </li> <li> <p>Print the hero object.</p> <p>This generates the output:</p> <pre><code>Hero:  name='Spider-Youngster' secret_name='Pedro Parqueador' age=16 id=2\n</code></pre> </li> <li> <p>Delete the hero from the session.</p> <p>This marks the hero as deleted from the session, but it will not be removed from the database until we commit the changes.</p> </li> <li> <p>Commit the session.</p> <p>This saves the changes in the session, including deleting this row.</p> <p>It generates the output:</p> <pre><code>INFO Engine DELETE FROM hero WHERE hero.id = ?\nINFO Engine [generated in 0.00020s] (2,)\nINFO Engine COMMIT\n</code></pre> </li> <li> <p>Print the deleted hero object.</p> <p>The hero is deleted in the database. And is marked as deleted in the session.</p> <p>But we still have the object in memory with its data, so we can use it to print it.</p> <p>This generates the output:</p> <pre><code>Deleted hero: name='Spider-Youngster' secret_name='Pedro Parqueador' age=16 id=2\n</code></pre> </li> <li> <p>Select the same hero again.</p> <p>We'll do this to confirm if the hero is really deleted.</p> </li> <li> <p>Execute the select statement.</p> <p>This generates the output:</p> <pre><code>INFO Engine BEGIN (implicit)\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.name = ?\nINFO Engine [no key 0.00013s] ('Spider-Youngster',)\n</code></pre> </li> <li> <p>Get the \"first\" item from the <code>results</code>.</p> <p>If no items were found, this will return <code>None</code>, which is what we expect.</p> </li> <li> <p>Check if the first item from the results is <code>None</code>.</p> </li> <li> <p>If this first item is indeed <code>None</code>, it means that it was correctly deleted from the database.</p> <p>Now we can print a message to confirm.</p> <p>This generates the output:</p> <pre><code>There's no hero named Spider-Youngster\n</code></pre> </li> <li> <p>This is the end of the <code>with</code> block, here the session executes its closing code.</p> <p>This generates the output:</p> <pre><code>INFO Engine ROLLBACK\n</code></pre> </li> </ol> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero_1 = results.one()\n        print(\"Hero 1:\", hero_1)\n\n        statement = select(Hero).where(Hero.name == \"Captain North America\")\n        results = session.exec(statement)\n        hero_2 = results.one()\n        print(\"Hero 2:\", hero_2)\n\n        hero_1.age = 16\n        hero_1.name = \"Spider-Youngster\"\n        session.add(hero_1)\n\n        hero_2.name = \"Captain North America Except Canada\"\n        hero_2.age = 110\n        session.add(hero_2)\n\n        session.commit()\n        session.refresh(hero_1)\n        session.refresh(hero_2)\n\n        print(\"Updated hero 1:\", hero_1)\n        print(\"Updated hero 2:\", hero_2)\n\n\ndef delete_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")  # (1)!\n        results = session.exec(statement)  # (2)!\n        hero = results.one()  # (3)!\n        print(\"Hero: \", hero)  # (4)!\n\n        session.delete(hero)  # (5)!\n        session.commit()  # (6)!\n\n        print(\"Deleted hero:\", hero)  # (7)!\n\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")  # (8)!\n        results = session.exec(statement)  # (9)!\n        hero = results.first()  # (10)!\n\n        if hero is None:  # (11)!\n            print(\"There's no hero named Spider-Youngster\")  # (12)!\n    # (13)!\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n    delete_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <ol> <li> <p>Select the hero we will delete.</p> </li> <li> <p>Execute the query with the select statement object.</p> <p>This generates the output:</p> <pre><code>INFO Engine BEGIN (implicit)\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.name = ?\nINFO Engine [no key 0.00011s] ('Spider-Youngster',)\n</code></pre> </li> <li> <p>Get one hero object, expecting exactly one.</p> <p>Tip</p> <p>This ensures there's no more than one, and that there's exactly one, not <code>None</code>.</p> <p>This would never return <code>None</code>, instead it would raise an exception.</p> </li> <li> <p>Print the hero object.</p> <p>This generates the output:</p> <pre><code>Hero:  name='Spider-Youngster' secret_name='Pedro Parqueador' age=16 id=2\n</code></pre> </li> <li> <p>Delete the hero from the session.</p> <p>This marks the hero as deleted from the session, but it will not be removed from the database until we commit the changes.</p> </li> <li> <p>Commit the session.</p> <p>This saves the changes in the session, including deleting this row.</p> <p>It generates the output:</p> <pre><code>INFO Engine DELETE FROM hero WHERE hero.id = ?\nINFO Engine [generated in 0.00020s] (2,)\nINFO Engine COMMIT\n</code></pre> </li> <li> <p>Print the deleted hero object.</p> <p>The hero is deleted in the database. And is marked as deleted in the session.</p> <p>But we still have the object in memory with its data, so we can use it to print it.</p> <p>This generates the output:</p> <pre><code>Deleted hero: name='Spider-Youngster' secret_name='Pedro Parqueador' age=16 id=2\n</code></pre> </li> <li> <p>Select the same hero again.</p> <p>We'll do this to confirm if the hero is really deleted.</p> </li> <li> <p>Execute the select statement.</p> <p>This generates the output:</p> <pre><code>INFO Engine BEGIN (implicit)\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.name = ?\nINFO Engine [no key 0.00013s] ('Spider-Youngster',)\n</code></pre> </li> <li> <p>Get the \"first\" item from the <code>results</code>.</p> <p>If no items were found, this will return <code>None</code>, which is what we expect.</p> </li> <li> <p>Check if the first item from the results is <code>None</code>.</p> </li> <li> <p>If this first item is indeed <code>None</code>, it means that it was correctly deleted from the database.</p> <p>Now we can print a message to confirm.</p> <p>This generates the output:</p> <pre><code>There's no hero named Spider-Youngster\n</code></pre> </li> <li> <p>This is the end of the <code>with</code> block, here the session executes its closing code.</p> <p>This generates the output:</p> <pre><code>INFO Engine ROLLBACK\n</code></pre> </li> </ol> <p>Tip</p> <p>Check out the number bubbles to see what is done by each line of code.</p>"},{"location":"tutorial/delete/#recap","title":"Recap","text":"<p>To delete rows with SQLModel you just have to <code>.delete()</code> them with the session, and then, as always, <code>.commit()</code> the session to save the changes to the database. \ud83d\udd25</p>"},{"location":"tutorial/indexes/","title":"Indexes - Optimize Queries","text":"<p>We just saw how to get some data <code>WHERE</code> a condition is true. For example, where the hero name is \"Deadpond\".</p> <p>If we just create the tables and the data as we have been doing, when we <code>SELECT</code> some data using <code>WHERE</code>, the database would have to scan through each one of the records to find the ones that match. This is not a problem with 3 heroes as in these examples.</p> <p>But imagine that your database has thousands or millions of records, if every time you want to find the heroes with the name \"Deadpond\" it has to scan through all of the records to find all the possible matches, then that becomes problematic, as it would be too slow.</p> <p>I'll show you how to handle it with a database index.</p> <p>The change in the code is extremely small, but it's useful to understand what's happening behind the scenes, so I'll show you how it all works and what it means.</p> <p>If you already executed the previous examples and have a database with data, remove the database file before running each example, that way you won't have duplicate data and you will be able to get the same results.</p>"},{"location":"tutorial/indexes/#no-time-to-explain","title":"No Time to Explain","text":"<p>Are you already a SQL expert and don't have time for all my explanations?</p> <p>Fine, in that case, you can sneak peek the final code to create indexes here.</p> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>..but if you are not an expert, continue reading, this will probably be useful. \ud83e\udd13</p>"},{"location":"tutorial/indexes/#what-is-an-index","title":"What is an Index","text":"<p>In general, an index is just something we can have to help us find things faster. It normally works by having things in order. Let's think about some real-life examples before even thinking about databases and code.</p>"},{"location":"tutorial/indexes/#an-index-and-a-dictionary","title":"An Index and a Dictionary","text":"<p>Imagine a dictionary, a book with definitions of words. \ud83d\udcd4 ...not a Python <code>dict</code>. \ud83d\ude05</p> <p>Let's say that you want to find a word, for example the word \"database\". You take the dictionary, and open it somewhere, for example in the middle. Maybe you see some definitions of words that start with <code>m</code>, like <code>manual</code>, so you conclude that you are in the letter <code>m</code> in the dictionary.</p> <p></p> <p>You know that in the alphabet, the letter <code>d</code> for <code>database</code> comes before the letter <code>m</code> for <code>manual</code>.</p> <p></p> <p>So, you know you have to search in the dictionary before the point you currently are. You still don't know where the word <code>database</code> is, because you don't know exactly where the letter <code>d</code> is in the dictionary, but you know that it is not after that point, you can now discard the right half of the dictionary in your search.</p> <p></p> <p>Next, you open the dictionary again, but only taking into account the half of the dictionary that can contain the word you want, the left part of the dictionary. You open it in the middle of that left part and now you arrive maybe at the letter <code>f</code>.</p> <p></p> <p>You know that <code>d</code> from <code>database</code> comes before <code>f</code>. So it has to be before that. But now you know that <code>database</code> is not after that point, and you can discard the dictionary from that point onward.</p> <p></p> <p>Now you have a small section of dictionary to search (only a quarter of dictionary can have your word). You take that quarter of the pages at the start of the dictionary that can contain your word, and open it in the middle of that section. Maybe you arrive at the letter <code>c</code>.</p> <p></p> <p>You know the word <code>database</code> has to be after that and not before that point, so you can discard the left part of that block of pages.</p> <p></p> <p>You repeat this process a few more times, and you finally arrive at the letter <code>d</code>, you continue with the same process in that section for the letter <code>d</code> and you finally find the word <code>database</code>. \ud83c\udf89</p> <p></p> <p>You had to open the dictionary a few times, maybe 5 or 10. That's actually very little work compared to what it could have been.</p> <p>Technical Details</p> <p>Do you like fancy words? Cool! Programmers tend to like fancy words. \ud83d\ude05</p> <p>That algorithm I showed you above is called Binary Search.</p> <p>It's called that because you search something by splitting the dictionary (or any ordered list of things) in two (\"binary\" means \"two\") parts. And you do that process multiple times until you find what you want.</p>"},{"location":"tutorial/indexes/#an-index-and-a-novel","title":"An Index and a Novel","text":"<p>Let's now imagine you are reading a novel book. And someone told you that at some point, they mention a database, and you want to find that chapter.</p> <p>How do you find the word \"database\" there? You might have to read the entire book to find where the word \"database\" is located in the book. So, instead of opening the book 5 or 10 times, you would have to open each of the 500 pages and read them one by one until you find the word. You might enjoy the book, though. \ud83d\ude05</p> <p>But if we are only interested in quickly finding information (as when working with SQL databases), then reading each of the 500 pages is too inefficient when there could be an option to open the book in 5 or 10 places and find what you're looking for.</p>"},{"location":"tutorial/indexes/#a-technical-book-with-an-index","title":"A Technical Book with an Index","text":"<p>Now let's imagine you are reading a technical book. For example, with several topics about programming. And there's a couple of sections where it talks about a database.</p> <p>This book might have a book index: a section in the book that has some names of topics covered and the page numbers in the book where you can read about them. And the topic names are sorted in alphabetic order, pretty much like a dictionary (a book with words, as in the previous example).</p> <p>In this case, you can open that book in the end (or in the beginning) to find the book index section, it would have only a few pages. And then, you can do the same process as with the dictionary example above.</p> <p>Open the index, and after 5 or 10 steps, quickly find the topic \"database\" with the page numbers where that is covered, for example \"page 253 in Chapter 5\". Now you used the dictionary technique to find the topic, and that topic gave you a page number.</p> <p>Now you know that you need to find \"page 253\". But by looking at the closed book you still don't know where that page is, so you have to find that page. To find it, you can do the same process again, but this time, instead of searching for a topic in the index, you are searching for a page number in the entire book. And after 5 or 10 more steps, you find the page 253 in Chapter 5.</p> <p></p> <p>After this, even though this book is not a dictionary and has some particular content, you were able to find the section in the book that talks about a \"database\" in a few steps (say 10 or 20, instead of reading all the 500 pages).</p> <p>The main point is that the index is sorted, so we can use the same process we used for the dictionary to find the topic. And then that gives us a page number, and the page numbers are also sorted! \ud83d\ude05</p> <p>When we have a list of sorted things we can apply the same technique, and that's the whole trick here, we use the same technique first for the topics in the index and then for the page numbers to find the actual chapter.</p> <p>Such efficiency! \ud83d\ude0e</p>"},{"location":"tutorial/indexes/#what-are-database-indexes","title":"What are Database Indexes","text":"<p>Database indexes are very similar to book indexes.</p> <p>Database indexes store some info, some keys, in a way that makes it easy and fast to find (for example sorted), and then for each key they point to some data somewhere else in the database.</p> <p>Let's see a more clear example. Let's say you have this table in a database:</p> idnamesecret_nameage 1DeadpondDive Wilsonnull 2Spider-BoyPedro Parqueadornull 3Rusty-ManTommy Sharp48 <p>And let's imagine you have many more rows, many more heroes. Probably thousands.</p> <p>If you tell the SQL database to get you a hero by a specific name, for example <code>Spider-Boy</code> (by using the <code>name</code> in the <code>WHERE</code> part of the SQL query), the database will have to scan all the heroes, checking one by one to find all the ones with a name of <code>Spider-Boy</code>.</p> <p>In this case, there's only one, but there's nothing limiting the database from having more records with the same name. And because of that, the database would continue searching and checking each one of the records, which would be very slow.</p> <p>But now let's say that the database has an index for the column <code>name</code>. The index could look something like this, we could imagine that the index is like an additional special table that the database manages automatically:</p> nameid Deadpond1 Rusty-Man3 Spider-Boy2 <p>It would have each <code>name</code> field from the <code>hero</code> table in order. It would not be sorted by <code>id</code>, but by <code>name</code> (in alphabetical order, as the <code>name</code> is a string). So, first it would have <code>Deadpond</code>, then <code>Rusty-Man</code>, and last <code>Spider-Boy</code>. It would also include the <code>id</code> of each hero. Remember that this could have thousands of heroes.</p> <p>Then the database would be able to use more or less the same ideas in the examples above with the dictionary and the book index.</p> <p>It could start somewhere (for example, in the middle of the index). It could arrive at some hero there in the middle, like <code>Rusty-Man</code>. And because the index has the <code>name</code> fields in order, the database would know that it can discard all the previous index rows and only search in the following index rows.</p> nameid Deadpond1 Rusty-Man3 Spider-Boy2 <p>And that way, as with the example with the dictionary above, instead of reading thousands of heroes, the database would be able to do a few steps, say 5 or 10 steps, and arrive at the row of the index that has <code>Spider-Boy</code>, even if the table (and index) has thousands of rows:</p> nameid Deadpond1 Rusty-Man3 \u2728 Spider-Boy \u27282 <p>Then by looking at this index row, it would know that the <code>id</code> for <code>Spider-Boy</code> in the <code>hero</code> table is <code>2</code>.</p> <p>So then it could search that <code>id</code> in the <code>hero</code> table using more or less the same technique.</p> <p>That way, in the end, instead of reading thousands of records, the database only had to do a few steps to find the hero we wanted.</p>"},{"location":"tutorial/indexes/#updating-the-index","title":"Updating the Index","text":"<p>As you can imagine, for all this to work, the index would need to be up to date with the data in the database.</p> <p>If you had to update it manually in code, it would be very cumbersome and error-prone, as it would be easy to end up in a state where the index is not up to date and points to incorrect data. \ud83d\ude31</p> <p>Here's the good news: when you create an index in a SQL Database, the database takes care of updating it automatically whenever it's necessary. \ud83d\ude0e\ud83c\udf89</p> <p>If you add new records to the <code>hero</code> table, the database will automatically update the index. It will do the same process of finding the right place to put the new index data (those 5 or 10 steps described above), and then it will save the new index information there. The same would happen when you update or delete data.</p> <p>Defining and creating an index is very easy with SQL databases. And then using it is even easier... it's transparent. The database will figure out which index to use automatically, the SQL queries don't even change.</p> <p>So, in SQL databases indexes are great! And are super easy to use. Why not just have indexes for everything? .....Because indexes also have a \"cost\" in computation and storage (disk space).</p>"},{"location":"tutorial/indexes/#index-cost","title":"Index Cost","text":"<p>There's a cost associated with indexes. \ud83d\udcb0</p> <p>When you don't have an index and add a new row to the table <code>hero</code>, the database has to perform 1 operation to add the new hero row at the end of the table.</p> <p>But if you have an index for the hero names, now the database has to perform the same 1 operation to add that row plus some extra 5 or 10 operations in the index, to find the right spot for the name, to then add that index record there.</p> <p>And if you have an index for the <code>name</code>, one for the <code>age</code>, and one for the <code>secret_name</code>, now the database has to perform the same 1 operation to add that row plus some extra 5 or 10 operations in the index times 3, for each of the indexes. This means that now adding one row takes something like 31 operations.</p> <p>This also means that you are exchanging the time it takes to read data for the time it takes to write data plus some extra space in the database.</p> <p>If you have queries that get data out of the database comparing each one of those fields (for example using <code>WHERE</code>), then it makes total sense to have indexes for each one of them. Because 31 operations while creating or updating data (plus the space of the index) is much, much better than the possible 500 or 1000 operations to read all the rows to be able to compare them using each field.</p> <p>But if you never have queries that find records by the <code>secret_name</code> (you never use <code>secret_name</code> in the <code>WHERE</code> part) it probably doesn't make sense to have an index for the <code>secret_name</code> field/column, as that will increase the computational and space cost of writing and updating the database.</p>"},{"location":"tutorial/indexes/#create-an-index-with-sql","title":"Create an Index with SQL","text":"<p>Phew, that was a lot of theory and explanations. \ud83d\ude05</p> <p>The most important thing about indexes is understanding them, how, and when to use them.</p> <p>Let's now see the SQL syntax to create an index. It is very simple:</p> <pre><code>CREATE INDEX ix_hero_name\nON hero (name)\n</code></pre> <p>This means, more or less:</p> <p>Hey SQL database \ud83d\udc4b, please <code>CREATE</code> an <code>INDEX</code> for me.</p> <p>I want the name of the index to be <code>ix_hero_name</code>.</p> <p>This index should be <code>ON</code> the table <code>hero</code>, it refers to that table.</p> <p>The column I want you to use for it is <code>name</code>.</p>"},{"location":"tutorial/indexes/#declare-indexes-with-sqlmodel","title":"Declare Indexes with SQLModel","text":"<p>And now let's see how to define indexes in SQLModel.</p> <p>The change in code is underwhelming, it's very simple. \ud83d\ude06</p> <p>Here's the <code>Hero</code> model we had before:</p> Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Let's now update it to tell SQLModel to create an index for the <code>name</code> field when creating the table:</p> Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>We use the same <code>Field()</code> again as we did before, and set <code>index=True</code>. That's it! \ud83d\ude80</p> <p>Notice that we didn't set an argument of <code>default=None</code> or anything similar. This means that SQLModel (thanks to Pydantic) will keep it as a required field.</p> <p>Info</p> <p>SQLModel (actually SQLAlchemy) will automatically generate the index name for you.</p> <p>In this case the generated name would be <code>ix_hero_name</code>.</p>"},{"location":"tutorial/indexes/#query-data","title":"Query Data","text":"<p>Now, to query the data using the field <code>name</code> and the new index we don't have to do anything special or different in the code, it's just the same code.</p> <p>The SQL database will figure it out automatically. \u2728</p> <p>This is great because it means that indexes are very simple to use. But it might also feel counterintuitive at first, as you are not doing anything explicitly in the code to make it obvious that the index is useful, it all happens in the database behind the scenes.</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>This is exactly the same code as we had before, but now the database will use the index underneath.</p>"},{"location":"tutorial/indexes/#run-the-program","title":"Run the Program","text":"<p>If you run the program now, you will see an output like this:</p> <pre><code>$ python app.py\n\n// Some boilerplate output omitted \ud83d\ude09\n\n// Create the table\nCREATE TABLE hero (\n        id INTEGER,\n        name VARCHAR NOT NULL,\n        secret_name VARCHAR NOT NULL,\n        age INTEGER,\n        PRIMARY KEY (id)\n)\n\n// Create the index \ud83e\udd13\ud83c\udf89\nCREATE INDEX ix_hero_name ON hero (name)\n\n// The SELECT with WHERE looks the same\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.name = ?\nINFO Engine [no key 0.00014s] ('Deadpond',)\n\n// The resulting hero\nsecret_name='Dive Wilson' age=None id=1 name='Deadpond'\n</code></pre>"},{"location":"tutorial/indexes/#more-indexes","title":"More Indexes","text":"<p>We are going to query the <code>hero</code> table doing comparisons on the <code>age</code> field too, so we should define an index for that one as well:</p> Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>In this case, we want the default value of <code>age</code> to continue being <code>None</code>, so we set <code>default=None</code> when using <code>Field()</code>.</p> <p>Now when we use SQLModel to create the database and tables, it will also create the indexes for these two columns in the <code>hero</code> table.</p> <p>So, when we query the database for the <code>hero</code> table and use those two columns to define what data we get, the database will be able to use those indexes to improve the reading performance. \ud83d\ude80</p>"},{"location":"tutorial/indexes/#primary-key-and-indexes","title":"Primary Key and Indexes","text":"<p>You probably noticed that we didn't set <code>index=True</code> for the <code>id</code> field.</p> <p>Because the <code>id</code> is already the primary key, the database will automatically create an internal index for it.</p> <p>The database always creates an internal index for primary keys automatically, as those are the primary way to organize, store, and retrieve data. \ud83e\udd13</p> <p>But if you want to be frequently querying the SQL database for any other field (e.g. using any other field in the <code>WHERE</code> section), you will probably want to have at least an index for that.</p>"},{"location":"tutorial/indexes/#recap","title":"Recap","text":"<p>Indexes are very important to improve reading performance and speed when querying the database. \ud83c\udfce</p> <p>Creating and using them is very simple and easy. The most important part is to understand how they work, when to create them, and for which columns.</p>"},{"location":"tutorial/insert/","title":"Create Rows - Use the Session - INSERT","text":"<p>Now that we have a database and a table, we can start adding data.</p> <p>Here's a reminder of how the table would look like, this is the data we want to add:</p> idnamesecret_nameage 1DeadpondDive Wilsonnull 2Spider-BoyPedro Parqueadornull 3Rusty-ManTommy Sharp48"},{"location":"tutorial/insert/#create-table-and-database","title":"Create Table and Database","text":"<p>We will continue from where we left of in the last chapter.</p> <p>This is the code we had to create the database and table, nothing new here:</p> Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, SQLModel, create_engine  # (2)!\n\n\nclass Hero(SQLModel, table=True):  # (3)!\n    id: int | None = Field(default=None, primary_key=True)  # (4)!\n    name: str  # (5)!\n    secret_name: str  # (6)!\n    age: int | None = None  # (7)!\n\n\nsqlite_file_name = \"database.db\"  # (8)!\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"  # (9)!\n\nengine = create_engine(sqlite_url, echo=True)  # (10)!\n\n\ndef create_db_and_tables():  # (11)!\n    SQLModel.metadata.create_all(engine)  # (12)!\n\n# More code here later \ud83d\udc48\n\nif __name__ == \"__main__\":  # (13)!\n    create_db_and_tables()  # (14)!\n</code></pre> <ol> <li>Import <code>Optional</code> from <code>typing</code> to declare fields that could be <code>None</code>.</li> <li>Import the things we will need from <code>sqlmodel</code>: <code>Field</code>, <code>SQLModel</code>, <code>create_engine</code>.</li> <li> <p>Create the <code>Hero</code> model class, representing the <code>hero</code> table in the database.</p> <p>And also mark this class as a table model with <code>table=True</code>.</p> </li> <li> <p>Create the <code>id</code> field:</p> <p>It could be <code>None</code> until the database assigns a value to it, so we annotate it with <code>Optional</code>.</p> <p>It is a primary key, so we use <code>Field()</code> and the argument <code>primary_key=True</code>.</p> </li> <li> <p>Create the <code>name</code> field.</p> <p>It is required, so there's no default value, and it's not <code>Optional</code>.</p> </li> <li> <p>Create the <code>secret_name</code> field.</p> <p>Also required.</p> </li> <li> <p>Create the <code>age</code> field.</p> <p>It is not required, the default value is <code>None</code>.</p> <p>In the database, the default value will be <code>NULL</code>, the SQL equivalent of <code>None</code>.</p> <p>As this field could be <code>None</code> (and <code>NULL</code> in the database), we annotate it with <code>Optional</code>.</p> </li> <li> <p>Write the name of the database file.</p> </li> <li>Use the name of the database file to create the database URL.</li> <li> <p>Create the engine using the URL.</p> <p>This doesn't create the database yet, no file or table is created at this point, only the engine object that will handle the connections with this specific database, and with specific support for SQLite (based on the URL).</p> </li> <li> <p>Put the code that creates side effects in a function.</p> <p>In this case, only one line that creates the database file with the table.</p> </li> <li> <p>Create all the tables that were automatically registered in <code>SQLModel.metadata</code>.</p> </li> <li> <p>Add a main block, or \"Top-level script environment\".</p> <p>And put some logic to be executed when this is called directly with Python, as in:</p> <pre><code>$ python app.py\n\n// Execute all the stuff and show the output\n</code></pre> <p>...but that is not executed when importing something from this module, like:</p> <pre><code>from app import Hero\n</code></pre> </li> <li> <p>In this main block, call the function that creates the database file and the table.</p> <p>This way when we call it with:</p> <pre><code>$ python app.py\n\n// Doing stuff \u2728\n</code></pre> <p>...it will create the database file and the table.</p> </li> </ol> <pre><code>from typing import Optional  # (1)!\n\nfrom sqlmodel import Field, SQLModel, create_engine  # (2)!\n\n\nclass Hero(SQLModel, table=True):  # (3)!\n    id: Optional[int] = Field(default=None, primary_key=True)  # (4)!\n    name: str  # (5)!\n    secret_name: str  # (6)!\n    age: Optional[int] = None  # (7)!\n\n\nsqlite_file_name = \"database.db\"  # (8)!\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"  # (9)!\n\nengine = create_engine(sqlite_url, echo=True)  # (10)!\n\n\ndef create_db_and_tables():  # (11)!\n    SQLModel.metadata.create_all(engine)  # (12)!\n\n# More code here later \ud83d\udc48\n\nif __name__ == \"__main__\":  # (13)!\n    create_db_and_tables()  # (14)!\n</code></pre> <ol> <li>Import <code>Optional</code> from <code>typing</code> to declare fields that could be <code>None</code>.</li> <li>Import the things we will need from <code>sqlmodel</code>: <code>Field</code>, <code>SQLModel</code>, <code>create_engine</code>.</li> <li> <p>Create the <code>Hero</code> model class, representing the <code>hero</code> table in the database.</p> <p>And also mark this class as a table model with <code>table=True</code>.</p> </li> <li> <p>Create the <code>id</code> field:</p> <p>It could be <code>None</code> until the database assigns a value to it, so we annotate it with <code>Optional</code>.</p> <p>It is a primary key, so we use <code>Field()</code> and the argument <code>primary_key=True</code>.</p> </li> <li> <p>Create the <code>name</code> field.</p> <p>It is required, so there's no default value, and it's not <code>Optional</code>.</p> </li> <li> <p>Create the <code>secret_name</code> field.</p> <p>Also required.</p> </li> <li> <p>Create the <code>age</code> field.</p> <p>It is not required, the default value is <code>None</code>.</p> <p>In the database, the default value will be <code>NULL</code>, the SQL equivalent of <code>None</code>.</p> <p>As this field could be <code>None</code> (and <code>NULL</code> in the database), we annotate it with <code>Optional</code>.</p> </li> <li> <p>Write the name of the database file.</p> </li> <li>Use the name of the database file to create the database URL.</li> <li> <p>Create the engine using the URL.</p> <p>This doesn't create the database yet, no file or table is created at this point, only the engine object that will handle the connections with this specific database, and with specific support for SQLite (based on the URL).</p> </li> <li> <p>Put the code that creates side effects in a function.</p> <p>In this case, only one line that creates the database file with the table.</p> </li> <li> <p>Create all the tables that were automatically registered in <code>SQLModel.metadata</code>.</p> </li> <li> <p>Add a main block, or \"Top-level script environment\".</p> <p>And put some logic to be executed when this is called directly with Python, as in:</p> <pre><code>$ python app.py\n\n// Execute all the stuff and show the output\n</code></pre> <p>...but that is not executed when importing something from this module, like:</p> <pre><code>from app import Hero\n</code></pre> </li> <li> <p>In this main block, call the function that creates the database file and the table.</p> <p>This way when we call it with:</p> <pre><code>$ python app.py\n\n// Doing stuff \u2728\n</code></pre> <p>...it will create the database file and the table.</p> </li> </ol> <p>Now that we can create the database and the table, we will continue from this point and add more code on the same file to create the data.</p>"},{"location":"tutorial/insert/#create-data-with-sql","title":"Create Data with SQL","text":"<p>Before working with Python code, let's see how we can create data with SQL.</p> <p>Let's say we want to insert the record/row for <code>Deadpond</code> into our database.</p> <p>We can do this with the following SQL code:</p> <pre><code>INSERT INTO \"hero\" (\"name\", \"secret_name\")\nVALUES (\"Deadpond\", \"Dive Wilson\");\n</code></pre> <p>It means, more or less:</p> <p>Hey SQL database \ud83d\udc4b, please <code>INSERT</code> something (create a record/row) <code>INTO</code> the table <code>\"hero\"</code>.</p> <p>I want you to insert a row with some values in these specific columns:</p> <ul> <li><code>\"name\"</code></li> <li><code>\"secret_name\"</code></li> </ul> <p>And the values I want you to put in these columns are:</p> <ul> <li><code>\"Deadpond\"</code></li> <li><code>\"Dive Wilson\"</code></li> </ul>"},{"location":"tutorial/insert/#try-it-in-db-explorer-for-sqlite","title":"Try it in DB Explorer for SQLite","text":"<p>You can try that SQL statement in DB Explorer for SQLite.</p> <p>Make sure to open the same database we already created by clicking Open Database and selecting the same <code>database.db</code> file.</p> <p>Tip</p> <p>If you don't have that <code>database.db</code> file with the table <code>hero</code>, you can re-create it by running the Python program at the top. \ud83d\udc46</p> <p>Then go to the Execute SQL tab and copy the SQL from above.</p> <p>It would look like this:</p> <p></p> <p>Click the \"Execute all\" \u25b6 button.</p> <p>Then you can go to the Browse Data tab, and you will see your newly created record/row:</p> <p></p>"},{"location":"tutorial/insert/#data-in-a-database-and-data-in-code","title":"Data in a Database and Data in Code","text":"<p>When working with a database (SQL or any other type) in a programming language, we will always have some data in memory, in objects and variables we create in our code, and there will be some data in the database.</p> <p>We are constantly getting some of the data from the database and putting it in memory, in variables.</p> <p>The same way, we are constantly creating variables and objects with data in our code, that we then want to save in the database, so we send it somehow.</p> <p>In some cases, we can even create some data in memory and then change it and update it before saving it in the database.</p> <p>We might even decide with some logic in the code that we no longer want to save the data in the database, and then just remove it. \ud83d\udd25 And we only handled that data in memory, without sending it back and forth to the database.</p> <p>SQLModel does all it can (actually via SQLAlchemy) to make this interaction as simple, intuitive, and familiar or \"close to programming\" as possible. \u2728</p> <p>But that division of the two places where some data might be at each moment in time (in memory or in the database) is always there. And it's important for you to have it in mind. \ud83e\udd13</p>"},{"location":"tutorial/insert/#create-data-with-python-and-sqlmodel","title":"Create Data with Python and SQLModel","text":"<p>Now let's create that same row in Python.</p> <p>First, remove that file <code>database.db</code> so we can start from a clean slate.</p> <p>Because we have Python code executing with data in memory, and the database is an independent system (an external SQLite file, or an external database server), we need to perform two steps:</p> <ul> <li>create the data in Python, in memory (in a variable)</li> <li>save/send the data to the database</li> </ul>"},{"location":"tutorial/insert/#create-a-model-instance","title":"Create a Model Instance","text":"<p>Let's start with the first step, create the data in memory.</p> <p>We already created a class <code>Hero</code> that represents the <code>hero</code> table in the database.</p> <p>Each instance we create will represent the data in a row in the database.</p> <p>So, the first step is to simply create an instance of <code>Hero</code>.</p> <p>We'll create 3 right away, for the 3 heroes:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n# More code here later \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n# More code here later \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Tip</p> <p>The code above in this file (the omitted code) is just the same code that you see at the top of this chapter.</p> <p>The same code we used before to create the <code>Hero</code> model.</p> <p>We are putting that in a function <code>create_heroes()</code>, to call it later once we finish it.</p> <p>If you are trying the code interactively, you could also write that directly.</p>"},{"location":"tutorial/insert/#create-a-session","title":"Create a Session","text":"<p>Up to now, we have only used the engine to interact with the database.</p> <p>The engine is that single object that we share with all the code, and that is in charge of communicating with the database, handling the connections (when using a server database like PostgreSQL or MySQL), etc.</p> <p>But when working with SQLModel you will mostly use another tool that sits on top, the Session.</p> <p>In contrast to the engine that is one for the whole application, we create a new session for each group of operations with the database that belong together.</p> <p>In fact, the session needs and uses an engine.</p> <p>For example, if we have a web application, we would normally have a single session per request.</p> <p>We would re-use the same engine in all the code, everywhere in the application (shared by all the requests). But for each request, we would create and use a new session. And once the request is done, we would close the session.</p> <p>The first step is to import the <code>Session</code> class:</p> Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    session = Session(engine)\n\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n\n    session.commit()\n\n    session.close()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    session = Session(engine)\n\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n\n    session.commit()\n\n    session.close()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Then we can create a new session:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    session = Session(engine)\n\n# More code here later \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    session = Session(engine)\n\n# More code here later \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    session = Session(engine)\n\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n\n    session.commit()\n\n    session.close()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    session = Session(engine)\n\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n\n    session.commit()\n\n    session.close()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>The new <code>Session</code> takes an <code>engine</code> as a parameter. And it will use the engine underneath.</p> <p>Tip</p> <p>We will see a better way to create a session using a <code>with</code> block later.</p>"},{"location":"tutorial/insert/#add-model-instances-to-the-session","title":"Add Model Instances to the Session","text":"<p>Now that we have some hero model instances (some objects in memory) and a session, the next step is to add them to the session:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    session = Session(engine)\n\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n\n# More code here later \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    session = Session(engine)\n\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n\n# More code here later \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    session = Session(engine)\n\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n\n    session.commit()\n\n    session.close()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    session = Session(engine)\n\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n\n    session.commit()\n\n    session.close()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>By this point, our heroes are not stored in the database yet.</p> <p>And this is one of the cases where having a session independent of an engine makes sense.</p> <p>The session is holding in memory all the objects that should be saved in the database later.</p> <p>And once we are ready, we can commit those changes, and then the session will use the engine underneath to save all the data by sending the appropriate SQL to the database, and that way it will create all the rows. All in a single batch.</p> <p>This makes the interactions with the database more efficient (plus some extra benefits).</p> <p>Technical Details</p> <p>The session will create a new transaction and execute all the SQL code in that transaction.</p> <p>This ensures that the data is saved in a single batch, and that it will all succeed or all fail, but it won't leave the database in a broken state.</p>"},{"location":"tutorial/insert/#commit-the-session-changes","title":"Commit the Session Changes","text":"<p>Now that we have the heroes in the session and that we are ready to save all that to the database, we can commit the changes:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    session = Session(engine)\n\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n\n    session.commit()\n\n# More code here later \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    session = Session(engine)\n\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n\n    session.commit()\n\n# More code here later \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    session = Session(engine)\n\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n\n    session.commit()\n\n    session.close()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    session = Session(engine)\n\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n\n    session.commit()\n\n    session.close()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Once this line is executed, the session will use the engine to save all the data in the database by sending the corresponding SQL.</p>"},{"location":"tutorial/insert/#create-heroes-as-a-script","title":"Create Heroes as a Script","text":"<p>The function to create the heroes is now ready.</p> <p>Now we just need to make sure to call it when we run this program with Python directly.</p> <p>We already had a main block like:</p> <pre><code>if __name__ == \"__main__\":\n    create_db_and_tables()\n</code></pre> <p>We could add the new function there, as:</p> <pre><code>if __name__ == \"__main__\":\n    create_db_and_tables()\n    create_heroes()\n</code></pre> <p>But to keep things a bit more organized, let's instead create a new function <code>main()</code> that will contain all the code that should be executed when called as an independent script, and we can put there the previous function <code>create_db_and_tables()</code>, and add the new function <code>create_heroes()</code>:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n# More code here later \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n# More code here later \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>And then we can call that single <code>main()</code> function from that main block:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>By having everything that should happen when called as a script in a single function, we can easily add more code later on.</p> <p>And some other code could also import and use this same <code>main()</code> function if it was necessary.</p>"},{"location":"tutorial/insert/#run-the-script","title":"Run the Script","text":"<p>Now we can run our program as a script from the console.</p> <p>Because we created the engine with <code>echo=True</code>, it will print out all the SQL code that it is executing:</p> <pre><code>$ python app.py\n// Some boilerplate, checking that the hero table already exists\nINFO Engine BEGIN (implicit)\nINFO Engine PRAGMA main.table_info(\"hero\")\nINFO Engine [raw sql] ()\nINFO Engine COMMIT\n// BEGIN a transaction automatically \u2728\nINFO Engine BEGIN (implicit)\n// Our INSERT statement, it uses VALUES (?, ?, ?) as parameters\nINFO Engine INSERT INTO hero (name, secret_name, age) VALUES (?, ?, ?)\n// ...and these are the parameter values \ud83d\ude80\nINFO Engine [generated in 0.00013s] ('Deadpond', 'Dive Wilson', None)\n// Again, for Spider-Boy\nINFO Engine INSERT INTO hero (name, secret_name, age) VALUES (?, ?, ?)\nINFO Engine [cached since 0.000755s ago] ('Spider-Boy', 'Pedro Parqueador', None)\n// And now for Rusty-Man\nINFO Engine INSERT INTO hero (name, secret_name, age) VALUES (?, ?, ?)\nINFO Engine [cached since 0.001014s ago] ('Rusty-Man', 'Tommy Sharp', 48)\n// All good? Yes, commit this transaction! \ud83c\udf89\nINFO Engine COMMIT\n</code></pre> <p>If you have ever used Git, this works very similarly.</p> <p>We use <code>session.add()</code> to add new objects (model instances) to the session (similar to <code>git add</code>).</p> <p>And that ends up in a group of data ready to be saved, but not saved yet.</p> <p>We can make more modifications, add more objects, etc.</p> <p>And once we are ready, we can commit all the changes in a single step (similar to <code>git commit</code>).</p>"},{"location":"tutorial/insert/#close-the-session","title":"Close the Session","text":"<p>The session holds some resources, like connections from the engine.</p> <p>So once we are done with the session, we should close it to make it release those resources and finish its cleanup:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    session = Session(engine)\n\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n\n    session.commit()\n\n    session.close()\n\n# More code here later \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    session = Session(engine)\n\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n\n    session.commit()\n\n    session.close()\n\n# More code here later \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    session = Session(engine)\n\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n\n    session.commit()\n\n    session.close()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    session = Session(engine)\n\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n\n    session.commit()\n\n    session.close()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>But what happens if we forget to close the session?</p> <p>Or if there's an exception in the code and it never reaches the <code>session.close()</code>?</p> <p>For that, there's a better way to create and close the session, using a <code>with</code> block. \ud83d\udc47</p>"},{"location":"tutorial/insert/#a-session-in-a-with-block","title":"A Session in a <code>with</code> Block","text":"<p>It's good to know how the <code>Session</code> works and how to create and close it manually. It might be useful if, for example, you want to explore the code in an interactive session (for example with Jupyter).</p> <p>But there's a better way to handle the session, using a <code>with</code> block:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>This is the same as creating the session manually and then manually closing it. But here, using a <code>with</code> block, it will be automatically created when starting the <code>with</code> block and assigned to the variable <code>session</code>, and it will be automatically closed after the <code>with</code> block is finished.</p> <p>And it will work even if there's an exception in the code. \ud83d\ude0e</p>"},{"location":"tutorial/insert/#review-all-the-code","title":"Review All the Code","text":"<p>Let's give this whole file a final look. \ud83d\udd0d</p> <p>You already know all the first part creating the <code>Hero</code> model class, the engine, and creating the database and table.</p> <p>Let's focus on the new code:</p> Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():  # (1)!\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")  # (2)!\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:  # (3)!\n        session.add(hero_1)  # (4)!\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()  # (5)!\n    # (6)!\n\n\ndef main():  # (7)!\n    create_db_and_tables()  # (8)!\n    create_heroes()  # (9)!\n\n\nif __name__ == \"__main__\":  # (10)!\n    main()  # (11)!\n</code></pre> <ol> <li> <p>We use a function <code>create_heroes()</code> to put this logic together.</p> </li> <li> <p>Create each of the objects/instances of the <code>Hero</code> model.</p> <p>Each of them represents the data for one row.</p> </li> <li> <p>Use a <code>with</code> block to create a <code>Session</code> using the <code>engine</code>.</p> <p>The new sesion will be assigned to the variable <code>session</code>.</p> <p>And it will be automatically closed when the <code>with</code> block is finished.</p> </li> <li> <p>Add each of the objects/instances to the session.</p> <p>Each of these objects represents a row in the database.</p> <p>They are all waiting there in the session to be saved.</p> </li> <li> <p>Commit the changes to the database.</p> <p>This will actually send the data to the database.</p> <p>It will start a transaction automatically and save all the data in a single batch.</p> </li> <li> <p>By this point, after the <code>with</code> block is finished, the session is automatically closed.</p> </li> <li> <p>We have a <code>main()</code> function with all the code that should be executed when the program is called as a script from the console.</p> <p>That way we can add more code later to this function.</p> <p>We then put this function <code>main()</code> in the main block below.</p> <p>And as it is a single function, other Python files could import it and call it directly.</p> </li> <li> <p>In this <code>main()</code> function, we are also creating the database and the tables.</p> <p>In the previous version, this function was called directly in the main block.</p> <p>But now it is just called in the <code>main()</code> function.</p> </li> <li> <p>And now we are also creating the heroes in this <code>main()</code> function.</p> </li> <li> <p>We still have a main block to execute some code when the program is run as a script from the command line, like:</p> <pre><code>$ python app.py\n\n// Do whatever is in the main block \ud83d\ude80\n</code></pre> </li> <li> <p>There's a single <code>main()</code> function now that contains all the code that should be executed when running the program from the console.</p> <p>So this is all we need to have in the main block. Just call the <code>main()</code> function.</p> </li> </ol> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():  # (1)!\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")  # (2)!\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:  # (3)!\n        session.add(hero_1)  # (4)!\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()  # (5)!\n    # (6)!\n\n\ndef main():  # (7)!\n    create_db_and_tables()  # (8)!\n    create_heroes()  # (9)!\n\n\nif __name__ == \"__main__\":  # (10)!\n    main()  # (11)!\n</code></pre> <ol> <li> <p>We use a function <code>create_heroes()</code> to put this logic together.</p> </li> <li> <p>Create each of the objects/instances of the <code>Hero</code> model.</p> <p>Each of them represents the data for one row.</p> </li> <li> <p>Use a <code>with</code> block to create a <code>Session</code> using the <code>engine</code>.</p> <p>The new sesion will be assigned to the variable <code>session</code>.</p> <p>And it will be automatically closed when the <code>with</code> block is finished.</p> </li> <li> <p>Add each of the objects/instances to the session.</p> <p>Each of these objects represents a row in the database.</p> <p>They are all waiting there in the session to be saved.</p> </li> <li> <p>Commit the changes to the database.</p> <p>This will actually send the data to the database.</p> <p>It will start a transaction automatically and save all the data in a single batch.</p> </li> <li> <p>By this point, after the <code>with</code> block is finished, the session is automatically closed.</p> </li> <li> <p>We have a <code>main()</code> function with all the code that should be executed when the program is called as a script from the console.</p> <p>That way we can add more code later to this function.</p> <p>We then put this function <code>main()</code> in the main block below.</p> <p>And as it is a single function, other Python files could import it and call it directly.</p> </li> <li> <p>In this <code>main()</code> function, we are also creating the database and the tables.</p> <p>In the previous version, this function was called directly in the main block.</p> <p>But now it is just called in the <code>main()</code> function.</p> </li> <li> <p>And now we are also creating the heroes in this <code>main()</code> function.</p> </li> <li> <p>We still have a main block to execute some code when the program is run as a script from the command line, like:</p> <pre><code>$ python app.py\n\n// Do whatever is in the main block \ud83d\ude80\n</code></pre> </li> <li> <p>There's a single <code>main()</code> function now that contains all the code that should be executed when running the program from the console.</p> <p>So this is all we need to have in the main block. Just call the <code>main()</code> function.</p> </li> </ol> <p>Tip</p> <p>Review what each line does by clicking each number bubble in the code. \ud83d\udc46</p> <p>You can now put it in a <code>app.py</code> file and run it with Python. And you will see an output like the one shown above.</p> <p>After that, if you open the database with DB Browser for SQLite, you will see the data you just created in the Browse Data tab:</p> <p></p>"},{"location":"tutorial/insert/#whats-next","title":"What's Next","text":"<p>Now you know how to add rows to the database. \ud83c\udf89</p> <p>Now is a good time to understand better why the <code>id</code> field can't be <code>NULL</code> on the database because it's a primary key, but actually can be <code>None</code> in the Python code.</p> <p>I'll tell you about that in the next chapter. \ud83d\ude80</p>"},{"location":"tutorial/limit-and-offset/","title":"Read a Range of Data - LIMIT and OFFSET","text":"<p>Now you know how to get a single row with <code>.one()</code>, <code>.first()</code>, and <code>session.get()</code>.</p> <p>And you also know how to get multiple rows while filtering them using <code>.where()</code>.</p> <p>Now let's see how to get only a range of results.</p> <p></p>"},{"location":"tutorial/limit-and-offset/#create-data","title":"Create Data","text":"<p>We will continue with the same code as before, but we'll modify it a little the <code>select_heroes()</code> function to simplify the example and focus on what we want to achieve here.</p> <p>Again, we will create several heroes to have some data to select from:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).limit(3)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).limit(3)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/limit-and-offset/#review-select-all","title":"Review Select All","text":"<p>This is the code we had to select all the heroes in the <code>select()</code> examples:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>But this would get us all the heroes at the same time, in a database that could have thousands, that could be problematic.</p>"},{"location":"tutorial/limit-and-offset/#select-with-limit","title":"Select with Limit","text":"<p>We currently have 7 heroes in the database. But we could as well have thousands, so let's limit the results to get only the first 3:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).limit(3)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).limit(3)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).limit(3)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).limit(3)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>The special select object we get from <code>select()</code> also has a method <code>.limit()</code> that we can use to limit the results to a certain number.</p> <p>In this case, instead of getting all the 7 rows, we are limiting them to only get the first 3.</p> <p></p>"},{"location":"tutorial/limit-and-offset/#run-the-program-on-the-command-line","title":"Run the Program on the Command Line","text":"<p>If we run it on the command line, it will output:</p> <pre><code>$ python app.py\n\n// Previous output omitted \ud83d\ude48\n\n// Select with LIMIT\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\n LIMIT ? OFFSET ?\nINFO Engine [no key 0.00014s] (3, 0)\n\n// Print the heroes received, only 3\n[\n    Hero(age=None, secret_name='Dive Wilson', id=1, name='Deadpond'),\n    Hero(age=None, secret_name='Pedro Parqueador', id=2, name='Spider-Boy'),\n    Hero(age=48, secret_name='Tommy Sharp', id=3, name='Rusty-Man')\n]\n</code></pre> <p>Great! We got only 3 heroes as we wanted.</p> <p>Tip</p> <p>We will check out that SQL code more in a bit.</p>"},{"location":"tutorial/limit-and-offset/#select-with-offset-and-limit","title":"Select with Offset and Limit","text":"<p>Now we can limit the results to get only the first 3.</p> <p>But imagine we are in a user interface showing the results in batches of 3 heroes at a time.</p> <p>Tip</p> <p>This is commonly called \"pagination\". Because the user interface would normally show a \"page\" of a predefined number of heroes at a time.</p> <p>And then you can interact with the user interface to get the next page, and so on.</p> <p>How do we get the next 3?</p> <p></p> <p>We can use <code>.offset()</code>:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).offset(3).limit(3)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).offset(3).limit(3)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).offset(3).limit(3)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).offset(3).limit(3)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>The way this works is that the special select object we get from <code>select()</code> has methods like <code>.where()</code>, <code>.offset()</code> and <code>.limit()</code>.</p> <p>Each of those methods applies the change in the internal special select statement object, and also return the same object, this way, we can continue using more methods on it, like in the example above that we use both <code>.offset()</code> and <code>.limit()</code>.</p> <p>Offset means \"skip this many rows\", and as we want to skip the ones we already saw, the first three, we use <code>.offset(3)</code>.</p>"},{"location":"tutorial/limit-and-offset/#run-the-program-with-offset-on-the-command-line","title":"Run the Program with Offset on the Command Line","text":"<p>Now we can run the program on the command line, and it will output:</p> <pre><code>$python app.py\n\n// Previous output omitted \ud83d\ude48\n\n// Select with LIMIT and OFFSET\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\n LIMIT ? OFFSET ?\nINFO Engine [no key 0.00020s] (3, 3)\n\n// Print the 3 heroes received, the second batch\n[\n    Hero(age=32, secret_name='Natalia Roman-on', id=4, name='Tarantula'),\n    Hero(age=35, secret_name='Trevor Challa', id=5, name='Black Lion'),\n    Hero(age=36, secret_name='Steve Weird', id=6, name='Dr. Weird')\n]\n</code></pre>"},{"location":"tutorial/limit-and-offset/#select-next-batch","title":"Select Next Batch","text":"<p>Then to get the next batch of 3 rows we would offset all the ones we already saw, the first 6:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).offset(6).limit(3)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).offset(6).limit(3)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).offset(6).limit(3)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).offset(6).limit(3)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>The database right now has only 7 rows, so this query can only get 1 row.</p> <p></p> <p>But don't worry, the database won't throw an error trying to get 3 rows when there's only one (as would happen with a Python list).</p> <p>The database knows that we want to limit the number of results, but it doesn't necessarily have to find that many results.</p>"},{"location":"tutorial/limit-and-offset/#run-the-program-with-the-last-batch-on-the-command-line","title":"Run the Program with the Last Batch on the Command Line","text":"<p>And if we run it in the command line, it will output:</p> <pre><code>$ python app.py\n\n// Previous output omitted \ud83d\ude48\n\n// Select last batch with LIMIT and OFFSET\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\n LIMIT ? OFFSET ?\nINFO Engine [no key 0.00038s] (3, 6)\n\n// Print last batch of heroes, only one\n[\n    Hero(age=93, secret_name='Esteban Rogelios', id=7, name='Captain North America')\n]\n</code></pre>"},{"location":"tutorial/limit-and-offset/#sql-with-limit-and-offset","title":"SQL with LIMIT and OFFSET","text":"<p>You probably noticed the new SQL keywords <code>LIMIT</code> and <code>OFFSET</code>.</p> <p>You can use them in SQL, at the end of the other parts:</p> <pre><code>SELECT id, name, secret_name, age\nFROM hero\nLIMIT 3 OFFSET 6\n</code></pre> <p>If you try that in DB Browser for SQLite, you will get the same result:</p> <p></p>"},{"location":"tutorial/limit-and-offset/#combine-limit-and-offset-with-where","title":"Combine Limit and Offset with Where","text":"<p>Of course, you can also combine <code>.limit()</code> and <code>.offset()</code> with <code>.where()</code> and other methods you will learn about later:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &gt; 32).offset(1).limit(2)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &gt; 32).offset(1).limit(2)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &gt; 32).offset(1).limit(2)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &gt; 32).offset(1).limit(2)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/limit-and-offset/#run-the-program-with-limit-offset-and-where-on-the-command-line","title":"Run the Program with Limit, Offset, and Where on the Command Line","text":"<p>If we run it on the command line, it will find all the heroes in the database with an age above 32. That would normally be 4 heroes.</p> <p>But we are starting to include after an offset of 1 (so we don't count the first one), and we are limiting the results to only get the first 2 after that:</p> <pre><code>$ python app.py\n\n// Previous output omitted \ud83d\ude48\n\n// Select with WHERE and LIMIT and OFFSET\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.age &gt; ?\n LIMIT ? OFFSET ?\nINFO Engine [no key 0.00022s] (32, 2, 1)\n\n// Print the heroes received, only 2\n[\n    Hero(age=36, id=6, name='Dr. Weird', secret_name='Steve Weird'),\n    Hero(age=48, id=3, name='Rusty-Man', secret_name='Tommy Sharp')\n]\n</code></pre>"},{"location":"tutorial/limit-and-offset/#recap","title":"Recap","text":"<p>Independently of how you filter the data with <code>.where()</code> or other methods, you can limit the query to get at maximum some number of results with <code>.limit()</code>.</p> <p>And the same way, you can skip the first results with <code>.offset()</code>.</p>"},{"location":"tutorial/one/","title":"Read One Row","text":"<p>You already know how to filter rows to select using <code>.where()</code>.</p> <p>And you saw how when executing a <code>select()</code> it normally returns an iterable object.</p> <p>Or you can call <code>results.all()</code> to get a list of all the rows right away, instead of an iterable.</p> <p>But in many cases you really just want to read a single row, and having to deal with an iterable or a list is not as convenient.</p> <p>Let's see the utilities to read a single row.</p>"},{"location":"tutorial/one/#continue-from-previous-code","title":"Continue From Previous Code","text":"<p>We'll continue with the same examples we have been using in the previous chapters to create and select data and we'll keep updating them.</p> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>If you already executed the previous examples and have a database with data, remove the database file before running each example, that way you won't have duplicate data and you will be able to get the same results.</p>"},{"location":"tutorial/one/#read-the-first-row","title":"Read the First Row","text":"<p>We have been iterating over the rows in a <code>result</code> object like:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>But let's say that we are not interested in all the rows, just the first one.</p> <p>We can call the <code>.first()</code> method on the <code>results</code> object to get the first row:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        hero = results.first()\n        print(\"Hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        hero = results.first()\n        print(\"Hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        hero = results.first()\n        print(\"Hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        hero = results.first()\n        print(\"Hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>This will return the first object in the <code>results</code> (if there was any).</p> <p>That way, we don't have to deal with an iterable or a list.</p> <p>Tip</p> <p>Notice that <code>.first()</code> is a method of the <code>results</code> object, not of the <code>select()</code> statement.</p> <p>Although this query would find two rows, by using <code>.first()</code> we get only the first row.</p> <p>If we run it in the command line it would output:</p> <pre><code>$ python app.py\n\n// Some boilerplate output omitted \ud83d\ude09\n\n// The SELECT with WHERE\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.age &lt;= ?\nINFO Engine [no key 0.00021s] (35,)\n\n// Only print the first item\nHero: secret_name='Natalia Roman-on' age=32 id=4 name='Tarantula'\n</code></pre>"},{"location":"tutorial/one/#first-or-none","title":"First or <code>None</code>","text":"<p>It would be possible that the SQL query doesn't find any row.</p> <p>In that case, <code>.first()</code> will return <code>None</code>:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt; 25)\n        results = session.exec(statement)\n        hero = results.first()\n        print(\"Hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt; 25)\n        results = session.exec(statement)\n        hero = results.first()\n        print(\"Hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt; 25)\n        results = session.exec(statement)\n        hero = results.first()\n        print(\"Hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt; 25)\n        results = session.exec(statement)\n        hero = results.first()\n        print(\"Hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>In this case, as there's no hero with an age less than 25, <code>.first()</code> will return <code>None</code>.</p> <p>When we run it in the command line it will output:</p> <pre><code>$ python app.py\n\n// Some boilerplate output omitted \ud83d\ude09\n\n// The SELECT with WHERE\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.age &lt;= ?\nINFO Engine [no key 0.00021s] (35,)\n\n// Now rows found, first is None\nHero: None\n</code></pre>"},{"location":"tutorial/one/#exactly-one","title":"Exactly One","text":"<p>There might be cases where we want to ensure that there's exactly one row matching the query.</p> <p>And if there was more than one, it would mean that there's an error in the system, and we should terminate with an error.</p> <p>In that case, instead of <code>.first()</code> we can use <code>.one()</code>:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Here we know that there's only one <code>\"Deadpond\"</code>, and there shouldn't be any more than one.</p> <p>If we run it once will output:</p> <pre><code>$ python app.py\n\n// Some boilerplate output omitted \ud83d\ude09\n\n// The SELECT with WHERE\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.name = ?\nINFO Engine [no key 0.00015s] ('Deadpond',)\n\n// Only one row found, we're good \u2705\nHero: secret_name='Dive Wilson' age=None id=1 name='Deadpond'\n</code></pre> <p>But if we run it again, as it will create and insert all the heroes in the database again, they will be duplicated, and there will be more than one <code>\"Deadpond\"</code>. \ud83d\ude31</p> <p>So, running it again, without first deleting the file <code>database.db</code> will output:</p> <pre><code>$ python app.py\n\n// Some boilerplate output omitted \ud83d\ude09\n\n// The SELECT with WHERE\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.name = ?\nINFO Engine [no key 0.00015s] ('Deadpond',)\n\n// Oh, no, the database is in a broken state, with duplicates! \ud83d\udea8\nTraceback (most recent call last):\n\n// Some details about the error omitted\n\nsqlalchemy.exc.MultipleResultsFound: Multiple rows were found when exactly one was required\n</code></pre>"},{"location":"tutorial/one/#exactly-one-with-more-data","title":"Exactly One with More Data","text":"<p>Of course, even if we don't duplicate the data, we could get the same error if we send a query that finds more than one row and expect exactly one with <code>.one()</code>:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>That would find 2 rows, and would end up with the same error.</p>"},{"location":"tutorial/one/#exactly-one-with-no-data","title":"Exactly One with No Data","text":"<p>And also, if we get no rows at all with <code>.one()</code>, it will also raise an error:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt; 25)\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt; 25)\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt; 25)\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt; 25)\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>In this case, as there are no heroes with an age less than 25, <code>.one()</code> will raise an error.</p> <p>This is what we would get if we run it in the command line:</p> <pre><code>$ python app.py\n\n// Some boilerplate output omitted \ud83d\ude09\n\n// SELECT with WHERE\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.age &lt; ?\nINFO Engine [no key 0.00014s] (25,)\n\n// Oh, no, we expected one row but there aren't any! \ud83d\udea8\nTraceback (most recent call last):\n\n// Some details about the error omitted\n\nsqlalchemy.exc.NoResultFound: No row was found when one was required\n</code></pre>"},{"location":"tutorial/one/#compact-version","title":"Compact Version","text":"<p>Of course, with <code>.first()</code> and <code>.one()</code> you would also probably write all that in a more compact form most of the time, all in a single line (or at least a single Python statement):</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        hero = session.exec(select(Hero).where(Hero.name == \"Deadpond\")).one()\n        print(\"Hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        hero = session.exec(select(Hero).where(Hero.name == \"Deadpond\")).one()\n        print(\"Hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        hero = session.exec(select(Hero).where(Hero.name == \"Deadpond\")).one()\n        print(\"Hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        hero = session.exec(select(Hero).where(Hero.name == \"Deadpond\")).one()\n        print(\"Hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>That would result in the same as some examples above.</p>"},{"location":"tutorial/one/#select-by-id-with-where","title":"Select by Id with <code>.where()</code>","text":"<p>In many cases you might want to select a single row by its Id column with the primary key.</p> <p>You could do it the same way we have been doing with a <code>.where()</code> and then getting the first item with <code>.first()</code>:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.id == 1)\n        results = session.exec(statement)\n        hero = results.first()\n        print(\"Hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.id == 1)\n        results = session.exec(statement)\n        hero = results.first()\n        print(\"Hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.id == 1)\n        results = session.exec(statement)\n        hero = results.first()\n        print(\"Hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.id == 1)\n        results = session.exec(statement)\n        hero = results.first()\n        print(\"Hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>That would work correctly, as expected. But there's a shorter version. \ud83d\udc47</p>"},{"location":"tutorial/one/#select-by-id-with-get","title":"Select by Id with <code>.get()</code>","text":"<p>As selecting a single row by its Id column with the primary key is a common operation, there's a shortcut for it:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        hero = session.get(Hero, 1)\n        print(\"Hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        hero = session.get(Hero, 1)\n        print(\"Hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        hero = session.get(Hero, 1)\n        print(\"Hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        hero = session.get(Hero, 1)\n        print(\"Hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p><code>session.get(Hero, 1)</code> is an equivalent to creating a <code>select()</code>, then filtering by Id using <code>.where()</code>, and then getting the first item with <code>.first()</code>.</p> <p>If you run it, it will output:</p> <pre><code>$ python app.py\n\n// Some boilerplate output omitted \ud83d\ude09\n\n// SELECT with WHERE\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [generated in 0.00021s] (1,)\n\n// The printed result\nHero: secret_name='Dive Wilson' age=None id=1 name='Deadpond'\n</code></pre>"},{"location":"tutorial/one/#select-by-id-with-get-with-no-data","title":"Select by Id with <code>.get()</code> with No Data","text":"<p><code>.get()</code> behaves similar to <code>.first()</code>, if there's no data it will simply return <code>None</code> (instead of raising an error):</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        hero = session.get(Hero, 9001)\n        print(\"Hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        hero = session.get(Hero, 9001)\n        print(\"Hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        hero = session.get(Hero, 9001)\n        print(\"Hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        hero = session.get(Hero, 9001)\n        print(\"Hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Running that will output:</p> <pre><code>$ python app.py\n\n// Some boilerplate output omitted \ud83d\ude09\n\n// SELECT with WHERE\nINFO Engine BEGIN (implicit)\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [generated in 0.00024s] (9001,)\n\n// No data found, so the value is None\nHero: None\n</code></pre>"},{"location":"tutorial/one/#recap","title":"Recap","text":"<p>As querying the SQL database for a single row is a common operation, you now have several tools to do it in a short and simple way. \ud83c\udf89</p>"},{"location":"tutorial/select/","title":"Read Data - SELECT","text":"<p>We already have a database and a table with some data in it that looks more or less like this:</p> idnamesecret_nameage 1DeadpondDive Wilsonnull 2Spider-BoyPedro Parqueadornull 3Rusty-ManTommy Sharp48 <p>Things are getting more exciting! Let's now see how to read data from the database! \ud83e\udd29</p>"},{"location":"tutorial/select/#continue-from-previous-code","title":"Continue From Previous Code","text":"<p>Let's continue from the last code we used to create some data.</p> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>We are creating a SQLModel <code>Hero</code> class model and creating some records.</p> <p>We will need the <code>Hero</code> model and the engine, but we will create a new session to query data in a new function.</p>"},{"location":"tutorial/select/#read-data-with-sql","title":"Read Data with SQL","text":"<p>Before writing Python code let's do a quick review of how querying data with SQL looks like:</p> <pre><code>SELECT id, name, secret_name, age\nFROM hero\n</code></pre> <p>It means, more or less:</p> <p>Hey SQL database \ud83d\udc4b, please go and <code>SELECT</code> some data for me.</p> <p>I'll first tell you the columns I want:</p> <ul> <li><code>id</code></li> <li><code>name</code></li> <li><code>secret_name</code></li> <li><code>age</code></li> </ul> <p>And I want you to get them <code>FROM</code> the table called <code>\"hero\"</code>.</p> <p>Then the database will go and get the data and return it to you in a table like this:</p> idnamesecret_nameage 1DeadpondDive Wilsonnull 2Spider-BoyPedro Parqueadornull 3Rusty-ManTommy Sharp48 <p>You can try that out in DB Browser for SQLite:</p> <p></p> <p>Warning</p> <p>Here we are getting all the rows.</p> <p>If you have thousands of rows, that could be expensive to compute for the database.</p> <p>You would normally want to filter the rows to receive only the ones you want. But we'll learn about that later in the next chapter.</p>"},{"location":"tutorial/select/#a-sql-shortcut","title":"A SQL Shortcut","text":"<p>If we want to get all the columns like in this case above, in SQL there's a shortcut, instead of specifying each of the column names we could write a <code>*</code>:</p> <pre><code>SELECT *\nFROM hero\n</code></pre> <p>That would end up in the same result. Although we won't use that for SQLModel.</p>"},{"location":"tutorial/select/#select-fewer-columns","title":"<code>SELECT</code> Fewer Columns","text":"<p>We can also <code>SELECT</code> fewer columns, for example:</p> <pre><code>SELECT id, name\nFROM hero\n</code></pre> <p>Here we are only selecting the <code>id</code> and <code>name</code> columns.</p> <p>And it would result in a table like this:</p> idname 1Deadpond 2Spider-Boy 3Rusty-Man <p>And here is something interesting to notice. SQL databases store their data in tables. And they also always communicate their results in tables.</p>"},{"location":"tutorial/select/#select-variants","title":"<code>SELECT</code> Variants","text":"<p>The SQL language allows several variations in several places.</p> <p>One of those variations is that in <code>SELECT</code> statements you can use the names of the columns directly, or you can prefix them with the name of the table and a dot.</p> <p>For example, the same SQL code above could be written as:</p> <pre><code>SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\n</code></pre> <p>This will be particularly important later when working with multiple tables at the same time that could have the same name for some columns.</p> <p>For example <code>hero.id</code> and <code>team.id</code>, or <code>hero.name</code> and <code>team.name</code>.</p> <p>Another variation is that most of the SQL keywords like <code>SELECT</code> can also be written in lowercase, like <code>select</code>.</p>"},{"location":"tutorial/select/#result-tables-dont-have-to-exist","title":"Result Tables Don't Have to Exist","text":"<p>This is the interesting part. The tables returned by SQL databases don't have to exist in the database as independent tables. \ud83e\uddd9</p> <p>For example, in our database, we only have one table that has all the columns, <code>id</code>, <code>name</code>, <code>secret_name</code>, <code>age</code>. And here we are getting a result table with fewer columns.</p> <p>One of the main points of SQL is to be able to keep the data structured in different tables, without repeating data, etc, and then query the database in many ways and get many different tables as a result.</p>"},{"location":"tutorial/select/#read-data-with-sqlmodel","title":"Read Data with SQLModel","text":"<p>Now let's do the same query to read all the heroes, but with SQLModel.</p>"},{"location":"tutorial/select/#create-a-session","title":"Create a Session","text":"<p>The first step is to create a Session, the same way we did when creating the rows.</p> <p>We will start with that in a new function <code>select_heroes()</code>:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n\n# More code here later \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n\n# More code here later \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/select/#create-a-select-statement","title":"Create a <code>select</code> Statement","text":"<p>Next, pretty much the same way we wrote a SQL <code>SELECT</code> statement above, now we'll create a SQLModel <code>select</code> statement.</p> <p>First we have to import <code>select</code> from <code>sqlmodel</code> at the top of the file:</p> Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# More code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# More code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>And then we will use it to create a <code>SELECT</code> statement in Python code:</p> Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# More code here omitted \ud83d\udc48\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n\n# More code here later \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# More code here omitted \ud83d\udc48\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n\n# More code here later \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>It's a very simple line of code that conveys a lot of information:</p> <pre><code>statement = select(Hero)\n</code></pre> <p>This is equivalent to the first SQL <code>SELECT</code> statement above:</p> <pre><code>SELECT id, name, secret_name, age\nFROM hero\n</code></pre> <p>We pass the class model <code>Hero</code> to the <code>select()</code> function. And that tells it that we want to select all the columns necessary for the <code>Hero</code> class.</p> <p>And notice that in the <code>select()</code> function we don't explicitly specify the <code>FROM</code> part. It is already obvious to SQLModel (actually to SQLAlchemy) that we want to select <code>FROM</code> the table <code>hero</code>, because that's the one associated with the <code>Hero</code> class model.</p> <p>Tip</p> <p>The value of the <code>statement</code> returned by <code>select()</code> is a special object that allows us to do other things.</p> <p>I'll tell you about that in the next chapters.</p>"},{"location":"tutorial/select/#execute-the-statement","title":"Execute the Statement","text":"<p>Now that we have the <code>select</code> statement, we can execute it with the session:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n\n# More code here later \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n\n# More code here later \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>This will tell the session to go ahead and use the engine to execute that <code>SELECT</code> statement in the database and bring the results back.</p> <p>Because we created the engine with <code>echo=True</code>, it will show the SQL it executes in the output.</p> <p>This <code>session.exec(statement)</code> will generate this output:</p> <pre><code>INFO Engine BEGIN (implicit)\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nINFO Engine [no key 0.00032s] ()\n</code></pre> <p>The database returns the table with all the data, just like above when we wrote SQL directly:</p> idnamesecret_nameage 1DeadpondDive Wilsonnull 2Spider-BoyPedro Parqueadornull 3Rusty-ManTommy Sharp48"},{"location":"tutorial/select/#iterate-through-the-results","title":"Iterate Through the Results","text":"<p>The <code>results</code> object is an iterable that can be used to go through each one of the rows.</p> <p>Now we can put it in a <code>for</code> loop and print each one of the heroes:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>This will print the output:</p> <pre><code>id=1 name='Deadpond' age=None secret_name='Dive Wilson'\nid=2 name='Spider-Boy' age=None secret_name='Pedro Parqueador'\nid=3 name='Rusty-Man' age=48 secret_name='Tommy Sharp'\n</code></pre>"},{"location":"tutorial/select/#add-select_heroes-to-main","title":"Add <code>select_heroes()</code> to <code>main()</code>","text":"<p>Now include a call to <code>select_heroes()</code> in the <code>main()</code> function so that it is executed when we run the program from the command line:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n# More code here later \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n# More code here later \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/select/#review-the-code","title":"Review The Code","text":"<p>Great, you're now being able to read the data from the database! \ud83c\udf89</p> <p>Let's review the code up to this point:</p> Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select  # (1)!\n\n\nclass Hero(SQLModel, table=True):  # (2)!\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)  # (3)!\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)  # (4)!\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")  # (5)!\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:  # (6)!\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:  # (7)!\n        statement = select(Hero)  # (8)!\n        results = session.exec(statement)  # (9)!\n        for hero in results:  # (10)!\n            print(hero)  # (11)!\n    # (12)!\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()  # (13)!\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <ol> <li> <p>Import from <code>sqlmodel</code> everything we will use, including the new <code>select()</code> function.</p> </li> <li> <p>Create the <code>Hero</code> class model, representing the <code>hero</code> table.</p> </li> <li> <p>Create the engine, we should use a single one shared by all the application code, and that's what we are doing here.</p> </li> <li> <p>Create all the tables for the models registered in <code>SQLModel.metadata</code>.</p> <p>This also creates the database if it doesn't exist already.</p> </li> <li> <p>Create each one of the <code>Hero</code> objects.</p> <p>You might not have this in your version if you had already created the data in the database.</p> </li> <li> <p>Create a new session and use it to <code>add</code> the heroes to the database, and then <code>commit</code> the changes.</p> </li> <li> <p>Create a new session to query data.</p> <p>Tip</p> <p>Notice that this is a new session independent from the one in the other function above.</p> <p>But it still uses the same engine. We still have one engine for the whole application.</p> </li> <li> <p>Use the <code>select()</code> function to create a statement selecting all the <code>Hero</code> objects.</p> <p>This selects all the rows in the <code>hero</code> table.</p> </li> <li> <p>Use <code>session.exec(statement)</code> to make the session use the engine to execute the internal SQL statement.</p> <p>This will go to the database, execute that SQL, and get the results back.</p> <p>It returns a special iterable object that we put in the variable <code>results</code>.</p> <p>This generates the output:</p> <pre><code>INFO Engine BEGIN (implicit)\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nINFO Engine [no key 0.00032s] ()\n</code></pre> </li> <li> <p>Iterate for each <code>Hero</code> object in the <code>results</code>.</p> </li> <li> <p>Print each <code>hero</code>.</p> <p>The 3 iterations in the <code>for</code> loop will generate this output:</p> <pre><code>id=1 name='Deadpond' age=None secret_name='Dive Wilson'\nid=2 name='Spider-Boy' age=None secret_name='Pedro Parqueador'\nid=3 name='Rusty-Man' age=48 secret_name='Tommy Sharp'\n</code></pre> </li> <li> <p>At this point, after the <code>with</code> block, the session is closed.</p> <p>This generates the output:</p> <pre><code>INFO Engine ROLLBACK\n</code></pre> </li> <li> <p>Add this function <code>select_heroes()</code> to the <code>main()</code> function so that it is called when we run this program from the command line.</p> </li> </ol> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select  # (1)!\n\n\nclass Hero(SQLModel, table=True):  # (2)!\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)  # (3)!\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)  # (4)!\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")  # (5)!\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:  # (6)!\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:  # (7)!\n        statement = select(Hero)  # (8)!\n        results = session.exec(statement)  # (9)!\n        for hero in results:  # (10)!\n            print(hero)  # (11)!\n    # (12)!\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()  # (13)!\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <ol> <li> <p>Import from <code>sqlmodel</code> everything we will use, including the new <code>select()</code> function.</p> </li> <li> <p>Create the <code>Hero</code> class model, representing the <code>hero</code> table.</p> </li> <li> <p>Create the engine, we should use a single one shared by all the application code, and that's what we are doing here.</p> </li> <li> <p>Create all the tables for the models registered in <code>SQLModel.metadata</code>.</p> <p>This also creates the database if it doesn't exist already.</p> </li> <li> <p>Create each one of the <code>Hero</code> objects.</p> <p>You might not have this in your version if you had already created the data in the database.</p> </li> <li> <p>Create a new session and use it to <code>add</code> the heroes to the database, and then <code>commit</code> the changes.</p> </li> <li> <p>Create a new session to query data.</p> <p>Tip</p> <p>Notice that this is a new session independent from the one in the other function above.</p> <p>But it still uses the same engine. We still have one engine for the whole application.</p> </li> <li> <p>Use the <code>select()</code> function to create a statement selecting all the <code>Hero</code> objects.</p> <p>This selects all the rows in the <code>hero</code> table.</p> </li> <li> <p>Use <code>session.exec(statement)</code> to make the session use the engine to execute the internal SQL statement.</p> <p>This will go to the database, execute that SQL, and get the results back.</p> <p>It returns a special iterable object that we put in the variable <code>results</code>.</p> <p>This generates the output:</p> <pre><code>INFO Engine BEGIN (implicit)\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nINFO Engine [no key 0.00032s] ()\n</code></pre> </li> <li> <p>Iterate for each <code>Hero</code> object in the <code>results</code>.</p> </li> <li> <p>Print each <code>hero</code>.</p> <p>The 3 iterations in the <code>for</code> loop will generate this output:</p> <pre><code>id=1 name='Deadpond' age=None secret_name='Dive Wilson'\nid=2 name='Spider-Boy' age=None secret_name='Pedro Parqueador'\nid=3 name='Rusty-Man' age=48 secret_name='Tommy Sharp'\n</code></pre> </li> <li> <p>At this point, after the <code>with</code> block, the session is closed.</p> <p>This generates the output:</p> <pre><code>INFO Engine ROLLBACK\n</code></pre> </li> <li> <p>Add this function <code>select_heroes()</code> to the <code>main()</code> function so that it is called when we run this program from the command line.</p> </li> </ol> <p>Tip</p> <p>Check out the number bubbles to see what is done by each line of code.</p> <p>Here it starts to become more evident why we should have a single engine for the whole application, but different sessions for each group of operations.</p> <p>This new session we created uses the same engine, but it's a new and independent session.</p> <p>The code above creating the models could, for example, live in a function handling web API requests and creating models.</p> <p>And the second section reading data from the database could be in another function for other requests.</p> <p>So, both sections could be in different places and would need their own sessions.</p> <p>Info</p> <p>To be fair, in this example all that code could actually share the same session, there's actually no need to have two here.</p> <p>But it allows me to show you how they could be separated and to reinforce the idea that you should have one engine per application, and multiple sessions, one per each group of operations.</p>"},{"location":"tutorial/select/#get-a-list-of-hero-objects","title":"Get a List of <code>Hero</code> Objects","text":"<p>Up to now we are using the <code>results</code> to iterate over them.</p> <p>But for different reasons you might want to have the full list of <code>Hero</code> objects right away instead of just an iterable. For example, if you want to return them in a web API.</p> <p>The special <code>results</code> object also has a method <code>results.all()</code> that returns a list with all the objects:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        heroes = results.all()\n        print(heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>With this now we have all the heroes in a list in the <code>heroes</code> variable.</p> <p>After printing it, we would see something like:</p> <pre><code>[\n    Hero(id=1, name='Deadpond', age=None, secret_name='Dive Wilson'),\n    Hero(id=2, name='Spider-Boy', age=None, secret_name='Pedro Parqueador'),\n    Hero(id=3, name='Rusty-Man', age=48, secret_name='Tommy Sharp')\n]\n</code></pre> <p>Info</p> <p>It would actually look more compact, I'm formatting it a bit for you to see that it is actually a list with all the data.</p>"},{"location":"tutorial/select/#compact-version","title":"Compact Version","text":"<p>I have been creating several variables to be able to explain to you what each thing is doing.</p> <p>But knowing what is each object and what it is all doing, we can simplify it a bit and put it in a more compact form:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        print(heroes)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        print(heroes)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        print(heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        print(heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Here we are putting it all on a single line, you will probably put the select statements in a single line like this more often.</p>"},{"location":"tutorial/select/#sqlmodel-or-sqlalchemy-technical-details","title":"SQLModel or SQLAlchemy - Technical Details","text":"<p>SQLModel is actually, more or less, just SQLAlchemy and Pydantic underneath, combined together.</p> <p>It uses and returns the same types of objects and is compatible with both libraries.</p> <p>Nevertheless, SQLModel defines a few of its own internal parts to improve the developer experience.</p> <p>In this chapter we are touching some of them.</p>"},{"location":"tutorial/select/#sqlmodels-select","title":"SQLModel's <code>select</code>","text":"<p>When importing from <code>sqlmodel</code> the <code>select()</code> function, you are using SQLModel's version of <code>select</code>.</p> <p>SQLAchemy also has its own <code>select</code>, and SQLModel's <code>select</code> uses SQLAlchemy's <code>select</code> internally.</p> <p>But SQLModel's version does a lot of tricks with type annotations to make sure you get the best editor support possible, no matter if you use VS Code, PyCharm, or something else. \u2728</p> <p>Info</p> <p>There was a lot of work and research, with different versions of the internal code, to improve this as much as possible. \ud83e\udd13</p>"},{"location":"tutorial/select/#sqlmodels-sessionexec","title":"SQLModel's <code>session.exec</code>","text":"<p>\ud83d\udce2 This is one to pay special attention to.</p> <p>SQLAlchemy's own <code>Session</code> has a method <code>session.execute()</code>. It doesn't have a <code>session.exec()</code> method.</p> <p>If you see SQLAlchemy tutorials, they will always use <code>session.execute()</code>.</p> <p>SQLModel's own <code>Session</code> inherits directly from SQLAlchemy's <code>Session</code>, and adds this additional method <code>session.exec()</code>. Underneath, it uses the same <code>session.execute()</code>.</p> <p>But <code>session.exec()</code> does several tricks combined with the tricks in <code>session()</code> to give you the best editor support, with autocompletion and inline errors everywhere, even after getting data from a select. \u2728</p> <p>For example, in SQLAlchemy you would need to add a <code>.scalars()</code> here:</p> <pre><code>heroes = session.execute(select(Hero)).scalars().all()\n</code></pre> <p>But you would have to remove it when selecting multiple things (we'll see that later).</p> <p>SQLModel's <code>session.exec()</code> takes care of that for you, so you don't have to add the <code>.scalars()</code>.</p> <p>This is something that SQLAlchemy currently can't provide, because the regular <code>session.execute()</code> supports several other use cases, including legacy ones, so it can't have all the internal type annotations and tricks to support this.</p> <p>On top of that, SQLModel's <code>session.exec()</code> also does some tricks to reduce the amount of code you have to write and to make it as intuitive as possible.</p> <p>But SQLModel's <code>Session</code> still has access to <code>session.execute()</code> too.</p> <p>Tip</p> <p>Your editor will give you autocompletion for both <code>session.exec()</code> and <code>session.execute()</code>.</p> <p>\ud83d\udce2 Remember to always use <code>session.exec()</code> to get the best editor support and developer experience.</p>"},{"location":"tutorial/select/#caveats-of-sqlmodel-flavor","title":"Caveats of SQLModel Flavor","text":"<p>SQLModel is designed to have the best developer experience in a narrow set of very common use cases. \u2728</p> <p>You can still combine it with SQLAlchemy directly and use all the features of SQLAlchemy when you need to, including lower level more \"pure\" SQL constructs, exotic patterns, and even legacy ones. \ud83e\udd13</p> <p>But SQLModel's design (e.g. type annotations) assume you are using it in the ways I explain here in the documentation.</p> <p>Thanks to this, you will get as much autocompletion and inline errors as possible. \ud83d\ude80</p> <p>But this also means that if you use SQLModel with some more exotic patterns from SQLAlchemy, your editor might tell you that there's an error, while in fact, the code would still work.</p> <p>That's the trade-off. \ud83e\udd37</p> <p>But for the situations where you need those exotic patterns, you can always use SQLAlchemy directly combined with SQLModel (using the same models, etc).</p>"},{"location":"tutorial/update/","title":"Update Data - UPDATE","text":"<p>Now let's see how to update data using SQLModel.</p>"},{"location":"tutorial/update/#continue-from-previous-code","title":"Continue From Previous Code","text":"<p>As before, we'll continue from where we left off with the previous code.</p> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Remember to remove the <code>database.db</code> file before running the examples to get the same results.</p>"},{"location":"tutorial/update/#update-with-sql","title":"Update with SQL","text":"<p>Let's quickly check how to update data with SQL:</p> <pre><code>UPDATE hero\nSET age=16\nWHERE name = \"Spider-Boy\"\n</code></pre> <p>This means, more or less:</p> <p>Hey SQL database \ud83d\udc4b, I want to <code>UPDATE</code> the table called <code>hero</code>.</p> <p>Please <code>SET</code> the value of the <code>age</code> column to <code>16</code>...</p> <p>...for each of the rows <code>WHERE</code> the value of the column <code>name</code> is equal to <code>\"Spider-Boy\"</code>.</p> <p>In a similar way to <code>SELECT</code> statements, the first part defines the columns to work with: what are the columns that have to be updated and to which value. The rest of the columns stay as they were.</p> <p>And the second part, with the <code>WHERE</code>, defines to which rows it should apply that update.</p> <p>In this case, as we only have one hero with the name <code>\"Spider-Boy\"</code>, it will only apply the update in that row.</p> <p>Info</p> <p>Notice that in the <code>UPDATE</code> the single equals sign (<code>=</code>) means assignment, setting a column to some value.</p> <p>And in the <code>WHERE</code> the same single equals sign (<code>=</code>) is used for comparison between two values, to find rows that match.</p> <p>This is in contrast to Python and most programming languages, where a single equals sign (<code>=</code>) is used for assignment, and two equal signs (<code>==</code>) are used for comparisons.</p> <p>You can try that in DB Browser for SQLite:</p> <p></p> <p>After that update, the data in the table will look like this, with the new age for Spider-Boy:</p> idnamesecret_nameage 1DeadpondDive Wilsonnull 2Spider-BoyPedro Parqueador16 \u2728 3Rusty-ManTommy Sharp48 <p>Tip</p> <p>It will probably be more common to find the row to update by <code>id</code>, for example:</p> <pre><code>UPDATE hero\nSET age=16\nWHERE id = 2\n</code></pre> <p>But in the example above I used <code>name</code> to make it more intuitive.</p> <p>Now let's do the same update in code, with SQLModel.</p> <p>To get the same results, delete the <code>database.db</code> file before running the examples.</p>"},{"location":"tutorial/update/#read-from-the-database","title":"Read From the Database","text":"<p>We'll start by selecting the hero <code>\"Spider-Boy\"</code>, this is the one we will update:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"Updated hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"Updated hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Let's not forget to add that <code>update_heroes()</code> function to the <code>main()</code> function so that we call it when executing the program from the command line:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"Updated hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"Updated hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Up to that point, running that in the command line will output:</p> <pre><code>$ python app.py\n\n// Some boilerplate and previous output omitted \ud83d\ude09\n\n// The SELECT with WHERE\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.name = ?\nINFO Engine [no key 0.00017s] ('Spider-Boy',)\n\n// Print the hero as obtained from the database\nHero: name='Spider-Boy' secret_name='Pedro Parqueador' age=None id=2\n</code></pre> <p>Tip</p> <p>Notice that by this point, the hero still doesn't have an age.</p>"},{"location":"tutorial/update/#set-a-field-value","title":"Set a Field Value","text":"<p>Now that you have a <code>hero</code> object, you can simply set the value of the field (the attribute representing a column) that you want.</p> <p>In this case, we will set the <code>age</code> to <code>16</code>:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"Updated hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"Updated hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/update/#add-the-hero-to-the-session","title":"Add the Hero to the Session","text":"<p>Now that the hero object in memory has a change, in this case a new value for the <code>age</code>, we need to add it to the session.</p> <p>This is the same we did when creating new hero instances:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n        session.add(hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n        session.add(hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"Updated hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"Updated hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/update/#commit-the-session","title":"Commit the Session","text":"<p>To save the current changes in the session, commit it.</p> <p>This will save the updated hero in the database:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n        session.add(hero)\n        session.commit()\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n        session.add(hero)\n        session.commit()\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"Updated hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"Updated hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>It will also save anything else that was added to the session.</p> <p>For example, if you were also creating new heroes and had added those objects to the session before, they would now be saved too in this single commit.</p> <p>This commit will generate this output:</p> <pre><code>$ python app.py\n\n// Some boilerplate output omitted \ud83d\ude09\n\n// Previous output omitted \ud83d\ude48\n\n// The SQL to update the hero in the database\nINFO Engine UPDATE hero SET age=? WHERE hero.id = ?\nINFO Engine [generated in 0.00017s] (16, 2)\nINFO Engine COMMIT\n</code></pre>"},{"location":"tutorial/update/#refresh-the-object","title":"Refresh the Object","text":"<p>At this point, the hero is updated in the database and it has the new data saved there.</p> <p>The data in the object would be automatically refreshed if we accessed an attribute, like <code>hero.name</code>.</p> <p>But in this example we are not accessing any attribute, we will only print the object. And we also want to be explicit, so we will <code>.refresh()</code> the object directly:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"Updated hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"Updated hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>This refresh will trigger the same SQL query that would be automatically triggered by accessing an attribute. So it will generate this output:</p> <pre><code>$ python app.py\n\n// Some boilerplate output omitted \ud83d\ude09\n\n// Previous output omitted \ud83d\ude48\n\n// The SQL to SELECT the fresh hero data\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [generated in 0.00018s] (2,)\n</code></pre>"},{"location":"tutorial/update/#print-the-updated-object","title":"Print the Updated Object","text":"<p>Now we can just print the hero:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"Updated hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"Updated hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"Updated hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        results = session.exec(statement)\n        hero = results.one()\n        print(\"Hero:\", hero)\n\n        hero.age = 16\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        print(\"Updated hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Because we refreshed it right after updating it, it has fresh data, including the new <code>age</code> we just updated.</p> <p>So, printing it will show the new <code>age</code>:</p> <pre><code>$ python app.py\n\n// Some boilerplate output omitted \ud83d\ude09\n\n// Previous output omitted \ud83d\ude48\n\n// Print the hero with the new age\nUpdated hero: name='Spider-Boy' secret_name='Pedro Parqueador' age=16 id=2\n</code></pre>"},{"location":"tutorial/update/#review-the-code","title":"Review the Code","text":"<p>Now let's review all that code:</p> Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")  # (1)!\n        results = session.exec(statement)  # (2)!\n        hero = results.one()  # (3)!\n        print(\"Hero:\", hero)  # (4)!\n\n        hero.age = 16  # (5)!\n        session.add(hero)  # (6)!\n        session.commit()  # (7)!\n        session.refresh(hero)  # (8)!\n        print(\"Updated hero:\", hero)  # (9)!\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <ol> <li> <p>Select the hero we will work with.</p> </li> <li> <p>Execute the query with the select statement object.</p> <p>This generates the output:</p> <pre><code>INFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.name = ?\nINFO Engine [no key 0.00017s] ('Spider-Boy',)\n</code></pre> </li> <li> <p>Get one hero object, expecting exactly one.</p> <p>Tip</p> <p>This ensures there's no more than one, and that there's exactly one, not <code>None</code>.</p> <p>This would never return <code>None</code>, instead it would raise an exception.</p> </li> <li> <p>Print the hero object.</p> <p>This generates the output:</p> <pre><code>Hero: name='Spider-Boy' secret_name='Pedro Parqueador' age=None id=2\n</code></pre> </li> <li> <p>Set the hero's age field to the new value <code>16</code>.</p> <p>Now the <code>hero</code> object in memory has a different value for the age, but it is still not saved to the database.</p> </li> <li> <p>Add the hero to the session.</p> <p>This puts it in that temporary place in the session before committing.</p> <p>But it's still not saved in the database yet.</p> </li> <li> <p>Commit the session.</p> <p>This saves the updated hero to the database.</p> <p>And this generates the output:</p> <pre><code>INFO Engine UPDATE hero SET age=? WHERE hero.id = ?\nINFO Engine [generated in 0.00017s] (16, 2)\nINFO Engine COMMIT\n</code></pre> </li> <li> <p>Refresh the hero object to have the recent data, including the age we just committed.</p> <p>This generates the output:</p> <pre><code>INFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [generated in 0.00018s] (2,)\n</code></pre> </li> <li> <p>Print the updated hero object.</p> <p>This generates the output:</p> <pre><code>Updated hero: name='Spider-Boy' secret_name='Pedro Parqueador' age=16 id=2\n</code></pre> </li> </ol> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")  # (1)!\n        results = session.exec(statement)  # (2)!\n        hero = results.one()  # (3)!\n        print(\"Hero:\", hero)  # (4)!\n\n        hero.age = 16  # (5)!\n        session.add(hero)  # (6)!\n        session.commit()  # (7)!\n        session.refresh(hero)  # (8)!\n        print(\"Updated hero:\", hero)  # (9)!\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <ol> <li> <p>Select the hero we will work with.</p> </li> <li> <p>Execute the query with the select statement object.</p> <p>This generates the output:</p> <pre><code>INFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.name = ?\nINFO Engine [no key 0.00017s] ('Spider-Boy',)\n</code></pre> </li> <li> <p>Get one hero object, expecting exactly one.</p> <p>Tip</p> <p>This ensures there's no more than one, and that there's exactly one, not <code>None</code>.</p> <p>This would never return <code>None</code>, instead it would raise an exception.</p> </li> <li> <p>Print the hero object.</p> <p>This generates the output:</p> <pre><code>Hero: name='Spider-Boy' secret_name='Pedro Parqueador' age=None id=2\n</code></pre> </li> <li> <p>Set the hero's age field to the new value <code>16</code>.</p> <p>Now the <code>hero</code> object in memory has a different value for the age, but it is still not saved to the database.</p> </li> <li> <p>Add the hero to the session.</p> <p>This puts it in that temporary place in the session before committing.</p> <p>But it's still not saved in the database yet.</p> </li> <li> <p>Commit the session.</p> <p>This saves the updated hero to the database.</p> <p>And this generates the output:</p> <pre><code>INFO Engine UPDATE hero SET age=? WHERE hero.id = ?\nINFO Engine [generated in 0.00017s] (16, 2)\nINFO Engine COMMIT\n</code></pre> </li> <li> <p>Refresh the hero object to have the recent data, including the age we just committed.</p> <p>This generates the output:</p> <pre><code>INFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [generated in 0.00018s] (2,)\n</code></pre> </li> <li> <p>Print the updated hero object.</p> <p>This generates the output:</p> <pre><code>Updated hero: name='Spider-Boy' secret_name='Pedro Parqueador' age=16 id=2\n</code></pre> </li> </ol> <p>Tip</p> <p>Check out the number bubbles to see what is done by each line of code.</p>"},{"location":"tutorial/update/#multiple-updates","title":"Multiple Updates","text":"<p>The update process with SQLModel is more or less the same as with creating new objects, you add them to the session, and then commit them.</p> <p>This also means that you can update several fields (attributes, columns) at once, and you can also update several objects (heroes) at once:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")  # (1)!\n        results = session.exec(statement)  # (2)!\n        hero_1 = results.one()  # (3)!\n        print(\"Hero 1:\", hero_1)  # (4)!\n\n        statement = select(Hero).where(Hero.name == \"Captain North America\")  # (5)!\n        results = session.exec(statement)  # (6)!\n        hero_2 = results.one()  # (7)!\n        print(\"Hero 2:\", hero_2)  # (8)!\n\n        hero_1.age = 16  # (9)!\n        hero_1.name = \"Spider-Youngster\"  # (10)!\n        session.add(hero_1)  # (11)!\n\n        hero_2.name = \"Captain North America Except Canada\"  # (12)!\n        hero_2.age = 110  # (13)!\n        session.add(hero_2)  # (14)!\n\n        session.commit()  # (15)!\n        session.refresh(hero_1)  # (16)!\n        session.refresh(hero_2)  # (17)!\n\n        print(\"Updated hero 1:\", hero_1)  # (18)!\n        print(\"Updated hero 2:\", hero_2)  # (19)!\n    # (20)!\n\n# Code below omitted \ud83d\udc47\n</code></pre> <ol> <li> <p>Select the hero <code>Spider-Boy</code>.</p> </li> <li> <p>Execute the select statement.</p> <p>This generates the output:</p> <pre><code>INFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.name = ?\nINFO Engine [no key 0.00018s] ('Spider-Boy',)\n</code></pre> </li> <li> <p>Get one hero object, the only one that should be there for Spider-Boy.</p> </li> <li> <p>Print this hero.</p> <p>This generates the output:</p> <pre><code>Hero 1: name='Spider-Boy' secret_name='Pedro Parqueador' age=None id=2\n</code></pre> </li> <li> <p>Select another hero.</p> </li> <li> <p>Execute the select statement.</p> <p>This generates the output:</p> <pre><code>INFO Engine BEGIN (implicit)\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.name = ?\nINFO Engine [no key 0.00020s] ('Captain North America',)\n</code></pre> <p>Tip</p> <p>See the <code>BEGIN</code> at the top?</p> <p>This is SQLAlchemy automatically starting a transaction for us.</p> <p>This way, we could revert the last changes (if there were some) if we wanted to, even if the SQL to create them was already sent to the database.</p> </li> <li> <p>Get one hero object for this new query.</p> <p>The only one that should be there for Captain North America.</p> </li> <li> <p>Print this second hero.</p> <p>This generates the output:</p> <pre><code>Hero 2: name='Captain North America' secret_name='Esteban Rogelios' age=93 id=7\n</code></pre> </li> <li> <p>Update the age for the first hero.</p> <p>Set the value of the attribute <code>age</code> to <code>16</code>.</p> <p>This updates the hero object in memory, but not yet in the database.</p> </li> <li> <p>Update the name of the first hero.</p> <p>Now the name of the hero will not be <code>\"Spider-Boy\"</code> but <code>\"Spider-Youngster\"</code>.</p> <p>Also, this updates the object in memory, but not yet in the database.</p> </li> <li> <p>Add this first hero to the session.</p> <p>This puts it in the temporary space in the session before committing it to the database.</p> <p>It is not saved yet.</p> </li> <li> <p>Update the name of the second hero.</p> <p>Now the hero has a bit more precision in the name. \ud83d\ude1c</p> <p>This updates the object in memory, but not yet in the database.</p> </li> <li> <p>Update the age of the second hero.</p> <p>This updates the object in memory, but not yet in the database.</p> </li> <li> <p>Add the second hero to the session.</p> <p>This puts it in the temporary space in the session before committing it to the database.</p> </li> <li> <p>Commit all the changes tracked in the session.</p> <p>This commits everything in one single batch.</p> <p>This generates the output:</p> <pre><code>INFO Engine UPDATE hero SET name=?, age=? WHERE hero.id = ?\nINFO Engine [generated in 0.00028s] (('Spider-Youngster', 16, 2), ('Captain North America Except Canada', 110, 7))\nINFO Engine COMMIT\n</code></pre> <p>Tip</p> <p>See how SQLAlchemy (that powers SQLModel) optimizes the SQL to do as much work as possible in a single batch.</p> <p>Here it updates both heroes in a single SQL query.</p> </li> <li> <p>Refresh the first hero.</p> <p>This generates the output:</p> <pre><code>INFO Engine BEGIN (implicit)\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [generated in 0.00023s] (2,)\n</code></pre> <p>Tip</p> <p>Because we just committed a SQL transaction with <code>COMMIT</code>, SQLAlchemy will automatically start a new transaction with <code>BEGIN</code>.</p> </li> <li> <p>Refresh the second hero.</p> <p>This generates the output:</p> <pre><code>INFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.001709s ago] (7,)\n</code></pre> <p>Tip</p> <p>SQLAlchemy is still using the previous transaction, so it doesn't have to create a new one.</p> </li> <li> <p>Print the first hero, now updated.</p> <p>This generates the output:</p> <pre><code>Updated hero 1: name='Spider-Youngster' secret_name='Pedro Parqueador' age=16 id=2\n</code></pre> </li> <li> <p>Print the second hero, now updated.</p> <p>This generates the output:</p> <pre><code>Updated hero 2: name='Captain North America Except Canada' secret_name='Esteban Rogelios' age=110 id=7\n</code></pre> </li> <li> <p>Here is the end of the <code>with</code> block statement, so the session can execute its terminating code.</p> <p>The session will <code>ROLLBACK</code> (undo) any possible changes in the last transaction that were not committed.</p> <p>This generates the output:</p> <pre><code>INFO Engine ROLLBACK\n</code></pre> </li> </ol> <pre><code># Code above omitted \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")  # (1)!\n        results = session.exec(statement)  # (2)!\n        hero_1 = results.one()  # (3)!\n        print(\"Hero 1:\", hero_1)  # (4)!\n\n        statement = select(Hero).where(Hero.name == \"Captain North America\")  # (5)!\n        results = session.exec(statement)  # (6)!\n        hero_2 = results.one()  # (7)!\n        print(\"Hero 2:\", hero_2)  # (8)!\n\n        hero_1.age = 16  # (9)!\n        hero_1.name = \"Spider-Youngster\"  # (10)!\n        session.add(hero_1)  # (11)!\n\n        hero_2.name = \"Captain North America Except Canada\"  # (12)!\n        hero_2.age = 110  # (13)!\n        session.add(hero_2)  # (14)!\n\n        session.commit()  # (15)!\n        session.refresh(hero_1)  # (16)!\n        session.refresh(hero_2)  # (17)!\n\n        print(\"Updated hero 1:\", hero_1)  # (18)!\n        print(\"Updated hero 2:\", hero_2)  # (19)!\n    # (20)!\n\n# Code below omitted \ud83d\udc47\n</code></pre> <ol> <li> <p>Select the hero <code>Spider-Boy</code>.</p> </li> <li> <p>Execute the select statement.</p> <p>This generates the output:</p> <pre><code>INFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.name = ?\nINFO Engine [no key 0.00018s] ('Spider-Boy',)\n</code></pre> </li> <li> <p>Get one hero object, the only one that should be there for Spider-Boy.</p> </li> <li> <p>Print this hero.</p> <p>This generates the output:</p> <pre><code>Hero 1: name='Spider-Boy' secret_name='Pedro Parqueador' age=None id=2\n</code></pre> </li> <li> <p>Select another hero.</p> </li> <li> <p>Execute the select statement.</p> <p>This generates the output:</p> <pre><code>INFO Engine BEGIN (implicit)\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.name = ?\nINFO Engine [no key 0.00020s] ('Captain North America',)\n</code></pre> <p>Tip</p> <p>See the <code>BEGIN</code> at the top?</p> <p>This is SQLAlchemy automatically starting a transaction for us.</p> <p>This way, we could revert the last changes (if there were some) if we wanted to, even if the SQL to create them was already sent to the database.</p> </li> <li> <p>Get one hero object for this new query.</p> <p>The only one that should be there for Captain North America.</p> </li> <li> <p>Print this second hero.</p> <p>This generates the output:</p> <pre><code>Hero 2: name='Captain North America' secret_name='Esteban Rogelios' age=93 id=7\n</code></pre> </li> <li> <p>Update the age for the first hero.</p> <p>Set the value of the attribute <code>age</code> to <code>16</code>.</p> <p>This updates the hero object in memory, but not yet in the database.</p> </li> <li> <p>Update the name of the first hero.</p> <p>Now the name of the hero will not be <code>\"Spider-Boy\"</code> but <code>\"Spider-Youngster\"</code>.</p> <p>Also, this updates the object in memory, but not yet in the database.</p> </li> <li> <p>Add this first hero to the session.</p> <p>This puts it in the temporary space in the session before committing it to the database.</p> <p>It is not saved yet.</p> </li> <li> <p>Update the name of the second hero.</p> <p>Now the hero has a bit more precision in the name. \ud83d\ude1c</p> <p>This updates the object in memory, but not yet in the database.</p> </li> <li> <p>Update the age of the second hero.</p> <p>This updates the object in memory, but not yet in the database.</p> </li> <li> <p>Add the second hero to the session.</p> <p>This puts it in the temporary space in the session before committing it to the database.</p> </li> <li> <p>Commit all the changes tracked in the session.</p> <p>This commits everything in one single batch.</p> <p>This generates the output:</p> <pre><code>INFO Engine UPDATE hero SET name=?, age=? WHERE hero.id = ?\nINFO Engine [generated in 0.00028s] (('Spider-Youngster', 16, 2), ('Captain North America Except Canada', 110, 7))\nINFO Engine COMMIT\n</code></pre> <p>Tip</p> <p>See how SQLAlchemy (that powers SQLModel) optimizes the SQL to do as much work as possible in a single batch.</p> <p>Here it updates both heroes in a single SQL query.</p> </li> <li> <p>Refresh the first hero.</p> <p>This generates the output:</p> <pre><code>INFO Engine BEGIN (implicit)\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [generated in 0.00023s] (2,)\n</code></pre> <p>Tip</p> <p>Because we just committed a SQL transaction with <code>COMMIT</code>, SQLAlchemy will automatically start a new transaction with <code>BEGIN</code>.</p> </li> <li> <p>Refresh the second hero.</p> <p>This generates the output:</p> <pre><code>INFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.001709s ago] (7,)\n</code></pre> <p>Tip</p> <p>SQLAlchemy is still using the previous transaction, so it doesn't have to create a new one.</p> </li> <li> <p>Print the first hero, now updated.</p> <p>This generates the output:</p> <pre><code>Updated hero 1: name='Spider-Youngster' secret_name='Pedro Parqueador' age=16 id=2\n</code></pre> </li> <li> <p>Print the second hero, now updated.</p> <p>This generates the output:</p> <pre><code>Updated hero 2: name='Captain North America Except Canada' secret_name='Esteban Rogelios' age=110 id=7\n</code></pre> </li> <li> <p>Here is the end of the <code>with</code> block statement, so the session can execute its terminating code.</p> <p>The session will <code>ROLLBACK</code> (undo) any possible changes in the last transaction that were not committed.</p> <p>This generates the output:</p> <pre><code>INFO Engine ROLLBACK\n</code></pre> </li> </ol> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")  # (1)!\n        results = session.exec(statement)  # (2)!\n        hero_1 = results.one()  # (3)!\n        print(\"Hero 1:\", hero_1)  # (4)!\n\n        statement = select(Hero).where(Hero.name == \"Captain North America\")  # (5)!\n        results = session.exec(statement)  # (6)!\n        hero_2 = results.one()  # (7)!\n        print(\"Hero 2:\", hero_2)  # (8)!\n\n        hero_1.age = 16  # (9)!\n        hero_1.name = \"Spider-Youngster\"  # (10)!\n        session.add(hero_1)  # (11)!\n\n        hero_2.name = \"Captain North America Except Canada\"  # (12)!\n        hero_2.age = 110  # (13)!\n        session.add(hero_2)  # (14)!\n\n        session.commit()  # (15)!\n        session.refresh(hero_1)  # (16)!\n        session.refresh(hero_2)  # (17)!\n\n        print(\"Updated hero 1:\", hero_1)  # (18)!\n        print(\"Updated hero 2:\", hero_2)  # (19)!\n    # (20)!\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")  # (1)!\n        results = session.exec(statement)  # (2)!\n        hero_1 = results.one()  # (3)!\n        print(\"Hero 1:\", hero_1)  # (4)!\n\n        statement = select(Hero).where(Hero.name == \"Captain North America\")  # (5)!\n        results = session.exec(statement)  # (6)!\n        hero_2 = results.one()  # (7)!\n        print(\"Hero 2:\", hero_2)  # (8)!\n\n        hero_1.age = 16  # (9)!\n        hero_1.name = \"Spider-Youngster\"  # (10)!\n        session.add(hero_1)  # (11)!\n\n        hero_2.name = \"Captain North America Except Canada\"  # (12)!\n        hero_2.age = 110  # (13)!\n        session.add(hero_2)  # (14)!\n\n        session.commit()  # (15)!\n        session.refresh(hero_1)  # (16)!\n        session.refresh(hero_2)  # (17)!\n\n        print(\"Updated hero 1:\", hero_1)  # (18)!\n        print(\"Updated hero 2:\", hero_2)  # (19)!\n    # (20)!\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Tip</p> <p>Review what each line does by clicking each number bubble in the code. \ud83d\udc46</p>"},{"location":"tutorial/update/#recap","title":"Recap","text":"<p>Update SQLModel objects just as you would with other Python objects. \ud83d\udc0d</p> <p>Just remember to <code>add</code> them to a session, and then <code>commit</code> it. And if necessary, <code>refresh</code> them.</p>"},{"location":"tutorial/where/","title":"Filter Data - WHERE","text":"<p>In the previous chapter we saw how to <code>SELECT</code> data from the database.</p> <p>We did it using pure SQL and using SQLModel.</p> <p>But we always got all the rows, the whole table:</p> idnamesecret_nameage 1DeadpondDive Wilsonnull 2Spider-BoyPedro Parqueadornull 3Rusty-ManTommy Sharp48 <p>In most of the cases we will want to get only one row, or only a group of rows.</p> <p>We will see how to do that now, to filter data and get only the rows where a condition is true.</p>"},{"location":"tutorial/where/#continue-from-previous-code","title":"Continue From Previous Code","text":"<p>We'll continue with the same examples we have been using in the previous chapters to create and select data.</p> <p>And now we will update <code>select_heroes()</code> to filter the data.</p> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>If you already executed the previous examples and have a database with data, remove the database file before running each example, that way you won't have duplicate data and you will be able to get the same results.</p>"},{"location":"tutorial/where/#filter-data-with-sql","title":"Filter Data with SQL","text":"<p>Let's check first how to filter data with SQL using the <code>WHERE</code> keyword.</p> <pre><code>SELECT id, name, secret_name, age\nFROM hero\nWHERE name = \"Deadpond\"\n</code></pre> <p>The first part means the same as before:</p> <p>Hey SQL database \ud83d\udc4b, please go and <code>SELECT</code> some data for me.</p> <p>I'll first tell you the columns I want:</p> <ul> <li><code>id</code></li> <li><code>name</code></li> <li><code>secret_name</code></li> <li><code>age</code></li> </ul> <p>And I want you to get them <code>FROM</code> the table called <code>\"hero\"</code>.</p> <p>Then the <code>WHERE</code> keyword adds the following:</p> <p>So, SQL database, I already told you what columns to <code>SELECT</code> and where to select them <code>FROM</code>. But I don't want you to bring me all the rows, I only want the rows <code>WHERE</code> the <code>name</code> column has a value of <code>\"Deadpond\"</code>.</p> <p>Then the database will bring a table like this:</p> idnamesecret_nameage 1DeadpondDive Wilsonnull <p>Tip</p> <p>Even if the result is only one row, the database always returns a table.</p> <p>In this case, a table with only one row.</p> <p>You can try that out in DB Browser for SQLite:</p> <p></p>"},{"location":"tutorial/where/#where-and-from-are-clauses","title":"<code>WHERE</code> and <code>FROM</code> are \"clauses\"","text":"<p>These additional keywords with some sections like <code>WHERE</code> and <code>FROM</code> that go after <code>SELECT</code> (or others) have a technical name, they are called clauses.</p> <p>There are others clauses too, with their own SQL keywords.</p> <p>I won't use the term clause too much here, but it's good for you to know it as it will probably show up in other tutorials you could study later. \ud83e\udd13</p>"},{"location":"tutorial/where/#select-and-where","title":"<code>SELECT</code> and <code>WHERE</code>","text":"<p>Here's a quick tip that helps me think about it.</p> <ul> <li><code>SELECT</code> is used to tell the SQL database what columns to return.</li> <li><code>WHERE</code> is used to tell the SQL database what rows to return.</li> </ul> <p>The size of the table in the two dimensions depend mostly on those two keywords.</p>"},{"location":"tutorial/where/#select-land","title":"<code>SELECT</code> Land","text":"<p>If the table has too many or too few columns, that's changed in the <code>SELECT</code> part.</p> <p>Starting with some table:</p> idnamesecret_nameage 1DeadpondDive Wilsonnull 2Spider-BoyPedro Parqueadornull 3Rusty-ManTommy Sharp48 <p>...and changing the number of columns:</p> name Deadpond Spider-Boy Rusty-Man <p>...is all <code>SELECT</code> land.</p>"},{"location":"tutorial/where/#where-land","title":"<code>WHERE</code> Land","text":"<p>If the table has too many or too few rows, that's changed in the <code>WHERE</code> part.</p> <p>Starting with some table:</p> idnamesecret_nameage 1DeadpondDive Wilsonnull 2Spider-BoyPedro Parqueadornull 3Rusty-ManTommy Sharp48 <p>...and changing the number of rows:</p> idnamesecret_nameage 2Spider-BoyPedro Parqueadornull <p>...is all <code>WHERE</code> land.</p>"},{"location":"tutorial/where/#review-select-with-sqlmodel","title":"Review <code>SELECT</code> with SQLModel","text":"<p>Let's review some of the code we used to read data with SQLModel.</p> <p>We care specially about the select statement:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/where/#filter-rows-using-where-with-sqlmodel","title":"Filter Rows Using <code>WHERE</code> with SQLModel","text":"<p>Now, the same way that we add <code>WHERE</code> to a SQL statement to filter rows, we can add a <code>.where()</code> to a SQLModel <code>select()</code> statement to filter rows, which will filter the objects returned:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>It's a very small change, but it's packed of details. Let's explore them.</p>"},{"location":"tutorial/where/#select-objects","title":"<code>select()</code> Objects","text":"<p>The object returned by <code>select(Hero)</code> is a special type of object with some methods.</p> <p>One of those methods is <code>.where()</code> used to (unsurprisingly) add a <code>WHERE</code> to the SQL statement in that select object.</p> <p>There are other methods that we will explore later. \ud83d\udca1</p> <p>Most of these methods return the same object again after modifying it.</p> <p>So we could call one after the other:</p> <pre><code>statement = select(Hero).where(Hero.name == \"Deadpond\").where(Hero.age == 48)\n</code></pre>"},{"location":"tutorial/where/#calling-where","title":"Calling <code>.where()</code>","text":"<p>Now, this <code>.where()</code> method is special and very powerful. It is tightly integrated with SQLModel (actually SQLAlchemy) to let you use very familiar Python syntax and code.</p> <p>Notice that we didn't call it with a single equal (<code>=</code>) sign, and with something like:</p> <pre><code># Not supported \ud83d\udea8\nselect(Hero).where(name=\"Deadpond\")\n</code></pre> <p>That would have been shorter, of course, but it would have been much more error prone and limited. I'll show you why in a bit.</p> <p>Instead, we used two <code>==</code>:</p> <pre><code>select(Hero).where(Hero.name == \"Deadpond\")\n</code></pre> <p>So, what's happening there?</p>"},{"location":"tutorial/where/#where-and-expressions","title":"<code>.where()</code> and Expressions","text":"<p>In the example above we are using two equal signs (<code>==</code>). That's called the \"equality operator\".</p> <p>Tip</p> <p>An operator is just a symbol that is put beside one value or in the middle of two values to do something with them.</p> <p><code>==</code> is called the equality operator because it checks if two things are equal.</p> <p>When writing Python, if you write something using this equality operator (<code>==</code>) like:</p> <pre><code>some_name == \"Deadpond\"\n</code></pre> <p>...that's called an equality \"comparison\", and it normally results in a value of:</p> <pre><code>True\n</code></pre> <p>...or</p> <pre><code>False\n</code></pre> <p>Tip</p> <p><code>&lt;</code>, <code>&gt;</code>, <code>==</code>, <code>&gt;=</code>, <code>&lt;=</code>, and <code>!=</code> are all operators used for comparisons.</p> <p>But SQLAlchemy adds some magic to the columns/fields in a model class to make those Python comparisons have super powers.</p> <p>So, if you write something like:</p> <pre><code>Hero.name == \"Deadpond\"\n</code></pre> <p>...that doesn't result in a value of <code>True</code> or <code>False</code>. \ud83e\udd2f</p> <p>Instead, it results in a special type of object. If you tried that in an interactive Python session, you'd see something like:</p> <pre><code>&gt;&gt;&gt; Hero.name == \"Deadpond\"\n&lt;sqlalchemy.sql.elements.BinaryExpression object at 0x7f4aec0d6c90&gt;\n</code></pre> <p>So, that result value is an expression object. \ud83d\udca1</p> <p>And <code>.where()</code> takes one (or more) of these expression objects to update the SQL statement.</p>"},{"location":"tutorial/where/#model-class-attributes-expressions-and-instances","title":"Model Class Attributes, Expressions, and Instances","text":"<p>Now, let's stop for a second to make a clear distinction that is very important and easy to miss.</p> <p>Model class attributes for each of the columns/fields are special and can be used for expressions.</p> <p>But that's only for the model class attributes. \ud83d\udea8</p> <p>Instance attributes behave like normal Python values. \u2705</p> <p>So, using the class (<code>Hero</code>, with capital <code>H</code>) in a Python comparison:</p> <pre><code>Hero.name == \"Deadpond\"\n</code></pre> <p>...results in one of those expression objects to be used with <code>.where()</code>:</p> <pre><code>&lt;sqlalchemy.sql.elements.BinaryExpression object at 0x7f4aec0d6c90&gt;\n</code></pre> <p>But if you take an instance:</p> <pre><code>some_hero = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n</code></pre> <p>...and use it in a comparison:</p> <pre><code>some_hero.name == \"Deadpond\"\n</code></pre> <p>...that results in a Python value of:</p> <pre><code>True\n</code></pre> <p>...or if it was a different object with a different name, it could have been:</p> <pre><code>False\n</code></pre> <p>The difference is that one is using the model class, the other is using an instance.</p>"},{"location":"tutorial/where/#class-or-instance","title":"Class or Instance","text":"<p>It's quite probable that you will end up having some variable <code>hero</code> (with lowercase <code>h</code>) like:</p> <pre><code>hero = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n</code></pre> <p>And now the class is <code>Hero</code> (with capital <code>H</code>) and the instance is <code>hero</code> (with a lowercase <code>h</code>).</p> <p>So now you have <code>Hero.name</code> and <code>hero.name</code> that look very similar, but are two different things:</p> <pre><code>&gt;&gt;&gt; Hero.name == \"Deadpond\"\n&lt;sqlalchemy.sql.elements.BinaryExpression object at 0x7f4aec0d6c90&gt;\n\n&gt;&gt;&gt; hero.name == \"Deadpond\"\nTrue\n</code></pre> <p>It's just something to pay attention to. \ud83e\udd13</p> <p>But after understanding that difference between classes and instances it can feel natural, and you can do very powerful things. \ud83d\ude80</p> <p>For example, as <code>hero.name</code> works like a <code>str</code> and <code>Hero.name</code> works like a special object for comparisons, you could write some code like:</p> <pre><code>select(Hero).where(Hero.name == hero.name)\n</code></pre> <p>That would mean:</p> <p>Hey SQL Database \ud83d\udc4b, please <code>SELECT</code> all the columns</p> <p><code>FROM</code> the table for the model class <code>Hero</code> (the table <code>\"hero\"</code>)</p> <p><code>WHERE</code> the column <code>\"name\"</code> is equal to the name of this hero instance I have here: <code>hero.name</code> (in the example above, the value <code>\"Deadpond\"</code>).</p>"},{"location":"tutorial/where/#where-and-expressions-instead-of-keyword-arguments","title":"<code>.where()</code> and Expressions Instead of Keyword Arguments","text":"<p>Now, let me tell you why I think that for this use case of interacting with SQL databases it's better to have these expressions:</p> <pre><code># Expression \u2728\nselect(Hero).where(Hero.name == \"Deadpond\")\n</code></pre> <p>...instead of keyword arguments like this:</p> <pre><code># Not supported, keyword argument \ud83d\udea8\nselect(Hero).where(name=\"Deadpond\")\n</code></pre> <p>Of course, the keyword arguments would have been a bit shorter.</p> <p>But with the expressions your editor can help you a lot with autocompletion and inline error checks. \u2728</p> <p>Let me give you an example. Let's imagine that keyword arguments were supported in SQLModel and you wanted to filter using the secret identity of Spider-Boy.</p> <p>You could write:</p> <pre><code># Don't copy this \ud83d\udea8\nselect(Hero).where(secret_identity=\"Pedro Parqueador\")\n</code></pre> <p>The editor would see the code, and because it doesn't have any information of which keyword arguments are allowed and which not, it would have no way to help you detect the error.</p> <p>Maybe your code could even run and seem like it's all fine, and then some months later you would be wondering why your app never finds rows although you were sure that there was one <code>\"Pedro Parqueador\"</code>. \ud83d\ude31</p> <p>And maybe finally you would realize that we wrote the code using <code>secret_identity</code> which is not a column in the table. We should have written <code>secret_name</code> instead.</p> <p>Now, with the expressions, your editor would show you an error right away if you tried this:</p> <pre><code># Expression \u2728\nselect(Hero).where(Hero.secret_identity == \"Pedro Parqueador\")\n</code></pre> <p>Even better, it would autocomplete the correct one for you, to get:</p> <pre><code>select(Hero).where(Hero.secret_name == \"Pedro Parqueador\")\n</code></pre> <p>I think that alone, having better editor support, autocompletion, and inline errors, is enough to make it worth having expressions instead of keyword arguments. \u2728</p> <p>Tip</p> <p>Expressions also provide more features for other types of comparisons, shown down below. \ud83d\udc47</p>"},{"location":"tutorial/where/#exec-the-statement","title":"Exec the Statement","text":"<p>Now that we know how <code>.where()</code> works, let's finish the code.</p> <p>It's actually the same as in previous chapters for selecting data:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Deadpond\")\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>We take that statement, that now includes a <code>WHERE</code>, and we <code>exec()</code> it to get the results.</p> <p>And in this case the results will be just one:</p> <pre><code>$ python app.py\n\n// Some boilerplate output omitted \ud83d\ude09\n\n// Now the important part, the SELECT with WHERE \ud83d\udca1\n\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.name = ?\nINFO Engine [no key 0.00014s] ('Deadpond',)\n\n// Here's the only printed hero\nsecret_name='Dive Wilson' age=None id=1 name='Deadpond'\n</code></pre> <p>Tip</p> <p>The <code>results</code> object is an iterable to be used in a <code>for</code> loop.</p> <p>Even if we got only one row, we iterate over that <code>results</code> object. Just as if it was a list of one element.</p> <p>We'll see other ways to get the data later.</p>"},{"location":"tutorial/where/#other-comparisons","title":"Other Comparisons","text":"<p>Here's another great advantage of these special expressions  passed to <code>.where()</code>.</p> <p>Above, we have been using an \"equality\" comparison (using <code>==</code>), only checking if two things are the same value.</p> <p>But we can use other standard Python comparisons. \u2728</p>"},{"location":"tutorial/where/#not-equal","title":"Not Equal","text":"<p>We could get the rows where a column is not equal to a value using <code>!=</code>:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name != \"Deadpond\")\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name != \"Deadpond\")\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name != \"Deadpond\")\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name != \"Deadpond\")\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>That would output:</p> <pre><code>secret_name='Pedro Parqueador' age=None id=2 name='Spider-Boy'\nsecret_name='Tommy Sharp' age=48 id=3 name='Rusty-Man'\n</code></pre>"},{"location":"tutorial/where/#pause-to-add-data","title":"Pause to Add Data","text":"<p>Let's update the function <code>create_heroes()</code> and add some more rows to make the next comparison examples clearer:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &gt; 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &gt; 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Now that we have several heroes with different ages, it's gonna be more obvious what the next comparisons do.</p>"},{"location":"tutorial/where/#more-than","title":"More Than","text":"<p>Now let's use <code>&gt;</code> to get the rows where a column is more than a value:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &gt; 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &gt; 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &gt; 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &gt; 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>That would output:</p> <pre><code>age=48 id=3 name='Rusty-Man' secret_name='Tommy Sharp'\nage=36 id=6 name='Dr. Weird' secret_name='Steve Weird'\nage=93 id=7 name='Captain North America' secret_name='Esteban Rogelios'\n</code></pre> <p>Tip</p> <p>Notice that it didn't select <code>Black Lion</code>, because the age is not strictly greater than <code>35</code>.</p>"},{"location":"tutorial/where/#more-than-or-equal","title":"More Than or Equal","text":"<p>Let's do that again, but with <code>&gt;=</code> to get the rows where a column is more than or equal to a value:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &gt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &gt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &gt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &gt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Because we are using <code>&gt;=</code>, the age <code>35</code> will be included in the output:</p> <pre><code>age=48 id=3 name='Rusty-Man' secret_name='Tommy Sharp'\nage=35 id=5 name='Black Lion' secret_name='Trevor Challa'\nage=36 id=6 name='Dr. Weird' secret_name='Steve Weird'\nage=93 id=7 name='Captain North America' secret_name='Esteban Rogelios'\n</code></pre> <p>Tip</p> <p>This time we got <code>Black Lion</code> too because although the age is not strictly greater than <code>35</code>it is equal to <code>35</code>.</p>"},{"location":"tutorial/where/#less-than","title":"Less Than","text":"<p>Similarly, we can use <code>&lt;</code> to get the rows where a column is less than a value:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt; 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt; 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt; 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt; 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>And we get the younger one with an age in the database:</p> <pre><code>age=32 id=4 name='Tarantula' secret_name='Natalia Roman-on'\n</code></pre> <p>Tip</p> <p>We could imagine that Spider-Boy is even younger. But because we don't know the age, it is <code>NULL</code> in the database (<code>None</code> in Python), it doesn't match any of these age comparisons with numbers.</p>"},{"location":"tutorial/where/#less-than-or-equal","title":"Less Than or Equal","text":"<p>Finally, we can use <code>&lt;=</code> to get the rows where a column is less than or equal to a value:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &lt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>And we get the younger ones, <code>35</code> and below:</p> <pre><code>age=32 id=4 name='Tarantula' secret_name='Natalia Roman-on'\nage=35 id=5 name='Black Lion' secret_name='Trevor Challa'\n</code></pre> <p>Tip</p> <p>We get <code>Black Lion</code> here too because although the age is not strictly less than <code>35</code> it is equal to <code>35</code>.</p>"},{"location":"tutorial/where/#benefits-of-expressions","title":"Benefits of Expressions","text":"<p>Here's a good moment to see that being able to use these pure Python expressions instead of keyword arguments can help a lot. \u2728</p> <p>We can use the same standard Python comparison operators like <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>, <code>==</code>, etc.</p>"},{"location":"tutorial/where/#multiple-where","title":"Multiple <code>.where()</code>","text":"<p>Because <code>.where()</code> returns the same special select object back, we can add more <code>.where()</code> calls to it:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &gt;= 35).where(Hero.age &lt; 40)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &gt;= 35).where(Hero.age &lt; 40)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &gt;= 35).where(Hero.age &lt; 40)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &gt;= 35).where(Hero.age &lt; 40)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>This will select the rows <code>WHERE</code> the <code>age</code> is greater than or equal to <code>35</code>, <code>AND</code> also the <code>age</code> is less than <code>40</code>.</p> <p>The equivalent SQL would be:</p> <pre><code>SELECT id, name, secret_name, age\nFROM hero\nWHERE age &gt;= 35 AND age &lt; 40\n</code></pre> <p>This uses <code>AND</code> to put both comparisons together.</p> <p>We can then run it to see the output from the program:</p> <pre><code>$ python app.py\n\n// Some boilerplate output omitted \ud83d\ude09\n\n// The SELECT statement with WHERE, also using AND\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.age &gt;= ? AND hero.age &lt; ?\nINFO Engine [no key 0.00014s] (35, 40)\n\n// The two heroes printed\nage=35 id=5 name='Black Lion' secret_name='Trevor Challa'\nage=36 id=6 name='Dr. Weird' secret_name='Steve Weird'\n</code></pre>"},{"location":"tutorial/where/#where-with-multiple-expressions","title":"<code>.where()</code> With Multiple Expressions","text":"<p>As an alternative to using multiple <code>.where()</code> we can also pass several expressions to a single <code>.where()</code>:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &gt;= 35, Hero.age &lt; 40)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &gt;= 35, Hero.age &lt; 40)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &gt;= 35, Hero.age &lt; 40)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.age &gt;= 35, Hero.age &lt; 40)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>This is the same as the above, and will result in the same output with the two heroes:</p> <pre><code>age=35 id=5 name='Black Lion' secret_name='Trevor Challa'\nage=36 id=6 name='Dr. Weird' secret_name='Steve Weird'\n</code></pre>"},{"location":"tutorial/where/#where-with-multiple-expressions-using-or","title":"<code>.where()</code> With Multiple Expressions Using <code>OR</code>","text":"<p>These last examples use <code>where()</code> with multiple expressions. And then those are combined in the final SQL using <code>AND</code>, which means that all of the expressions must be true in a row for it to be included in the results.</p> <p>But we can also combine expressions using <code>OR</code>. Which means that any (but not necessarily all) of the expressions should be true in a row for it to be included.</p> <p>To do it, you can import <code>or_</code>:</p> Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, or_, select\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, or_, select\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, or_, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(or_(Hero.age &lt;= 35, Hero.age &gt; 90))\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, or_, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(or_(Hero.age &lt;= 35, Hero.age &gt; 90))\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>And then pass both expressions to <code>or_()</code> and put it inside <code>.where()</code>.</p> <p>For example, here we select the heroes that are the youngest OR the oldest:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(or_(Hero.age &lt;= 35, Hero.age &gt; 90))\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(or_(Hero.age &lt;= 35, Hero.age &gt; 90))\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, or_, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(or_(Hero.age &lt;= 35, Hero.age &gt; 90))\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, or_, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(or_(Hero.age &lt;= 35, Hero.age &gt; 90))\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>When we run it, this generates the output:</p> <pre><code>$ python app.py\n\n// Some boilerplate output omitted \ud83d\ude09\n\n// The SELECT statement with WHERE, also using OR \ud83d\udd0d\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.age &lt;= ? OR hero.age &gt; ?\nINFO Engine [no key 0.00021s] (35, 90)\n\n// The results include the youngest and oldest \u2728\nsecret_name='Natalia Roman-on' age=32 id=4 name='Tarantula'\nsecret_name='Trevor Challa' age=35 id=5 name='Black Lion'\nsecret_name='Esteban Rogelios' age=93 id=7 name='Captain North America'\n</code></pre>"},{"location":"tutorial/where/#type-annotations-and-errors","title":"Type Annotations and Errors","text":"<p>There's a chance that your editor gives you an error when using these comparisons, like:</p> <pre><code>Hero.age &gt; 35\n</code></pre> <p>It would be an error telling you that</p> <p><code>Hero.age</code> is potentially <code>None</code>, and you cannot compare <code>None</code> with <code>&gt;</code></p> <p>This is because as we are using pure and plain Python annotations for the fields, <code>age</code> is indeed annotated as <code>int | None (or Optional[int])</code>.</p> <p>By using this simple and standard Python type annotations we get the benefit of the extra simplicity and the inline error checks when creating or using instances. \u2728</p> <p>And when we use these special class attributes in a <code>.where()</code>, during execution of the program, the special class attribute will know that the comparison only applies for the values that are not <code>NULL</code> in the database, and it will work correctly.</p> <p>But the editor doesn't know that it's a special class attribute, so it tries to help us preventing an error (that in this case is a false alarm).</p> <p>Nevertheless, we can easily fix. \ud83c\udf89</p> <p>We can tell the editor that this class attribute is actually a special SQLModel column (instead of an instance attribute with a normal value).</p> <p>To do that, we can import <code>col()</code> (as short for \"column\"):</p> Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, col, create_engine, select\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, col, create_engine, select\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, col, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(col(Hero.age) &gt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, col, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(col(Hero.age) &gt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>And then put the class attribute inside <code>col()</code> when using it in a <code>.where()</code>:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(col(Hero.age) &gt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(col(Hero.age) &gt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, col, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(col(Hero.age) &gt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, col, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n    hero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    hero_4 = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n    hero_5 = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n    hero_6 = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n    hero_7 = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\n\n    with Session(engine) as session:\n        session.add(hero_1)\n        session.add(hero_2)\n        session.add(hero_3)\n        session.add(hero_4)\n        session.add(hero_5)\n        session.add(hero_6)\n        session.add(hero_7)\n\n        session.commit()\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(col(Hero.age) &gt;= 35)\n        results = session.exec(statement)\n        for hero in results:\n            print(hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>So, now the comparison is not:</p> <pre><code>Hero.age &gt; 35\n</code></pre> <p>...but:</p> <pre><code>col(Hero.age) &gt; 35\n</code></pre> <p>And with that the editor knows this code is actually fine, because this is a special SQLModel column.</p> <p>Tip</p> <p>That <code>col()</code> will come handy later, giving autocompletion to several other things we can do with these special class attributes for columns.</p> <p>But we'll get there later.</p>"},{"location":"tutorial/where/#recap","title":"Recap","text":"<p>You can use <code>.where()</code> with powerful expressions using SQLModel columns (the special class attributes) to filter the rows that you want. \ud83d\ude80</p> <p>Up to now, the database would have been looking through each one of the records (rows) to find the ones that match what you want. If you have thousands or millions of records, this could be very slow. \ud83d\ude31</p> <p>In the next section I'll tell you how to add indexes to the database, this is what will make the queries very efficient. \ud83d\ude0e</p>"},{"location":"tutorial/connect/","title":"Connect Tables - JOIN - Intro","text":"<p>By this point, you already know how to perform the main CRUD operations with SQLModel using a single table. \ud83c\udf89</p> <p>But the main advantage and feature of SQL databases is being able to handle related data, to connect or \"join\" different tables together. Connecting rows in one table to rows in another.</p> <p>Let's see how to use SQLModel to manage connected data in the next chapters. \ud83e\udd1d</p> <p>Tip</p> <p>We will extend this further in the next group of chapters making it even more convenient to work with in Python code, using relationship attributes.</p> <p>But you should start in this group of chapters first. \ud83e\udd13</p>"},{"location":"tutorial/connect/create-connected-rows/","title":"Create and Connect Rows","text":"<p>We will now create rows for each table. \u2728</p> <p>The <code>team</code> table will look like this:</p> idnameheadquarters 1PreventersSharp Tower 2Z-ForceSister Margaret's Bar <p>And after we finish working with the data in this chapter, the <code>hero</code> table will look like this:</p> idnamesecret_nameageteam_id 1DeadpondDive Wilsonnull2 2Rusty-ManTommy Sharp481 3Spider-BoyPedro Parqueadornullnull <p>Each row in the table <code>hero</code> will point to a row in the table <code>team</code>:</p> <p></p> <p>Info</p> <p>We will later update Spider-Boy to add him to the Preventers team too, but not yet.</p> <p>We will continue with the code in the previous example and we will add more things to it.</p> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef main():\n    create_db_and_tables()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef main():\n    create_db_and_tables()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Make sure you remove the <code>database.db</code> file before running the examples to get the same results.</p>"},{"location":"tutorial/connect/create-connected-rows/#create-rows-for-teams-with-sqlmodel","title":"Create Rows for Teams with SQLModel","text":"<p>Let's do the same we did before and define a <code>create_heroes()</code> function where we create our heroes.</p> <p>And now we will also create the teams there. \ud83c\udf89</p> <p>Let's start by creating two teams:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>This would hopefully look already familiar.</p> <p>We start a session in a <code>with</code> block using the same engine we created above.</p> <p>Then we create two instances of the model class (in this case <code>Team</code>).</p> <p>Next we add those objects to the session.</p> <p>And finally we commit the session to save the changes to the database.</p>"},{"location":"tutorial/connect/create-connected-rows/#add-it-to-main","title":"Add It to Main","text":"<p>Let's not forget to add this function <code>create_heroes()</code> to the <code>main()</code> function so that we run it when calling the program from the command line:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/connect/create-connected-rows/#run-it","title":"Run it","text":"<p>If we run that code we have up to now, it will output:</p> <pre><code>$ python app.py\n\n// Previous output omitted \ud83d\ude09\n\n// Automatically start a transaction\nINFO Engine BEGIN (implicit)\n// Add the teams to the database\nINFO Engine INSERT INTO team (name, headquarters) VALUES (?, ?)\nINFO Engine [generated in 0.00050s] ('Preventers', 'Sharp Tower')\nINFO Engine INSERT INTO team (name, headquarters) VALUES (?, ?)\nINFO Engine [cached since 0.002324s ago] ('Z-Force', 'Sister Margaret's Bar')\nINFO Engine COMMIT\n</code></pre> <p>You can see in the output that it uses common SQL <code>INSERT</code> statements to create the rows.</p>"},{"location":"tutorial/connect/create-connected-rows/#create-rows-for-heroes-in-code","title":"Create Rows for Heroes in Code","text":"<p>Now let's create one hero object to start.</p> <p>As the <code>Hero</code> class model now has a field (column, attribute) <code>team_id</code>, we can set it by using the ID field from the <code>Team</code> objects we just created before:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>We haven't committed this hero to the database yet, but there are already a couple of things to pay attention to.</p> <p>If the database already had some teams, we wouldn't even know what is the ID that is going to be automatically assigned to each team by the database, for example, we couldn't just guess <code>1</code> or <code>2</code>.</p> <p>But once the team is created and committed to the database, we can access the object's <code>id</code> field to get that ID.</p> <p>Accessing an attribute in a model that was just committed, for example with <code>team_z_force.id</code>, automatically triggers a refresh of the data from the DB in the object, and then exposes the value for that field.</p> <p>So, even though we are not committing this hero yet, just because we are using <code>team_z_force.id</code>, that will trigger some SQL sent to the database to fetch the data for this team.</p> <p>That line alone would generate an output of:</p> <pre><code>INFO Engine BEGIN (implicit)\nINFO Engine SELECT team.id AS team_id, team.name AS team_name, team.headquarters AS team_headquarters\nFROM team\nWHERE team.id = ?\nINFO Engine [generated in 0.00025s] (2,)\n</code></pre> <p>Let's now create two more heroes:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>When creating <code>hero_rusty_man</code>, we are accessing <code>team_preventers.id</code>, so that will also trigger a refresh of its data, generating an output of:</p> <pre><code>INFO Engine SELECT team.id AS team_id, team.name AS team_name, team.headquarters AS team_headquarters\nFROM team\nWHERE team.id = ?\nINFO Engine [cached since 0.001795s ago] (1,)\n</code></pre> <p>There's something else to note. We marked <code>team_id</code> as <code>Optional[int]</code>, meaning that this could be <code>NULL</code> on the database (and <code>None</code> in Python).</p> <p>That means that a hero doesn't have to have a team. And in this case, Spider-Boy doesn't have one.</p> <p>Next we just commit the changes to save them to the database, and that will generate the output:</p> <pre><code>INFO Engine INSERT INTO hero (name, secret_name, age, team_id) VALUES (?, ?, ?, ?)\nINFO Engine [generated in 0.00022s] ('Deadpond', 'Dive Wilson', None, 2)\nINFO Engine INSERT INTO hero (name, secret_name, age, team_id) VALUES (?, ?, ?, ?)\nINFO Engine [cached since 0.0007987s ago] ('Rusty-Man', 'Tommy Sharp', 48, 1)\nINFO Engine INSERT INTO hero (name, secret_name, age, team_id) VALUES (?, ?, ?, ?)\nINFO Engine [cached since 0.001095s ago] ('Spider-Boy', 'Pedro Parqueador', None, None)\nINFO Engine COMMIT\n</code></pre>"},{"location":"tutorial/connect/create-connected-rows/#refresh-and-print-heroes","title":"Refresh and Print Heroes","text":"<p>Now let's refresh and print those new heroes to see their new ID pointing to their teams:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>If we execute that in the command line, it will output:</p> <pre><code>$ python app.py\n\n// Previous output omitted \ud83d\ude09\n\n// Automatically start a transaction\nINFO Engine BEGIN (implicit)\n\n// Refresh the first hero\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age, hero.team_id\nFROM hero\nWHERE hero.id = ?\nINFO Engine [generated in 0.00021s] (1,)\n// Refresh the second hero\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age, hero.team_id\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.001575s ago] (2,)\n// Refresh the third hero\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age, hero.team_id\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.002518s ago] (3,)\n\n// Print the heroes\nCreated hero: id=1 secret_name='Dive Wilson' team_id=2 name='Deadpond' age=None\nCreated hero: id=2 secret_name='Tommy Sharp' team_id=1 name='Rusty-Man' age=48\nCreated hero: id=3 secret_name='Pedro Parqueador' team_id=None name='Spider-Boy' age=None\n</code></pre> <p>They now have their <code>team_id</code>s, nice!</p>"},{"location":"tutorial/connect/create-connected-rows/#relationships","title":"Relationships","text":"<p>Relationships in SQL databases are just made by having columns in one table referencing the values in columns on other tables.</p> <p>And here we have treated them just like that, more column fields, which is what they actually are behind the scenes in the SQL database.</p> <p>But later in this tutorial, in the next group of chapters, you will learn about Relationship Attributes to make it all a lot easier to work with in code. \u2728</p>"},{"location":"tutorial/connect/create-connected-tables/","title":"Create Connected Tables","text":"<p>Now we will deal with connected data put in different tables.</p> <p>So, the first step is to create more than one table and connect them, so that each row in one table can reference another row in the other table.</p> <p>We have been working with heroes in a single table <code>hero</code>. Let's now add a table <code>team</code>.</p> <p>The team table will look like this:</p> idnameheadquarters 1PreventersSharp Tower 2Z-ForceSister Margaret's Bar <p>To connect them, we will add another column to the hero table to point to each team by the ID with the <code>team_id</code>:</p> idnamesecret_nameageteam_id \u2728 1DeadpondDive Wilsonnull2 \u2728 2Spider-BoyPedro Parqueadornull1 \u2728 3Rusty-ManTommy Sharp481 \u2728 <p>This way each row in the table <code>hero</code> can point to a row in the table <code>team</code>:</p> <p></p>"},{"location":"tutorial/connect/create-connected-tables/#one-to-many-and-many-to-one","title":"One-to-Many and Many-to-One","text":"<p>Here we are creating connected data in a relationship where one team could have many heroes. So it is commonly called a one-to-many or many-to-one relationship.</p> <p>The many-to-one part can be seen if we start from the heroes, many heroes could be part of one team.</p> <p>This is probably the most popular type of relationship, so we'll start with that. But there's also many-to-many and one-to-one relationships.</p>"},{"location":"tutorial/connect/create-connected-tables/#create-tables-in-code","title":"Create Tables in Code","text":""},{"location":"tutorial/connect/create-connected-tables/#create-the-team-table","title":"Create the <code>team</code> Table","text":"<p>Let's start by creating the tables in code.</p> <p>Import the things we need from <code>sqlmodel</code> and create a new <code>Team</code> model:</p> Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef main():\n    create_db_and_tables()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef main():\n    create_db_and_tables()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>This is very similar to what we have been doing with the <code>Hero</code> model.</p> <p>The <code>Team</code> model will be in a table automatically named <code>\"team\"</code>, and it will have the columns:</p> <ul> <li><code>id</code>, the primary key, automatically generated by the database</li> <li><code>name</code>, the name of the team<ul> <li>We also tell SQLModel to create an index for this column</li> </ul> </li> <li><code>headquarters</code>, the headquarters of the team</li> </ul> <p>And finally we mark it as a table in the config.</p>"},{"location":"tutorial/connect/create-connected-tables/#create-the-new-hero-table","title":"Create the New <code>hero</code> Table","text":"<p>Now let's create the <code>hero</code> table.</p> <p>This is the same model we have been using up to now, we are just adding the new column <code>team_id</code>:</p> Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef main():\n    create_db_and_tables()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef main():\n    create_db_and_tables()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Most of that should look familiar:</p> <p>The column will be named <code>team_id</code>. It will be an integer, and it could be <code>NULL</code> in the database (or <code>None</code> in Python), because there could be some heroes that don't belong to any team.</p> <p>We add a default of <code>None</code> to the <code>Field()</code> so we don't have to explicitly pass <code>team_id=None</code> when creating a hero.</p> <p>Now, here's the new part:</p> <p>In <code>Field()</code> we pass the argument <code>foreign_key=\"team.id\"</code>. This tells the database that this column <code>team_id</code> is a foreign key to the table <code>team</code>. A \"foreign key\" just means that this column will have the key to identify a row in a foreign table.</p> <p>The value in this column <code>team_id</code> will be the same integer that is in some row in the <code>id</code> column on the <code>team</code> table. That is what connects the two tables.</p>"},{"location":"tutorial/connect/create-connected-tables/#the-value-of-foreign_key","title":"The Value of <code>foreign_key</code>","text":"<p>Notice that the <code>foreign_key</code> is a string.</p> <p>Inside it has the name of the table, then a dot, and then the name of the column.</p> <p>This is the name of the table in the database, so it is <code>\"team\"</code>, not the name of the model class <code>Team</code> (with a capital <code>T</code>).</p> <p>If you had a custom table name, you would use that custom table name.</p> <p>Info</p> <p>You can learn about setting a custom table name for a model in the Advanced User Guide.</p>"},{"location":"tutorial/connect/create-connected-tables/#create-the-tables","title":"Create the Tables","text":"<p>Now we can add the same code as before to create the engine and the function to create the tables:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef main():\n    create_db_and_tables()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef main():\n    create_db_and_tables()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>And as before, we'll call this function from another function <code>main()</code>, and we'll add that function <code>main()</code> to the main block of the file:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef main():\n    create_db_and_tables()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef main():\n    create_db_and_tables()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef main():\n    create_db_and_tables()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef main():\n    create_db_and_tables()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/connect/create-connected-tables/#run-the-code","title":"Run the Code","text":"<p>Tip</p> <p>Before running the code, make sure you delete the file <code>database.db</code> to make sure you start from scratch.</p> <p>If we run the code we have up to now, it will go and create the database file <code>database.db</code> and the tables in it we just defined, <code>team</code> and <code>hero</code>:</p> <pre><code>$ python app.py\n\n// Automatically start a new transaction\nINFO Engine BEGIN (implicit)\n\n// Check if the tables exist already\nINFO Engine PRAGMA main.table_info(\"team\")\nINFO Engine [raw sql] ()\nINFO Engine PRAGMA temp.table_info(\"team\")\nINFO Engine [raw sql] ()\nINFO Engine PRAGMA main.table_info(\"hero\")\nINFO Engine [raw sql] ()\nINFO Engine PRAGMA temp.table_info(\"hero\")\nINFO Engine [raw sql] ()\n\n// Create the tables\nINFO Engine\nCREATE TABLE team (\n        id INTEGER,\n        name VARCHAR NOT NULL,\n        headquarters VARCHAR NOT NULL,\n        PRIMARY KEY (id)\n)\n\n\nINFO Engine [no key 0.00010s] ()\nINFO Engine\nCREATE TABLE hero (\n        id INTEGER,\n        name VARCHAR NOT NULL,\n        secret_name VARCHAR NOT NULL,\n        age INTEGER,\n        team_id INTEGER,\n        PRIMARY KEY (id),\n        FOREIGN KEY(team_id) REFERENCES team (id)\n)\n\n\nINFO Engine [no key 0.00026s] ()\nINFO Engine COMMIT\n</code></pre>"},{"location":"tutorial/connect/create-connected-tables/#create-tables-in-sql","title":"Create Tables in SQL","text":"<p>Let's see that same generated SQL code.</p> <p>As we saw before, those <code>VARCHAR</code> columns are converted to <code>TEXT</code> in SQLite, which is the database we are using for these experiments.</p> <p>So, the first SQL could also be written as:</p> <pre><code>CREATE TABLE team (\n    id INTEGER,\n    name TEXT NOT NULL,\n    headquarters TEXT NOT NULL,\n    PRIMARY KEY (id)\n)\n</code></pre> <p>And the second table could be written as:</p> <pre><code>CREATE TABLE hero (\n    id INTEGER,\n    name TEXT NOT NULL,\n    secret_name TEXT NOT NULL,\n    age INTEGER,\n    team_id INTEGER,\n    PRIMARY KEY (id),\n    FOREIGN KEY(team_id) REFERENCES team (id)\n)\n</code></pre> <p>The only new  is the <code>FOREIGN KEY</code> line, and as you can see, it tells the database what column in this table is a foreign key (<code>team_id</code>), which other (foreign) table it references (<code>team</code>) and which column in that table is the key to define which row to connect (<code>id</code>).</p> <p>Feel free to experiment with it in DB Browser for SQLite.</p>"},{"location":"tutorial/connect/create-connected-tables/#recap","title":"Recap","text":"<p>Using SQLModel, in most of the cases you only need a field (column) with a <code>foreign_key</code> in the <code>Field()</code> with a string pointing to another table and column to connect two tables.</p> <p>Now that we have the tables created and connected, let's create some rows in the next chapter. \ud83d\ude80</p>"},{"location":"tutorial/connect/read-connected-data/","title":"Read Connected Data","text":"<p>Now that we have some data in both tables, let's select the data that is connected together.</p> <p>The <code>team</code> table has this data:</p> idnameheadquarters 1PreventersSharp Tower 2Z-ForceSister Margaret's Bar <p>And the <code>hero</code> table has this data:</p> idnamesecret_nameageteam_id 1DeadpondDive Wilsonnull2 2Rusty-ManTommy Sharp481 3Spider-BoyPedro Parqueadornullnull <p>We will continue with the code in the previous example and we will add more things to it.</p> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/connect/read-connected-data/#select-connected-data-with-sql","title":"<code>SELECT</code> Connected Data with SQL","text":"<p>Let's start seeing how SQL works when selecting connected data. This is where SQL databases actually shine.</p> <p>If you don't have a <code>database.db</code> file, run that previous program we had written (or copy it from the preview above) to create it.</p> <p>Now open DB Browser for SQLite and open the <code>database.db</code> file.</p> <p>To <code>SELECT</code> connected data we use the same keywords we have used before, but now we combine the two tables.</p> <p>Let's get each hero with the <code>id</code>, <code>name</code>, and the team <code>name</code>:</p> <pre><code>SELECT hero.id, hero.name, team.name\nFROM hero, team\nWHERE hero.team_id = team.id\n</code></pre> <p>Info</p> <p>Because we have two columns called <code>name</code>, one for <code>hero</code> and one for <code>team</code>, we can specify them with the prefix of the table name and the dot to make it explicit what we refer to.</p> <p>Notice that now in the <code>WHERE</code> part we are not comparing one column with a literal value (like <code>hero.name = \"Deadpond\"</code>), but we are comparing two columns.</p> <p>It means, more or less:</p> <p>Hey SQL database \ud83d\udc4b, please go and <code>SELECT</code> some data for me.</p> <p>I'll first tell you the columns I want:</p> <ul> <li><code>id</code> of the <code>hero</code> table</li> <li><code>name</code> of the <code>hero</code> table</li> <li><code>name</code> of the <code>team</code> table</li> </ul> <p>I want you to get that data <code>FROM</code> the tables <code>hero</code> and <code>team</code>.</p> <p>And I don't want you to combine each hero with each possible team. Instead, for each hero, go and check each possible team, but give me only the ones <code>WHERE</code> the <code>hero.team_id</code> is the same as the <code>team.id</code>.</p> <p>If we execute that SQL, it will return the table:</p> idnamename 1DeadpondZ-Force 2Rusty-ManPreventers <p>You can go ahead and try it in DB Browser for SQLite:</p> <p></p> <p>Note</p> <p>Wait, what about Spider-Boy? \ud83d\ude31</p> <p>He doesn't have a team, so his <code>team_id</code> is <code>NULL</code> in the database. And this SQL is comparing that <code>NULL</code> from the <code>team_id</code> with all the <code>id</code> fields in the rows in the <code>team</code> table.</p> <p>As there's no team with an ID of <code>NULL</code>, it doesn't find a match.</p> <p>But we'll see how to fix that later with a <code>LEFT JOIN</code>.</p>"},{"location":"tutorial/connect/read-connected-data/#select-related-data-with-sqlmodel","title":"Select Related Data with SQLModel","text":"<p>Now let's use SQLModel to do the same select.</p> <p>We'll create a function <code>select_heroes()</code> just as we did before, but now we'll work with two tables.</p> <p>Remember SQLModel's <code>select()</code> function? It can take more than one argument.</p> <p>So, we can pass the <code>Hero</code> and <code>Team</code> model classes. And we can also use both their columns in the <code>.where()</code> part:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero, Team).where(Hero.team_id == Team.id)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero, Team).where(Hero.team_id == Team.id)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero, Team).where(Hero.team_id == Team.id)\n        results = session.exec(statement)\n        for hero, team in results:\n            print(\"Hero:\", hero, \"Team:\", team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero, Team).where(Hero.team_id == Team.id)\n        results = session.exec(statement)\n        for hero, team in results:\n            print(\"Hero:\", hero, \"Team:\", team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Notice that in the comparison with <code>==</code> we are using the class attributes for both <code>Hero.team_id</code> and <code>Team.id</code>.</p> <p>That will generate the appropriate expression object that will be converted to the right SQL, equivalent to the SQL example we saw above.</p> <p>Now we can execute it and get the <code>results</code> object.</p> <p>And as we used <code>select</code> with two models, we will receive tuples of instances of those two models, so we can iterate over them naturally in a <code>for</code> loop:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero, Team).where(Hero.team_id == Team.id)\n        results = session.exec(statement)\n        for hero, team in results:\n            print(\"Hero:\", hero, \"Team:\", team)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero, Team).where(Hero.team_id == Team.id)\n        results = session.exec(statement)\n        for hero, team in results:\n            print(\"Hero:\", hero, \"Team:\", team)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero, Team).where(Hero.team_id == Team.id)\n        results = session.exec(statement)\n        for hero, team in results:\n            print(\"Hero:\", hero, \"Team:\", team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero, Team).where(Hero.team_id == Team.id)\n        results = session.exec(statement)\n        for hero, team in results:\n            print(\"Hero:\", hero, \"Team:\", team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>For each iteration in the <code>for</code> loop we get a a tuple with an instance of the class <code>Hero</code> and an instance of the class <code>Team</code>.</p> <p>And in this <code>for</code> loop we assign them to the variable <code>hero</code> and the variable <code>team</code>.</p> <p>Info</p> <p>There was a lot of research, design, and work behind SQLModel to make this provide the best possible developer experience.</p> <p>And you should get autocompletion and inline errors in your editor for both <code>hero</code> and <code>team</code>. \ud83c\udf89</p>"},{"location":"tutorial/connect/read-connected-data/#add-it-to-main","title":"Add It to Main","text":"<p>As always, we must remember to add this new <code>select_heroes()</code> function to the <code>main()</code> function to make sure it is executed when we call this program from the command line.</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero, Team).where(Hero.team_id == Team.id)\n        results = session.exec(statement)\n        for hero, team in results:\n            print(\"Hero:\", hero, \"Team:\", team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero, Team).where(Hero.team_id == Team.id)\n        results = session.exec(statement)\n        for hero, team in results:\n            print(\"Hero:\", hero, \"Team:\", team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/connect/read-connected-data/#run-the-program","title":"Run the Program","text":"<p>Now we can run the program and see how it shows us each hero with their corresponding team:</p> <pre><code>$ python app.py\n\n// Previous output omitted \ud83d\ude09\n\n// Get the heroes with their teams\n2021-08-09 08:55:50,682 INFO sqlalchemy.engine.Engine SELECT hero.id, hero.name, hero.secret_name, hero.age, hero.team_id, team.id AS id_1, team.name AS name_1, team.headquarters\nFROM hero, team\nWHERE hero.team_id = team.id\n2021-08-09 08:55:50,682 INFO sqlalchemy.engine.Engine [no key 0.00015s] ()\n\n// Print the first hero and team\nHero: id=1 secret_name='Dive Wilson' team_id=2 name='Deadpond' age=None Team: headquarters='Sister Margaret's Bar' id=2 name='Z-Force'\n\n// Print the second hero and team\nHero: id=2 secret_name='Tommy Sharp' team_id=1 name='Rusty-Man' age=48 Team: headquarters='Sharp Tower' id=1 name='Preventers'\n2021-08-09 08:55:50,682 INFO sqlalchemy.engine.Engine ROLLBACK\n</code></pre>"},{"location":"tutorial/connect/read-connected-data/#join-tables-with-sql","title":"<code>JOIN</code> Tables with SQL","text":"<p>There's an alternative syntax for that SQL query from above using the keyword <code>JOIN</code> instead of <code>WHERE</code>.</p> <p>This is the same version from above, using <code>WHERE</code>:</p> <pre><code>SELECT hero.id, hero.name, team.name\nFROM hero, team\nWHERE hero.team_id = team.id\n</code></pre> <p>And this is the alternative version using <code>JOIN</code>:</p> <pre><code>SELECT hero.id, hero.name, team.name\nFROM hero\nJOIN team\nON hero.team_id = team.id\n</code></pre> <p>Both are equivalent. The differences in the SQL code are that instead of passing the <code>team</code> to the <code>FROM</code> part (also called <code>FROM</code> clause) we add a <code>JOIN</code> and put the <code>team</code> table there.</p> <p>And then, instead of putting a <code>WHERE</code> with a condition, we put an <code>ON</code> keyword with the condition, because <code>ON</code> is the one that comes with <code>JOIN</code>. \ud83e\udd37</p> <p>So, this second version means, more or less:</p> <p>Hey SQL database \ud83d\udc4b, please go and <code>SELECT</code> some data for me.</p> <p>I'll first tell you the columns I want:</p> <ul> <li><code>id</code> of the <code>hero</code> table</li> <li><code>name</code> of the <code>hero</code> table</li> <li><code>name</code> of the <code>team</code> table</li> </ul> <p>...up to here it's the same as before, LOL.</p> <p>Now, I want you to get that data starting <code>FROM</code> the table <code>hero</code>.</p> <p>And to get the rest of the data, I want you to <code>JOIN</code> it with the table <code>team</code>.</p> <p>And I want you to join those two tables <code>ON</code> the combinations of rows that have the <code>hero.team_id</code> with the same value as the <code>team.id</code>.</p> <p>Did I say all this before already? I feel like I'm just repeating myself. \ud83e\udd14</p> <p>That will return the same table as before:</p> idnamename 1DeadpondZ-Force 2Rusty-ManPreventers <p>Also in DB Browser for SQLite:</p> <p></p> <p>Tip</p> <p>Why bother with all this if the result is the same?</p> <p>This <code>JOIN</code> will be useful in a bit to be able to also get Spider-Boy, even if he doesn't have a team.</p>"},{"location":"tutorial/connect/read-connected-data/#join-tables-in-sqlmodel","title":"Join Tables in SQLModel","text":"<p>The same way there's a <code>.where()</code> available when using <code>select()</code>, there's also a <code>.join()</code>.</p> <p>And in SQLModel (actually SQLAlchemy), when using the <code>.join()</code>, because we already declared what is the <code>foreign_key</code> when creating the models, we don't have to pass an <code>ON</code> part, it is inferred automatically:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero, Team).join(Team)\n        results = session.exec(statement)\n        for hero, team in results:\n            print(\"Hero:\", hero, \"Team:\", team)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero, Team).join(Team)\n        results = session.exec(statement)\n        for hero, team in results:\n            print(\"Hero:\", hero, \"Team:\", team)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero, Team).join(Team)\n        results = session.exec(statement)\n        for hero, team in results:\n            print(\"Hero:\", hero, \"Team:\", team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero, Team).join(Team)\n        results = session.exec(statement)\n        for hero, team in results:\n            print(\"Hero:\", hero, \"Team:\", team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Also notice that we are still including <code>Team</code> in the <code>select(Hero, Team)</code>, because we still want to access that data.</p> <p>This is equivalent to the previous example.</p> <p>And if we run it in the command line, it will output:</p> <pre><code>$ python app.py\n\n// Previous output omitted \ud83d\ude09\n\n// Select using a JOIN with automatic ON\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age, hero.team_id, team.id AS id_1, team.name AS name_1, team.headquarters\nFROM hero JOIN team ON team.id = hero.team_id\nINFO Engine [no key 0.00032s] ()\n\n// Print the first hero and team\nHero: id=1 secret_name='Dive Wilson' team_id=2 name='Deadpond' age=None Team: headquarters='Sister Margaret's Bar' id=2 name='Z-Force'\n\n// Print the second hero and team\nHero: id=2 secret_name='Tommy Sharp' team_id=1 name='Rusty-Man' age=48 Team: headquarters='Sharp Tower' id=1 name='Preventers'\n</code></pre>"},{"location":"tutorial/connect/read-connected-data/#join-tables-with-sql-and-left-outer-maybe-join","title":"<code>JOIN</code> Tables with SQL and <code>LEFT OUTER</code> (Maybe <code>JOIN</code>)","text":"<p>When working with a <code>JOIN</code>, you can imagine that you start with a table on the <code>FROM</code> part and put that table in an imaginary space on the left side.</p> <p>And then you want another table to <code>JOIN</code> the result.</p> <p>And you put that second table in the right side on that imaginary space.</p> <p>And then you tell the database <code>ON</code> which condition it should join those two tables and give you the results back.</p> <p>But by default, only the rows from both left and right that match the condition will be returned.</p> <p></p> <p>In this example of tables above \ud83d\udc46, it would return all the heroes, because every hero has a <code>team_id</code>, so every hero can be joined with the <code>team</code> table:</p> idnamename 1DeadpondZ-Force 2Rusty-ManPreventers 3Spider-BoyPreventers"},{"location":"tutorial/connect/read-connected-data/#foreign-keys-with-null","title":"Foreign Keys with <code>NULL</code>","text":"<p>But in the database that we are working with in the code above, Spider-Boy doesn't have any team, the value of <code>team_id</code> is <code>NULL</code> in the database.</p> <p>So there's no way to join the Spider-Boy row with some row in the <code>team</code> table:</p> <p></p> <p>Running the same SQL we used above, the resulting table would not include Spider-Boy \ud83d\ude31:</p> idnamename 1DeadpondZ-Force 2Rusty-ManPreventers"},{"location":"tutorial/connect/read-connected-data/#include-everything-on-the-left-outer","title":"Include Everything on the <code>LEFT OUTER</code>","text":"<p>In this case, that we want to include all heroes in the result even if they don't have a team, we can extend that same SQL using a <code>JOIN</code> from above and add a <code>LEFT OUTER</code> right before <code>JOIN</code>:</p> <pre><code>SELECT hero.id, hero.name, team.name\nFROM hero\nLEFT OUTER JOIN team\nON hero.team_id = team.id\n</code></pre> <p>This <code>LEFT OUTER</code> part tells the database that we want to keep everything on the first table, the one on the <code>LEFT</code> in the imaginary space, even if those rows would be left out, so we want it to include the <code>OUTER</code> rows too. In this case, every hero with or without a team.</p> <p>And that would return the following result, including Spider-Boy \ud83c\udf89:</p> idnamename 1DeadpondZ-Force 2Rusty-ManPreventers 3Spider-Boynull <p>Tip</p> <p>The only difference between this query and the previous is that extra <code>LEFT OUTER</code>.</p> <p>And here's another of the SQL variations, you could write <code>LEFT OUTER JOIN</code> or just <code>LEFT JOIN</code>, it means the same.</p>"},{"location":"tutorial/connect/read-connected-data/#join-tables-in-sqlmodel-with-left-outer","title":"Join Tables in SQLModel with <code>LEFT OUTER</code>","text":"<p>Now let's replicate the same query in SQLModel.</p> <p><code>.join()</code> has a parameter we can use <code>isouter=True</code> to make the <code>JOIN</code> be a <code>LEFT OUTER JOIN</code>:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero, Team).join(Team, isouter=True)\n        results = session.exec(statement)\n        for hero, team in results:\n            print(\"Hero:\", hero, \"Team:\", team)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero, Team).join(Team, isouter=True)\n        results = session.exec(statement)\n        for hero, team in results:\n            print(\"Hero:\", hero, \"Team:\", team)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero, Team).join(Team, isouter=True)\n        results = session.exec(statement)\n        for hero, team in results:\n            print(\"Hero:\", hero, \"Team:\", team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero, Team).join(Team, isouter=True)\n        results = session.exec(statement)\n        for hero, team in results:\n            print(\"Hero:\", hero, \"Team:\", team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>And if we run it, it will output:</p> <pre><code>$ python app.py\n\n// Previous output omitted \ud83d\ude09\n\n// SELECT using LEFT OUTER JOIN\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age, hero.team_id, team.id AS id_1, team.name AS name_1, team.headquarters\nFROM hero LEFT OUTER JOIN team ON team.id = hero.team_id\n\nINFO Engine [no key 0.00051s] ()\n\n// Print the first hero and team\nHero: id=1 secret_name='Dive Wilson' team_id=2 name='Deadpond' age=None Team: headquarters='Sister Margaret's Bar' id=2 name='Z-Force'\n// Print the second hero and team\nHero: id=2 secret_name='Tommy Sharp' team_id=1 name='Rusty-Man' age=48 Team: headquarters='Sharp Tower' id=1 name='Preventers'\n// Print the third hero and team, we included Spider-Boy \ud83c\udf89\nHero: id=3 secret_name='Pedro Parqueador' team_id=None name='Spider-Boy' age=None Team: None\n</code></pre>"},{"location":"tutorial/connect/read-connected-data/#what-goes-in-select","title":"What Goes in <code>select()</code>","text":"<p>You might be wondering why we put the <code>Team</code> in the <code>select()</code> and not just in the <code>.join()</code>.</p> <p>And then why we didn't include <code>Hero</code> in the <code>.join()</code>. \ud83e\udd14</p> <p>In SQLModel (actually in SQLAlchemy), all these functions and tools try to replicate how it would be to work with the SQL language.</p> <p>Remember that <code>SELECT</code> defines the columns to get and <code>WHERE</code> how to filter them?.</p> <p>This also applies here, but with <code>JOIN</code> and <code>ON</code>.</p>"},{"location":"tutorial/connect/read-connected-data/#select-only-heroes-but-join-with-teams","title":"Select Only Heroes But Join with Teams","text":"<p>If we only put the <code>Team</code> in the <code>.join()</code> and not in the <code>select()</code> function, we would not get the <code>team</code> data.</p> <p>But we would still be able to filter the rows with it. \ud83e\udd13</p> <p>We could even add some additional <code>.where()</code> after <code>.join()</code> to filter the data more, for example to return only the heroes from one team:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).join(Team).where(Team.name == \"Preventers\")\n        results = session.exec(statement)\n        for hero in results:\n            print(\"Preventer Hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).join(Team).where(Team.name == \"Preventers\")\n        results = session.exec(statement)\n        for hero in results:\n            print(\"Preventer Hero:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).join(Team).where(Team.name == \"Preventers\")\n        results = session.exec(statement)\n        for hero in results:\n            print(\"Preventer Hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).join(Team).where(Team.name == \"Preventers\")\n        results = session.exec(statement)\n        for hero in results:\n            print(\"Preventer Hero:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Here we are filtering with <code>.where()</code> to get only the heroes that belong to the Preventers team.</p> <p>But we are still only requesting the data from the heroes, not their teams.</p> <p>If we run that, it would output:</p> <pre><code>$ python app.py\n\n// Select only the hero data\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age, hero.team_id\n// But still join with the team table\nFROM hero JOIN team ON team.id = hero.team_id\n// And filter with WHERE to get only the Preventers\nWHERE team.name = ?\nINFO Engine [no key 0.00066s] ('Preventers',)\n\n// We filter with the team, but only get the hero\nPreventer Hero: id=2 secret_name='Tommy Sharp' team_id=1 name='Rusty-Man' age=48\n</code></pre>"},{"location":"tutorial/connect/read-connected-data/#include-the-team","title":"Include the <code>Team</code>","text":"<p>By putting the <code>Team</code> in <code>select()</code> we tell SQLModel and the database that we want the team data too.</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero, Team).join(Team).where(Team.name == \"Preventers\")\n        results = session.exec(statement)\n        for hero, team in results:\n            print(\"Preventer Hero:\", hero, \"Team:\", team)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero, Team).join(Team).where(Team.name == \"Preventers\")\n        results = session.exec(statement)\n        for hero, team in results:\n            print(\"Preventer Hero:\", hero, \"Team:\", team)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero, Team).join(Team).where(Team.name == \"Preventers\")\n        results = session.exec(statement)\n        for hero, team in results:\n            print(\"Preventer Hero:\", hero, \"Team:\", team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero, Team).join(Team).where(Team.name == \"Preventers\")\n        results = session.exec(statement)\n        for hero, team in results:\n            print(\"Preventer Hero:\", hero, \"Team:\", team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>And if we run that, it will output:</p> <pre><code>$ python app.py\n\n// Select the hero and the team data\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age, hero.team_id, team.id AS id_1, team.name AS name_1, team.headquarters\n// Join the hero with the team table\nFROM hero JOIN team ON team.id = hero.team_id\n// Filter with WHERE to get only Preventers\nWHERE team.name = ?\nINFO Engine [no key 0.00018s] ('Preventers',)\n\n// Print the hero and the team\nPreventer Hero: id=2 secret_name='Tommy Sharp' team_id=1 name='Rusty-Man' age=48 Team: headquarters='Sharp Tower' id=1 name='Preventers'\n</code></pre> <p>We still have to <code>.join()</code> because otherwise it would just compute all the possible combinations of heroes and teams, for example including Rusty-Man with Preventers and also Rusty-Man with Z-Force, which would be a mistake.</p>"},{"location":"tutorial/connect/read-connected-data/#relationship-attributes","title":"Relationship Attributes","text":"<p>Here we have been using the pure class models directly, but in a future chapter we will also see how to use Relationship Attributes that let us interact with the database in a way much more close to the code with Python objects.</p> <p>And we will also see how to load their data in a different, simpler way, achieving the same we achieved here. \u2728</p>"},{"location":"tutorial/connect/remove-data-connections/","title":"Remove Data Connections","text":"<p>We currently have a <code>team</code> table:</p> idnameheadquarters 1PreventersSharp Tower 2Z-ForceSister Margaret's Bar <p>And a <code>hero</code> table:</p> idnamesecret_nameageteam_id 1DeadpondDive Wilsonnull2 2Rusty-ManTommy Sharp481 3Spider-BoyPedro Parqueadornull1 <p>Let's see how to remove connections between rows in tables.</p> <p>We will continue with the code from the previous chapter.</p> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team_id = team_preventers.id\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team_id = team_preventers.id\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/connect/remove-data-connections/#break-a-connection","title":"Break a Connection","text":"<p>We don't really have to delete anything to break a connection. We can just assign <code>None</code> to the foreign key, in this case, to the <code>team_id</code>.</p> <p>Let's say Spider-Boy is tired of the lack of friendly neighbors and wants to get out of the Preventers.</p> <p>We can simply set the <code>team_id</code> to <code>None</code>, and now it doesn't have a connection with the team:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n\n        # Previous code here omitted \ud83d\udc48\n\n        hero_spider_boy.team_id = None\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"No longer Preventer:\", hero_spider_boy)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n\n        # Previous code here omitted \ud83d\udc48\n\n        hero_spider_boy.team_id = None\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"No longer Preventer:\", hero_spider_boy)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team_id = team_preventers.id\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_spider_boy.team_id = None\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"No longer Preventer:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team_id = team_preventers.id\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_spider_boy.team_id = None\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"No longer Preventer:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Again, we just assign a value to that field attribute <code>team_id</code>, now the value is <code>None</code>, which means <code>NULL</code> in the database. Then we <code>add()</code> the hero to the session, and then <code>commit()</code>.</p> <p>Next we <code>refresh()</code> it to get the recent data, and we print it.</p> <p>Running that in the command line will output:</p> <pre><code>$ python app.py\n\n// Previous output omitted \ud83d\ude09\n\n// Update the hero\nINFO Engine UPDATE hero SET team_id=? WHERE hero.id = ?\nINFO Engine [cached since 0.07753s ago] (None, 3)\n// Commit the session\nINFO Engine COMMIT\n// Automatically start a new transaction\nINFO Engine BEGIN (implicit)\n// Refresh the hero\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age, hero.team_id\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.1661s ago] (3,)\n\n// Print the hero without a team\nNo longer Preventer: id=3 secret_name='Pedro Parqueador' team_id=None name='Spider-Boy' age=None\n</code></pre> <p>That's it, we now removed a connection between rows in different tables by unsetting the foreign key column. \ud83d\udca5</p>"},{"location":"tutorial/connect/update-data-connections/","title":"Update Data Connections","text":"<p>At this point we have a <code>team</code> table:</p> idnameheadquarters 1PreventersSharp Tower 2Z-ForceSister Margaret's Bar <p>And a <code>hero</code> table:</p> idnamesecret_nameageteam_id 1DeadpondDive Wilsonnull2 2Rusty-ManTommy Sharp481 3Spider-BoyPedro Parqueadornullnull <p>Some of these heroes are part of a team.</p> <p>Now we'll see how to update those connections between rows tables.</p> <p>We will continue with the code we used to create some heroes, and we'll update them.</p> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/connect/update-data-connections/#assign-a-team-to-a-hero","title":"Assign a Team to a Hero","text":"<p>Let's say that Tommy Sharp uses his \"rich uncle\" charms to recruit Spider-Boy to join the team of the Preventers, now we need to update our Spider-Boy hero object to connect it to the Preventers team.</p> <p>Doing it is just like updating any other field:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n\n        # Previous code here omitted \ud83d\udc48\n\n        hero_spider_boy.team_id = team_preventers.id\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n\n        # Previous code here omitted \ud83d\udc48\n\n        hero_spider_boy.team_id = team_preventers.id\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team_id = team_preventers.id\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team_id = team_preventers.id\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>We can simply assign a value to that field attribute <code>team_id</code>, then <code>add()</code> the hero to the session, and then <code>commit()</code>.</p> <p>Next we <code>refresh()</code> it to get the recent data, and we print it.</p> <p>Running that in the command line will output:</p> <pre><code>$ python app.py\n\n// Previous output omitted \ud83d\ude09\n\n// Update the hero\nINFO Engine UPDATE hero SET team_id=? WHERE hero.id = ?\nINFO Engine [generated in 0.00014s] (1, 3)\n// Commit the session saving the changes\nINFO Engine COMMIT\n// Automatically start a new transaction\nINFO Engine BEGIN (implicit)\n// Refresh the hero data\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age, hero.team_id\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.08837s ago] (3,)\n\n// Print the updated hero\nUpdated hero: id=3 secret_name='Pedro Parqueador' team_id=1 name='Spider-Boy' age=None\n</code></pre> <p>And now Spider-Boy has the <code>team_id=1</code>, which is the ID of the Preventers. \ud83c\udf89</p> <p>Let's now see how to remove connections in the next chapter. \ud83d\udca5</p>"},{"location":"tutorial/fastapi/","title":"FastAPI and Pydantic - Intro","text":"<p>One of the use cases where SQLModel shines the most, and the main one why it was built, was to be combined with FastAPI. \u2728</p> <p>FastAPI is a Python web framework for building web APIs created by the same author of SQLModel. FastAPI is also built on top of Pydantic.</p> <p>In this group of chapters we will see how to combine SQLModel table models representing tables in the SQL database as all the ones we have seen up to now, with data models that only represent data (which are actually just Pydantic models behind the scenes).</p> <p>Being able to combine SQLModel table models with pure data models would be useful on its own, but to make all the examples more concrete, we will use them with FastAPI.</p> <p>By the end we will have a simple but complete web API to interact with the data in the database. \ud83c\udf89</p>"},{"location":"tutorial/fastapi/#learning-fastapi","title":"Learning FastAPI","text":"<p>If you have never used FastAPI, maybe a good idea would be to go and study it a bit before continuing.</p> <p>Just reading and trying the examples on the FastAPI main page should be enough, and it shouldn't take you more than 10 minutes.</p>"},{"location":"tutorial/fastapi/delete/","title":"Delete Data with FastAPI","text":"<p>Let's now add a path operation to delete a hero.</p> <p>This is quite straightforward. \ud83d\ude01</p>"},{"location":"tutorial/fastapi/delete/#delete-path-operation","title":"Delete Path Operation","text":"<p>Because we want to delete data, we use an HTTP <code>DELETE</code> operation.</p> <p>We get a <code>hero_id</code> from the path parameter and verify if it exists, just as we did when reading a single hero or when updating it, possibly raising an error with a <code>404</code> response.</p> <p>And if we actually find a hero, we just delete it with the session.</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        session.delete(hero)\n        session.commit()\n        return {\"ok\": True}\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        session.delete(hero)\n        session.commit()\n        return {\"ok\": True}\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        session.delete(hero)\n        session.commit()\n        return {\"ok\": True}\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        for key, value in hero_data.items():\n            setattr(db_hero, key, value)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        session.delete(hero)\n        session.commit()\n        return {\"ok\": True}\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        for key, value in hero_data.items():\n            setattr(db_hero, key, value)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        session.delete(hero)\n        session.commit()\n        return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        for key, value in hero_data.items():\n            setattr(db_hero, key, value)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        session.delete(hero)\n        session.commit()\n        return {\"ok\": True}\n</code></pre> <p>After deleting it successfully, we just return a response of:</p> <pre><code>{\n    \"ok\": true\n}\n</code></pre>"},{"location":"tutorial/fastapi/delete/#recap","title":"Recap","text":"<p>That's it, feel free to try it out in the interactive docs UI to delete some heroes. \ud83d\udca5</p> <p>Using FastAPI to read data and combining it with SQLModel makes it quite straightforward to delete data from the database.</p>"},{"location":"tutorial/fastapi/limit-and-offset/","title":"Read Heroes with Limit and Offset with FastAPI","text":"<p>When a client sends a request to get all the heroes, we have been returning them all.</p> <p>But if we had thousands of heroes that could consume a lot of computational resources, network bandwidth, etc.</p> <p>So, we probably want to limit it.</p> <p>Let's use the same offset and limit we learned about in the previous tutorial chapters for the API.</p> <p>Info</p> <p>In many cases, this is also called pagination.</p>"},{"location":"tutorial/fastapi/limit-and-offset/#add-a-limit-and-offset-to-the-query-parameters","title":"Add a Limit and Offset to the Query Parameters","text":"<p>Let's add <code>limit</code> and <code>offset</code> to the query parameters.</p> <p>By default, we will return the first results from the database, so <code>offset</code> will have a default value of <code>0</code>.</p> <p>And by default, we will return a maximum of <code>100</code> heroes, so <code>limit</code> will have a default value of <code>100</code>.</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# Code here omitted \ud83d\udc48\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# Code here omitted \ud83d\udc48\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# Code here omitted \ud83d\udc48\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n</code></pre> <p>We want to allow clients to set different <code>offset</code> and <code>limit</code> values.</p> <p>But we don't want them to be able to set a <code>limit</code> of something like <code>9999</code>, that's over <code>9000</code>! \ud83d\ude31</p> <p>So, to prevent it, we add additional validation to the <code>limit</code> query parameter, declaring that it has to be **l**ess than or **e**qual to <code>100</code> with <code>le=100</code>.</p> <p>This way, a client can decide to take fewer heroes if they want, but not more.</p> <p>Info</p> <p>If you need to refresh how query parameters and their validation work, check out the docs in FastAPI:</p> <ul> <li>Query Parameters</li> <li>Query Parameters and String Validations</li> <li>Path Parameters and Numeric Validations</li> </ul>"},{"location":"tutorial/fastapi/limit-and-offset/#check-the-docs-ui","title":"Check the Docs UI","text":"<p>Now we can see that the docs UI shows the new parameters to control limit and offset of our data.</p> <p></p>"},{"location":"tutorial/fastapi/limit-and-offset/#recap","title":"Recap","text":"<p>You can use FastAPI's automatic data validation to get the parameters for <code>limit</code> and <code>offset</code>, and then use them with the session to control ranges of data to be sent in responses.</p>"},{"location":"tutorial/fastapi/multiple-models/","title":"Multiple Models with FastAPI","text":"<p>We have been using the same <code>Hero</code> model to declare the schema of the data we receive in the API, the table model in the database, and the schema of the data we send back in responses.</p> <p>But in most of the cases, there are slight differences. Let's use multiple models to solve it.</p> <p>Here you will see the main and biggest feature of SQLModel. \ud83d\ude0e</p>"},{"location":"tutorial/fastapi/multiple-models/#review-creation-schema","title":"Review Creation Schema","text":"<p>Let's start by reviewing the automatically generated schemas from the docs UI.</p> <p>For input, we have:</p> <p></p> <p>If we pay attention, it shows that the client could send an <code>id</code> in the JSON body of the request.</p> <p>This means that the client could try to use the same ID that already exists in the database for another hero.</p> <p>That's not what we want.</p> <p>We want the client only to send the data that is needed to create a new hero:</p> <ul> <li><code>name</code></li> <li><code>secret_name</code></li> <li>Optional <code>age</code></li> </ul> <p>And we want the <code>id</code> to be generated automatically by the database, so we don't want the client to send it.</p> <p>We'll see how to fix it in a bit.</p>"},{"location":"tutorial/fastapi/multiple-models/#review-response-schema","title":"Review Response Schema","text":"<p>Now let's review the schema of the response we send back to the client in the docs UI.</p> <p>If you click the small tab Schema instead of the Example Value, you will see something like this:</p> <p></p> <p>Let's see the details.</p> <p>The fields with a red asterisk (*) are \"required\".</p> <p>This means that our API application is required to return those fields in the response:</p> <ul> <li><code>name</code></li> <li><code>secret_name</code></li> </ul> <p>The <code>age</code> is optional, we don't have to return it, or it could be <code>None</code> (or <code>null</code> in JSON), but the <code>name</code> and the <code>secret_name</code> are required.</p> <p>Here's the weird thing, the <code>id</code> currently seems also \"optional\". \ud83e\udd14</p> <p>This is because in our SQLModel class we declare the <code>id</code> with <code>Optional[int]</code>, because it could be <code>None</code> in memory until we save it in the database and we finally get the actual ID.</p> <p>But in the responses, we always send a model from the database, so it always has an ID. So the <code>id</code> in the responses can be declared as required.</p> <p>This means that our application is making the promise to the clients that if it sends a hero, it will for sure have an <code>id</code> with a value, it will not be <code>None</code>.</p>"},{"location":"tutorial/fastapi/multiple-models/#why-is-it-important-to-have-a-contract-for-responses","title":"Why Is it Important to Have a Contract for Responses","text":"<p>The ultimate goal of an API is for some clients to use it.</p> <p>The clients could be a frontend application, a command line program, a graphical user interface, a mobile application, another backend application, etc.</p> <p>And the code those clients write depends on what our API tells them they need to send, and what they can expect to receive.</p> <p>Making both sides very clear will make it much easier to interact with the API.</p> <p>And in most of the cases, the developer of the client for that API will also be yourself, so you are doing your future self a favor by declaring those schemas for requests and responses. \ud83d\ude09</p>"},{"location":"tutorial/fastapi/multiple-models/#so-why-is-it-important-to-have-required-ids","title":"So Why is it Important to Have Required IDs","text":"<p>Now, what's the matter with having one <code>id</code> field marked as \"optional\" in a response when in reality it is always required?</p> <p>For example, automatically generated clients in other languages (or also in Python) would have some declaration that this field <code>id</code> is optional.</p> <p>And then the developers using those clients in their languages would have to be checking all the time in all their code if the <code>id</code> is not <code>None</code> before using it anywhere.</p> <p>That's a lot of unnecessary checks and unnecessary code that could have been saved by declaring the schema properly. \ud83d\ude14</p> <p>It would be a lot simpler for that code to know that the <code>id</code> from a response is required and will always have a value.</p> <p>Let's fix that too. \ud83e\udd13</p>"},{"location":"tutorial/fastapi/multiple-models/#multiple-hero-schemas","title":"Multiple Hero Schemas","text":"<p>So, we want to have our <code>Hero</code> model that declares the data in the database:</p> <ul> <li><code>id</code>, optional on creation, required on database</li> <li><code>name</code>, required</li> <li><code>secret_name</code>, required</li> <li><code>age</code>, optional</li> </ul> <p>But we also want to have a <code>HeroCreate</code> for the data we want to receive when creating a new hero, which is almost all the same data as <code>Hero</code>, except for the <code>id</code>, because that is created automatically by the database:</p> <ul> <li><code>name</code>, required</li> <li><code>secret_name</code>, required</li> <li><code>age</code>, optional</li> </ul> <p>And we want to have a <code>HeroPublic</code> with the <code>id</code> field, but this time annotated with <code>id: int</code>, instead of <code>id: Optional[int]</code>, to make it clear that it is required in responses read from the clients:</p> <ul> <li><code>id</code>, required</li> <li><code>name</code>, required</li> <li><code>secret_name</code>, required</li> <li><code>age</code>, optional</li> </ul>"},{"location":"tutorial/fastapi/multiple-models/#multiple-models-with-duplicated-fields","title":"Multiple Models with Duplicated Fields","text":"<p>The simplest way to solve it could be to create multiple models, each one with all the corresponding fields:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># This would work, but there's a better option below \ud83d\udea8\n\n# Code above omitted \ud83d\udc46\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass HeroCreate(SQLModel):\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nclass HeroPublic(SQLModel):\n    id: int\n    name: str\n    secret_name: str\n    age: int | None = None\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># This would work, but there's a better option below \ud83d\udea8\n\n# Code above omitted \ud83d\udc46\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass HeroCreate(SQLModel):\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nclass HeroPublic(SQLModel):\n    id: int\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># This would work, but there's a better option below \ud83d\udea8\n\n# Code above omitted \ud83d\udc46\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass HeroCreate(SQLModel):\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nclass HeroPublic(SQLModel):\n    id: int\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass HeroCreate(SQLModel):\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nclass HeroPublic(SQLModel):\n    id: int\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass HeroCreate(SQLModel):\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nclass HeroPublic(SQLModel):\n    id: int\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass HeroCreate(SQLModel):\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nclass HeroPublic(SQLModel):\n    id: int\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <p>Here's the important detail, and probably the most important feature of SQLModel: only <code>Hero</code> is declared with <code>table = True</code>.</p> <p>This means that the class <code>Hero</code> represents a table in the database. It is both a Pydantic model and a SQLAlchemy model.</p> <p>But <code>HeroCreate</code> and <code>HeroPublic</code> don't have <code>table = True</code>. They are only data models, they are only Pydantic models. They won't be used with the database, but only to declare data schemas for the API (or for other uses).</p> <p>This also means that <code>SQLModel.metadata.create_all()</code> won't create tables in the database for <code>HeroCreate</code> and <code>HeroPublic</code>, because they don't have <code>table = True</code>, which is exactly what we want. \ud83d\ude80</p> <p>Tip</p> <p>We will improve this code to avoid duplicating the fields, but for now we can continue learning with these models.</p>"},{"location":"tutorial/fastapi/multiple-models/#use-multiple-models-to-create-a-hero","title":"Use Multiple Models to Create a Hero","text":"<p>Let's now see how to use these new models in the FastAPI application.</p> <p>Let's first check how is the process to create a hero now:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass HeroCreate(SQLModel):\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nclass HeroPublic(SQLModel):\n    id: int\n    name: str\n    secret_name: str\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass HeroCreate(SQLModel):\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nclass HeroPublic(SQLModel):\n    id: int\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass HeroCreate(SQLModel):\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nclass HeroPublic(SQLModel):\n    id: int\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <p>Let's check that in detail.</p> <p>Now we use the type annotation <code>HeroCreate</code> for the request JSON data in the <code>hero</code> parameter of the path operation function.</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef create_hero(hero: HeroCreate):\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_hero(hero: HeroCreate):\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_hero(hero: HeroCreate):\n\n# Code below omitted \ud83d\udc47\n</code></pre> <p>Then we create a new <code>Hero</code> (this is the actual table model that saves things to the database) using <code>Hero.model_validate()</code>.</p> <p>The method <code>.model_validate()</code> reads data from another object with attributes (or a dict) and creates a new instance of this class, in this case <code>Hero</code>.</p> <p>In this case, we have a <code>HeroCreate</code> instance in the <code>hero</code> variable. This is an object with attributes, so we use <code>.model_validate()</code> to read those attributes.</p> <p>Tip</p> <p>In versions of SQLModel before <code>0.0.14</code> you would use the method <code>.from_orm()</code>, but it is now deprecated and you should use <code>.model_validate()</code> instead.</p> <p>We can now create a new <code>Hero</code> instance (the one for the database) and put it in the variable <code>db_hero</code> from the data in the <code>hero</code> variable that is the <code>HeroCreate</code> instance we received from the request.</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\n        db_hero = Hero.model_validate(hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\n        db_hero = Hero.model_validate(hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\n        db_hero = Hero.model_validate(hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <p>Then we just <code>add</code> it to the session, <code>commit</code>, and <code>refresh</code> it, and finally, we return the same <code>db_hero</code> variable that has the just refreshed <code>Hero</code> instance.</p> <p>Because it is just refreshed, it has the <code>id</code> field set with a new ID taken from the database.</p> <p>And now that we return it, FastAPI will validate the data with the <code>response_model</code>, which is a <code>HeroPublic</code>:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <p>This will validate that all the data that we promised is there and will remove any data we didn't declare.</p> <p>Tip</p> <p>This filtering could be very important and could be a very good security feature, for example, to make sure you filter private data, hashed passwords, etc.</p> <p>You can read more about it in the FastAPI docs about Response Model.</p> <p>In particular, it will make sure that the <code>id</code> is there and that it is indeed an integer (and not <code>None</code>).</p>"},{"location":"tutorial/fastapi/multiple-models/#shared-fields","title":"Shared Fields","text":"<p>But looking closely, we could see that these models have a lot of duplicated information.</p> <p>All the 3 models declare that they share some common fields that look exactly the same:</p> <ul> <li><code>name</code>, required</li> <li><code>secret_name</code>, required</li> <li><code>age</code>, optional</li> </ul> <p>And then they declare other fields with some differences (in this case, only about the <code>id</code>).</p> <p>We want to avoid duplicated information if possible.</p> <p>This is important if, for example, in the future, we decide to refactor the code and rename one field (column). For example, from <code>secret_name</code> to <code>secret_identity</code>.</p> <p>If we have that duplicated in multiple models, we could easily forget to update one of them. But if we avoid duplication, there's only one place that would need updating. \u2728</p> <p>Let's now improve that. \ud83e\udd13</p>"},{"location":"tutorial/fastapi/multiple-models/#multiple-models-with-inheritance","title":"Multiple Models with Inheritance","text":"<p>And here it is, you found the biggest feature of SQLModel. \ud83d\udc8e</p> <p>Each of these models is only a data model or both a data model and a table model.</p> <p>So, it's possible to create models with SQLModel that don't represent tables in the database.</p> <p>On top of that, we can use inheritance to avoid duplicated information in these models.</p> <p>We can see from above that they all share some base fields:</p> <ul> <li><code>name</code>, required</li> <li><code>secret_name</code>, required</li> <li><code>age</code>, optional</li> </ul> <p>So let's create a base model <code>HeroBase</code> that the others can inherit from:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <p>As you can see, this is not a table model, it doesn't have the <code>table = True</code> config.</p> <p>But now we can create the other models inheriting from it, they will all share these fields, just as if they had them declared.</p>"},{"location":"tutorial/fastapi/multiple-models/#the-hero-table-model","title":"The <code>Hero</code> Table Model","text":"<p>Let's start with the only table model, the <code>Hero</code>:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <p>Notice that <code>Hero</code> now doesn't inherit from <code>SQLModel</code>, but from <code>HeroBase</code>.</p> <p>And now we only declare one single field directly, the <code>id</code>, that here is <code>Optional[int]</code>, and is a <code>primary_key</code>.</p> <p>And even though we don't declare the other fields explicitly, because they are inherited, they are also part of this <code>Hero</code> model.</p> <p>And of course, all these fields will be in the columns for the resulting <code>hero</code> table in the database.</p> <p>And those inherited fields will also be in the autocompletion and inline errors in editors, etc.</p>"},{"location":"tutorial/fastapi/multiple-models/#columns-and-inheritance-with-multiple-models","title":"Columns and Inheritance with Multiple Models","text":"<p>Notice that the parent model <code>HeroBase</code>  is not a table model, but still, we can declare <code>name</code> and <code>age</code> using <code>Field(index=True)</code>.</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <p>This won't affect this parent data model <code>HeroBase</code>.</p> <p>But once the child model <code>Hero</code> (the actual table model) inherits those fields, it will use those field configurations to create the indexes when creating the tables in the database.</p>"},{"location":"tutorial/fastapi/multiple-models/#the-herocreate-data-model","title":"The <code>HeroCreate</code> Data Model","text":"<p>Now let's see the <code>HeroCreate</code> model that will be used to define the data that we want to receive in the API when creating a new hero.</p> <p>This is a fun one:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <p>What's happening here?</p> <p>The fields we need to create are exactly the same as the ones in the <code>HeroBase</code> model. So we don't have to add anything.</p> <p>And because we can't leave the empty space when creating a new class, but we don't want to add any field, we just use <code>pass</code>.</p> <p>This means that there's nothing else special in this class apart from the fact that it is named <code>HeroCreate</code> and that it inherits from <code>HeroBase</code>.</p> <p>As an alternative, we could use <code>HeroBase</code> directly in the API code instead of <code>HeroCreate</code>, but it would show up in the automatic docs UI with that name \"<code>HeroBase</code>\" which could be confusing for clients. Instead, \"<code>HeroCreate</code>\" is a bit more explicit about what it is for.</p> <p>On top of that, we could easily decide in the future that we want to receive more data when creating a new hero apart from the data in <code>HeroBase</code> (for example, a password), and now we already have the class to put those extra fields.</p>"},{"location":"tutorial/fastapi/multiple-models/#the-heropublic-data-model","title":"The <code>HeroPublic</code> Data Model","text":"<p>Now let's check the <code>HeroPublic</code> model.</p> <p>This one just declares that the <code>id</code> field is required when reading a hero from the API, because a hero read from the API will come from the database, and in the database it will always have an ID.</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre>"},{"location":"tutorial/fastapi/multiple-models/#review-the-updated-docs-ui","title":"Review the Updated Docs UI","text":"<p>The FastAPI code is still the same as above, we still use <code>Hero</code>, <code>HeroCreate</code>, and <code>HeroPublic</code>. But now, we define them in a smarter way with inheritance.</p> <p>So, we can jump to the docs UI right away and see how they look with the updated data.</p>"},{"location":"tutorial/fastapi/multiple-models/#docs-ui-to-create-a-hero","title":"Docs UI to Create a Hero","text":"<p>Let's see the new UI for creating a hero:</p> <p></p> <p>Nice! It now shows that to create a hero, we just pass the <code>name</code>, <code>secret_name</code>, and optionally <code>age</code>.</p> <p>We no longer pass an <code>id</code>.</p>"},{"location":"tutorial/fastapi/multiple-models/#docs-ui-with-hero-responses","title":"Docs UI with Hero Responses","text":"<p>Now we can scroll down a bit to see the response schema:</p> <p></p> <p>We can now see that <code>id</code> is a required field, it has a red asterisk (*).</p> <p>And if we check the schema for the Read Heroes path operation it will also show the updated schema.</p>"},{"location":"tutorial/fastapi/multiple-models/#inheritance-and-table-models","title":"Inheritance and Table Models","text":"<p>We just saw how powerful the inheritance of these models could be.</p> <p>This is a very simple example, and it might look a bit... meh. \ud83d\ude05</p> <p>But now imagine that your table has 10 or 20 columns. And that you have to duplicate all that information for all your data models... then it becomes more obvious why it's quite useful to be able to avoid all that information duplication with inheritance.</p> <p>Now, this probably looks so flexible that it's not obvious when to use inheritance and for what.</p> <p>Here are a couple of rules of thumb that can help you.</p>"},{"location":"tutorial/fastapi/multiple-models/#only-inherit-from-data-models","title":"Only Inherit from Data Models","text":"<p>Only inherit from data models, don't inherit from table models.</p> <p>It will help you avoid confusion, and there won't be any reason for you to need to inherit from a table model.</p> <p>If you feel like you need to inherit from a table model, then instead create a base class that is only a data model and has all those fields, like <code>HeroBase</code>.</p> <p>And then inherit from that base class that is only a data model for any other data model and for the table model.</p>"},{"location":"tutorial/fastapi/multiple-models/#avoid-duplication-keep-it-simple","title":"Avoid Duplication - Keep it Simple","text":"<p>It could feel like you need to have a profound reason why to inherit from one model or another, because \"in some mystical way\" they separate different concepts... or something like that.</p> <p>In some cases, there are simple separations that you can use, like the models to create data, read, update, etc. If that's quick and obvious, nice, use it. \ud83d\udcaf</p> <p>Otherwise, don't worry too much about profound conceptual reasons to separate models, just try to avoid duplication and keep the code simple enough to reason about it.</p> <p>If you see you have a lot of overlap between two models, then you can probably avoid some of that duplication with a base model.</p> <p>But if to avoid some duplication you end up with a crazy tree of models with inheritance, then it might be simpler to just duplicate some of those fields, and that might be easier to reason about and to maintain.</p> <p>Do whatever is easier to reason about, to program with, to maintain, and to refactor in the future. \ud83e\udd13</p> <p>Remember that inheritance, the same as SQLModel, and anything else, are just tools to help you be more productive, that's one of their main objectives. If something is not helping with that (e.g. too much duplication, too much complexity), then change it. \ud83d\ude80</p>"},{"location":"tutorial/fastapi/multiple-models/#recap","title":"Recap","text":"<p>You can use SQLModel to declare multiple models:</p> <ul> <li>Some models can be only data models. They will also be Pydantic models.</li> <li>And some can also be table models (apart from already being data models) by having the config <code>table = True</code>. They will also be Pydantic models and SQLAlchemy models.</li> </ul> <p>Only the table models will create tables in the database.</p> <p>So, you can use all the other data models to validate, convert, filter, and document the schema of the data for your application. \u2728</p> <p>You can use inheritance to avoid information and code duplication. \ud83d\ude0e</p> <p>And you can use all these models directly with FastAPI. \ud83d\ude80</p>"},{"location":"tutorial/fastapi/read-one/","title":"Read One Model with FastAPI","text":"<p>Let's now add a path operation to read a single model to our FastAPI application.</p>"},{"location":"tutorial/fastapi/read-one/#path-operation-for-one-hero","title":"Path Operation for One Hero","text":"<p>Let's add a new path operation to read one single hero.</p> <p>We want to get the hero based on the <code>id</code>, so we will use a path parameter <code>hero_id</code>.</p> <p>Info</p> <p>If you need to refresh how path parameters work, including their data validation, check the FastAPI docs about Path Parameters.</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI, HTTPException\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# Code here omitted \ud83d\udc48\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI, HTTPException\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# Code here omitted \ud83d\udc48\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI, HTTPException\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# Code here omitted \ud83d\udc48\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI, HTTPException\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI, HTTPException\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI, HTTPException\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n</code></pre> <p>For example, to get the hero with ID <code>2</code> we would send a <code>GET</code> request to:</p> <pre><code>/heroes/2\n</code></pre>"},{"location":"tutorial/fastapi/read-one/#handling-errors","title":"Handling Errors","text":"<p>Then, because FastAPI already takes care of making sure that the <code>hero_id</code> is an actual integer, we can use it directly with <code>Hero.get()</code> to try and get one hero by that ID.</p> <p>But if the integer is not the ID of any hero in the database, it will not find anything, and the variable <code>hero</code> will be <code>None</code>.</p> <p>So, we check it in an <code>if</code> block, if it's <code>None</code>, we raise an <code>HTTPException</code> with a <code>404</code> status code.</p> <p>And to use it, we first import <code>HTTPException</code> from <code>fastapi</code>.</p> <p>This will let the client know that they probably made a mistake on their side and requested a hero that doesn't exist in the database.</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI, HTTPException\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# Code here omitted \ud83d\udc48\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI, HTTPException\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# Code here omitted \ud83d\udc48\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI, HTTPException\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# Code here omitted \ud83d\udc48\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI, HTTPException\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI, HTTPException\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI, HTTPException\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n</code></pre>"},{"location":"tutorial/fastapi/read-one/#return-the-hero","title":"Return the Hero","text":"<p>Then, if the hero exists, we return it.</p> <p>And because we are using the <code>response_model</code> with <code>HeroPublic</code>, it will be validated, documented, etc.</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI, HTTPException\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# Code here omitted \ud83d\udc48\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI, HTTPException\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# Code here omitted \ud83d\udc48\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI, HTTPException\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# Code here omitted \ud83d\udc48\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI, HTTPException\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI, HTTPException\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI, HTTPException\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n</code></pre>"},{"location":"tutorial/fastapi/read-one/#check-the-docs-ui","title":"Check the Docs UI","text":"<p>We can then go to the docs UI and see the new path operation.</p> <p></p>"},{"location":"tutorial/fastapi/read-one/#recap","title":"Recap","text":"<p>You can combine FastAPI features like automatic path parameter validation to get models by ID.</p>"},{"location":"tutorial/fastapi/relationships/","title":"Models with Relationships in FastAPI","text":"<p>If we go right now and read a single hero by ID, we get the hero data with the team ID.</p> <p>But we don't get any data about the particular team:</p> <p></p> <p>We get a response of:</p> <pre><code>{\n    \"name\": \"Deadpond\",\n    \"secret_name\": \"Dive Wilson\",\n    \"age\": null,\n    \"team_id\": 1,\n    \"id\": 1,\n}\n</code></pre> <p>And the same way, if we get a team by ID, we get the team data, but we don't get any information about this team's heroes:</p> <p></p> <p>Here we get a response of:</p> <pre><code>{\n    \"name\": \"Preventers\",\n    \"headquarters\": \"Sharp Tower\",\n    \"id\": 2\n}\n</code></pre> <p>...but no information about the heroes.</p> <p>Let's update that. \ud83e\udd13</p>"},{"location":"tutorial/fastapi/relationships/#why-arent-we-getting-more-data","title":"Why Aren't We Getting More Data","text":"<p>First, why is it that we are not getting the related data for each hero and for each team?</p> <p>It's because we declared the <code>HeroPublic</code> with only the same base fields of the <code>HeroBase</code> plus the <code>id</code>. But it doesn't include a field <code>team</code> for the relationship attribute.</p> <p>And the same way, we declared the <code>TeamPublic</code> with only the same base fields of the <code>TeamBase</code> plus the <code>id</code>. But it doesn't include a field <code>heroes</code> for the relationship attribute.</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n# Code here omitted \ud83d\udc48\n\nclass TeamPublic(TeamBase):\n    id: int\n\n# Code here omitted \ud83d\udc48\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n# Code here omitted \ud83d\udc48\n\nclass HeroPublic(HeroBase):\n    id: int\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n# Code here omitted \ud83d\udc48\n\nclass TeamPublic(TeamBase):\n    id: int\n\n# Code here omitted \ud83d\udc48\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n# Code here omitted \ud83d\udc48\n\nclass HeroPublic(HeroBase):\n    id: int\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n# Code here omitted \ud83d\udc48\n\nclass TeamPublic(TeamBase):\n    id: int\n\n# Code here omitted \ud83d\udc48\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n# Code here omitted \ud83d\udc48\n\nclass HeroPublic(HeroBase):\n    id: int\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: str | None = None\n    headquarters: str | None = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n    team_id: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=list[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: Optional[str] = None\n    headquarters: Optional[str] = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    team_id: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=list[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: Optional[str] = None\n    headquarters: Optional[str] = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    team_id: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=List[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Now, remember that FastAPI uses the <code>response_model</code> to validate and filter the response data?</p> <p>In this case, we used <code>response_model=TeamPublic</code> and <code>response_model=HeroPublic</code>, so FastAPI will use them to filter the response data, even if we return a table model that includes relationship attributes:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n# Code here omitted \ud83d\udc48\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n# Code here omitted \ud83d\udc48\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n# Code here omitted \ud83d\udc48\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: str | None = None\n    headquarters: str | None = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n    team_id: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=list[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: Optional[str] = None\n    headquarters: Optional[str] = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    team_id: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=list[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: Optional[str] = None\n    headquarters: Optional[str] = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    team_id: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=List[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/fastapi/relationships/#dont-include-all-the-data","title":"Don't Include All the Data","text":"<p>Now let's stop for a second and think about it.</p> <p>We cannot simply include all the data, including all the internal relationships, because each hero has an attribute <code>team</code> with their team, and then that team also has an attribute <code>heroes</code> with all the heroes in the team, including this one.</p> <p>If we tried to include everything, we could make the server application crash trying to extract infinite data, going through the same hero and team over and over again internally, something like this:</p> <pre><code>{\n    \"name\": \"Rusty-Man\",\n    \"secret_name\": \"Tommy Sharp\",\n    \"age\": 48,\n    \"team_id\": 1,\n    \"id\": 1,\n    \"team\": {\n        \"name\": \"Preventers\",\n        \"headquarters\": \"Sharp Tower\",\n        \"id\": 2,\n        \"heroes\": [\n            {\n                \"name\": \"Rusty-Man\",\n                \"secret_name\": \"Tommy Sharp\",\n                \"age\": 48,\n                \"team_id\": 1,\n                \"id\": 1,\n                \"team\": {\n                    \"name\": \"Preventers\",\n                    \"headquarters\": \"Sharp Tower\",\n                    \"id\": 2,\n                    \"heroes\": [\n                        {\n                            \"name\": \"Rusty-Man\",\n                            \"secret_name\": \"Tommy Sharp\",\n                            \"age\": 48,\n                            \"team_id\": 1,\n                            \"id\": 1,\n                            \"team\": {\n                                \"name\": \"Preventers\",\n                                \"headquarters\": \"Sharp Tower\",\n                                \"id\": 2,\n                                \"heroes\": [\n                                    ...with infinite data here... \ud83d\ude31\n                                ]\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}\n</code></pre> <p>As you can see, in this example, we would get the hero Rusty-Man, and from this hero we would get the team Preventers, and then from this team we would get its heroes, of course, including Rusty-Man... \ud83d\ude31</p> <p>So we start again, and in the end, the server would just crash trying to get all the data with a <code>\"Maximum recursion error\"</code>, we would not even get a response like the one above.</p> <p>So, we need to carefully choose in which cases we want to include data and in which not.</p>"},{"location":"tutorial/fastapi/relationships/#what-data-to-include","title":"What Data to Include","text":"<p>This is a decision that will depend on each application.</p> <p>In our case, let's say that if we get a list of heroes, we don't want to also include each of their teams in each one.</p> <p>And if we get a list of teams, we don't want to get a list of the heroes for each one.</p> <p>But if we get a single hero, we want to include the team data (without the team's heroes).</p> <p>And if we get a single team, we want to include the list of heroes (without each hero's team).</p> <p>Let's add a couple more data models that declare that data so we can use them in those two specific path operations.</p>"},{"location":"tutorial/fastapi/relationships/#models-with-relationships","title":"Models with Relationships","text":"<p>Let's add the models <code>HeroPublicWithTeam</code> and <code>TeamPublicWithHeroes</code>.</p> <p>We'll add them after the other models so that we can easily reference the previous models.</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroPublicWithTeam(HeroPublic):\n    team: TeamPublic | None = None\n\n\nclass TeamPublicWithHeroes(TeamPublic):\n    heroes: list[HeroPublic] = []\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroPublicWithTeam(HeroPublic):\n    team: Optional[TeamPublic] = None\n\n\nclass TeamPublicWithHeroes(TeamPublic):\n    heroes: list[HeroPublic] = []\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroPublicWithTeam(HeroPublic):\n    team: Optional[TeamPublic] = None\n\n\nclass TeamPublicWithHeroes(TeamPublic):\n    heroes: List[HeroPublic] = []\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    id: int | None = None\n    name: str | None = None\n    headquarters: str | None = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n    team_id: int | None = None\n\n\nclass HeroPublicWithTeam(HeroPublic):\n    team: TeamPublic | None = None\n\n\nclass TeamPublicWithHeroes(TeamPublic):\n    heroes: list[HeroPublic] = []\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublicWithTeam)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=list[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublicWithHeroes)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    id: Optional[int] = None\n    name: Optional[str] = None\n    headquarters: Optional[str] = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    team_id: Optional[int] = None\n\n\nclass HeroPublicWithTeam(HeroPublic):\n    team: Optional[TeamPublic] = None\n\n\nclass TeamPublicWithHeroes(TeamPublic):\n    heroes: list[HeroPublic] = []\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublicWithTeam)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=list[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublicWithHeroes)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    id: Optional[int] = None\n    name: Optional[str] = None\n    headquarters: Optional[str] = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    team_id: Optional[int] = None\n\n\nclass HeroPublicWithTeam(HeroPublic):\n    team: Optional[TeamPublic] = None\n\n\nclass TeamPublicWithHeroes(TeamPublic):\n    heroes: List[HeroPublic] = []\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublicWithTeam)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=List[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublicWithHeroes)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>These two models are very simple in code, but there's a lot happening here. Let's check it out.</p>"},{"location":"tutorial/fastapi/relationships/#inheritance-and-type-annotations","title":"Inheritance and Type Annotations","text":"<p>The <code>HeroPublicWithTeam</code> inherits from <code>HeroPublic</code>, which means that it will have the normal fields for reading, including the required <code>id</code> that was declared in <code>HeroPublic</code>.</p> <p>And then it adds the new field <code>team</code>, which could be <code>None</code>, and is declared with the type <code>TeamPublic</code> with the base fields for reading a team.</p> <p>Then we do the same for the <code>TeamPublicWithHeroes</code>, it inherits from <code>TeamPublic</code>, and declares the new field <code>heroes</code>, which is a list of <code>HeroPublic</code>.</p>"},{"location":"tutorial/fastapi/relationships/#data-models-without-relationship-attributes","title":"Data Models Without Relationship Attributes","text":"<p>Now, notice that these new fields <code>team</code> and <code>heroes</code> are not declared with <code>Relationship()</code>, because these are not table models, they cannot have relationship attributes with the magic access to get that data from the database.</p> <p>Instead, here these are only data models that will tell FastAPI which attributes to get data from and which data to get from them.</p>"},{"location":"tutorial/fastapi/relationships/#reference-to-other-models","title":"Reference to Other Models","text":"<p>Also, notice that the field <code>team</code> is not declared with this new <code>TeamPublicWithHeroes</code>, because that would again create that infinite recursion of data. Instead, we declare it with the normal <code>TeamPublic</code> model.</p> <p>And the same for <code>TeamPublicWithHeroes</code>, the model used for the new field <code>heroes</code> uses <code>HeroPublic</code> to get only each hero's data.</p> <p>This also means that, even though we have these two new models, we still need the previous ones, <code>HeroPublic</code> and <code>TeamPublic</code>, because we need to reference them here (and we are also using them in the rest of the path operations).</p>"},{"location":"tutorial/fastapi/relationships/#update-the-path-operations","title":"Update the Path Operations","text":"<p>Now we can update the path operations to use the new models.</p> <p>This will tell FastAPI to take the object that we return from the path operation function (a table model) and access the additional attributes from them to extract their data.</p> <p>In the case of the hero, this tells FastAPI to extract the <code>team</code> too. And in the case of the team, to extract the list of <code>heroes</code> too.</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublicWithTeam)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n# Code here omitted \ud83d\udc48\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublicWithHeroes)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublicWithTeam)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n# Code here omitted \ud83d\udc48\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublicWithHeroes)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublicWithTeam)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n# Code here omitted \ud83d\udc48\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublicWithHeroes)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    id: int | None = None\n    name: str | None = None\n    headquarters: str | None = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n    team_id: int | None = None\n\n\nclass HeroPublicWithTeam(HeroPublic):\n    team: TeamPublic | None = None\n\n\nclass TeamPublicWithHeroes(TeamPublic):\n    heroes: list[HeroPublic] = []\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublicWithTeam)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=list[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublicWithHeroes)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    id: Optional[int] = None\n    name: Optional[str] = None\n    headquarters: Optional[str] = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    team_id: Optional[int] = None\n\n\nclass HeroPublicWithTeam(HeroPublic):\n    team: Optional[TeamPublic] = None\n\n\nclass TeamPublicWithHeroes(TeamPublic):\n    heroes: list[HeroPublic] = []\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublicWithTeam)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=list[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublicWithHeroes)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    id: Optional[int] = None\n    name: Optional[str] = None\n    headquarters: Optional[str] = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    team_id: Optional[int] = None\n\n\nclass HeroPublicWithTeam(HeroPublic):\n    team: Optional[TeamPublic] = None\n\n\nclass TeamPublicWithHeroes(TeamPublic):\n    heroes: List[HeroPublic] = []\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublicWithTeam)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=List[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublicWithHeroes)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/fastapi/relationships/#check-it-out-in-the-docs-ui","title":"Check It Out in the Docs UI","text":"<p>Now let's try it out again in the docs UI.</p> <p>Let's try again with the same hero with ID <code>1</code>:</p> <p></p> <p>Now we get the team data included:</p> <pre><code>{\n    \"name\": \"Deadpond\",\n    \"secret_name\": \"Dive Wilson\",\n    \"age\": null,\n    \"team_id\": 1,\n    \"id\": 1,\n    \"team\": {\n        \"name\": \"Z-Force\",\n        \"headquarters\": \"Sister Margaret's Bar\",\n        \"id\": 1\n    }\n}\n</code></pre> <p>And if we get now the team with ID <code>2</code>:</p> <p></p> <p>Now we get the list of heroes included:</p> <pre><code>{\n    \"name\": \"Preventers\",\n    \"headquarters\": \"Sharp Tower\",\n    \"id\": 2,\n    \"heroes\": [\n        {\n            \"name\": \"Rusty-Man\",\n            \"secret_name\": \"Tommy Sharp\",\n            \"age\": 48,\n            \"team_id\": 2,\n            \"id\": 2\n        },\n        {\n            \"name\": \"Spider-Boy\",\n            \"secret_name\": \"Pedro Parqueador\",\n            \"age\": null,\n            \"team_id\": 2,\n            \"id\": 3\n        },\n        {\n            \"name\": \"Tarantula\",\n            \"secret_name\": \"Natalia Roman-on\",\n            \"age\": 32,\n            \"team_id\": 2,\n            \"id\": 6\n        },\n        {\n            \"name\": \"Dr. Weird\",\n            \"secret_name\": \"Steve Weird\",\n            \"age\": 36,\n            \"team_id\": 2,\n            \"id\": 7\n        },\n        {\n            \"name\": \"Captain North America\",\n            \"secret_name\": \"Esteban Rogelios\",\n            \"age\": 93,\n            \"team_id\": 2,\n            \"id\": 8\n        }\n    ]\n}\n</code></pre>"},{"location":"tutorial/fastapi/relationships/#recap","title":"Recap","text":"<p>Using the same techniques to declare additional data models, we can tell FastAPI what data to return in the responses, even when we return table models.</p> <p>Here we almost didn't have to change the FastAPI app code, but of course, there will be cases where you need to get the data and process it in different ways in the path operation function before returning it.</p> <p>But even in those cases, you will be able to define the data models to use in <code>response_model</code> to tell FastAPI how to validate and filter the data.</p> <p>By this point, you already have a very robust API to handle data in a SQL database combining SQLModel with FastAPI, and implementing best practices, like data validation, conversion, filtering, and documentation. \u2728</p> <p>In the next chapter, I'll tell you how to implement automated testing for your application using FastAPI and SQLModel. \u2705</p>"},{"location":"tutorial/fastapi/response-model/","title":"FastAPI Response Model with SQLModel","text":"<p>Now I'll show you how to use FastAPI's <code>response_model</code> with SQLModel.</p>"},{"location":"tutorial/fastapi/response-model/#interactive-api-docs","title":"Interactive API Docs","text":"<p>Up to now, with the code we have used, the API docs know the data the clients have to send:</p> <p></p> <p>This interactive docs UI is powered by Swagger UI, and what Swagger UI does is to read a big JSON content that defines the API with all the data schemas (data shapes) using the standard OpenAPI, and showing it in that nice UI.</p> <p>FastAPI automatically generates that OpenAPI for Swagger UI to read it.</p> <p>And it generates it based on the code you write, using the Pydantic models (in this case SQLModel models) and type annotations to know the schemas of the data that the API handles.</p>"},{"location":"tutorial/fastapi/response-model/#response-data","title":"Response Data","text":"<p>But up to now, the API docs UI doesn't know the schema of the responses our app sends back.</p> <p>You can see that there's a possible \"Successful Response\" with a code <code>200</code>, but we have no idea how the response data would look like.</p> <p></p> <p>Right now, we only tell FastAPI the data we want to receive, but we don't tell it yet the data we want to send back.</p> <p>Let's do that now. \ud83e\udd13</p>"},{"location":"tutorial/fastapi/response-model/#use-response_model","title":"Use <code>response_model</code>","text":"<p>We can use <code>response_model</code> to tell FastAPI the schema of the data we want to send back.</p> <p>For example, we can pass the same <code>Hero</code> SQLModel class (because it is also a Pydantic model):</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.post(\"/heroes/\", response_model=Hero)\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\n@app.post(\"/heroes/\", response_model=Hero)\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\n@app.post(\"/heroes/\", response_model=Hero)\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=Hero)\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n\n@app.get(\"/heroes/\", response_model=list[Hero])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=Hero)\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n\n@app.get(\"/heroes/\", response_model=list[Hero])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=Hero)\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n\n@app.get(\"/heroes/\", response_model=List[Hero])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre>"},{"location":"tutorial/fastapi/response-model/#list-of-heroes-in-response_model","title":"List of Heroes in <code>response_model</code>","text":"<p>We can also use other type annotations, the same way we can use with Pydantic fields. For example, we can pass a list of <code>Hero</code>s.</p> <p>First, we import <code>List</code> from <code>typing</code> and then we declare the <code>response_model</code> with <code>List[Hero]</code>:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code here omitted \ud83d\udc48\n\n@app.get(\"/heroes/\", response_model=list[Hero])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code here omitted \ud83d\udc48\n\n@app.get(\"/heroes/\", response_model=list[Hero])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import List, Optional\n\n# Code here omitted \ud83d\udc48\n\n@app.get(\"/heroes/\", response_model=List[Hero])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=Hero)\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n\n@app.get(\"/heroes/\", response_model=list[Hero])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=Hero)\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n\n@app.get(\"/heroes/\", response_model=list[Hero])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=Hero)\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n\n@app.get(\"/heroes/\", response_model=List[Hero])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre>"},{"location":"tutorial/fastapi/response-model/#fastapi-and-response-model","title":"FastAPI and Response Model","text":"<p>FastAPI will do data validation and filtering of the response with this <code>response_model</code>.</p> <p>So this works like a contract between our application and the client.</p> <p>You can read more about it in the FastAPI docs about <code>response_model</code>.</p>"},{"location":"tutorial/fastapi/response-model/#new-api-docs-ui","title":"New API Docs UI","text":"<p>Now we can go back to the docs UI and see that they now show the schema of the response we will receive.</p> <p></p> <p>The clients will know what data they should expect.</p>"},{"location":"tutorial/fastapi/response-model/#automatic-clients","title":"Automatic Clients","text":"<p>The most visible advantage of using the <code>response_model</code> is that it shows up in the API docs UI.</p> <p>But there are other advantages, like that FastAPI will do automatic data validation and filtering of the response data using this model.</p> <p>Additionally, because the schemas are defined in using a standard, there are many tools that can take advantage of this.</p> <p>For example, client generators, that can automatically create the code necessary to talk to your API in many languages.</p> <p>Info</p> <p>If you are curious about the standards, FastAPI generates OpenAPI, that internally uses JSON Schema.</p> <p>You can read about all that in the FastAPI docs - First Steps.</p>"},{"location":"tutorial/fastapi/response-model/#recap","title":"Recap","text":"<p>Use the <code>response_model</code> to tell FastAPI the schema of the data you want to send back and have awesome data APIs. \ud83d\ude0e</p>"},{"location":"tutorial/fastapi/session-with-dependency/","title":"Session with FastAPI Dependency","text":"<p>Before we keep adding things, let's change a bit how we get the session for each request to simplify our life later.</p>"},{"location":"tutorial/fastapi/session-with-dependency/#current-sessions","title":"Current Sessions","text":"<p>Up to now, we have been creating a session in each path operation, in a <code>with</code> block.</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        for key, value in hero_data.items():\n            setattr(db_hero, key, value)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        session.delete(hero)\n        session.commit()\n        return {\"ok\": True}\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        for key, value in hero_data.items():\n            setattr(db_hero, key, value)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        session.delete(hero)\n        session.commit()\n        return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        for key, value in hero_data.items():\n            setattr(db_hero, key, value)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        session.delete(hero)\n        session.commit()\n        return {\"ok\": True}\n</code></pre> <p>That's perfectly fine, but in many use cases we would want to use FastAPI Dependencies, for example to verify that the client is logged in and get the current user before executing any other code in the path operation.</p> <p>These dependencies are also very useful during testing, because we can easily replace them, and then, for example, use a new database for our tests, or put some data before the tests, etc.</p> <p>So, let's refactor these sessions to use FastAPI Dependencies.</p>"},{"location":"tutorial/fastapi/session-with-dependency/#create-a-fastapi-dependency","title":"Create a FastAPI Dependency","text":"<p>A FastAPI dependency is very simple, it's just a function that returns a value.</p> <p>It could use <code>yield</code> instead of <code>return</code>, and in that case FastAPI will make sure it executes all the code after the <code>yield</code>, once it is done with the request.</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/fastapi/session-with-dependency/#use-the-dependency","title":"Use the Dependency","text":"<p>Now let's make FastAPI execute a dependency and get its value in the path operation.</p> <p>We import <code>Depends()</code> from <code>fastapi</code>. Then we use it in the path operation function in a parameter, the same way we declared parameters to get JSON bodies, path parameters, etc.</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# Code here omitted \ud83d\udc48\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n# Code here omitted \ud83d\udc48\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# Code here omitted \ud83d\udc48\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n# Code here omitted \ud83d\udc48\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# Code here omitted \ud83d\udc48\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n# Code here omitted \ud83d\udc48\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Here's a tip about that <code>*,</code> thing in the parameters.</p> <p>Here we are passing the parameter <code>session</code> that has a \"default value\" of <code>Depends(get_session)</code> before the parameter <code>hero</code>, that doesn't have any default value.</p> <p>Python would normally complain about that, but we can use the initial \"parameter\" <code>*,</code> to mark all the rest of the parameters as \"keyword only\", which solves the problem.</p> <p>You can read more about it in the FastAPI documentation Path Parameters and Numeric Validations - Order the parameters as you need, tricks</p> <p>The value of a dependency will only be used for one request, FastAPI will call it right before calling your code and will give you the value from that dependency.</p> <p>If it had <code>yield</code>, then it will continue the rest of the execution once you are done sending the response. In the case of the session, it will finish the cleanup code from the <code>with</code> block, closing the session, etc.</p> <p>Then FastAPI will call it again for the next request.</p> <p>Because it is called once per request, we will still get a single session per request as we should, so we are still fine with that. \u2705</p> <p>And because dependencies can use <code>yield</code>, FastAPI will make sure to run the code after the <code>yield</code> once it is done, including all the cleanup code at the end of the <code>with</code> block. So we are also fine with that. \u2705</p>"},{"location":"tutorial/fastapi/session-with-dependency/#the-with-block","title":"The <code>with</code> Block","text":"<p>This means that in the main code of the path operation function, it will work equivalently to the previous version with the explicit <code>with</code> block.</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# Code here omitted \ud83d\udc48\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n# Code here omitted \ud83d\udc48\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# Code here omitted \ud83d\udc48\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n# Code here omitted \ud83d\udc48\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# Code here omitted \ud83d\udc48\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n# Code here omitted \ud83d\udc48\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>In fact, you could think that all that block of code inside of the <code>create_hero()</code> function is still inside a <code>with</code> block for the session, because this is more or less what's happening behind the scenes.</p> <p>But now, the <code>with</code> block is not explicitly in the function, but in the dependency above:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# Code here omitted \ud83d\udc48\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n# Code here omitted \ud83d\udc48\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# Code here omitted \ud83d\udc48\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n# Code here omitted \ud83d\udc48\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# Code here omitted \ud83d\udc48\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n# Code here omitted \ud83d\udc48\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>We will see how this is very useful when testing the code later. \u2705</p>"},{"location":"tutorial/fastapi/session-with-dependency/#update-the-path-operations-to-use-the-dependency","title":"Update the Path Operations to Use the Dependency","text":"<p>Now we can update the rest of the path operations to use the new dependency.</p> <p>We just declare the dependency in the parameters of the function, with:</p> <pre><code>session: Session = Depends(get_session)\n</code></pre> <p>And then we remove the previous <code>with</code> block with the old session.</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# Code here omitted \ud83d\udc48\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n# Code here omitted \ud83d\udc48\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# Code here omitted \ud83d\udc48\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n# Code here omitted \ud83d\udc48\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# Code here omitted \ud83d\udc48\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n# Code here omitted \ud83d\udc48\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/fastapi/session-with-dependency/#recap","title":"Recap","text":"<p>You just learned how to use FastAPI dependencies to handle the database session. This will come in handy later when testing the code.</p> <p>And you will see how much these dependencies can help the more you work with FastAPI, to handle permissions, authentication, resources like database sessions, etc. \ud83d\ude80</p> <p>If you want to learn more about dependencies, checkout the FastAPI docs about Dependencies.</p>"},{"location":"tutorial/fastapi/simple-hero-api/","title":"Simple Hero API with FastAPI","text":"<p>Let's start by building a simple hero web API with FastAPI. \u2728</p>"},{"location":"tutorial/fastapi/simple-hero-api/#install-fastapi","title":"Install FastAPI","text":"<p>The first step is to install FastAPI.</p> <p>FastAPI is the framework to create the web API.</p> <p>But we also need another type of program to run it, it is called a \"server\". We will use Uvicorn for that. And we will install Uvicorn with its standard dependencies.</p> <p>Then install FastAPI.</p> <p>Make sure you create a virtual environment, activate it, and then install them, for example with:</p> <pre><code>$ pip install fastapi \"uvicorn[standard]\"\n\n---&gt; 100%\n</code></pre>"},{"location":"tutorial/fastapi/simple-hero-api/#sqlmodel-code-models-engine","title":"SQLModel Code - Models, Engine","text":"<p>Now let's start with the SQLModel code.</p> <p>We will start with the simplest version, with just heroes (no teams yet).</p> <p>This is almost the same code we have seen up to now in previous examples:</p> Python 3.10+Python 3.7+ <pre><code># One line of FastAPI imports here later \ud83d\udc48\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\n# One line of FastAPI imports here later \ud83d\udc48\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <p>There's only one change here from the code we have used before, the <code>check_same_thread</code> in the <code>connect_args</code>.</p> <p>That is a configuration that SQLAlchemy passes to the low-level library in charge of communicating with the database.</p> <p><code>check_same_thread</code> is by default set to <code>True</code>, to prevent misuses in some simple cases.</p> <p>But here we will make sure we don't share the same session in more than one request, and that's the actual safest way to prevent any of the problems that configuration is there for.</p> <p>And we also need to disable it because in FastAPI each request could be handled by multiple interacting threads.</p> <p>Info</p> <p>That's enough information for now, you can read more about it in the FastAPI docs for <code>async</code> and <code>await</code>.</p> <p>The main point is, by ensuring you don't share the same session with more than one request, the code is already safe.</p>"},{"location":"tutorial/fastapi/simple-hero-api/#fastapi-app","title":"FastAPI App","text":"<p>The next step is to create the FastAPI app.</p> <p>We will import the <code>FastAPI</code> class from <code>fastapi</code>.</p> <p>And then create an <code>app</code> object that is an instance of that <code>FastAPI</code> class:</p> Python 3.10+Python 3.7+ <pre><code>from fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# SQLModel code here omitted \ud83d\udc48\n\napp = FastAPI()\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n# SQLModel code here omitted \ud83d\udc48\n\napp = FastAPI()\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre>"},{"location":"tutorial/fastapi/simple-hero-api/#create-database-and-tables-on-startup","title":"Create Database and Tables on <code>startup</code>","text":"<p>We want to make sure that once the app starts running, the function <code>create_tables</code> is called. To create the database and tables.</p> <p>This should be called only once at startup, not before every request, so we put it in the function to handle the <code>\"startup\"</code> event:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre>"},{"location":"tutorial/fastapi/simple-hero-api/#create-heroes-path-operation","title":"Create Heroes Path Operation","text":"<p>Info</p> <p>If you need a refresher on what a Path Operation is (an endpoint with a specific HTTP Operation) and how to work with it in FastAPI, check out the FastAPI First Steps docs.</p> <p>Let's create the path operation code to create a new hero.</p> <p>It will be called when a user sends a request with a <code>POST</code> operation to the <code>/heroes/</code> path:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <p>Info</p> <p>If you need a refresher on some of those concepts, checkout the FastAPI documentation:</p> <ul> <li>First Steps</li> <li>Path Parameters - Data Validation and Data Conversion</li> <li>Request Body</li> </ul>"},{"location":"tutorial/fastapi/simple-hero-api/#the-sqlmodel-advantage","title":"The SQLModel Advantage","text":"<p>Here's where having our SQLModel class models be both SQLAlchemy models and Pydantic models at the same time shine. \u2728</p> <p>Here we use the same class model to define the request body that will be received by our API.</p> <p>Because FastAPI is based on Pydantic, it will use the same model (the Pydantic part) to do automatic data validation and conversion from the JSON request to an object that is an actual instance of the <code>Hero</code> class.</p> <p>And then, because this same SQLModel object is not only a Pydantic model instance but also a SQLAlchemy model instance, we can use it directly in a session to create the row in the database.</p> <p>So we can use intuitive standard Python type annotations, and we don't have to duplicate a lot of the code for the database models and the API data models. \ud83c\udf89</p> <p>Tip</p> <p>We will improve this further later, but for now, it already shows the power of having SQLModel classes be both SQLAlchemy models and Pydantic models at the same time.</p>"},{"location":"tutorial/fastapi/simple-hero-api/#read-heroes-path-operation","title":"Read Heroes Path Operation","text":"<p>Now let's add another path operation to read all the heroes:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n</code></pre> <p>This is pretty straightforward.</p> <p>When a client sends a request to the path <code>/heroes/</code> with a <code>GET</code> HTTP operation, we run this function that gets the heroes from the database and returns them.</p>"},{"location":"tutorial/fastapi/simple-hero-api/#one-session-per-request","title":"One Session per Request","text":"<p>Remember that we should use a SQLModel session per each group of operations and if we need other unrelated operations we should use a different session?</p> <p>Here it is much more obvious.</p> <p>We should normally have one session per request in most of the cases.</p> <p>In some isolated cases, we would want to have new sessions inside, so, more than one session per request.</p> <p>But we would never want to share the same session among different requests.</p> <p>In this simple example, we just create the new sessions manually in the path operation functions.</p> <p>In future examples later we will use a FastAPI Dependency to get the session, being able to share it with other dependencies and being able to replace it during testing. \ud83e\udd13</p>"},{"location":"tutorial/fastapi/simple-hero-api/#run-the-fastapi-application","title":"Run the FastAPI Application","text":"<p>Now we are ready to run the FastAPI application.</p> <p>Put all that code in a file called <code>main.py</code>.</p> <p>Then run it with Uvicorn:</p> <pre><code>$ uvicorn main:app\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Started reloader process [28720]\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Started server process [28722]\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Waiting for application startup.\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Application startup complete.\n</code></pre> <p>Info</p> <p>The command <code>uvicorn main:app</code> refers to:</p> <ul> <li><code>main</code>: the file <code>main.py</code> (the Python \"module\").</li> <li><code>app</code>: the object created inside of <code>main.py</code> with the line <code>app = FastAPI()</code>.</li> </ul>"},{"location":"tutorial/fastapi/simple-hero-api/#uvicorn-reload","title":"Uvicorn <code>--reload</code>","text":"<p>During development (and only during development), you can also add the option <code>--reload</code> to Uvicorn.</p> <p>It will restart the server every time you make a change to the code, this way you will be able to develop faster. \ud83e\udd13</p> <pre><code>$ uvicorn main:app --reload\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Will watch for changes in these directories: ['/home/user/code/sqlmodel-tutorial']\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Started reloader process [28720]\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Started server process [28722]\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Waiting for application startup.\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Application startup complete.\n</code></pre> <p>Just remember to never use <code>--reload</code> in production, as it consumes much more resources than necessary, would be more error prone, etc.</p>"},{"location":"tutorial/fastapi/simple-hero-api/#check-the-api-docs-ui","title":"Check the API docs UI","text":"<p>Now you can go to that URL in your browser <code>http://127.0.0.1:8000</code>. We didn't create a path operation for the root path <code>/</code>, so that URL alone will only show a \"Not Found\" error... that \"Not Found\" error is produced by your FastAPI application.</p> <p>But you can go to the automatically generated interactive API documentation at the path <code>/docs</code>: http://127.0.0.1:8000/docs. \u2728</p> <p>You will see that this automatic API docs UI has the paths that we defined above with their operations, and that it already knows the shape of the data that the path operations will receive:</p> <p></p>"},{"location":"tutorial/fastapi/simple-hero-api/#play-with-the-api","title":"Play with the API","text":"<p>You can actually click the button Try it out and send some requests to create some heroes with the Create Hero path operation.</p> <p>And then you can get them back with the Read Heroes path operation:</p> <p></p>"},{"location":"tutorial/fastapi/simple-hero-api/#check-the-database","title":"Check the Database","text":"<p>Now you can terminate that Uvicorn server by going back to the terminal and pressing Ctrl+C.</p> <p>And then, you can open DB Browser for SQLite and check the database, to explore the data and confirm that it indeed saved the heroes. \ud83c\udf89</p> <p></p>"},{"location":"tutorial/fastapi/simple-hero-api/#recap","title":"Recap","text":"<p>Good job! This is already a FastAPI web API application to interact with the heroes database. \ud83c\udf89</p> <p>There are several things we can improve and extend. For example, we want the database to decide the ID of each new hero, we don't want to allow a user to send it.</p> <p>We will make all those improvements in the next chapters. \ud83d\ude80</p>"},{"location":"tutorial/fastapi/teams/","title":"FastAPI Path Operations for Teams - Other Models","text":"<p>Let's now update the FastAPI application to handle data for teams.</p> <p>This is very similar to the things we have done for heroes, so we will go over it quickly here.</p> <p>We will use the same models we used in previous examples, with the relationship attributes, etc.</p>"},{"location":"tutorial/fastapi/teams/#add-teams-models","title":"Add Teams Models","text":"<p>Let's add the models for the teams.</p> <p>It's the same process we did for heroes, with a base model, a table model, and some other data models.</p> <p>We have a <code>TeamBase</code> data model, and from it, we inherit with a <code>Team</code> table model.</p> <p>Then we also inherit from the <code>TeamBase</code> for the <code>TeamCreate</code> and <code>TeamPublic</code> data models.</p> <p>And we also create a <code>TeamUpdate</code> data model.</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: str | None = None\n    headquarters: str | None = None\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: Optional[str] = None\n    headquarters: Optional[str] = None\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: Optional[str] = None\n    headquarters: Optional[str] = None\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: str | None = None\n    headquarters: str | None = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n    team_id: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=list[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: Optional[str] = None\n    headquarters: Optional[str] = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    team_id: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=list[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: Optional[str] = None\n    headquarters: Optional[str] = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    team_id: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=List[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>We now also have relationship attributes. \ud83c\udf89</p> <p>Let's now update the <code>Hero</code> models too.</p>"},{"location":"tutorial/fastapi/teams/#update-hero-models","title":"Update Hero Models","text":"Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n    team_id: int | None = None\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    team_id: Optional[int] = None\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    team_id: Optional[int] = None\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: str | None = None\n    headquarters: str | None = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n    team_id: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=list[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: Optional[str] = None\n    headquarters: Optional[str] = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    team_id: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=list[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: Optional[str] = None\n    headquarters: Optional[str] = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    team_id: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=List[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>We now have a <code>team_id</code> in the hero models.</p> <p>Notice that we can declare the <code>team_id</code> in the <code>HeroBase</code> because it can be reused by all the models, in all the cases it's an optional integer.</p> <p>And even though the <code>HeroBase</code> is not a table model, we can declare <code>team_id</code> in it with the <code>foreign key</code> parameter. It won't do anything in most of the models that inherit from <code>HeroBase</code>, but in the table model <code>Hero</code> it will be used to tell SQLModel that this is a foreign key to that table.</p>"},{"location":"tutorial/fastapi/teams/#relationship-attributes","title":"Relationship Attributes","text":"<p>Notice that the relationship attributes, the ones with <code>Relationship()</code>, are only in the table models, as those are the ones that are handled by SQLModel with SQLAlchemy and that can have the automatic fetching of data from the database when we access them.</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: str | None = None\n    headquarters: str | None = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n    team_id: int | None = None\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: Optional[str] = None\n    headquarters: Optional[str] = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    team_id: Optional[int] = None\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: Optional[str] = None\n    headquarters: Optional[str] = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    team_id: Optional[int] = None\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: str | None = None\n    headquarters: str | None = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n    team_id: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=list[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: Optional[str] = None\n    headquarters: Optional[str] = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    team_id: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=list[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: Optional[str] = None\n    headquarters: Optional[str] = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    team_id: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=List[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/fastapi/teams/#path-operations-for-teams","title":"Path Operations for Teams","text":"<p>Let's now add the path operations for teams.</p> <p>These are equivalent and very similar to the path operations for the heroes we had before, so we don't have to go over the details for each one, let's check the code.</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=list[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=list[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=List[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: str | None = None\n    headquarters: str | None = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n    team_id: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=list[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: Optional[str] = None\n    headquarters: Optional[str] = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    team_id: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=list[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass TeamBase(SQLModel):\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Team(TeamBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamCreate(TeamBase):\n    pass\n\n\nclass TeamPublic(TeamBase):\n    id: int\n\n\nclass TeamUpdate(SQLModel):\n    name: Optional[str] = None\n    headquarters: Optional[str] = None\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    team_id: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.post(\"/teams/\", response_model=TeamPublic)\ndef create_team(*, session: Session = Depends(get_session), team: TeamCreate):\n    db_team = Team.model_validate(team)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.get(\"/teams/\", response_model=List[TeamPublic])\ndef read_teams(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    teams = session.exec(select(Team).offset(offset).limit(limit)).all()\n    return teams\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamPublic)\ndef read_team(*, team_id: int, session: Session = Depends(get_session)):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamPublic)\ndef update_team(\n    *,\n    session: Session = Depends(get_session),\n    team_id: int,\n    team: TeamUpdate,\n):\n    db_team = session.get(Team, team_id)\n    if not db_team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    team_data = team.model_dump(exclude_unset=True)\n    for key, value in team_data.items():\n        setattr(db_team, key, value)\n    session.add(db_team)\n    session.commit()\n    session.refresh(db_team)\n    return db_team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(*, session: Session = Depends(get_session), team_id: int):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/fastapi/teams/#using-relationships-attributes","title":"Using Relationships Attributes","text":"<p>Up to this point, we are actually not using the relationship attributes, but we could access them in our code.</p> <p>In the next chapter, we will play more with them.</p>"},{"location":"tutorial/fastapi/teams/#check-the-docs-ui","title":"Check the Docs UI","text":"<p>Now we can check the automatic docs UI to see all the path operations for heroes and teams.</p> <p></p>"},{"location":"tutorial/fastapi/teams/#recap","title":"Recap","text":"<p>We can use the same patterns to add more models and API path operations to our FastAPI application. \ud83c\udf89</p>"},{"location":"tutorial/fastapi/tests/","title":"Test Applications with FastAPI and SQLModel","text":"<p>To finish this group of chapters about FastAPI with SQLModel, let's now learn how to implement automated tests for an application using FastAPI with SQLModel. \u2705</p> <p>Including the tips and tricks. \ud83c\udf81</p>"},{"location":"tutorial/fastapi/tests/#fastapi-application","title":"FastAPI Application","text":"<p>Let's work with one of the simpler FastAPI applications we built in the previous chapters.</p> <p>All the same concepts, tips and tricks will apply to more complex applications as well.</p> <p>We will use the application with the hero models, but without team models, and we will use the dependency to get a session.</p> <p>Now we will see how useful it is to have this session dependency. \u2728</p> \ud83d\udc40 Full file preview <pre><code>from typing import List, Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate\n):\n    db_hero = session.get(Hero, hero_id)\n    if not db_hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    for key, value in hero_data.items():\n        setattr(db_hero, key, value)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/fastapi/tests/#file-structure","title":"File Structure","text":"<p>Now we will have a Python project with multiple files, one file <code>main.py</code> with all the application, and one file <code>test_main.py</code> with the tests, with the same ideas from Code Structure and Multiple Files.</p> <p>The file structure is:</p> <pre><code>.\n\u251c\u2500\u2500 project\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 main.py\n    \u2514\u2500\u2500 test_main.py\n</code></pre>"},{"location":"tutorial/fastapi/tests/#testing-fastapi-applications","title":"Testing FastAPI Applications","text":"<p>If you haven't done testing in FastAPI applications, first check the FastAPI docs about Testing.</p> <p>Then, we can continue here, the first step is to install the dependencies, <code>requests</code> and <code>pytest</code>.</p> <p>Make sure you create a virtual environment, activate it, and then install them, for example with:</p> <pre><code>$ pip install requests pytest\n\n---&gt; 100%\n</code></pre>"},{"location":"tutorial/fastapi/tests/#basic-tests-code","title":"Basic Tests Code","text":"<p>Let's start with a simple test, with just the basic test code we need the check that the FastAPI application is creating a new hero correctly.</p> <pre><code>from fastapi.testclient import TestClient\nfrom sqlmodel import Session, SQLModel, create_engine\n\nfrom .main import app, get_session  # (1)!\n\n\ndef test_create_hero():\n        # Some code here omitted, we will see it later \ud83d\udc48\n        client = TestClient(app)  # (2)!\n\n        response = client.post(  # (3)!\n            \"/heroes/\", json={\"name\": \"Deadpond\", \"secret_name\": \"Dive Wilson\"}\n        )\n        # Some code here omitted, we will see it later \ud83d\udc48\n        data = response.json()  # (4)!\n\n        assert response.status_code == 200  # (5)!\n        assert data[\"name\"] == \"Deadpond\"  # (6)!\n        assert data[\"secret_name\"] == \"Dive Wilson\"  # (7)!\n        assert data[\"age\"] is None  # (8)!\n        assert data[\"id\"] is not None  # (9)!\n\n# Code below omitted \ud83d\udc47\n</code></pre> <ol> <li> <p>Import the <code>app</code> from the the <code>main</code> module.</p> </li> <li> <p>We create a <code>TestClient</code> for the FastAPI <code>app</code> and put it in the variable <code>client</code>.</p> </li> <li> <p>Then we use use this <code>client</code> to talk to the API and send a <code>POST</code> HTTP operation, creating a new hero.</p> </li> <li> <p>Then we get the JSON data from the response and put it in the variable <code>data</code>.</p> </li> <li> <p>Next we start testing the results with <code>assert</code> statements, we check that the status code of the response is <code>200</code>.</p> </li> <li> <p>We check that the <code>name</code> of the hero created is <code>\"Deadpond\"</code>.</p> </li> <li> <p>We check that the <code>secret_name</code> of the hero created is <code>\"Dive Wilson\"</code>.</p> </li> <li> <p>We check that the <code>age</code> of the hero created is <code>None</code>, because we didn't send an age.</p> </li> <li> <p>We check that the hero created has an <code>id</code> created by the database, so it's not <code>None</code>.</p> </li> </ol> <p>Tip</p> <p>Check out the number bubbles to see what is done by each line of code.</p> <p>That's the core of the code we need for all the tests later.</p> <p>But now, we need to deal with a bit of logistics and details we are not paying attention to just yet. \ud83e\udd13</p>"},{"location":"tutorial/fastapi/tests/#testing-database","title":"Testing Database","text":"<p>This test looks fine, but there's a problem.</p> <p>If we run it, it will use the same production database that we are using to store our very important heroes, and we will end up adding unnecessary data to it, or even worse, in future tests we could end up removing production data.</p> <p>So, we should use an independent testing database, just for the tests.</p> <p>To do this, we need to change the URL used for the database.</p> <p>But when the code for the API is executed, it gets a session that is already connected to an engine, and the engine is already using a specific database URL.</p> <p>Even if we import the variable from the <code>main</code> module and change its value just for the tests, by that point the engine is already created with the original value.</p> <p>But all our API path operations get the session using a FastAPI dependency, and we can override dependencies in tests.</p> <p>Here's where dependencies start to help a lot.</p>"},{"location":"tutorial/fastapi/tests/#override-a-dependency","title":"Override a Dependency","text":"<p>Let's override the <code>get_session()</code> dependency for the tests.</p> <p>This dependency is used by all the path operations to get the SQLModel session object.</p> <p>We will override it to use a different session object just for the tests.</p> <p>That way we protect the production database and we have better control of the data we are testing.</p> <pre><code>from fastapi.testclient import TestClient\nfrom sqlmodel import Session, SQLModel, create_engine\n\nfrom .main import app, get_session  # (1)!\n\n\ndef test_create_hero():\n        # Some code here omitted, we will see it later \ud83d\udc48\n        def get_session_override():  # (2)!\n            return session  # (3)!\n\n        app.dependency_overrides[get_session] = get_session_override  # (4)!\n\n        client = TestClient(app)\n\n        response = client.post(\n            \"/heroes/\", json={\"name\": \"Deadpond\", \"secret_name\": \"Dive Wilson\"}\n        )\n        app.dependency_overrides.clear()  # (5)!\n        data = response.json()\n\n        assert response.status_code == 200\n        assert data[\"name\"] == \"Deadpond\"\n        assert data[\"secret_name\"] == \"Dive Wilson\"\n        assert data[\"age\"] is None\n        assert data[\"id\"] is not None\n\n# Code below omitted \ud83d\udc47\n</code></pre> <ol> <li> <p>Import the <code>get_session</code> dependency from the the <code>main</code> module.</p> </li> <li> <p>Define the new function that will be the new dependency override.</p> </li> <li> <p>This function will return a different session than the one that would be returned by the original <code>get_session</code> function.</p> <p>We haven't seen how this new session object is created yet, but the point is that this is a different session than the original one from the app.</p> <p>This session is attached to a different engine, and that different engine uses a different URL, for a database just for testing.</p> <p>We haven't defined that new URL nor the new engine yet, but here we already see the that this object <code>session</code> will override the one returned by the original dependency  <code>get_session()</code>.</p> </li> <li> <p>Then, the FastAPI <code>app</code> object has an attribute <code>app.dependency_overrides</code>.</p> <p>This attribute is a dictionary, and we can put dependency overrides in it by passing, as the key, the original dependency function, and as the value, the new overriding dependency function.</p> <p>So, here we are telling the FastAPI app to use <code>get_session_override</code> instead of <code>get_session</code> in all the places in the code that depend on <code>get_session</code>, that is, all the parameters with something like:</p> <pre><code>session: Session = Depends(get_session)\n</code></pre> </li> <li> <p>After we are done with the dependency override, we can restore the application back to normal, by removing all the values in this dictionary <code>app.dependency_overrides</code>.</p> <p>This way whenever a path operation function needs the dependency FastAPI will use the original one instead of the override.</p> </li> </ol> <p>Tip</p> <p>Check out the number bubbles to see what is done by each line of code.</p>"},{"location":"tutorial/fastapi/tests/#create-the-engine-and-session-for-testing","title":"Create the Engine and Session for Testing","text":"<p>Now let's create that session object that will be used during testing.</p> <p>It will use its own engine, and this new engine will use a new URL for the testing database:</p> <pre><code>sqlite:///testing.db\n</code></pre> <p>So, the testing database will be in the file <code>testing.db</code>.</p> <pre><code>from fastapi.testclient import TestClient\nfrom sqlmodel import Session, SQLModel, create_engine\n\nfrom .main import app, get_session  # (1)!\n\n\ndef test_create_hero():\n    engine = create_engine(  # (2)!\n        \"sqlite:///testing.db\", connect_args={\"check_same_thread\": False}\n    )\n    SQLModel.metadata.create_all(engine)  # (3)!\n\n    with Session(engine) as session:  # (4)!\n\n        def get_session_override():\n            return session  # (5)!\n\n        app.dependency_overrides[get_session] = get_session_override  # (4)!\n\n        client = TestClient(app)\n\n        response = client.post(\n            \"/heroes/\", json={\"name\": \"Deadpond\", \"secret_name\": \"Dive Wilson\"}\n        )\n        app.dependency_overrides.clear()\n        data = response.json()\n\n        assert response.status_code == 200\n        assert data[\"name\"] == \"Deadpond\"\n        assert data[\"secret_name\"] == \"Dive Wilson\"\n        assert data[\"age\"] is None\n        assert data[\"id\"] is not None\n    # (6)!\n</code></pre> <ol> <li> <p>Here's a subtle thing to notice.</p> <p>Remember that Order Matters and we need to make sure all the SQLModel models are already defined and imported before calling <code>.create_all()</code>.</p> <p>IN this line, by importing something, anything, from <code>.main</code>, the code in <code>.main</code> will be executed, including the definition of the table models, and that will automatically register them in <code>SQLModel.metadata</code>.</p> </li> <li> <p>Here we create a new engine, completely different from the one in <code>main.py</code>.</p> <p>This is the engine we will use for the tests.</p> <p>We use the new URL of the database for tests:</p> <pre><code>sqlite:///testing.db\n</code></pre> <p>And again, we use the connection argument <code>check_same_thread=False</code>.</p> </li> <li> <p>Then we call:</p> <pre><code>SQLModel.metadata.create_all(engine)\n</code></pre> <p>...to make sure we create all the tables in the new testing database.</p> <p>The table models are registered in <code>SQLModel.metadata</code> just because we imported something from <code>.main</code>, and the code in <code>.main</code> was executed, creating the classes for the table models and automatically registering them in <code>SQLModel.metadata</code>.</p> <p>So, by the point we call this method, the table models are already registered there. \ud83d\udcaf</p> </li> <li> <p>Here's where we create the custom session object for this test in a <code>with</code> block.</p> <p>It uses the new custom engine we created, so anything that uses this session will be using the testing database.</p> </li> <li> <p>Now, back to the dependency override, it is just returning the same session object from outside, that's it, that's the whole trick.</p> </li> <li> <p>By this point, the testing session <code>with</code> block finishes, and the session is closed, the file is closed, etc.</p> </li> </ol>"},{"location":"tutorial/fastapi/tests/#import-table-models","title":"Import Table Models","text":"<p>Here we create all the tables in the testing database with:</p> <pre><code>SQLModel.metadata.create_all(engine)\n</code></pre> <p>But remember that Order Matters and we need to make sure all the SQLModel models are already defined and imported before calling <code>.create_all()</code>.</p> <p>In this case, it all works for a little subtlety that deserves some attention.</p> <p>Because we import something, anything, from <code>.main</code>, the code in <code>.main</code> will be executed, including the definition of the table models, and that will automatically register them in <code>SQLModel.metadata</code>.</p> <p>That way, when we call <code>.create_all()</code> all the table models are correctly registered in <code>SQLModel.metadata</code> and it will all work. \ud83d\udc4c</p>"},{"location":"tutorial/fastapi/tests/#memory-database","title":"Memory Database","text":"<p>Now we are not using the production database. Instead, we use a new testing database with the <code>testing.db</code> file, which is great.</p> <p>But SQLite also supports having an in memory database. This means that all the database is only in memory, and it is never saved in a file on disk.</p> <p>After the program terminates, the in-memory database is deleted, so it wouldn't help much for a production database.</p> <p>But it works great for testing, because it can be quickly created before each test, and quickly removed after each test. \u2705</p> <p>And also, because it never has to write anything to a file and it's all just in memory, it will be even faster than normally. \ud83c\udfce</p> Other alternatives and ideas \ud83d\udc40 <p>Before arriving at the idea of using an in-memory database we could have explored other alternatives and ideas.</p> <p>The first is that we are not deleting the file after we finish the test, so the next test could have leftover data. So, the right thing would be to delete the file right after finishing the test. \ud83d\udd25</p> <p>But if each test has to create a new file and then delete it afterwards, running all the tests could be a bit slow.</p> <p>Right now, we have a file <code>testing.db</code> that is used by all the tests (we only have one test now, but we will have more).</p> <p>So, if we tried to run the tests at the same time in parallel to try to speed things up a bit, they would clash trying to use the same <code>testing.db</code> file.</p> <p>Of course, we could also fix that, using some random name for each testing database file... but in the case of SQLite, we have an even better alternative by just using an in-memory database. \u2728</p>"},{"location":"tutorial/fastapi/tests/#configure-the-in-memory-database","title":"Configure the In-Memory Database","text":"<p>Let's update our code to use the in-memory database.</p> <p>We just have to change a couple of parameters in the engine.</p> <pre><code>from fastapi.testclient import TestClient\nfrom sqlmodel import Session, SQLModel, create_engine\nfrom sqlmodel.pool import StaticPool  # (1)!\n\nfrom .main import app, get_session\n\n\ndef test_create_hero():\n    engine = create_engine(\n        \"sqlite://\",  # (2)!\n        connect_args={\"check_same_thread\": False},\n        poolclass=StaticPool,  # (3)!\n    )\n\n# Code below omitted \ud83d\udc47\n</code></pre> <ol> <li> <p>Import <code>StaticPool</code> from <code>sqlmodel</code>, we will use it in a bit.</p> </li> <li> <p>For the SQLite URL, don't write any file name, leave it empty.</p> <p>So, instead of:</p> <pre><code>sqlite:///testing.db\n</code></pre> <p>...just write:</p> <pre><code>sqlite://\n</code></pre> <p>This is enough to tell SQLModel (actually SQLAlchemy) that we want to use an in-memory SQLite database.</p> </li> <li> <p>Remember that we told the low-level library in charge of communicating with SQLite that we want to be able to access the database from different threads with <code>check_same_thread=False</code>?</p> <p>Now that we use an in-memory database, we need to also tell SQLAlchemy that we want to be able to use the same in-memory database object from different threads.</p> <p>We tell it that with the <code>poolclass=StaticPool</code> parameter.</p> <p>Info</p> <p>You can read more details in the SQLAlchemy documentation about Using a Memory Database in Multiple Threads</p> </li> </ol> <p>Tip</p> <p>Check out the number bubbles to see what is done by each line of code.</p> <p>That's it, now the test will run using the in-memory database, which will be faster and probably safer.</p> <p>And all the other tests can do the same.</p>"},{"location":"tutorial/fastapi/tests/#boilerplate-code","title":"Boilerplate Code","text":"<p>Great, that works, and you could replicate all that process in each of the test functions.</p> <p>But we had to add a lot of boilerplate code to handle the custom database, creating it in memory, the custom session, and the dependency override.</p> <p>Do we really have to duplicate all that for each test? No, we can do better! \ud83d\ude0e</p> <p>We are using pytest to run the tests. And pytest also has a very similar concept to the dependencies in FastAPI.</p> <p>Info</p> <p>In fact, pytest was one of the things that inspired the design of the dependencies in FastAPI.</p> <p>It's a way for us to declare some code that should be run before each test and provide a value for the test function (that's pretty much the same as FastAPI dependencies).</p> <p>In fact, it also has the same trick of allowing to use <code>yield</code> instead of <code>return</code> to provide the value, and then pytest makes sure that the code after <code>yield</code> is executed after the function with the test is done.</p> <p>In pytest, these things are called fixtures instead of dependencies.</p> <p>Let's use these fixtures to improve our code and reduce de duplicated boilerplate for the next tests.</p>"},{"location":"tutorial/fastapi/tests/#pytest-fixtures","title":"Pytest Fixtures","text":"<p>You can read more about them in the pytest docs for fixtures, but I'll give you a short example for what we need here.</p> <p>Let's see the first code example with a fixture:</p> <pre><code>import pytest  # (1)!\nfrom fastapi.testclient import TestClient\nfrom sqlmodel import Session, SQLModel, create_engine\nfrom sqlmodel.pool import StaticPool\n\nfrom .main import app, get_session\n\n\n@pytest.fixture(name=\"session\")  # (2)!\ndef session_fixture():  # (3)!\n    engine = create_engine(\n        \"sqlite://\", connect_args={\"check_same_thread\": False}, poolclass=StaticPool\n    )\n    SQLModel.metadata.create_all(engine)\n    with Session(engine) as session:\n        yield session  # (4)!\n\n\ndef test_create_hero(session: Session):  # (5)!\n    def get_session_override():\n        return session  # (6)!\n\n    app.dependency_overrides[get_session] = get_session_override\n\n    client = TestClient(app)\n\n    response = client.post(\n        \"/heroes/\", json={\"name\": \"Deadpond\", \"secret_name\": \"Dive Wilson\"}\n    )\n    app.dependency_overrides.clear()\n    data = response.json()\n\n    assert response.status_code == 200\n    assert data[\"name\"] == \"Deadpond\"\n    assert data[\"secret_name\"] == \"Dive Wilson\"\n    assert data[\"age\"] is None\n    assert data[\"id\"] is not None\n</code></pre> <ol> <li> <p>Import <code>pytest</code>.</p> </li> <li> <p>Use the <code>@pytest.fixture()</code> decorator on top of the function to tell pytest that this is a fixture function (equivalent to a FastAPI dependency).</p> <p>We also give it a name of <code>\"session\"</code>, this will be important in the testing function.</p> </li> <li> <p>Create the fixture function. This is equivalent to a FastAPI dependency function.</p> <p>In this fixture we create the custom engine, with the in-memory database, we create the tables, and we create the session.</p> <p>Then we <code>yield</code> the <code>session</code> object.</p> </li> <li> <p>The thing that we <code>return</code> or <code>yield</code> is what will be available to the test function, in this case, the <code>session</code> object.</p> <p>Here we use <code>yield</code> so that pytest comes back to execute \"the rest of the code\" in this function once the testing function is done.</p> <p>We don't have any more visible \"rest of the code\" after the <code>yield</code>, but we have the end of the <code>with</code> block that will close the session.</p> <p>By using <code>yield</code>, pytest will:</p> <ul> <li>run the first part</li> <li>create the session object</li> <li>give it to the test function</li> <li>run the test function</li> <li>once the test function is done, it will continue here, right after the <code>yield</code>, and will correctly close the session object in the end of the <code>with</code> block.</li> </ul> </li> <li> <p>Now, in the test function, to tell pytest that this test wants to get the fixture, instead of declaring something like in FastAPI with:</p> <pre><code>session: Session = Depends(session_fixture)\n</code></pre> <p>...the way we tell pytest what is the fixture that we want is by using the exact same name of the fixture.</p> <p>In this case, we named it <code>session</code>, so the parameter has to be exactly named <code>session</code> for it to work.</p> <p>We also add the type annotation <code>session: Session</code> so that we can get autocompletion and inline error checks in our editor.</p> </li> <li> <p>Now in the dependency override function, we just return the same <code>session</code> object that came from outside it.</p> <p>The <code>session</code> object comes from the parameter passed to the test function, and we just re-use it and return it here in the dependency override.</p> </li> </ol> <p>Tip</p> <p>Check out the number bubbles to see what is done by each line of code.</p> <p>pytest fixtures work in a very similar way to FastAPI dependencies, but have some minor differences:</p> <ul> <li>In pytest fixtures, we need to add a decorator of <code>@pytest.fixture()</code> on top.</li> <li>To use a pytest fixture in a function, we have to declare the parameter with the exact same name. In FastAPI we have to explicitly use <code>Depends()</code> with the actual function inside it.</li> </ul> <p>But apart from the way we declare them and how we tell the framework that we want to have them in the function, they work in a very similar way.</p> <p>Now we create lot's of tests and re-use that same fixture in all of them, saving us that boilerplate code.</p> <p>pytest will make sure to run them right before (and finish them right after) each test function. So, each test function will actually have its own database, engine, and session.</p>"},{"location":"tutorial/fastapi/tests/#client-fixture","title":"Client Fixture","text":"<p>Awesome, that fixture helps us prevent a lot of duplicated code.</p> <p>But currently, we still have to write some code in the test function that will be repetitive for other tests, right now we:</p> <ul> <li>create the dependency override</li> <li>put it in the <code>app.dependency_overrides</code></li> <li>create the <code>TestClient</code></li> <li>Clear the dependency override(s) after making the request</li> </ul> <p>That's still gonna be repetitive in the other future tests. Can we improve it? Yes! \ud83c\udf89</p> <p>Each pytest fixture (the same way as FastAPI dependencies), can require other fixtures.</p> <p>So, we can create a client fixture that will be used in all the tests, and it will itself require the session fixture.</p> <pre><code>import pytest\nfrom fastapi.testclient import TestClient\nfrom sqlmodel import Session, SQLModel, create_engine\nfrom sqlmodel.pool import StaticPool\n\nfrom .main import app, get_session\n\n\n@pytest.fixture(name=\"session\")\ndef session_fixture():\n    engine = create_engine(\n        \"sqlite://\", connect_args={\"check_same_thread\": False}, poolclass=StaticPool\n    )\n    SQLModel.metadata.create_all(engine)\n    with Session(engine) as session:\n        yield session\n\n\n@pytest.fixture(name=\"client\")  # (1)!\ndef client_fixture(session: Session):  # (2)!\n    def get_session_override():  # (3)!\n        return session\n\n    app.dependency_overrides[get_session] = get_session_override  # (4)!\n\n    client = TestClient(app)  # (5)!\n    yield client  # (6)!\n    app.dependency_overrides.clear()  # (7)!\n\n\ndef test_create_hero(client: TestClient):  # (8)!\n    response = client.post(\n        \"/heroes/\", json={\"name\": \"Deadpond\", \"secret_name\": \"Dive Wilson\"}\n    )\n    data = response.json()\n\n    assert response.status_code == 200\n    assert data[\"name\"] == \"Deadpond\"\n    assert data[\"secret_name\"] == \"Dive Wilson\"\n    assert data[\"age\"] is None\n    assert data[\"id\"] is not None\n</code></pre> <ol> <li> <p>Create the new fixture named <code>\"client\"</code>.</p> </li> <li> <p>This client fixture, in turn, also requires the session fixture.</p> </li> <li> <p>Now we create the dependency override inside the client fixture.</p> </li> <li> <p>Set the dependency override in the <code>app.dependency_overrides</code> dictionary.</p> </li> <li> <p>Create the <code>TestClient</code> with the FastAPI <code>app</code>.</p> </li> <li> <p><code>yield</code> the <code>TestClient</code> instance.</p> <p>By using <code>yield</code>, after the test function is done, pytest will come back to execute the rest of the code after <code>yield</code>.</p> </li> <li> <p>This is the cleanup code, after <code>yield</code>, and after the test function is done.</p> <p>Here we clear the dependency overrides (here it's only one) in the FastAPI <code>app</code>.</p> </li> <li> <p>Now the test function requires the client fixture.</p> <p>And inside the test function, the code is quite simple, we just use the <code>TestClient</code> to make requests to the API, check the data, and that's it.</p> <p>The fixtures take care of all the setup and cleanup code.</p> </li> </ol> <p>Tip</p> <p>Check out the number bubbles to see what is done by each line of code.</p> <p>Now we have a client fixture that, in turn, uses the session fixture.</p> <p>And in the actual test function, we just have to declare that we require this client fixture.</p>"},{"location":"tutorial/fastapi/tests/#add-more-tests","title":"Add More Tests","text":"<p>At this point, it all might seem like we just did a lot of changes for nothing, to get the same result. \ud83e\udd14</p> <p>But normally we will create lots of other test functions. And now all the boilerplate and complexity is written only once, in those two fixtures.</p> <p>Let's add some more tests:</p> <pre><code># Code above omitted \ud83d\udc46\n\ndef test_create_hero(client: TestClient):\n    response = client.post(\n        \"/heroes/\", json={\"name\": \"Deadpond\", \"secret_name\": \"Dive Wilson\"}\n    )\n    data = response.json()\n\n    assert response.status_code == 200\n    assert data[\"name\"] == \"Deadpond\"\n    assert data[\"secret_name\"] == \"Dive Wilson\"\n    assert data[\"age\"] is None\n    assert data[\"id\"] is not None\n\n\ndef test_create_hero_incomplete(client: TestClient):\n    # No secret_name\n    response = client.post(\"/heroes/\", json={\"name\": \"Deadpond\"})\n    assert response.status_code == 422\n\n\ndef test_create_hero_invalid(client: TestClient):\n    # secret_name has an invalid type\n    response = client.post(\n        \"/heroes/\",\n        json={\n            \"name\": \"Deadpond\",\n            \"secret_name\": {\"message\": \"Do you wanna know my secret identity?\"},\n        },\n    )\n    assert response.status_code == 422\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview <pre><code>import pytest\nfrom fastapi.testclient import TestClient\nfrom sqlmodel import Session, SQLModel, create_engine\nfrom sqlmodel.pool import StaticPool\n\nfrom .main import Hero, app, get_session\n\n\n@pytest.fixture(name=\"session\")\ndef session_fixture():\n    engine = create_engine(\n        \"sqlite://\", connect_args={\"check_same_thread\": False}, poolclass=StaticPool\n    )\n    SQLModel.metadata.create_all(engine)\n    with Session(engine) as session:\n        yield session\n\n\n@pytest.fixture(name=\"client\")\ndef client_fixture(session: Session):\n    def get_session_override():\n        return session\n\n    app.dependency_overrides[get_session] = get_session_override\n    client = TestClient(app)\n    yield client\n    app.dependency_overrides.clear()\n\n\ndef test_create_hero(client: TestClient):\n    response = client.post(\n        \"/heroes/\", json={\"name\": \"Deadpond\", \"secret_name\": \"Dive Wilson\"}\n    )\n    data = response.json()\n\n    assert response.status_code == 200\n    assert data[\"name\"] == \"Deadpond\"\n    assert data[\"secret_name\"] == \"Dive Wilson\"\n    assert data[\"age\"] is None\n    assert data[\"id\"] is not None\n\n\ndef test_create_hero_incomplete(client: TestClient):\n    # No secret_name\n    response = client.post(\"/heroes/\", json={\"name\": \"Deadpond\"})\n    assert response.status_code == 422\n\n\ndef test_create_hero_invalid(client: TestClient):\n    # secret_name has an invalid type\n    response = client.post(\n        \"/heroes/\",\n        json={\n            \"name\": \"Deadpond\",\n            \"secret_name\": {\"message\": \"Do you wanna know my secret identity?\"},\n        },\n    )\n    assert response.status_code == 422\n\n\ndef test_read_heroes(session: Session, client: TestClient):\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    session.add(hero_1)\n    session.add(hero_2)\n    session.commit()\n\n    response = client.get(\"/heroes/\")\n    data = response.json()\n\n    assert response.status_code == 200\n\n    assert len(data) == 2\n    assert data[0][\"name\"] == hero_1.name\n    assert data[0][\"secret_name\"] == hero_1.secret_name\n    assert data[0][\"age\"] == hero_1.age\n    assert data[0][\"id\"] == hero_1.id\n    assert data[1][\"name\"] == hero_2.name\n    assert data[1][\"secret_name\"] == hero_2.secret_name\n    assert data[1][\"age\"] == hero_2.age\n    assert data[1][\"id\"] == hero_2.id\n\n\ndef test_read_hero(session: Session, client: TestClient):\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    session.add(hero_1)\n    session.commit()\n\n    response = client.get(f\"/heroes/{hero_1.id}\")\n    data = response.json()\n\n    assert response.status_code == 200\n    assert data[\"name\"] == hero_1.name\n    assert data[\"secret_name\"] == hero_1.secret_name\n    assert data[\"age\"] == hero_1.age\n    assert data[\"id\"] == hero_1.id\n\n\ndef test_update_hero(session: Session, client: TestClient):\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    session.add(hero_1)\n    session.commit()\n\n    response = client.patch(f\"/heroes/{hero_1.id}\", json={\"name\": \"Deadpuddle\"})\n    data = response.json()\n\n    assert response.status_code == 200\n    assert data[\"name\"] == \"Deadpuddle\"\n    assert data[\"secret_name\"] == \"Dive Wilson\"\n    assert data[\"age\"] is None\n    assert data[\"id\"] == hero_1.id\n\n\ndef test_delete_hero(session: Session, client: TestClient):\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    session.add(hero_1)\n    session.commit()\n\n    response = client.delete(f\"/heroes/{hero_1.id}\")\n\n    hero_in_db = session.get(Hero, hero_1.id)\n\n    assert response.status_code == 200\n\n    assert hero_in_db is None\n</code></pre> <p>Tip</p> <p>It's always good idea to not only test the normal case, but also that invalid data, errors, and corner cases are handled correctly.</p> <p>That's why we add these two extra tests here.</p> <p>Now, any additional test functions can be as simple as the first one, they just have to declare the <code>client</code> parameter to get the <code>TestClient</code> fixture with all the database stuff setup. Nice! \ud83d\ude0e</p>"},{"location":"tutorial/fastapi/tests/#why-two-fixtures","title":"Why Two Fixtures","text":"<p>Now, seeing the code, we could think, why do we put two fixtures instead of just one with all the code? And that makes total sense!</p> <p>For these examples, that would have been simpler, there's no need to separate that code into two fixtures for them...</p> <p>But for the next test function, we will require both fixtures, the client and the session.</p> <pre><code>import pytest\nfrom fastapi.testclient import TestClient\nfrom sqlmodel import Session, SQLModel, create_engine\nfrom sqlmodel.pool import StaticPool\n\nfrom .main import Hero, app, get_session\n\n# Code here omitted \ud83d\udc48\n\ndef test_read_heroes(session: Session, client: TestClient):\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    session.add(hero_1)\n    session.add(hero_2)\n    session.commit()\n\n    response = client.get(\"/heroes/\")\n    data = response.json()\n\n    assert response.status_code == 200\n\n    assert len(data) == 2\n    assert data[0][\"name\"] == hero_1.name\n    assert data[0][\"secret_name\"] == hero_1.secret_name\n    assert data[0][\"age\"] == hero_1.age\n    assert data[0][\"id\"] == hero_1.id\n    assert data[1][\"name\"] == hero_2.name\n    assert data[1][\"secret_name\"] == hero_2.secret_name\n    assert data[1][\"age\"] == hero_2.age\n    assert data[1][\"id\"] == hero_2.id\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview <pre><code>import pytest\nfrom fastapi.testclient import TestClient\nfrom sqlmodel import Session, SQLModel, create_engine\nfrom sqlmodel.pool import StaticPool\n\nfrom .main import Hero, app, get_session\n\n\n@pytest.fixture(name=\"session\")\ndef session_fixture():\n    engine = create_engine(\n        \"sqlite://\", connect_args={\"check_same_thread\": False}, poolclass=StaticPool\n    )\n    SQLModel.metadata.create_all(engine)\n    with Session(engine) as session:\n        yield session\n\n\n@pytest.fixture(name=\"client\")\ndef client_fixture(session: Session):\n    def get_session_override():\n        return session\n\n    app.dependency_overrides[get_session] = get_session_override\n    client = TestClient(app)\n    yield client\n    app.dependency_overrides.clear()\n\n\ndef test_create_hero(client: TestClient):\n    response = client.post(\n        \"/heroes/\", json={\"name\": \"Deadpond\", \"secret_name\": \"Dive Wilson\"}\n    )\n    data = response.json()\n\n    assert response.status_code == 200\n    assert data[\"name\"] == \"Deadpond\"\n    assert data[\"secret_name\"] == \"Dive Wilson\"\n    assert data[\"age\"] is None\n    assert data[\"id\"] is not None\n\n\ndef test_create_hero_incomplete(client: TestClient):\n    # No secret_name\n    response = client.post(\"/heroes/\", json={\"name\": \"Deadpond\"})\n    assert response.status_code == 422\n\n\ndef test_create_hero_invalid(client: TestClient):\n    # secret_name has an invalid type\n    response = client.post(\n        \"/heroes/\",\n        json={\n            \"name\": \"Deadpond\",\n            \"secret_name\": {\"message\": \"Do you wanna know my secret identity?\"},\n        },\n    )\n    assert response.status_code == 422\n\n\ndef test_read_heroes(session: Session, client: TestClient):\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    session.add(hero_1)\n    session.add(hero_2)\n    session.commit()\n\n    response = client.get(\"/heroes/\")\n    data = response.json()\n\n    assert response.status_code == 200\n\n    assert len(data) == 2\n    assert data[0][\"name\"] == hero_1.name\n    assert data[0][\"secret_name\"] == hero_1.secret_name\n    assert data[0][\"age\"] == hero_1.age\n    assert data[0][\"id\"] == hero_1.id\n    assert data[1][\"name\"] == hero_2.name\n    assert data[1][\"secret_name\"] == hero_2.secret_name\n    assert data[1][\"age\"] == hero_2.age\n    assert data[1][\"id\"] == hero_2.id\n\n\ndef test_read_hero(session: Session, client: TestClient):\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    session.add(hero_1)\n    session.commit()\n\n    response = client.get(f\"/heroes/{hero_1.id}\")\n    data = response.json()\n\n    assert response.status_code == 200\n    assert data[\"name\"] == hero_1.name\n    assert data[\"secret_name\"] == hero_1.secret_name\n    assert data[\"age\"] == hero_1.age\n    assert data[\"id\"] == hero_1.id\n\n\ndef test_update_hero(session: Session, client: TestClient):\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    session.add(hero_1)\n    session.commit()\n\n    response = client.patch(f\"/heroes/{hero_1.id}\", json={\"name\": \"Deadpuddle\"})\n    data = response.json()\n\n    assert response.status_code == 200\n    assert data[\"name\"] == \"Deadpuddle\"\n    assert data[\"secret_name\"] == \"Dive Wilson\"\n    assert data[\"age\"] is None\n    assert data[\"id\"] == hero_1.id\n\n\ndef test_delete_hero(session: Session, client: TestClient):\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    session.add(hero_1)\n    session.commit()\n\n    response = client.delete(f\"/heroes/{hero_1.id}\")\n\n    hero_in_db = session.get(Hero, hero_1.id)\n\n    assert response.status_code == 200\n\n    assert hero_in_db is None\n</code></pre> <p>In this test function, we want to check that the path operation to read a list of heroes actually sends us heroes.</p> <p>But if the database is empty, we would get an empty list, and we wouldn't know if the hero data is being sent correctly or not.</p> <p>But we can create some heroes in the testing database right before sending the API request. \u2728</p> <p>And because we are using the testing database, we don't affect anything by creating heroes for the test.</p> <p>To do it, we have to:</p> <ul> <li>import the <code>Hero</code> model</li> <li>require both fixtures, the client and the session</li> <li>create some heroes and save them in the database using the session</li> </ul> <p>After that, we can send the request and check that we actually got the data back correctly from the database. \ud83d\udcaf</p> <p>Here's the important detail to notice: we can require fixtures in other fixtures and also in the test functions.</p> <p>The function for the client fixture and the actual testing function will both receive the same session.</p>"},{"location":"tutorial/fastapi/tests/#add-the-rest-of-the-tests","title":"Add the Rest of the Tests","text":"<p>Using the same ideas, requiring the fixtures, creating data that we need for the tests, etc., we can now add the rest of the tests. They look quite similar to what we have done up to now.</p> <pre><code># Code above omitted \ud83d\udc46\n\ndef test_read_hero(session: Session, client: TestClient):\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    session.add(hero_1)\n    session.commit()\n\n    response = client.get(f\"/heroes/{hero_1.id}\")\n    data = response.json()\n\n    assert response.status_code == 200\n    assert data[\"name\"] == hero_1.name\n    assert data[\"secret_name\"] == hero_1.secret_name\n    assert data[\"age\"] == hero_1.age\n    assert data[\"id\"] == hero_1.id\n\n\ndef test_update_hero(session: Session, client: TestClient):\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    session.add(hero_1)\n    session.commit()\n\n    response = client.patch(f\"/heroes/{hero_1.id}\", json={\"name\": \"Deadpuddle\"})\n    data = response.json()\n\n    assert response.status_code == 200\n    assert data[\"name\"] == \"Deadpuddle\"\n    assert data[\"secret_name\"] == \"Dive Wilson\"\n    assert data[\"age\"] is None\n    assert data[\"id\"] == hero_1.id\n\n\ndef test_delete_hero(session: Session, client: TestClient):\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    session.add(hero_1)\n    session.commit()\n\n    response = client.delete(f\"/heroes/{hero_1.id}\")\n\n    hero_in_db = session.get(Hero, hero_1.id)\n\n    assert response.status_code == 200\n\n    assert hero_in_db is None\n</code></pre> \ud83d\udc40 Full file preview <pre><code>import pytest\nfrom fastapi.testclient import TestClient\nfrom sqlmodel import Session, SQLModel, create_engine\nfrom sqlmodel.pool import StaticPool\n\nfrom .main import Hero, app, get_session\n\n\n@pytest.fixture(name=\"session\")\ndef session_fixture():\n    engine = create_engine(\n        \"sqlite://\", connect_args={\"check_same_thread\": False}, poolclass=StaticPool\n    )\n    SQLModel.metadata.create_all(engine)\n    with Session(engine) as session:\n        yield session\n\n\n@pytest.fixture(name=\"client\")\ndef client_fixture(session: Session):\n    def get_session_override():\n        return session\n\n    app.dependency_overrides[get_session] = get_session_override\n    client = TestClient(app)\n    yield client\n    app.dependency_overrides.clear()\n\n\ndef test_create_hero(client: TestClient):\n    response = client.post(\n        \"/heroes/\", json={\"name\": \"Deadpond\", \"secret_name\": \"Dive Wilson\"}\n    )\n    data = response.json()\n\n    assert response.status_code == 200\n    assert data[\"name\"] == \"Deadpond\"\n    assert data[\"secret_name\"] == \"Dive Wilson\"\n    assert data[\"age\"] is None\n    assert data[\"id\"] is not None\n\n\ndef test_create_hero_incomplete(client: TestClient):\n    # No secret_name\n    response = client.post(\"/heroes/\", json={\"name\": \"Deadpond\"})\n    assert response.status_code == 422\n\n\ndef test_create_hero_invalid(client: TestClient):\n    # secret_name has an invalid type\n    response = client.post(\n        \"/heroes/\",\n        json={\n            \"name\": \"Deadpond\",\n            \"secret_name\": {\"message\": \"Do you wanna know my secret identity?\"},\n        },\n    )\n    assert response.status_code == 422\n\n\ndef test_read_heroes(session: Session, client: TestClient):\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    hero_2 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n    session.add(hero_1)\n    session.add(hero_2)\n    session.commit()\n\n    response = client.get(\"/heroes/\")\n    data = response.json()\n\n    assert response.status_code == 200\n\n    assert len(data) == 2\n    assert data[0][\"name\"] == hero_1.name\n    assert data[0][\"secret_name\"] == hero_1.secret_name\n    assert data[0][\"age\"] == hero_1.age\n    assert data[0][\"id\"] == hero_1.id\n    assert data[1][\"name\"] == hero_2.name\n    assert data[1][\"secret_name\"] == hero_2.secret_name\n    assert data[1][\"age\"] == hero_2.age\n    assert data[1][\"id\"] == hero_2.id\n\n\ndef test_read_hero(session: Session, client: TestClient):\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    session.add(hero_1)\n    session.commit()\n\n    response = client.get(f\"/heroes/{hero_1.id}\")\n    data = response.json()\n\n    assert response.status_code == 200\n    assert data[\"name\"] == hero_1.name\n    assert data[\"secret_name\"] == hero_1.secret_name\n    assert data[\"age\"] == hero_1.age\n    assert data[\"id\"] == hero_1.id\n\n\ndef test_update_hero(session: Session, client: TestClient):\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    session.add(hero_1)\n    session.commit()\n\n    response = client.patch(f\"/heroes/{hero_1.id}\", json={\"name\": \"Deadpuddle\"})\n    data = response.json()\n\n    assert response.status_code == 200\n    assert data[\"name\"] == \"Deadpuddle\"\n    assert data[\"secret_name\"] == \"Dive Wilson\"\n    assert data[\"age\"] is None\n    assert data[\"id\"] == hero_1.id\n\n\ndef test_delete_hero(session: Session, client: TestClient):\n    hero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\n    session.add(hero_1)\n    session.commit()\n\n    response = client.delete(f\"/heroes/{hero_1.id}\")\n\n    hero_in_db = session.get(Hero, hero_1.id)\n\n    assert response.status_code == 200\n\n    assert hero_in_db is None\n</code></pre>"},{"location":"tutorial/fastapi/tests/#run-the-tests","title":"Run the Tests","text":"<p>Now we can run the tests with <code>pytest</code> and see the results:</p> <pre><code>$ pytest\n\n============= test session starts ==============\nplatform linux -- Python 3.7.5, pytest-6.2.4, py-1.10.0, pluggy-0.13.1\nrootdir: /home/user/code/sqlmodel-tutorial\n&lt;b&gt;collected 7 items                              &lt;/b&gt;\n\n---&gt; 100%\n\nproject/test_main.py &lt;font color=\"#A6E22E\"&gt;.......         [100%]&lt;/font&gt;\n\n&lt;font color=\"#A6E22E\"&gt;============== &lt;/font&gt;&lt;font color=\"#A6E22E\"&gt;&lt;b&gt;7 passed&lt;/b&gt;&lt;/font&gt;&lt;font color=\"#A6E22E\"&gt; in 0.83s ===============&lt;/font&gt;\n</code></pre>"},{"location":"tutorial/fastapi/tests/#recap","title":"Recap","text":"<p>Did you read all that? Wow, I'm impressed! \ud83d\ude0e</p> <p>Adding tests to your application will give you a lot of certainty that everything is working correctly, as you intended.</p> <p>And tests will be notoriously useful when refactoring your code, changing things, adding features. Because tests can help catch a lot of errors that can be easily introduced by refactoring.</p> <p>And they will give you the confidence to work faster and more efficiently, because you know that you are checking if you are not breaking anything. \ud83d\ude05</p> <p>I think tests are one of those things that bring your code and you as a developer to the next professional level. \ud83d\ude0e</p> <p>And if you read and studied all this, you already know a lot of the advanced ideas and tricks that took me years to learn. \ud83d\ude80</p>"},{"location":"tutorial/fastapi/update-extra-data/","title":"Update with Extra Data (Hashed Passwords) with FastAPI","text":"<p>In the previous chapter I explained to you how to update data in the database from input data coming from a FastAPI path operation.</p> <p>Now I'll explain to you how to add extra data, additional to the input data, when updating or creating a model object.</p> <p>This is particularly useful when you need to generate some data in your code that is not coming from the client, but you need to store it in the database. For example, to store a hashed password.</p>"},{"location":"tutorial/fastapi/update-extra-data/#password-hashing","title":"Password Hashing","text":"<p>Let's imagine that each hero in our system also has a password.</p> <p>We should never store the password in plain text in the database, we should only stored a hashed version of it.</p> <p>\"Hashing\" means converting some content (a password in this case) into a sequence of bytes (just a string) that looks like gibberish.</p> <p>Whenever you pass exactly the same content (exactly the same password) you get exactly the same gibberish.</p> <p>But you cannot convert from the gibberish back to the password.</p>"},{"location":"tutorial/fastapi/update-extra-data/#why-use-password-hashing","title":"Why use Password Hashing","text":"<p>If your database is stolen, the thief won't have your users' plaintext passwords, only the hashes.</p> <p>So, the thief won't be able to try to use that password in another system (as many users use the same password everywhere, this would be dangerous).</p> <p>Tip</p> <p>You could use passlib to hash passwords.</p> <p>In this example we will use a fake hashing function to focus on the data changes. \ud83e\udd21</p>"},{"location":"tutorial/fastapi/update-extra-data/#update-models-with-extra-data","title":"Update Models with Extra Data","text":"<p>The <code>Hero</code> table model will now store a new field <code>hashed_password</code>.</p> <p>And the data models for <code>HeroCreate</code> and <code>HeroUpdate</code> will also have a new field <code>password</code> that will contain the plain text password sent by clients.</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    hashed_password: str = Field()\n\n\nclass HeroCreate(HeroBase):\n    password: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n    password: str | None = None\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    hashed_password: str = Field()\n\n\nclass HeroCreate(HeroBase):\n    password: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    password: Optional[str] = None\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    hashed_password: str = Field()\n\n\nclass HeroCreate(HeroBase):\n    password: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    password: Optional[str] = None\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    hashed_password: str = Field()\n\n\nclass HeroCreate(HeroBase):\n    password: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n    password: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef hash_password(password: str) -&gt; str:\n    # Use something like passlib here\n    return f\"not really hashed {password} hehehe\"\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    hashed_password = hash_password(hero.password)\n    with Session(engine) as session:\n        extra_data = {\"hashed_password\": hashed_password}\n        db_hero = Hero.model_validate(hero, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        extra_data = {}\n        if \"password\" in hero_data:\n            password = hero_data[\"password\"]\n            hashed_password = hash_password(password)\n            extra_data[\"hashed_password\"] = hashed_password\n        db_hero.sqlmodel_update(hero_data, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    hashed_password: str = Field()\n\n\nclass HeroCreate(HeroBase):\n    password: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    password: Optional[str] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef hash_password(password: str) -&gt; str:\n    # Use something like passlib here\n    return f\"not really hashed {password} hehehe\"\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    hashed_password = hash_password(hero.password)\n    with Session(engine) as session:\n        extra_data = {\"hashed_password\": hashed_password}\n        db_hero = Hero.model_validate(hero, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        extra_data = {}\n        if \"password\" in hero_data:\n            password = hero_data[\"password\"]\n            hashed_password = hash_password(password)\n            extra_data[\"hashed_password\"] = hashed_password\n        db_hero.sqlmodel_update(hero_data, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    hashed_password: str = Field()\n\n\nclass HeroCreate(HeroBase):\n    password: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    password: Optional[str] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef hash_password(password: str) -&gt; str:\n    # Use something like passlib here\n    return f\"not really hashed {password} hehehe\"\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    hashed_password = hash_password(hero.password)\n    with Session(engine) as session:\n        extra_data = {\"hashed_password\": hashed_password}\n        db_hero = Hero.model_validate(hero, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        extra_data = {}\n        if \"password\" in hero_data:\n            password = hero_data[\"password\"]\n            hashed_password = hash_password(password)\n            extra_data[\"hashed_password\"] = hashed_password\n        db_hero.sqlmodel_update(hero_data, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <p>When a client is creating a new hero, they will send the <code>password</code> in the request body.</p> <p>And when they are updating a hero, they could also send the <code>password</code> in the request body to update it.</p>"},{"location":"tutorial/fastapi/update-extra-data/#hash-the-password","title":"Hash the Password","text":"<p>The app will receive the data from the client using the <code>HeroCreate</code> model.</p> <p>This contains the <code>password</code> field with the plain text password, and we cannot use that one. So we need to generate a hash from it.</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef hash_password(password: str) -&gt; str:\n    # Use something like passlib here\n    return f\"not really hashed {password} hehehe\"\n\n# Code here omitted \ud83d\udc48\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    hashed_password = hash_password(hero.password)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef hash_password(password: str) -&gt; str:\n    # Use something like passlib here\n    return f\"not really hashed {password} hehehe\"\n\n# Code here omitted \ud83d\udc48\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    hashed_password = hash_password(hero.password)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef hash_password(password: str) -&gt; str:\n    # Use something like passlib here\n    return f\"not really hashed {password} hehehe\"\n\n# Code here omitted \ud83d\udc48\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    hashed_password = hash_password(hero.password)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    hashed_password: str = Field()\n\n\nclass HeroCreate(HeroBase):\n    password: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n    password: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef hash_password(password: str) -&gt; str:\n    # Use something like passlib here\n    return f\"not really hashed {password} hehehe\"\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    hashed_password = hash_password(hero.password)\n    with Session(engine) as session:\n        extra_data = {\"hashed_password\": hashed_password}\n        db_hero = Hero.model_validate(hero, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        extra_data = {}\n        if \"password\" in hero_data:\n            password = hero_data[\"password\"]\n            hashed_password = hash_password(password)\n            extra_data[\"hashed_password\"] = hashed_password\n        db_hero.sqlmodel_update(hero_data, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    hashed_password: str = Field()\n\n\nclass HeroCreate(HeroBase):\n    password: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    password: Optional[str] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef hash_password(password: str) -&gt; str:\n    # Use something like passlib here\n    return f\"not really hashed {password} hehehe\"\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    hashed_password = hash_password(hero.password)\n    with Session(engine) as session:\n        extra_data = {\"hashed_password\": hashed_password}\n        db_hero = Hero.model_validate(hero, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        extra_data = {}\n        if \"password\" in hero_data:\n            password = hero_data[\"password\"]\n            hashed_password = hash_password(password)\n            extra_data[\"hashed_password\"] = hashed_password\n        db_hero.sqlmodel_update(hero_data, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    hashed_password: str = Field()\n\n\nclass HeroCreate(HeroBase):\n    password: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    password: Optional[str] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef hash_password(password: str) -&gt; str:\n    # Use something like passlib here\n    return f\"not really hashed {password} hehehe\"\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    hashed_password = hash_password(hero.password)\n    with Session(engine) as session:\n        extra_data = {\"hashed_password\": hashed_password}\n        db_hero = Hero.model_validate(hero, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        extra_data = {}\n        if \"password\" in hero_data:\n            password = hero_data[\"password\"]\n            hashed_password = hash_password(password)\n            extra_data[\"hashed_password\"] = hashed_password\n        db_hero.sqlmodel_update(hero_data, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre>"},{"location":"tutorial/fastapi/update-extra-data/#create-an-object-with-extra-data","title":"Create an Object with Extra Data","text":"<p>Now we need to create the database hero.</p> <p>In previous examples, we have used something like:</p> <pre><code>db_hero = Hero.model_validate(hero)\n</code></pre> <p>This creates a <code>Hero</code> (which is a table model) object from the <code>HeroCreate</code> (which is a data model) object that we received in the request.</p> <p>And this is all good... but as <code>Hero</code> doesn't have a field <code>password</code>, it won't be extracted from the object <code>HeroCreate</code> that has it.</p> <p><code>Hero</code> actually has a <code>hashed_password</code>, but we are not providing it. We need a way to provide it...</p>"},{"location":"tutorial/fastapi/update-extra-data/#dictionary-update","title":"Dictionary Update","text":"<p>Let's pause for a second to check this, when working with dictionaries, there's a way to <code>update</code> a dictionary with extra data from another dictionary, something like this:</p> <pre><code>db_user_dict = {\n    \"name\": \"Deadpond\",\n    \"secret_name\": \"Dive Wilson\",\n    \"age\": None,\n}\n\nhashed_password = \"fakehashedpassword\"\n\nextra_data = {\n    \"hashed_password\": hashed_password,\n    \"age\": 32,\n}\n\ndb_user_dict.update(extra_data)\n\nprint(db_user_dict)\n\n# {\n#     \"name\": \"Deadpond\",\n#     \"secret_name\": \"Dive Wilson\",\n#     \"age\": 32,\n#     \"hashed_password\": \"fakehashedpassword\",\n# }\n</code></pre> <p>This <code>update</code> method allows us to add and override things in the original dictionary with the data from another dictionary.</p> <p>So now, <code>db_user_dict</code> has the updated <code>age</code> field with <code>32</code> instead of <code>None</code> and more importantly, it has the new <code>hashed_password</code> field.</p>"},{"location":"tutorial/fastapi/update-extra-data/#create-a-model-object-with-extra-data","title":"Create a Model Object with Extra Data","text":"<p>Similar to how dictionaries have an <code>update</code> method, SQLModel models have a parameter <code>update</code> in <code>Hero.model_validate()</code> that takes a dictionary with extra data, or data that should take precedence:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    hashed_password = hash_password(hero.password)\n    with Session(engine) as session:\n        extra_data = {\"hashed_password\": hashed_password}\n        db_hero = Hero.model_validate(hero, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    hashed_password = hash_password(hero.password)\n    with Session(engine) as session:\n        extra_data = {\"hashed_password\": hashed_password}\n        db_hero = Hero.model_validate(hero, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    hashed_password = hash_password(hero.password)\n    with Session(engine) as session:\n        extra_data = {\"hashed_password\": hashed_password}\n        db_hero = Hero.model_validate(hero, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    hashed_password: str = Field()\n\n\nclass HeroCreate(HeroBase):\n    password: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n    password: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef hash_password(password: str) -&gt; str:\n    # Use something like passlib here\n    return f\"not really hashed {password} hehehe\"\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    hashed_password = hash_password(hero.password)\n    with Session(engine) as session:\n        extra_data = {\"hashed_password\": hashed_password}\n        db_hero = Hero.model_validate(hero, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        extra_data = {}\n        if \"password\" in hero_data:\n            password = hero_data[\"password\"]\n            hashed_password = hash_password(password)\n            extra_data[\"hashed_password\"] = hashed_password\n        db_hero.sqlmodel_update(hero_data, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    hashed_password: str = Field()\n\n\nclass HeroCreate(HeroBase):\n    password: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    password: Optional[str] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef hash_password(password: str) -&gt; str:\n    # Use something like passlib here\n    return f\"not really hashed {password} hehehe\"\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    hashed_password = hash_password(hero.password)\n    with Session(engine) as session:\n        extra_data = {\"hashed_password\": hashed_password}\n        db_hero = Hero.model_validate(hero, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        extra_data = {}\n        if \"password\" in hero_data:\n            password = hero_data[\"password\"]\n            hashed_password = hash_password(password)\n            extra_data[\"hashed_password\"] = hashed_password\n        db_hero.sqlmodel_update(hero_data, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    hashed_password: str = Field()\n\n\nclass HeroCreate(HeroBase):\n    password: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    password: Optional[str] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef hash_password(password: str) -&gt; str:\n    # Use something like passlib here\n    return f\"not really hashed {password} hehehe\"\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    hashed_password = hash_password(hero.password)\n    with Session(engine) as session:\n        extra_data = {\"hashed_password\": hashed_password}\n        db_hero = Hero.model_validate(hero, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        extra_data = {}\n        if \"password\" in hero_data:\n            password = hero_data[\"password\"]\n            hashed_password = hash_password(password)\n            extra_data[\"hashed_password\"] = hashed_password\n        db_hero.sqlmodel_update(hero_data, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <p>Now, <code>db_hero</code> (which is a table model <code>Hero</code>) will extract its values from <code>hero</code> (which is a data model <code>HeroCreate</code>), and then it will <code>update</code> its values with the extra data from the dictionary <code>extra_data</code>.</p> <p>It will only take the fields defined in <code>Hero</code>, so it will not take the <code>password</code> from <code>HeroCreate</code>. And it will also take its values from the dictionary passed to the <code>update</code> parameter, in this case, the <code>hashed_password</code>.</p> <p>If there's a field in both <code>hero</code> and the <code>extra_data</code>, the value from the <code>extra_data</code> passed to <code>update</code> will take precedence.</p>"},{"location":"tutorial/fastapi/update-extra-data/#update-with-extra-data","title":"Update with Extra Data","text":"<p>Now let's say we want to update a hero that already exists in the database.</p> <p>The same way as before, to avoid removing existing data, we will use <code>exclude_unset=True</code> when calling <code>hero.model_dump()</code>, to get a dictionary with only the data sent by the client.</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    hashed_password: str = Field()\n\n\nclass HeroCreate(HeroBase):\n    password: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n    password: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef hash_password(password: str) -&gt; str:\n    # Use something like passlib here\n    return f\"not really hashed {password} hehehe\"\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    hashed_password = hash_password(hero.password)\n    with Session(engine) as session:\n        extra_data = {\"hashed_password\": hashed_password}\n        db_hero = Hero.model_validate(hero, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        extra_data = {}\n        if \"password\" in hero_data:\n            password = hero_data[\"password\"]\n            hashed_password = hash_password(password)\n            extra_data[\"hashed_password\"] = hashed_password\n        db_hero.sqlmodel_update(hero_data, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    hashed_password: str = Field()\n\n\nclass HeroCreate(HeroBase):\n    password: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    password: Optional[str] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef hash_password(password: str) -&gt; str:\n    # Use something like passlib here\n    return f\"not really hashed {password} hehehe\"\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    hashed_password = hash_password(hero.password)\n    with Session(engine) as session:\n        extra_data = {\"hashed_password\": hashed_password}\n        db_hero = Hero.model_validate(hero, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        extra_data = {}\n        if \"password\" in hero_data:\n            password = hero_data[\"password\"]\n            hashed_password = hash_password(password)\n            extra_data[\"hashed_password\"] = hashed_password\n        db_hero.sqlmodel_update(hero_data, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    hashed_password: str = Field()\n\n\nclass HeroCreate(HeroBase):\n    password: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    password: Optional[str] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef hash_password(password: str) -&gt; str:\n    # Use something like passlib here\n    return f\"not really hashed {password} hehehe\"\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    hashed_password = hash_password(hero.password)\n    with Session(engine) as session:\n        extra_data = {\"hashed_password\": hashed_password}\n        db_hero = Hero.model_validate(hero, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        extra_data = {}\n        if \"password\" in hero_data:\n            password = hero_data[\"password\"]\n            hashed_password = hash_password(password)\n            extra_data[\"hashed_password\"] = hashed_password\n        db_hero.sqlmodel_update(hero_data, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <p>Now, this <code>hero_data</code> dictionary could contain a <code>password</code>. We need to check it, and if it's there, we need to generate the <code>hashed_password</code>.</p> <p>Then we can put that <code>hashed_password</code> in a dictionary.</p> <p>And then we can update the <code>db_hero</code> object using the method <code>db_hero.sqlmodel_update()</code>.</p> <p>It takes a model object or dictionary with the data to update the object and also an additional <code>update</code> argument with extra data.</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        extra_data = {}\n        if \"password\" in hero_data:\n            password = hero_data[\"password\"]\n            hashed_password = hash_password(password)\n            extra_data[\"hashed_password\"] = hashed_password\n        db_hero.sqlmodel_update(hero_data, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        extra_data = {}\n        if \"password\" in hero_data:\n            password = hero_data[\"password\"]\n            hashed_password = hash_password(password)\n            extra_data[\"hashed_password\"] = hashed_password\n        db_hero.sqlmodel_update(hero_data, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        extra_data = {}\n        if \"password\" in hero_data:\n            password = hero_data[\"password\"]\n            hashed_password = hash_password(password)\n            extra_data[\"hashed_password\"] = hashed_password\n        db_hero.sqlmodel_update(hero_data, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    hashed_password: str = Field()\n\n\nclass HeroCreate(HeroBase):\n    password: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n    password: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef hash_password(password: str) -&gt; str:\n    # Use something like passlib here\n    return f\"not really hashed {password} hehehe\"\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    hashed_password = hash_password(hero.password)\n    with Session(engine) as session:\n        extra_data = {\"hashed_password\": hashed_password}\n        db_hero = Hero.model_validate(hero, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        extra_data = {}\n        if \"password\" in hero_data:\n            password = hero_data[\"password\"]\n            hashed_password = hash_password(password)\n            extra_data[\"hashed_password\"] = hashed_password\n        db_hero.sqlmodel_update(hero_data, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    hashed_password: str = Field()\n\n\nclass HeroCreate(HeroBase):\n    password: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    password: Optional[str] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef hash_password(password: str) -&gt; str:\n    # Use something like passlib here\n    return f\"not really hashed {password} hehehe\"\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    hashed_password = hash_password(hero.password)\n    with Session(engine) as session:\n        extra_data = {\"hashed_password\": hashed_password}\n        db_hero = Hero.model_validate(hero, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        extra_data = {}\n        if \"password\" in hero_data:\n            password = hero_data[\"password\"]\n            hashed_password = hash_password(password)\n            extra_data[\"hashed_password\"] = hashed_password\n        db_hero.sqlmodel_update(hero_data, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    hashed_password: str = Field()\n\n\nclass HeroCreate(HeroBase):\n    password: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n    password: Optional[str] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef hash_password(password: str) -&gt; str:\n    # Use something like passlib here\n    return f\"not really hashed {password} hehehe\"\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    hashed_password = hash_password(hero.password)\n    with Session(engine) as session:\n        extra_data = {\"hashed_password\": hashed_password}\n        db_hero = Hero.model_validate(hero, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        extra_data = {}\n        if \"password\" in hero_data:\n            password = hero_data[\"password\"]\n            hashed_password = hash_password(password)\n            extra_data[\"hashed_password\"] = hashed_password\n        db_hero.sqlmodel_update(hero_data, update=extra_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <p>Tip</p> <p>The method <code>db_hero.sqlmodel_update()</code> was added in SQLModel 0.0.16. \ud83d\ude0e</p>"},{"location":"tutorial/fastapi/update-extra-data/#recap","title":"Recap","text":"<p>You can use the <code>update</code> parameter in <code>Hero.model_validate()</code> to provide extra data when creating a new object and <code>Hero.sqlmodel_update()</code> to provide extra data when updating an existing object. \ud83e\udd13</p>"},{"location":"tutorial/fastapi/update/","title":"Update Data with FastAPI","text":"<p>Now let's see how to update data in the database with a FastAPI path operation.</p>"},{"location":"tutorial/fastapi/update/#heroupdate-model","title":"<code>HeroUpdate</code> Model","text":"<p>We want clients to be able to update the <code>name</code>, the <code>secret_name</code>, and the <code>age</code> of a hero.</p> <p>But we don't want them to have to include all the data again just to update a single field.</p> <p>So, we need to have all those fields marked as optional.</p> <p>And because the <code>HeroBase</code> has some of them as required and not optional, we will need to create a new model.</p> <p>Tip</p> <p>Here is one of those cases where it probably makes sense to use an independent model instead of trying to come up with a complex tree of models inheriting from each other.</p> <p>Because each field is actually different (we just change it to <code>Optional</code>, but that's already making it different), it makes sense to have them in their own model.</p> <p>So, let's create this new <code>HeroUpdate</code> model:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <p>This is almost the same as <code>HeroBase</code>, but all the fields are optional, so we can't simply inherit from <code>HeroBase</code>.</p>"},{"location":"tutorial/fastapi/update/#create-the-update-path-operation","title":"Create the Update Path Operation","text":"<p>Now let's use this model in the path operation to update a hero.</p> <p>We will use a <code>PATCH</code> HTTP operation. This is used to partially update data, which is what we are doing.</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <p>We also read the <code>hero_id</code> from the path parameter and the request body, a <code>HeroUpdate</code>.</p>"},{"location":"tutorial/fastapi/update/#read-the-existing-hero","title":"Read the Existing Hero","text":"<p>We take a <code>hero_id</code> with the ID of the hero we want to update.</p> <p>So, we need to read the hero from the database, with the same logic we used to read a single hero, checking if it exists, possibly raising an error for the client if it doesn't exist, etc.</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre>"},{"location":"tutorial/fastapi/update/#get-the-new-data","title":"Get the New Data","text":"<p>The <code>HeroUpdate</code> model has all the fields with default values, because they all have defaults, they are all optional, which is what we want.</p> <p>But that also means that if we just call <code>hero.model_dump()</code> we will get a dictionary that could potentially have several or all of those values with their defaults, for example:</p> <pre><code>{\n    \"name\": None,\n    \"secret_name\": None,\n    \"age\": None,\n}\n</code></pre> <p>And then, if we update the hero in the database with this data, we would be removing any existing values, and that's probably not what the client intended.</p> <p>But fortunately Pydantic models (and so SQLModel models) have a parameter we can pass to the <code>.model_dump()</code> method for that: <code>exclude_unset=True</code>.</p> <p>This tells Pydantic to not include the values that were not sent by the client. Saying it another way, it would only include the values that were sent by the client.</p> <p>So, if the client sent a JSON with no values:</p> <pre><code>{}\n</code></pre> <p>Then the dictionary we would get in Python using <code>hero.model_dump(exclude_unset=True)</code> would be:</p> <pre><code>{}\n</code></pre> <p>But if the client sent a JSON with:</p> <pre><code>{\n    \"name\": \"Deadpuddle\"\n}\n</code></pre> <p>Then the dictionary we would get in Python using <code>hero.model_dump(exclude_unset=True)</code> would be:</p> <pre><code>{\n    \"name\": \"Deadpuddle\"\n}\n</code></pre> <p>Then we use that to get the data that was actually sent by the client:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <p>Tip</p> <p>Before SQLModel 0.0.14, the method was called <code>hero.dict(exclude_unset=True)</code>, but it was renamed to <code>hero.model_dump(exclude_unset=True)</code> to be consistent with Pydantic v2.</p>"},{"location":"tutorial/fastapi/update/#update-the-hero-in-the-database","title":"Update the Hero in the Database","text":"<p>Now that we have a dictionary with the data sent by the client, we can use the method <code>db_hero.sqlmodel_update()</code> to update the object <code>db_hero</code>.</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <pre><code>from typing import Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom fastapi import FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass HeroBase(SQLModel):\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n\nclass HeroCreate(HeroBase):\n    pass\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroUpdate(SQLModel):\n    name: Optional[str] = None\n    secret_name: Optional[str] = None\n    age: Optional[int] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        db_hero = Hero.model_validate(hero)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100)):\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n        return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        db_hero = session.get(Hero, hero_id)\n        if not db_hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        db_hero.sqlmodel_update(hero_data)\n        session.add(db_hero)\n        session.commit()\n        session.refresh(db_hero)\n        return db_hero\n</code></pre> <p>Tip</p> <p>The method <code>db_hero.sqlmodel_update()</code> was added in SQLModel 0.0.16. \ud83e\udd13</p> <p>Before that, you would need to manually get the values and set them using <code>setattr()</code>.</p> <p>The method <code>db_hero.sqlmodel_update()</code> takes an argument with another model object or a dictionary.</p> <p>For each of the fields in the original model object (<code>db_hero</code> in this example), it checks if the field is available in the argument (<code>hero_data</code> in this example) and then updates it with the provided value.</p>"},{"location":"tutorial/fastapi/update/#remove-fields","title":"Remove Fields","text":"<p>Here's a bonus. \ud83c\udf81</p> <p>When getting the dictionary of data sent by the client, we only include what the client actually sent.</p> <p>This sounds simple, but it has some additional nuances that become nice features. \u2728</p> <p>We are not simply omitting the data that has the default values.</p> <p>And we are not simply omitting anything that is <code>None</code>.</p> <p>This means that if a model in the database has a value different than the default, the client could reset it to the same value as the default, or even <code>None</code>, and we would still notice it and update it accordingly. \ud83e\udd2f\ud83d\ude80</p> <p>So, if the client wanted to intentionally remove the <code>age</code> of a hero, they could just send a JSON with:</p> <pre><code>{\n    \"age\": null\n}\n</code></pre> <p>And when getting the data with <code>hero.model_dump(exclude_unset=True)</code>, we would get:</p> <pre><code>{\n    \"age\": None\n}\n</code></pre> <p>So, we would use that value and update the <code>age</code> to <code>None</code> in the database, just as the client intended.</p> <p>Notice that <code>age</code> here is <code>None</code>, and we still detected it.</p> <p>Also, that <code>name</code> was not even sent, and we don't accidentally set it to <code>None</code> or something. We just didn't touch it because the client didn't send it, so we are perfectly fine, even in these corner cases. \u2728</p> <p>These are some of the advantages of Pydantic, that we can use with SQLModel. \ud83c\udf89</p>"},{"location":"tutorial/fastapi/update/#recap","title":"Recap","text":"<p>Using <code>.model_dump(exclude_unset=True)</code> in SQLModel models (and Pydantic models) we can easily update data correctly, even in the edge cases. \ud83d\ude0e</p>"},{"location":"tutorial/many-to-many/","title":"Many to Many - Intro","text":"<p>We saw how to work with One-to-Many relationships in the data.</p> <p>But how do you handle Many-to-Many relationships?</p> <p>Let's explore them. \ud83d\ude80</p>"},{"location":"tutorial/many-to-many/#starting-from-one-to-many","title":"Starting from One-to-Many","text":"<p>Let's start with the familiar and simpler option of One-to-Many.</p> <p>We have one table with teams and one with heroes, and for each one team, we can have many heroes.</p> <p>As each team could have multiple heroes, we wouldn't be able to put the Hero IDs in columns for all of them in the <code>team</code> table.</p> <p>But as each hero can belong only to one team, we have a single column in the heroes table to point to the specific team (to a specific row in the <code>team</code> table).</p> <p>The <code>team</code> table looks like this:</p> idnameheadquarters 1PreventersSharp Tower 2Z-ForceSister Margaret's Bar <p>Tip</p> <p>Notice that it doesn't have any foreign key to other tables.</p> <p>And the <code>hero</code> table looks like this:</p> idnamesecret_nameageteam_id 1DeadpondDive Wilsonnull2 2Spider-BoyPedro Parqueadornull1 3Rusty-ManTommy Sharp481 <p>We have a column in the <code>hero</code> table for the <code>team_id</code> that points to the ID of a specific team in the <code>team</code> table.</p> <p>This is how we connect each <code>hero</code> with a <code>team</code>:</p> <p></p> <p>Notice that each hero can only have one connection. But each team can receive many connections. In particular, the team Preventers has two heroes.</p>"},{"location":"tutorial/many-to-many/#introduce-many-to-many","title":"Introduce Many-to-Many","text":"<p>But let's say that as Deadpond is a great character, they recruit him to the new Preventers team, but he's still part of the Z-Force team too.</p> <p>So, now, we need to be able to have a hero that is connected to many teams. And then, each team, should still be able to receive many heroes. So we need a Many-to-Many relationship.</p> <p>A naive approach that wouldn't work very well is to add more columns to the <code>hero</code> table. Imagine we add two extra columns. Now we could connect a single <code>hero</code> to 3 teams in total, but not more. So we haven't really solved the problem of supporting many teams, only a very limited fixed number of teams.</p> <p>We can do better! \ud83e\udd13</p>"},{"location":"tutorial/many-to-many/#link-table","title":"Link Table","text":"<p>We can create another table that would represent the link between the <code>hero</code> and <code>team</code> tables.</p> <p>All this table contains is two columns, <code>hero_id</code> and <code>team_id</code>.</p> <p>Both columns are foreign keys pointing to the ID of a specific row in the <code>hero</code> and <code>team</code> tables.</p> <p>As this will represent the hero-team-link, let's call the table <code>heroteamlink</code>.</p> <p>It would look like this:</p> <p></p> <p>Notice that now the table <code>hero</code> doesn't have a <code>team_id</code> column anymore, it is replaced by this link table.</p> <p>And the <code>team</code> table, just as before, doesn't have any foreign key either.</p> <p>Specifically, the new link table <code>heroteamlink</code> would be:</p> hero_idteam_id 11 12 21 31 <p>Info</p> <p>Other names used for this link table are:</p> <ul> <li>association table</li> <li>secondary table</li> <li>junction table</li> <li>intermediate table</li> <li>join table</li> <li>through table</li> <li>relationship table</li> <li>connection table</li> </ul> <p>I'm using the term \"link table\" because it's short, doesn't collide with other terms already used (e.g. \"relationship\"), it's easy to remember how to write it, etc.</p>"},{"location":"tutorial/many-to-many/#link-primary-key","title":"Link Primary Key","text":"<p>Cool, we have a link table with just two columns. But remember that SQL databases require each row to have a primary key that uniquely identifies the row in that table?</p> <p>Now, what is the primary key in this table?</p> <p>How to we identify each unique row?</p> <p>Should we add another column just to be the primary key of this link table? Nope! We don't have to do that. \ud83d\udc4c</p> <p>Both columns are the primary key of each row in this table (and each row just has those two columns). \u2728</p> <p>A primary key is a way to uniquely identify a particular row in a single table. But it doesn't have to be a single column.</p> <p>A primary key can be a group of the columns in a table, which combined are unique in this table.</p> <p>Check the table above again, see that each row has a unique combination of <code>hero_id</code> and <code>team_id</code>?</p> <p>We cannot have duplicated primary keys, which means that we cannot have duplicated links between <code>hero</code> and <code>team</code>, exactly what we want!</p> <p>For example, the database will now prevent an error like this, with a duplicated row:</p> hero_idteam_id 11 12 21 31 3 \ud83d\udea81 \ud83d\udea8 <p>It wouldn't make sense to have a hero be part of the same team twice, right?</p> <p>Now, just by using the two columns as the primary keys of this table, SQL will take care of preventing us from duplicating a link between <code>hero</code> and <code>team</code>. \u2705</p>"},{"location":"tutorial/many-to-many/#recap","title":"Recap","text":"<p>An intro with a recap! That's weird... but anyway. \ud83e\udd37</p> <p>Now you have the theory about the many-to-many relationships, and how to solve them with tables in SQL. \ud83e\udd13</p> <p>Now let's check how to write the SQL and the code to work with them. \ud83d\ude80</p>"},{"location":"tutorial/many-to-many/create-data/","title":"Create Data with Many-to-Many Relationships","text":"<p>Let's continue from where we left and create some data.</p> <p>We'll create data for this same many-to-many relationship with a link table:</p> <p></p> <p>We'll continue from where we left off with the previous code.</p> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", primary_key=True)\n    hero_id: int | None = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: List[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/many-to-many/create-data/#create-heroes","title":"Create Heroes","text":"<p>As we have done before, we'll create a function <code>create_heroes()</code> and we'll create some teams and heroes in it:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", primary_key=True)\n    hero_id: int | None = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: List[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>This is very similar to what we have done before.</p> <p>We create a couple of teams, and then three heroes.</p> <p>The only new detail is that instead of using an argument <code>team</code> we now use <code>teams</code>, because that is the name of the new relationship attribute. And more importantly, we pass a list of teams (even if it contains a single team).</p> <p>See how Deadpond now belongs to the two teams?</p>"},{"location":"tutorial/many-to-many/create-data/#commit-refresh-and-print","title":"Commit, Refresh, and Print","text":"<p>Now let's do as we have done before, <code>commit</code> the session, <code>refresh</code> the data, and print it:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", primary_key=True)\n    hero_id: int | None = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: List[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/many-to-many/create-data/#add-to-main","title":"Add to Main","text":"<p>As before, add the <code>create_heroes()</code> function to the <code>main()</code> function to make sure it is called when running this program from the command line:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", primary_key=True)\n    hero_id: int | None = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: List[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/many-to-many/create-data/#run-the-program","title":"Run the Program","text":"<p>If we run the program from the command line, it would output:</p> <pre><code>$ python app.py\n\n// Previous output omitted \ud83d\ude48\n\n// Automatically start a new transaction\nINFO Engine BEGIN (implicit)\n// Insert the hero data first\nINFO Engine INSERT INTO hero (name, secret_name, age) VALUES (?, ?, ?)\nINFO Engine [generated in 0.00041s] ('Deadpond', 'Dive Wilson', None)\nINFO Engine INSERT INTO hero (name, secret_name, age) VALUES (?, ?, ?)\nINFO Engine [cached since 0.001942s ago] ('Rusty-Man', 'Tommy Sharp', 48)\nINFO Engine INSERT INTO hero (name, secret_name, age) VALUES (?, ?, ?)\nINFO Engine [cached since 0.002541s ago] ('Spider-Boy', 'Pedro Parqueador', None)\n// Insert the team data second\nINFO Engine INSERT INTO team (name, headquarters) VALUES (?, ?)\nINFO Engine [generated in 0.00037s] ('Z-Force', 'Sister Margaret's Bar')\nINFO Engine INSERT INTO team (name, headquarters) VALUES (?, ?)\nINFO Engine [cached since 0.001239s ago] ('Preventers', 'Sharp Tower')\n// Insert the link data last, to be able to re-use the created IDs\nINFO Engine INSERT INTO heroteamlink (team_id, hero_id) VALUES (?, ?)\nINFO Engine [generated in 0.00026s] ((2, 3), (1, 1), (2, 1), (2, 2))\n// Commit and save the data in the database\nINFO Engine COMMIT\n\n// Automatically start a new transaction\nINFO Engine BEGIN (implicit)\n// Refresh the data\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [generated in 0.00019s] (1,)\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.001959s ago] (2,)\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.003215s ago] (3,)\n\n// Print Deadpond\nDeadpond: name='Deadpond' age=None id=1 secret_name='Dive Wilson'\n\n// Accessing the .team attribute triggers a refresh\nINFO Engine SELECT team.id AS team_id, team.name AS team_name, team.headquarters AS team_headquarters\nFROM team, heroteamlink\nWHERE ? = heroteamlink.hero_id AND team.id = heroteamlink.team_id\nINFO Engine [generated in 0.00025s] (1,)\n\n// Print Deadpond's teams, 2 teams! \ud83c\udf89\nDeadpond teams: [Team(id=1, name='Z-Force', headquarters='Sister Margaret's Bar'), Team(id=2, name='Preventers', headquarters='Sharp Tower')]\n\n// Print Rusty-Man\nRusty-Man: name='Rusty-Man' age=48 id=2 secret_name='Tommy Sharp'\n\n// Accessing the .team attribute triggers a refresh\nINFO Engine SELECT team.id AS team_id, team.name AS team_name, team.headquarters AS team_headquarters\nFROM team, heroteamlink\nWHERE ? = heroteamlink.hero_id AND team.id = heroteamlink.team_id\nINFO Engine [cached since 0.001716s ago] (2,)\n\n// Print Rusty-Man teams, just one, but still a list\nRusty-Man Teams: [Team(id=2, name='Preventers', headquarters='Sharp Tower')]\n\n// Print Spider-Boy\nSpider-Boy: name='Spider-Boy' age=None id=3 secret_name='Pedro Parqueador'\n\n// Accessing the .team attribute triggers a refresh\nINFO Engine SELECT team.id AS team_id, team.name AS team_name, team.headquarters AS team_headquarters\nFROM team, heroteamlink\nWHERE ? = heroteamlink.hero_id AND team.id = heroteamlink.team_id\nINFO Engine [cached since 0.002739s ago] (3,)\n\n// Print Spider-Boy's teams, just one, but still a list\nSpider-Boy Teams: [Team(id=2, name='Preventers', headquarters='Sharp Tower')]\n\n// Automatic roll back any previous automatic transaction, at the end of the with block\nINFO Engine ROLLBACK\n</code></pre>"},{"location":"tutorial/many-to-many/create-data/#recap","title":"Recap","text":"<p>After setting up the model link, using it with relationship attributes is fairly straightforward, just Python objects. \u2728</p>"},{"location":"tutorial/many-to-many/create-models-with-link/","title":"Create Models with a Many-to-Many Link","text":"<p>We'll now support many-to-many relationships using a link table like this:</p> <p></p> <p>Let's start by defining the class models, including the link table model.</p>"},{"location":"tutorial/many-to-many/create-models-with-link/#link-table-model","title":"Link Table Model","text":"<p>As we want to support a many-to-many relationship, now we need a link table to connect them.</p> <p>We can create it just as any other SQLModel:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", primary_key=True)\n    hero_id: int | None = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", primary_key=True)\n    hero_id: int | None = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: List[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>This is a SQLModel class model table like any other.</p> <p>It has two fields, <code>team_id</code> and <code>hero_id</code>.</p> <p>They are both foreign keys to their respective tables. We'll create those models in a second, but you already know how that works.</p> <p>And both fields are primary keys. We hadn't used this before. \ud83e\udd13</p>"},{"location":"tutorial/many-to-many/create-models-with-link/#team-model","title":"Team Model","text":"<p>Let's see the <code>Team</code> model, it's almost identical as before, but with a little change:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", primary_key=True)\n    hero_id: int | None = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: List[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>The relationship attribute <code>heroes</code> is still a list of heroes, annotated as <code>List[\"Hero\"]</code>. Again, we use <code>\"Hero\"</code> in quotes because we haven't declared that class yet by this point in the code (but as you know, editors and SQLModel understand that).</p> <p>We use the same <code>Relationship()</code> function.</p> <p>We use <code>back_populates=\"teams\"</code>. Before we referenced an attribute <code>team</code>, but as now we can have many, we'll rename it to <code>teams</code> when creating the <code>Hero</code> model.</p> <p>And here's the important part to allow the many-to-many relationship, we use <code>link_model=HeroTeamLink</code>. That's it. \u2728</p>"},{"location":"tutorial/many-to-many/create-models-with-link/#hero-model","title":"Hero Model","text":"<p>Let's see the other side, here's the <code>Hero</code> model:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: List[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", primary_key=True)\n    hero_id: int | None = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: List[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>We removed the previous <code>team_id</code> field (column) because now the relationship is done via the link table. \ud83d\udd25</p> <p>The relationship attribute is now named <code>teams</code> instead of <code>team</code>, as now we support multiple teams.</p> <p>It is no longer an <code>Optional[Team]</code> but a list of teams, annotated as <code>List[Team]</code>.</p> <p>We are using the <code>Relationship()</code> here too.</p> <p>We still have <code>back_populates=\"heroes\"</code> as before.</p> <p>And now we have a <code>link_model=HeroTeamLink</code>. \u2728</p>"},{"location":"tutorial/many-to-many/create-models-with-link/#create-the-tables","title":"Create the Tables","text":"<p>The same as before, we will have the rest of the code to create the engine, and a function to create all the tables <code>create_db_and_tables()</code>.</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", primary_key=True)\n    hero_id: int | None = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: List[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>And as in previous examples, we will add that function to a function <code>main()</code>, and we will call that <code>main()</code> function in the main block:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef main():\n    create_db_and_tables()\n    # We will do more stuff here later \ud83d\udc48\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef main():\n    create_db_and_tables()\n    # We will do more stuff here later \ud83d\udc48\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef main():\n    create_db_and_tables()\n    # We will do more stuff here later \ud83d\udc48\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", primary_key=True)\n    hero_id: int | None = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: List[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/many-to-many/create-models-with-link/#run-the-code","title":"Run the Code","text":"<p>If you run the code in the command line, it would output:</p> <pre><code>$ python app.py\n\n// Boilerplate omitted \ud83d\ude09\n\nINFO Engine\nCREATE TABLE team (\n        id INTEGER,\n        name VARCHAR NOT NULL,\n        headquarters VARCHAR NOT NULL,\n        PRIMARY KEY (id)\n)\n\n\nINFO Engine [no key 0.00033s] ()\nINFO Engine\nCREATE TABLE hero (\n        id INTEGER,\n        name VARCHAR NOT NULL,\n        secret_name VARCHAR NOT NULL,\n        age INTEGER,\n        PRIMARY KEY (id)\n)\n\n\nINFO Engine [no key 0.00016s] ()\nINFO Engine\n\n// Our shinny new link table \u2728\nCREATE TABLE heroteamlink (\n        team_id INTEGER,\n        hero_id INTEGER,\n        PRIMARY KEY (team_id, hero_id),\n        FOREIGN KEY(team_id) REFERENCES team (id),\n        FOREIGN KEY(hero_id) REFERENCES hero (id)\n)\n\n\nINFO Engine [no key 0.00031s] ()\nINFO Engine COMMIT\n</code></pre>"},{"location":"tutorial/many-to-many/create-models-with-link/#recap","title":"Recap","text":"<p>We can support many-to-many relationships between tables by declaring a link table.</p> <p>We can create it the same way as with other SQLModel classes, and then use it in the <code>link_model</code> parameter to <code>Relationship()</code>.</p> <p>Now let's work with data using these models in the next chapters. \ud83e\udd13</p>"},{"location":"tutorial/many-to-many/link-with-extra-fields/","title":"Link Model with Extra Fields","text":"<p>In the previous example we never interacted directly with the <code>HeroTeamLink</code> model, it was all through the automatic many-to-many relationship.</p> <p>But what if we needed to have additional data to describe the link between the two models?</p> <p>Let's say that we want to have an extra field/column to say if a hero is still training in that team or if they are already going on missions and stuff.</p> <p>Let's see how to achieve that.</p>"},{"location":"tutorial/many-to-many/link-with-extra-fields/#link-model-with-two-one-to-many","title":"Link Model with Two One-to-Many","text":"<p>The way to handle this is to explicitly use the link model, to be able to get and modify its data (apart from the foreign keys pointing to the two models for <code>Hero</code> and <code>Team</code>).</p> <p>In the end, the way it works is just like two one-to-many relationships combined.</p> <p>A row in the table <code>heroteamlink</code> points to one particular hero, but a single hero can be connected to many hero-team links, so it's one-to-many.</p> <p>And also, the same row in the table <code>heroteamlink</code> points to one team, but a single team can be connected to many hero-team links, so it's also one-to-many.</p> <p>Tip</p> <p>The previous many-to-many relationship was also just two one-to-many relationships combined, but now it's going to be much more explicit.</p>"},{"location":"tutorial/many-to-many/link-with-extra-fields/#update-link-model","title":"Update Link Model","text":"<p>Let's update the <code>HeroTeamLink</code> model.</p> <p>We will add a new field <code>is_training</code>.</p> <p>And we will also add two relationship attributes, for the linked <code>team</code> and <code>hero</code>:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", primary_key=True)\n    hero_id: int | None = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\n    is_training: bool = False\n\n    team: \"Team\" = Relationship(back_populates=\"hero_links\")\n    hero: \"Hero\" = Relationship(back_populates=\"team_links\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n    is_training: bool = False\n\n    team: \"Team\" = Relationship(back_populates=\"hero_links\")\n    hero: \"Hero\" = Relationship(back_populates=\"team_links\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n    is_training: bool = False\n\n    team: \"Team\" = Relationship(back_populates=\"hero_links\")\n    hero: \"Hero\" = Relationship(back_populates=\"team_links\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", primary_key=True)\n    hero_id: int | None = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\n    is_training: bool = False\n\n    team: \"Team\" = Relationship(back_populates=\"hero_links\")\n    hero: \"Hero\" = Relationship(back_populates=\"team_links\")\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    hero_links: list[HeroTeamLink] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_links: list[HeroTeamLink] = Relationship(back_populates=\"hero\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\",\n            secret_name=\"Pedro Parqueador\",\n        )\n        deadpond_team_z_link = HeroTeamLink(team=team_z_force, hero=hero_deadpond)\n        deadpond_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_deadpond, is_training=True\n        )\n        spider_boy_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_spider_boy, is_training=True\n        )\n        rusty_man_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_rusty_man\n        )\n\n        session.add(deadpond_team_z_link)\n        session.add(deadpond_preventers_link)\n        session.add(spider_boy_preventers_link)\n        session.add(rusty_man_preventers_link)\n        session.commit()\n\n        for link in team_z_force.hero_links:\n            print(\"Z-Force hero:\", link.hero, \"is training:\", link.is_training)\n\n        for link in team_preventers.hero_links:\n            print(\"Preventers hero:\", link.hero, \"is training:\", link.is_training)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        spider_boy_z_force_link = HeroTeamLink(\n            team=team_z_force, hero=hero_spider_boy, is_training=True\n        )\n        team_z_force.hero_links.append(spider_boy_z_force_link)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.team_links)\n        print(\"Z-Force heroes:\", team_z_force.hero_links)\n\n        for link in hero_spider_boy.team_links:\n            if link.team.name == \"Preventers\":\n                link.is_training = False\n\n        session.add(hero_spider_boy)\n        session.commit()\n\n        for link in hero_spider_boy.team_links:\n            print(\"Spider-Boy team:\", link.team, \"is training:\", link.is_training)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n    is_training: bool = False\n\n    team: \"Team\" = Relationship(back_populates=\"hero_links\")\n    hero: \"Hero\" = Relationship(back_populates=\"team_links\")\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    hero_links: list[HeroTeamLink] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_links: list[HeroTeamLink] = Relationship(back_populates=\"hero\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\",\n            secret_name=\"Pedro Parqueador\",\n        )\n        deadpond_team_z_link = HeroTeamLink(team=team_z_force, hero=hero_deadpond)\n        deadpond_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_deadpond, is_training=True\n        )\n        spider_boy_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_spider_boy, is_training=True\n        )\n        rusty_man_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_rusty_man\n        )\n\n        session.add(deadpond_team_z_link)\n        session.add(deadpond_preventers_link)\n        session.add(spider_boy_preventers_link)\n        session.add(rusty_man_preventers_link)\n        session.commit()\n\n        for link in team_z_force.hero_links:\n            print(\"Z-Force hero:\", link.hero, \"is training:\", link.is_training)\n\n        for link in team_preventers.hero_links:\n            print(\"Preventers hero:\", link.hero, \"is training:\", link.is_training)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        spider_boy_z_force_link = HeroTeamLink(\n            team=team_z_force, hero=hero_spider_boy, is_training=True\n        )\n        team_z_force.hero_links.append(spider_boy_z_force_link)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.team_links)\n        print(\"Z-Force heroes:\", team_z_force.hero_links)\n\n        for link in hero_spider_boy.team_links:\n            if link.team.name == \"Preventers\":\n                link.is_training = False\n\n        session.add(hero_spider_boy)\n        session.commit()\n\n        for link in hero_spider_boy.team_links:\n            print(\"Spider-Boy team:\", link.team, \"is training:\", link.is_training)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n    is_training: bool = False\n\n    team: \"Team\" = Relationship(back_populates=\"hero_links\")\n    hero: \"Hero\" = Relationship(back_populates=\"team_links\")\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    hero_links: List[HeroTeamLink] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_links: List[HeroTeamLink] = Relationship(back_populates=\"hero\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\",\n            secret_name=\"Pedro Parqueador\",\n        )\n        deadpond_team_z_link = HeroTeamLink(team=team_z_force, hero=hero_deadpond)\n        deadpond_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_deadpond, is_training=True\n        )\n        spider_boy_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_spider_boy, is_training=True\n        )\n        rusty_man_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_rusty_man\n        )\n\n        session.add(deadpond_team_z_link)\n        session.add(deadpond_preventers_link)\n        session.add(spider_boy_preventers_link)\n        session.add(rusty_man_preventers_link)\n        session.commit()\n\n        for link in team_z_force.hero_links:\n            print(\"Z-Force hero:\", link.hero, \"is training:\", link.is_training)\n\n        for link in team_preventers.hero_links:\n            print(\"Preventers hero:\", link.hero, \"is training:\", link.is_training)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        spider_boy_z_force_link = HeroTeamLink(\n            team=team_z_force, hero=hero_spider_boy, is_training=True\n        )\n        team_z_force.hero_links.append(spider_boy_z_force_link)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.team_links)\n        print(\"Z-Force heroes:\", team_z_force.hero_links)\n\n        for link in hero_spider_boy.team_links:\n            if link.team.name == \"Preventers\":\n                link.is_training = False\n\n        session.add(hero_spider_boy)\n        session.commit()\n\n        for link in hero_spider_boy.team_links:\n            print(\"Spider-Boy team:\", link.team, \"is training:\", link.is_training)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>The new relationship attributes have their own <code>back_populates</code> pointing to new relationship attributes we will create in the <code>Hero</code> and <code>Team</code> models:</p> <ul> <li><code>team</code>: has <code>back_populates=\"hero_links\"</code>, because in the <code>Team</code> model, the attribute will contain the links to the team's heroes.</li> <li><code>hero</code>: has <code>back_populates=\"team_links\"</code>, because in the <code>Hero</code> model, the attribute will contain the links to the hero's teams.</li> </ul> <p>Info</p> <p>In SQLAlchemy this is called an Association Object or Association Model.</p> <p>I'm calling it Link Model just because that's easier to write avoiding typos. But you are also free to call it however you want. \ud83d\ude09</p>"},{"location":"tutorial/many-to-many/link-with-extra-fields/#update-team-model","title":"Update Team Model","text":"<p>Now let's update the <code>Team</code> model.</p> <p>We no longer have the <code>heroes</code> relationship attribute, and instead we have the new <code>hero_links</code> attribute:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    hero_links: list[HeroTeamLink] = Relationship(back_populates=\"team\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    hero_links: list[HeroTeamLink] = Relationship(back_populates=\"team\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    hero_links: List[HeroTeamLink] = Relationship(back_populates=\"team\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", primary_key=True)\n    hero_id: int | None = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\n    is_training: bool = False\n\n    team: \"Team\" = Relationship(back_populates=\"hero_links\")\n    hero: \"Hero\" = Relationship(back_populates=\"team_links\")\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    hero_links: list[HeroTeamLink] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_links: list[HeroTeamLink] = Relationship(back_populates=\"hero\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\",\n            secret_name=\"Pedro Parqueador\",\n        )\n        deadpond_team_z_link = HeroTeamLink(team=team_z_force, hero=hero_deadpond)\n        deadpond_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_deadpond, is_training=True\n        )\n        spider_boy_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_spider_boy, is_training=True\n        )\n        rusty_man_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_rusty_man\n        )\n\n        session.add(deadpond_team_z_link)\n        session.add(deadpond_preventers_link)\n        session.add(spider_boy_preventers_link)\n        session.add(rusty_man_preventers_link)\n        session.commit()\n\n        for link in team_z_force.hero_links:\n            print(\"Z-Force hero:\", link.hero, \"is training:\", link.is_training)\n\n        for link in team_preventers.hero_links:\n            print(\"Preventers hero:\", link.hero, \"is training:\", link.is_training)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        spider_boy_z_force_link = HeroTeamLink(\n            team=team_z_force, hero=hero_spider_boy, is_training=True\n        )\n        team_z_force.hero_links.append(spider_boy_z_force_link)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.team_links)\n        print(\"Z-Force heroes:\", team_z_force.hero_links)\n\n        for link in hero_spider_boy.team_links:\n            if link.team.name == \"Preventers\":\n                link.is_training = False\n\n        session.add(hero_spider_boy)\n        session.commit()\n\n        for link in hero_spider_boy.team_links:\n            print(\"Spider-Boy team:\", link.team, \"is training:\", link.is_training)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n    is_training: bool = False\n\n    team: \"Team\" = Relationship(back_populates=\"hero_links\")\n    hero: \"Hero\" = Relationship(back_populates=\"team_links\")\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    hero_links: list[HeroTeamLink] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_links: list[HeroTeamLink] = Relationship(back_populates=\"hero\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\",\n            secret_name=\"Pedro Parqueador\",\n        )\n        deadpond_team_z_link = HeroTeamLink(team=team_z_force, hero=hero_deadpond)\n        deadpond_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_deadpond, is_training=True\n        )\n        spider_boy_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_spider_boy, is_training=True\n        )\n        rusty_man_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_rusty_man\n        )\n\n        session.add(deadpond_team_z_link)\n        session.add(deadpond_preventers_link)\n        session.add(spider_boy_preventers_link)\n        session.add(rusty_man_preventers_link)\n        session.commit()\n\n        for link in team_z_force.hero_links:\n            print(\"Z-Force hero:\", link.hero, \"is training:\", link.is_training)\n\n        for link in team_preventers.hero_links:\n            print(\"Preventers hero:\", link.hero, \"is training:\", link.is_training)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        spider_boy_z_force_link = HeroTeamLink(\n            team=team_z_force, hero=hero_spider_boy, is_training=True\n        )\n        team_z_force.hero_links.append(spider_boy_z_force_link)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.team_links)\n        print(\"Z-Force heroes:\", team_z_force.hero_links)\n\n        for link in hero_spider_boy.team_links:\n            if link.team.name == \"Preventers\":\n                link.is_training = False\n\n        session.add(hero_spider_boy)\n        session.commit()\n\n        for link in hero_spider_boy.team_links:\n            print(\"Spider-Boy team:\", link.team, \"is training:\", link.is_training)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n    is_training: bool = False\n\n    team: \"Team\" = Relationship(back_populates=\"hero_links\")\n    hero: \"Hero\" = Relationship(back_populates=\"team_links\")\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    hero_links: List[HeroTeamLink] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_links: List[HeroTeamLink] = Relationship(back_populates=\"hero\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\",\n            secret_name=\"Pedro Parqueador\",\n        )\n        deadpond_team_z_link = HeroTeamLink(team=team_z_force, hero=hero_deadpond)\n        deadpond_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_deadpond, is_training=True\n        )\n        spider_boy_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_spider_boy, is_training=True\n        )\n        rusty_man_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_rusty_man\n        )\n\n        session.add(deadpond_team_z_link)\n        session.add(deadpond_preventers_link)\n        session.add(spider_boy_preventers_link)\n        session.add(rusty_man_preventers_link)\n        session.commit()\n\n        for link in team_z_force.hero_links:\n            print(\"Z-Force hero:\", link.hero, \"is training:\", link.is_training)\n\n        for link in team_preventers.hero_links:\n            print(\"Preventers hero:\", link.hero, \"is training:\", link.is_training)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        spider_boy_z_force_link = HeroTeamLink(\n            team=team_z_force, hero=hero_spider_boy, is_training=True\n        )\n        team_z_force.hero_links.append(spider_boy_z_force_link)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.team_links)\n        print(\"Z-Force heroes:\", team_z_force.hero_links)\n\n        for link in hero_spider_boy.team_links:\n            if link.team.name == \"Preventers\":\n                link.is_training = False\n\n        session.add(hero_spider_boy)\n        session.commit()\n\n        for link in hero_spider_boy.team_links:\n            print(\"Spider-Boy team:\", link.team, \"is training:\", link.is_training)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/many-to-many/link-with-extra-fields/#update-hero-model","title":"Update Hero Model","text":"<p>The same with the <code>Hero</code> model.</p> <p>We change the <code>teams</code> relationship attribute for <code>team_links</code>:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_links: list[HeroTeamLink] = Relationship(back_populates=\"hero\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_links: list[HeroTeamLink] = Relationship(back_populates=\"hero\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_links: List[HeroTeamLink] = Relationship(back_populates=\"hero\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", primary_key=True)\n    hero_id: int | None = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\n    is_training: bool = False\n\n    team: \"Team\" = Relationship(back_populates=\"hero_links\")\n    hero: \"Hero\" = Relationship(back_populates=\"team_links\")\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    hero_links: list[HeroTeamLink] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_links: list[HeroTeamLink] = Relationship(back_populates=\"hero\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\",\n            secret_name=\"Pedro Parqueador\",\n        )\n        deadpond_team_z_link = HeroTeamLink(team=team_z_force, hero=hero_deadpond)\n        deadpond_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_deadpond, is_training=True\n        )\n        spider_boy_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_spider_boy, is_training=True\n        )\n        rusty_man_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_rusty_man\n        )\n\n        session.add(deadpond_team_z_link)\n        session.add(deadpond_preventers_link)\n        session.add(spider_boy_preventers_link)\n        session.add(rusty_man_preventers_link)\n        session.commit()\n\n        for link in team_z_force.hero_links:\n            print(\"Z-Force hero:\", link.hero, \"is training:\", link.is_training)\n\n        for link in team_preventers.hero_links:\n            print(\"Preventers hero:\", link.hero, \"is training:\", link.is_training)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        spider_boy_z_force_link = HeroTeamLink(\n            team=team_z_force, hero=hero_spider_boy, is_training=True\n        )\n        team_z_force.hero_links.append(spider_boy_z_force_link)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.team_links)\n        print(\"Z-Force heroes:\", team_z_force.hero_links)\n\n        for link in hero_spider_boy.team_links:\n            if link.team.name == \"Preventers\":\n                link.is_training = False\n\n        session.add(hero_spider_boy)\n        session.commit()\n\n        for link in hero_spider_boy.team_links:\n            print(\"Spider-Boy team:\", link.team, \"is training:\", link.is_training)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n    is_training: bool = False\n\n    team: \"Team\" = Relationship(back_populates=\"hero_links\")\n    hero: \"Hero\" = Relationship(back_populates=\"team_links\")\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    hero_links: list[HeroTeamLink] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_links: list[HeroTeamLink] = Relationship(back_populates=\"hero\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\",\n            secret_name=\"Pedro Parqueador\",\n        )\n        deadpond_team_z_link = HeroTeamLink(team=team_z_force, hero=hero_deadpond)\n        deadpond_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_deadpond, is_training=True\n        )\n        spider_boy_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_spider_boy, is_training=True\n        )\n        rusty_man_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_rusty_man\n        )\n\n        session.add(deadpond_team_z_link)\n        session.add(deadpond_preventers_link)\n        session.add(spider_boy_preventers_link)\n        session.add(rusty_man_preventers_link)\n        session.commit()\n\n        for link in team_z_force.hero_links:\n            print(\"Z-Force hero:\", link.hero, \"is training:\", link.is_training)\n\n        for link in team_preventers.hero_links:\n            print(\"Preventers hero:\", link.hero, \"is training:\", link.is_training)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        spider_boy_z_force_link = HeroTeamLink(\n            team=team_z_force, hero=hero_spider_boy, is_training=True\n        )\n        team_z_force.hero_links.append(spider_boy_z_force_link)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.team_links)\n        print(\"Z-Force heroes:\", team_z_force.hero_links)\n\n        for link in hero_spider_boy.team_links:\n            if link.team.name == \"Preventers\":\n                link.is_training = False\n\n        session.add(hero_spider_boy)\n        session.commit()\n\n        for link in hero_spider_boy.team_links:\n            print(\"Spider-Boy team:\", link.team, \"is training:\", link.is_training)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n    is_training: bool = False\n\n    team: \"Team\" = Relationship(back_populates=\"hero_links\")\n    hero: \"Hero\" = Relationship(back_populates=\"team_links\")\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    hero_links: List[HeroTeamLink] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_links: List[HeroTeamLink] = Relationship(back_populates=\"hero\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\",\n            secret_name=\"Pedro Parqueador\",\n        )\n        deadpond_team_z_link = HeroTeamLink(team=team_z_force, hero=hero_deadpond)\n        deadpond_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_deadpond, is_training=True\n        )\n        spider_boy_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_spider_boy, is_training=True\n        )\n        rusty_man_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_rusty_man\n        )\n\n        session.add(deadpond_team_z_link)\n        session.add(deadpond_preventers_link)\n        session.add(spider_boy_preventers_link)\n        session.add(rusty_man_preventers_link)\n        session.commit()\n\n        for link in team_z_force.hero_links:\n            print(\"Z-Force hero:\", link.hero, \"is training:\", link.is_training)\n\n        for link in team_preventers.hero_links:\n            print(\"Preventers hero:\", link.hero, \"is training:\", link.is_training)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        spider_boy_z_force_link = HeroTeamLink(\n            team=team_z_force, hero=hero_spider_boy, is_training=True\n        )\n        team_z_force.hero_links.append(spider_boy_z_force_link)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.team_links)\n        print(\"Z-Force heroes:\", team_z_force.hero_links)\n\n        for link in hero_spider_boy.team_links:\n            if link.team.name == \"Preventers\":\n                link.is_training = False\n\n        session.add(hero_spider_boy)\n        session.commit()\n\n        for link in hero_spider_boy.team_links:\n            print(\"Spider-Boy team:\", link.team, \"is training:\", link.is_training)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/many-to-many/link-with-extra-fields/#create-relationships","title":"Create Relationships","text":"<p>Now the process to create relationships is very similar.</p> <p>But now we create the explicit link models manually, pointing to their hero and team instances, and specifying the additional link data (<code>is_training</code>):</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\",\n            secret_name=\"Pedro Parqueador\",\n        )\n        deadpond_team_z_link = HeroTeamLink(team=team_z_force, hero=hero_deadpond)\n        deadpond_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_deadpond, is_training=True\n        )\n        spider_boy_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_spider_boy, is_training=True\n        )\n        rusty_man_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_rusty_man\n        )\n\n        session.add(deadpond_team_z_link)\n        session.add(deadpond_preventers_link)\n        session.add(spider_boy_preventers_link)\n        session.add(rusty_man_preventers_link)\n        session.commit()\n\n        for link in team_z_force.hero_links:\n            print(\"Z-Force hero:\", link.hero, \"is training:\", link.is_training)\n\n        for link in team_preventers.hero_links:\n            print(\"Preventers hero:\", link.hero, \"is training:\", link.is_training)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\",\n            secret_name=\"Pedro Parqueador\",\n        )\n        deadpond_team_z_link = HeroTeamLink(team=team_z_force, hero=hero_deadpond)\n        deadpond_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_deadpond, is_training=True\n        )\n        spider_boy_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_spider_boy, is_training=True\n        )\n        rusty_man_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_rusty_man\n        )\n\n        session.add(deadpond_team_z_link)\n        session.add(deadpond_preventers_link)\n        session.add(spider_boy_preventers_link)\n        session.add(rusty_man_preventers_link)\n        session.commit()\n\n        for link in team_z_force.hero_links:\n            print(\"Z-Force hero:\", link.hero, \"is training:\", link.is_training)\n\n        for link in team_preventers.hero_links:\n            print(\"Preventers hero:\", link.hero, \"is training:\", link.is_training)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\",\n            secret_name=\"Pedro Parqueador\",\n        )\n        deadpond_team_z_link = HeroTeamLink(team=team_z_force, hero=hero_deadpond)\n        deadpond_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_deadpond, is_training=True\n        )\n        spider_boy_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_spider_boy, is_training=True\n        )\n        rusty_man_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_rusty_man\n        )\n\n        session.add(deadpond_team_z_link)\n        session.add(deadpond_preventers_link)\n        session.add(spider_boy_preventers_link)\n        session.add(rusty_man_preventers_link)\n        session.commit()\n\n        for link in team_z_force.hero_links:\n            print(\"Z-Force hero:\", link.hero, \"is training:\", link.is_training)\n\n        for link in team_preventers.hero_links:\n            print(\"Preventers hero:\", link.hero, \"is training:\", link.is_training)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", primary_key=True)\n    hero_id: int | None = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\n    is_training: bool = False\n\n    team: \"Team\" = Relationship(back_populates=\"hero_links\")\n    hero: \"Hero\" = Relationship(back_populates=\"team_links\")\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    hero_links: list[HeroTeamLink] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_links: list[HeroTeamLink] = Relationship(back_populates=\"hero\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\",\n            secret_name=\"Pedro Parqueador\",\n        )\n        deadpond_team_z_link = HeroTeamLink(team=team_z_force, hero=hero_deadpond)\n        deadpond_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_deadpond, is_training=True\n        )\n        spider_boy_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_spider_boy, is_training=True\n        )\n        rusty_man_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_rusty_man\n        )\n\n        session.add(deadpond_team_z_link)\n        session.add(deadpond_preventers_link)\n        session.add(spider_boy_preventers_link)\n        session.add(rusty_man_preventers_link)\n        session.commit()\n\n        for link in team_z_force.hero_links:\n            print(\"Z-Force hero:\", link.hero, \"is training:\", link.is_training)\n\n        for link in team_preventers.hero_links:\n            print(\"Preventers hero:\", link.hero, \"is training:\", link.is_training)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        spider_boy_z_force_link = HeroTeamLink(\n            team=team_z_force, hero=hero_spider_boy, is_training=True\n        )\n        team_z_force.hero_links.append(spider_boy_z_force_link)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.team_links)\n        print(\"Z-Force heroes:\", team_z_force.hero_links)\n\n        for link in hero_spider_boy.team_links:\n            if link.team.name == \"Preventers\":\n                link.is_training = False\n\n        session.add(hero_spider_boy)\n        session.commit()\n\n        for link in hero_spider_boy.team_links:\n            print(\"Spider-Boy team:\", link.team, \"is training:\", link.is_training)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n    is_training: bool = False\n\n    team: \"Team\" = Relationship(back_populates=\"hero_links\")\n    hero: \"Hero\" = Relationship(back_populates=\"team_links\")\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    hero_links: list[HeroTeamLink] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_links: list[HeroTeamLink] = Relationship(back_populates=\"hero\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\",\n            secret_name=\"Pedro Parqueador\",\n        )\n        deadpond_team_z_link = HeroTeamLink(team=team_z_force, hero=hero_deadpond)\n        deadpond_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_deadpond, is_training=True\n        )\n        spider_boy_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_spider_boy, is_training=True\n        )\n        rusty_man_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_rusty_man\n        )\n\n        session.add(deadpond_team_z_link)\n        session.add(deadpond_preventers_link)\n        session.add(spider_boy_preventers_link)\n        session.add(rusty_man_preventers_link)\n        session.commit()\n\n        for link in team_z_force.hero_links:\n            print(\"Z-Force hero:\", link.hero, \"is training:\", link.is_training)\n\n        for link in team_preventers.hero_links:\n            print(\"Preventers hero:\", link.hero, \"is training:\", link.is_training)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        spider_boy_z_force_link = HeroTeamLink(\n            team=team_z_force, hero=hero_spider_boy, is_training=True\n        )\n        team_z_force.hero_links.append(spider_boy_z_force_link)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.team_links)\n        print(\"Z-Force heroes:\", team_z_force.hero_links)\n\n        for link in hero_spider_boy.team_links:\n            if link.team.name == \"Preventers\":\n                link.is_training = False\n\n        session.add(hero_spider_boy)\n        session.commit()\n\n        for link in hero_spider_boy.team_links:\n            print(\"Spider-Boy team:\", link.team, \"is training:\", link.is_training)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n    is_training: bool = False\n\n    team: \"Team\" = Relationship(back_populates=\"hero_links\")\n    hero: \"Hero\" = Relationship(back_populates=\"team_links\")\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    hero_links: List[HeroTeamLink] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_links: List[HeroTeamLink] = Relationship(back_populates=\"hero\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\",\n            secret_name=\"Pedro Parqueador\",\n        )\n        deadpond_team_z_link = HeroTeamLink(team=team_z_force, hero=hero_deadpond)\n        deadpond_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_deadpond, is_training=True\n        )\n        spider_boy_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_spider_boy, is_training=True\n        )\n        rusty_man_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_rusty_man\n        )\n\n        session.add(deadpond_team_z_link)\n        session.add(deadpond_preventers_link)\n        session.add(spider_boy_preventers_link)\n        session.add(rusty_man_preventers_link)\n        session.commit()\n\n        for link in team_z_force.hero_links:\n            print(\"Z-Force hero:\", link.hero, \"is training:\", link.is_training)\n\n        for link in team_preventers.hero_links:\n            print(\"Preventers hero:\", link.hero, \"is training:\", link.is_training)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        spider_boy_z_force_link = HeroTeamLink(\n            team=team_z_force, hero=hero_spider_boy, is_training=True\n        )\n        team_z_force.hero_links.append(spider_boy_z_force_link)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.team_links)\n        print(\"Z-Force heroes:\", team_z_force.hero_links)\n\n        for link in hero_spider_boy.team_links:\n            if link.team.name == \"Preventers\":\n                link.is_training = False\n\n        session.add(hero_spider_boy)\n        session.commit()\n\n        for link in hero_spider_boy.team_links:\n            print(\"Spider-Boy team:\", link.team, \"is training:\", link.is_training)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>We are just adding the link model instances to the session, because the link model instances are connected to the heroes and teams, they will be also automatically included in the session when we commit.</p>"},{"location":"tutorial/many-to-many/link-with-extra-fields/#run-the-program","title":"Run the Program","text":"<p>Now, if we run the program, it will show almost the same output as before, because it is generating almost the same SQL, but this time including the new <code>is_training</code> column:</p> <pre><code>$ python app.py\n\n// Previous output omitted \ud83d\ude48\n\n// Automatically start a new transaction\nINFO Engine BEGIN (implicit)\n\n// Insert the heroes\nINFO Engine INSERT INTO hero (name, secret_name, age) VALUES (?, ?, ?)\nINFO Engine [generated in 0.00025s] ('Deadpond', 'Dive Wilson', None)\nINFO Engine INSERT INTO hero (name, secret_name, age) VALUES (?, ?, ?)\nINFO Engine [cached since 0.00136s ago] ('Spider-Boy', 'Pedro Parqueador', None)\nINFO Engine INSERT INTO hero (name, secret_name, age) VALUES (?, ?, ?)\nINFO Engine [cached since 0.001858s ago] ('Rusty-Man', 'Tommy Sharp', 48)\n\n// Insert the teams\nINFO Engine INSERT INTO team (name, headquarters) VALUES (?, ?)\nINFO Engine [generated in 0.00019s] ('Z-Force', 'Sister Margaret's Bar')\nINFO Engine INSERT INTO team (name, headquarters) VALUES (?, ?)\nINFO Engine [cached since 0.0007985s ago] ('Preventers', 'Sharp Tower')\n\n// Insert the hero-team links\nINFO Engine INSERT INTO heroteamlink (team_id, hero_id, is_training) VALUES (?, ?, ?)\nINFO Engine [generated in 0.00023s] ((1, 1, 0), (2, 1, 1), (2, 2, 1), (2, 3, 0))\n// Save the changes in the transaction in the database\nINFO Engine COMMIT\n\n// Automatically start a new transaction\nINFO Engine BEGIN (implicit)\n\n// Automatically fetch the data on attribute access\nINFO Engine SELECT team.id AS team_id, team.name AS team_name, team.headquarters AS team_headquarters\nFROM team\nWHERE team.id = ?\nINFO Engine [generated in 0.00028s] (1,)\nINFO Engine SELECT heroteamlink.team_id AS heroteamlink_team_id, heroteamlink.hero_id AS heroteamlink_hero_id, heroteamlink.is_training AS heroteamlink_is_training\nFROM heroteamlink\nWHERE ? = heroteamlink.team_id\nINFO Engine [generated in 0.00026s] (1,)\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [generated in 0.00024s] (1,)\n\n// Print Z-Force hero data, including link data\nZ-Force hero: name='Deadpond' age=None id=1 secret_name='Dive Wilson' is training: False\n\n// Automatically fetch the data on attribute access\nINFO Engine SELECT team.id AS team_id, team.name AS team_name, team.headquarters AS team_headquarters\nFROM team\nWHERE team.id = ?\nINFO Engine [cached since 0.008822s ago] (2,)\nINFO Engine SELECT heroteamlink.team_id AS heroteamlink_team_id, heroteamlink.hero_id AS heroteamlink_hero_id, heroteamlink.is_training AS heroteamlink_is_training\nFROM heroteamlink\nWHERE ? = heroteamlink.team_id\nINFO Engine [cached since 0.005778s ago] (2,)\n\n// Print Preventers hero data, including link data\nPreventers hero: name='Deadpond' age=None id=1 secret_name='Dive Wilson' is training: True\n\n// Automatically fetch the data on attribute access\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.004196s ago] (2,)\n\n// Print Preventers hero data, including link data\nPreventers hero: name='Spider-Boy' age=None id=2 secret_name='Pedro Parqueador' is training: True\n\n// Automatically fetch the data on attribute access\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.006005s ago] (3,)\n\n// Print Preventers hero data, including link data\nPreventers hero: name='Rusty-Man' age=48 id=3 secret_name='Tommy Sharp' is training: False\n</code></pre>"},{"location":"tutorial/many-to-many/link-with-extra-fields/#add-relationships","title":"Add Relationships","text":"<p>Now, to add a new relationship, we have to create a new <code>HeroTeamLink</code> instance pointing to the hero and the team, add it to the session, and commit it.</p> <p>Here we do that in the <code>update_heroes()</code> function:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        spider_boy_z_force_link = HeroTeamLink(\n            team=team_z_force, hero=hero_spider_boy, is_training=True\n        )\n        team_z_force.hero_links.append(spider_boy_z_force_link)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.team_links)\n        print(\"Z-Force heroes:\", team_z_force.hero_links)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        spider_boy_z_force_link = HeroTeamLink(\n            team=team_z_force, hero=hero_spider_boy, is_training=True\n        )\n        team_z_force.hero_links.append(spider_boy_z_force_link)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.team_links)\n        print(\"Z-Force heroes:\", team_z_force.hero_links)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        spider_boy_z_force_link = HeroTeamLink(\n            team=team_z_force, hero=hero_spider_boy, is_training=True\n        )\n        team_z_force.hero_links.append(spider_boy_z_force_link)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.team_links)\n        print(\"Z-Force heroes:\", team_z_force.hero_links)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", primary_key=True)\n    hero_id: int | None = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\n    is_training: bool = False\n\n    team: \"Team\" = Relationship(back_populates=\"hero_links\")\n    hero: \"Hero\" = Relationship(back_populates=\"team_links\")\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    hero_links: list[HeroTeamLink] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_links: list[HeroTeamLink] = Relationship(back_populates=\"hero\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\",\n            secret_name=\"Pedro Parqueador\",\n        )\n        deadpond_team_z_link = HeroTeamLink(team=team_z_force, hero=hero_deadpond)\n        deadpond_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_deadpond, is_training=True\n        )\n        spider_boy_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_spider_boy, is_training=True\n        )\n        rusty_man_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_rusty_man\n        )\n\n        session.add(deadpond_team_z_link)\n        session.add(deadpond_preventers_link)\n        session.add(spider_boy_preventers_link)\n        session.add(rusty_man_preventers_link)\n        session.commit()\n\n        for link in team_z_force.hero_links:\n            print(\"Z-Force hero:\", link.hero, \"is training:\", link.is_training)\n\n        for link in team_preventers.hero_links:\n            print(\"Preventers hero:\", link.hero, \"is training:\", link.is_training)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        spider_boy_z_force_link = HeroTeamLink(\n            team=team_z_force, hero=hero_spider_boy, is_training=True\n        )\n        team_z_force.hero_links.append(spider_boy_z_force_link)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.team_links)\n        print(\"Z-Force heroes:\", team_z_force.hero_links)\n\n        for link in hero_spider_boy.team_links:\n            if link.team.name == \"Preventers\":\n                link.is_training = False\n\n        session.add(hero_spider_boy)\n        session.commit()\n\n        for link in hero_spider_boy.team_links:\n            print(\"Spider-Boy team:\", link.team, \"is training:\", link.is_training)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n    is_training: bool = False\n\n    team: \"Team\" = Relationship(back_populates=\"hero_links\")\n    hero: \"Hero\" = Relationship(back_populates=\"team_links\")\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    hero_links: list[HeroTeamLink] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_links: list[HeroTeamLink] = Relationship(back_populates=\"hero\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\",\n            secret_name=\"Pedro Parqueador\",\n        )\n        deadpond_team_z_link = HeroTeamLink(team=team_z_force, hero=hero_deadpond)\n        deadpond_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_deadpond, is_training=True\n        )\n        spider_boy_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_spider_boy, is_training=True\n        )\n        rusty_man_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_rusty_man\n        )\n\n        session.add(deadpond_team_z_link)\n        session.add(deadpond_preventers_link)\n        session.add(spider_boy_preventers_link)\n        session.add(rusty_man_preventers_link)\n        session.commit()\n\n        for link in team_z_force.hero_links:\n            print(\"Z-Force hero:\", link.hero, \"is training:\", link.is_training)\n\n        for link in team_preventers.hero_links:\n            print(\"Preventers hero:\", link.hero, \"is training:\", link.is_training)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        spider_boy_z_force_link = HeroTeamLink(\n            team=team_z_force, hero=hero_spider_boy, is_training=True\n        )\n        team_z_force.hero_links.append(spider_boy_z_force_link)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.team_links)\n        print(\"Z-Force heroes:\", team_z_force.hero_links)\n\n        for link in hero_spider_boy.team_links:\n            if link.team.name == \"Preventers\":\n                link.is_training = False\n\n        session.add(hero_spider_boy)\n        session.commit()\n\n        for link in hero_spider_boy.team_links:\n            print(\"Spider-Boy team:\", link.team, \"is training:\", link.is_training)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n    is_training: bool = False\n\n    team: \"Team\" = Relationship(back_populates=\"hero_links\")\n    hero: \"Hero\" = Relationship(back_populates=\"team_links\")\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    hero_links: List[HeroTeamLink] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_links: List[HeroTeamLink] = Relationship(back_populates=\"hero\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\",\n            secret_name=\"Pedro Parqueador\",\n        )\n        deadpond_team_z_link = HeroTeamLink(team=team_z_force, hero=hero_deadpond)\n        deadpond_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_deadpond, is_training=True\n        )\n        spider_boy_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_spider_boy, is_training=True\n        )\n        rusty_man_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_rusty_man\n        )\n\n        session.add(deadpond_team_z_link)\n        session.add(deadpond_preventers_link)\n        session.add(spider_boy_preventers_link)\n        session.add(rusty_man_preventers_link)\n        session.commit()\n\n        for link in team_z_force.hero_links:\n            print(\"Z-Force hero:\", link.hero, \"is training:\", link.is_training)\n\n        for link in team_preventers.hero_links:\n            print(\"Preventers hero:\", link.hero, \"is training:\", link.is_training)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        spider_boy_z_force_link = HeroTeamLink(\n            team=team_z_force, hero=hero_spider_boy, is_training=True\n        )\n        team_z_force.hero_links.append(spider_boy_z_force_link)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.team_links)\n        print(\"Z-Force heroes:\", team_z_force.hero_links)\n\n        for link in hero_spider_boy.team_links:\n            if link.team.name == \"Preventers\":\n                link.is_training = False\n\n        session.add(hero_spider_boy)\n        session.commit()\n\n        for link in hero_spider_boy.team_links:\n            print(\"Spider-Boy team:\", link.team, \"is training:\", link.is_training)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/many-to-many/link-with-extra-fields/#run-the-program-with-the-new-relationship","title":"Run the Program with the New Relationship","text":"<p>If we run that program, we will see the output:</p> <pre><code>$ python app.py\n\n// Previous output omitted \ud83d\ude48\n\n// Automatically start a new transaction\nINFO Engine BEGIN (implicit)\n\n// Select the hero\nINFO Engine SELECT hero.id, hero.name, hero.secret_name, hero.age\nFROM hero\nWHERE hero.name = ?\nINFO Engine [no key 0.00014s] ('Spider-Boy',)\n\n// Select the team\nINFO Engine SELECT team.id, team.name, team.headquarters\nFROM team\nWHERE team.name = ?\nINFO Engine [no key 0.00012s] ('Z-Force',)\n\n// Create the link\nINFO Engine INSERT INTO heroteamlink (team_id, hero_id, is_training) VALUES (?, ?, ?)\nINFO Engine [generated in 0.00023s] (1, 2, 1)\n\n// Automatically refresh the data on attribute access\nINFO Engine SELECT heroteamlink.team_id AS heroteamlink_team_id, heroteamlink.hero_id AS heroteamlink_hero_id, heroteamlink.is_training AS heroteamlink_is_training\nFROM heroteamlink\nWHERE ? = heroteamlink.team_id\nINFO Engine [cached since 0.01514s ago] (1,)\nINFO Engine COMMIT\nINFO Engine BEGIN (implicit)\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.08953s ago] (2,)\nINFO Engine SELECT heroteamlink.team_id AS heroteamlink_team_id, heroteamlink.hero_id AS heroteamlink_hero_id, heroteamlink.is_training AS heroteamlink_is_training\nFROM heroteamlink\nWHERE ? = heroteamlink.hero_id\nINFO Engine [generated in 0.00018s] (2,)\n\n// Print updated hero links\nUpdated Spider-Boy's Teams: [\n    HeroTeamLink(team_id=2, is_training=True, hero_id=2),\n    HeroTeamLink(team_id=1, is_training=True, hero_id=2)\n]\n\n// Automatically refresh team data on attribute access\nINFO Engine SELECT team.id AS team_id, team.name AS team_name, team.headquarters AS team_headquarters\nFROM team\nWHERE team.id = ?\nINFO Engine [cached since 0.1084s ago] (1,)\nINFO Engine SELECT heroteamlink.team_id AS heroteamlink_team_id, heroteamlink.hero_id AS heroteamlink_hero_id, heroteamlink.is_training AS heroteamlink_is_training\nFROM heroteamlink\nWHERE ? = heroteamlink.team_id\nINFO Engine [cached since 0.1054s ago] (1,)\n\n// Print team hero links\nZ-Force heroes: [\n    HeroTeamLink(team_id=1, is_training=False, hero_id=1),\n    HeroTeamLink(team_id=1, is_training=True, hero_id=2)\n]\n</code></pre>"},{"location":"tutorial/many-to-many/link-with-extra-fields/#update-relationships-with-links","title":"Update Relationships with Links","text":"<p>Now let's say that Spider-Boy has been training enough in the Preventers, and they say he can join the team full time.</p> <p>So now we want to update the status of <code>is_training</code> to <code>False</code>.</p> <p>We can do that by iterating on the links:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n\n        # Code here omitted \ud83d\udc48\n\n        for link in hero_spider_boy.team_links:\n            if link.team.name == \"Preventers\":\n                link.is_training = False\n\n        session.add(hero_spider_boy)\n        session.commit()\n\n        for link in hero_spider_boy.team_links:\n            print(\"Spider-Boy team:\", link.team, \"is training:\", link.is_training)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n\n        # Code here omitted \ud83d\udc48\n\n        for link in hero_spider_boy.team_links:\n            if link.team.name == \"Preventers\":\n                link.is_training = False\n\n        session.add(hero_spider_boy)\n        session.commit()\n\n        for link in hero_spider_boy.team_links:\n            print(\"Spider-Boy team:\", link.team, \"is training:\", link.is_training)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n\n        # Code here omitted \ud83d\udc48\n\n        for link in hero_spider_boy.team_links:\n            if link.team.name == \"Preventers\":\n                link.is_training = False\n\n        session.add(hero_spider_boy)\n        session.commit()\n\n        for link in hero_spider_boy.team_links:\n            print(\"Spider-Boy team:\", link.team, \"is training:\", link.is_training)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", primary_key=True)\n    hero_id: int | None = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\n    is_training: bool = False\n\n    team: \"Team\" = Relationship(back_populates=\"hero_links\")\n    hero: \"Hero\" = Relationship(back_populates=\"team_links\")\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    hero_links: list[HeroTeamLink] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_links: list[HeroTeamLink] = Relationship(back_populates=\"hero\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\",\n            secret_name=\"Pedro Parqueador\",\n        )\n        deadpond_team_z_link = HeroTeamLink(team=team_z_force, hero=hero_deadpond)\n        deadpond_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_deadpond, is_training=True\n        )\n        spider_boy_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_spider_boy, is_training=True\n        )\n        rusty_man_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_rusty_man\n        )\n\n        session.add(deadpond_team_z_link)\n        session.add(deadpond_preventers_link)\n        session.add(spider_boy_preventers_link)\n        session.add(rusty_man_preventers_link)\n        session.commit()\n\n        for link in team_z_force.hero_links:\n            print(\"Z-Force hero:\", link.hero, \"is training:\", link.is_training)\n\n        for link in team_preventers.hero_links:\n            print(\"Preventers hero:\", link.hero, \"is training:\", link.is_training)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        spider_boy_z_force_link = HeroTeamLink(\n            team=team_z_force, hero=hero_spider_boy, is_training=True\n        )\n        team_z_force.hero_links.append(spider_boy_z_force_link)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.team_links)\n        print(\"Z-Force heroes:\", team_z_force.hero_links)\n\n        for link in hero_spider_boy.team_links:\n            if link.team.name == \"Preventers\":\n                link.is_training = False\n\n        session.add(hero_spider_boy)\n        session.commit()\n\n        for link in hero_spider_boy.team_links:\n            print(\"Spider-Boy team:\", link.team, \"is training:\", link.is_training)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n    is_training: bool = False\n\n    team: \"Team\" = Relationship(back_populates=\"hero_links\")\n    hero: \"Hero\" = Relationship(back_populates=\"team_links\")\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    hero_links: list[HeroTeamLink] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_links: list[HeroTeamLink] = Relationship(back_populates=\"hero\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\",\n            secret_name=\"Pedro Parqueador\",\n        )\n        deadpond_team_z_link = HeroTeamLink(team=team_z_force, hero=hero_deadpond)\n        deadpond_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_deadpond, is_training=True\n        )\n        spider_boy_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_spider_boy, is_training=True\n        )\n        rusty_man_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_rusty_man\n        )\n\n        session.add(deadpond_team_z_link)\n        session.add(deadpond_preventers_link)\n        session.add(spider_boy_preventers_link)\n        session.add(rusty_man_preventers_link)\n        session.commit()\n\n        for link in team_z_force.hero_links:\n            print(\"Z-Force hero:\", link.hero, \"is training:\", link.is_training)\n\n        for link in team_preventers.hero_links:\n            print(\"Preventers hero:\", link.hero, \"is training:\", link.is_training)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        spider_boy_z_force_link = HeroTeamLink(\n            team=team_z_force, hero=hero_spider_boy, is_training=True\n        )\n        team_z_force.hero_links.append(spider_boy_z_force_link)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.team_links)\n        print(\"Z-Force heroes:\", team_z_force.hero_links)\n\n        for link in hero_spider_boy.team_links:\n            if link.team.name == \"Preventers\":\n                link.is_training = False\n\n        session.add(hero_spider_boy)\n        session.commit()\n\n        for link in hero_spider_boy.team_links:\n            print(\"Spider-Boy team:\", link.team, \"is training:\", link.is_training)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n    is_training: bool = False\n\n    team: \"Team\" = Relationship(back_populates=\"hero_links\")\n    hero: \"Hero\" = Relationship(back_populates=\"team_links\")\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    hero_links: List[HeroTeamLink] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_links: List[HeroTeamLink] = Relationship(back_populates=\"hero\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\",\n            secret_name=\"Pedro Parqueador\",\n        )\n        deadpond_team_z_link = HeroTeamLink(team=team_z_force, hero=hero_deadpond)\n        deadpond_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_deadpond, is_training=True\n        )\n        spider_boy_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_spider_boy, is_training=True\n        )\n        rusty_man_preventers_link = HeroTeamLink(\n            team=team_preventers, hero=hero_rusty_man\n        )\n\n        session.add(deadpond_team_z_link)\n        session.add(deadpond_preventers_link)\n        session.add(spider_boy_preventers_link)\n        session.add(rusty_man_preventers_link)\n        session.commit()\n\n        for link in team_z_force.hero_links:\n            print(\"Z-Force hero:\", link.hero, \"is training:\", link.is_training)\n\n        for link in team_preventers.hero_links:\n            print(\"Preventers hero:\", link.hero, \"is training:\", link.is_training)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        spider_boy_z_force_link = HeroTeamLink(\n            team=team_z_force, hero=hero_spider_boy, is_training=True\n        )\n        team_z_force.hero_links.append(spider_boy_z_force_link)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.team_links)\n        print(\"Z-Force heroes:\", team_z_force.hero_links)\n\n        for link in hero_spider_boy.team_links:\n            if link.team.name == \"Preventers\":\n                link.is_training = False\n\n        session.add(hero_spider_boy)\n        session.commit()\n\n        for link in hero_spider_boy.team_links:\n            print(\"Spider-Boy team:\", link.team, \"is training:\", link.is_training)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/many-to-many/link-with-extra-fields/#run-the-program-with-the-updated-relationships","title":"Run the Program with the Updated Relationships","text":"<p>And if we run the program now, it will output:</p> <pre><code>$ python app.py\n\n// Previous output omitted \ud83d\ude48\n\n// Automatically fetch team data on attribute access\nINFO Engine SELECT team.id AS team_id, team.name AS team_name, team.headquarters AS team_headquarters\nFROM team\nWHERE team.id = ?\nINFO Engine [generated in 0.00015s] (2,)\n\n// Update link row\nINFO Engine UPDATE heroteamlink SET is_training=? WHERE heroteamlink.team_id = ? AND heroteamlink.hero_id = ?\nINFO Engine [generated in 0.00020s] (0, 2, 2)\n\n// Save current transaction to database\nINFO Engine COMMIT\n\n// Automatically start a new transaction\nINFO Engine BEGIN (implicit)\n\n// Automatically fetch data on attribute access\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.2004s ago] (2,)\nINFO Engine SELECT heroteamlink.team_id AS heroteamlink_team_id, heroteamlink.hero_id AS heroteamlink_hero_id, heroteamlink.is_training AS heroteamlink_is_training\nFROM heroteamlink\nWHERE ? = heroteamlink.hero_id\nINFO Engine [cached since 0.1005s ago] (2,)\nINFO Engine SELECT team.id AS team_id, team.name AS team_name, team.headquarters AS team_headquarters\nFROM team\nWHERE team.id = ?\nINFO Engine [cached since 0.09707s ago] (2,)\n\n// Print Spider-Boy team, including link data, if is training\nSpider-Boy team: headquarters='Sharp Tower' id=2 name='Preventers' is training: False\n\n// Automatically fetch data on attribute access\nINFO Engine SELECT team.id AS team_id, team.name AS team_name, team.headquarters AS team_headquarters\nFROM team\nWHERE team.id = ?\nINFO Engine [cached since 0.2097s ago] (1,)\n\n// Print Spider-Boy team, including link data, if is training\nSpider-Boy team: headquarters='Sister Margaret's Bar' id=1 name='Z-Force' is training: True\nINFO Engine ROLLBACK\n</code></pre>"},{"location":"tutorial/many-to-many/link-with-extra-fields/#recap","title":"Recap","text":"<p>If you need to store more information about a many-to-many relationship you can use an explicit link model with extra data in it. \ud83e\udd13</p>"},{"location":"tutorial/many-to-many/update-remove-relationships/","title":"Update and Remove Many-to-Many Relationships","text":"<p>Now we'll see how to update and remove these many-to-many relationships.</p> <p>We'll continue from where we left off with the previous code.</p> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", primary_key=True)\n    hero_id: int | None = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: List[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/many-to-many/update-remove-relationships/#get-data-to-update","title":"Get Data to Update","text":"<p>Let's now create a function <code>update_heroes()</code>.</p> <p>We'll get Spider-Boy and the Z-Force team.</p> <p>As you already know how these goes, I'll use the short version and get the data in a single Python statement.</p> <p>And because we are now using <code>select()</code>, we also have to import it.</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n# Some code here omitted \ud83d\udc48\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n# Some code here omitted \ud83d\udc48\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n# Some code here omitted \ud83d\udc48\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", primary_key=True)\n    hero_id: int | None = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        team_z_force.heroes.append(hero_spider_boy)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.teams)\n        print(\"Z-Force heroes:\", team_z_force.heroes)\n\n        hero_spider_boy.teams.remove(team_z_force)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Reverted Z-Force's heroes:\", team_z_force.heroes)\n        print(\"Reverted Spider-Boy's teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        team_z_force.heroes.append(hero_spider_boy)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.teams)\n        print(\"Z-Force heroes:\", team_z_force.heroes)\n\n        hero_spider_boy.teams.remove(team_z_force)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Reverted Z-Force's heroes:\", team_z_force.heroes)\n        print(\"Reverted Spider-Boy's teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: List[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        team_z_force.heroes.append(hero_spider_boy)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.teams)\n        print(\"Z-Force heroes:\", team_z_force.heroes)\n\n        hero_spider_boy.teams.remove(team_z_force)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Reverted Z-Force's heroes:\", team_z_force.heroes)\n        print(\"Reverted Spider-Boy's teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>And of course, we have to add <code>update_heroes()</code> to our <code>main()</code> function:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", primary_key=True)\n    hero_id: int | None = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        team_z_force.heroes.append(hero_spider_boy)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.teams)\n        print(\"Z-Force heroes:\", team_z_force.heroes)\n\n        hero_spider_boy.teams.remove(team_z_force)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Reverted Z-Force's heroes:\", team_z_force.heroes)\n        print(\"Reverted Spider-Boy's teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        team_z_force.heroes.append(hero_spider_boy)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.teams)\n        print(\"Z-Force heroes:\", team_z_force.heroes)\n\n        hero_spider_boy.teams.remove(team_z_force)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Reverted Z-Force's heroes:\", team_z_force.heroes)\n        print(\"Reverted Spider-Boy's teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: List[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        team_z_force.heroes.append(hero_spider_boy)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.teams)\n        print(\"Z-Force heroes:\", team_z_force.heroes)\n\n        hero_spider_boy.teams.remove(team_z_force)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Reverted Z-Force's heroes:\", team_z_force.heroes)\n        print(\"Reverted Spider-Boy's teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/many-to-many/update-remove-relationships/#add-many-to-many-relationships","title":"Add Many-to-Many Relationships","text":"<p>Now let's imagine that Spider-Boy thinks that the Z-Force team is super cool and decides to go there and join them.</p> <p>We can use the same relationship attributes to include <code>hero_spider_boy</code> in the <code>team_z_force.heroes</code>.</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        team_z_force.heroes.append(hero_spider_boy)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.teams)\n        print(\"Z-Force heroes:\", team_z_force.heroes)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        team_z_force.heroes.append(hero_spider_boy)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.teams)\n        print(\"Z-Force heroes:\", team_z_force.heroes)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        team_z_force.heroes.append(hero_spider_boy)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.teams)\n        print(\"Z-Force heroes:\", team_z_force.heroes)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", primary_key=True)\n    hero_id: int | None = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        team_z_force.heroes.append(hero_spider_boy)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.teams)\n        print(\"Z-Force heroes:\", team_z_force.heroes)\n\n        hero_spider_boy.teams.remove(team_z_force)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Reverted Z-Force's heroes:\", team_z_force.heroes)\n        print(\"Reverted Spider-Boy's teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        team_z_force.heroes.append(hero_spider_boy)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.teams)\n        print(\"Z-Force heroes:\", team_z_force.heroes)\n\n        hero_spider_boy.teams.remove(team_z_force)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Reverted Z-Force's heroes:\", team_z_force.heroes)\n        print(\"Reverted Spider-Boy's teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: List[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        team_z_force.heroes.append(hero_spider_boy)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.teams)\n        print(\"Z-Force heroes:\", team_z_force.heroes)\n\n        hero_spider_boy.teams.remove(team_z_force)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Reverted Z-Force's heroes:\", team_z_force.heroes)\n        print(\"Reverted Spider-Boy's teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Tip</p> <p>Because we are accessing an attribute in the models right after we commit, with <code>hero_spider_boy.teams</code> and <code>team_z_force.heroes</code>, the data is refreshed automatically.</p> <p>So we don't have to call <code>session.refresh()</code>.</p> <p>We then commit the change, refresh, and print the updated Spider-Boy's heroes to confirm.</p> <p>Notice that we only <code>add</code> Z-Force to the session, then we commit.</p> <p>We never add Spider-Boy to the session, and we never even refresh it. But we still print his teams.</p> <p>This still works correctly because we are using <code>back_populates</code> in the <code>Relationship()</code> in the models. That way, SQLModel (actually SQLAlchemy) can keep track of the changes and updates, and make sure they also happen on the relationships in the other related models. \ud83c\udf89</p>"},{"location":"tutorial/many-to-many/update-remove-relationships/#run-the-program","title":"Run the Program","text":"<p>You can confirm it's all working by running the program in the command line:</p> <pre><code>$ python app.py\n\n// Previous output omitted \ud83d\ude48\n\n// Create the new many-to-many relationship\nINFO Engine INSERT INTO heroteamlink (team_id, hero_id) VALUES (?, ?)\nINFO Engine [generated in 0.00020s] (1, 3)\nINFO Engine COMMIT\n\n// Start a new automatic transaction\nINFO Engine BEGIN (implicit)\n\n// Automatically refresh the data while accessing the attribute .teams\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [generated in 0.00044s] (3,)\nINFO Engine SELECT team.id AS team_id, team.name AS team_name, team.headquarters AS team_headquarters\nFROM team, heroteamlink\nWHERE ? = heroteamlink.hero_id AND team.id = heroteamlink.team_id\nINFO Engine [cached since 0.1648s ago] (3,)\n\n// Print Spider-Boy teams, including Z-Force \ud83c\udf89\nUpdated Spider-Boy's Teams: [\n    Team(id=2, name='Preventers', headquarters='Sharp Tower'),\n    Team(id=1, name='Z-Force', headquarters='Sister Margaret's Bar')\n]\n\n// Automatically refresh the data while accessing the attribute .heores\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero, heroteamlink\nWHERE ? = heroteamlink.team_id AND hero.id = heroteamlink.hero_id\nINFO Engine [cached since 0.1499s ago] (1,)\n\n// Print Z-Force heroes, including Spider-Boy \ud83c\udf89\nZ-Force heroes: [\n    Hero(name='Deadpond', age=None, id=1, secret_name='Dive Wilson'),\n    Hero(name='Spider-Boy', age=None, id=3, secret_name='Pedro Parqueador', teams=[\n        Team(id=2, name='Preventers', headquarters='Sharp Tower'),\n        Team(id=1, name='Z-Force', headquarters='Sister Margaret's Bar', heroes=[...])\n    ])\n]\n</code></pre>"},{"location":"tutorial/many-to-many/update-remove-relationships/#remove-many-to-many-relationships","title":"Remove Many-to-Many Relationships","text":"<p>Now let's say that right after joining the team, Spider-Boy realized that their \"life preserving policies\" are much more relaxed than what he's used to. \ud83d\udc80</p> <p>And their occupational safety and health is also not as great... \ud83d\udca5</p> <p>So, Spider-Boy decides to leave Z-Force.</p> <p>Let's update the relationships to remove <code>team_z_force</code> from <code>hero_spider_boy.teams</code>.</p> <p>Because <code>hero_spider_boy.teams</code> is just a list (a special list managed by SQLAlchemy, but a list), we can use the standard list methods.</p> <p>In this case, we use the method <code>.remove()</code>, that takes an item and removes it from the list.</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        team_z_force.heroes.append(hero_spider_boy)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.teams)\n        print(\"Z-Force heroes:\", team_z_force.heroes)\n\n        hero_spider_boy.teams.remove(team_z_force)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Reverted Z-Force's heroes:\", team_z_force.heroes)\n        print(\"Reverted Spider-Boy's teams:\", hero_spider_boy.teams)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        team_z_force.heroes.append(hero_spider_boy)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.teams)\n        print(\"Z-Force heroes:\", team_z_force.heroes)\n\n        hero_spider_boy.teams.remove(team_z_force)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Reverted Z-Force's heroes:\", team_z_force.heroes)\n        print(\"Reverted Spider-Boy's teams:\", hero_spider_boy.teams)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        team_z_force.heroes.append(hero_spider_boy)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.teams)\n        print(\"Z-Force heroes:\", team_z_force.heroes)\n\n        hero_spider_boy.teams.remove(team_z_force)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Reverted Z-Force's heroes:\", team_z_force.heroes)\n        print(\"Reverted Spider-Boy's teams:\", hero_spider_boy.teams)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", primary_key=True)\n    hero_id: int | None = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        team_z_force.heroes.append(hero_spider_boy)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.teams)\n        print(\"Z-Force heroes:\", team_z_force.heroes)\n\n        hero_spider_boy.teams.remove(team_z_force)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Reverted Z-Force's heroes:\", team_z_force.heroes)\n        print(\"Reverted Spider-Boy's teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        team_z_force.heroes.append(hero_spider_boy)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.teams)\n        print(\"Z-Force heroes:\", team_z_force.heroes)\n\n        hero_spider_boy.teams.remove(team_z_force)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Reverted Z-Force's heroes:\", team_z_force.heroes)\n        print(\"Reverted Spider-Boy's teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass HeroTeamLink(SQLModel, table=True):\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    hero_id: Optional[int] = Field(\n        default=None, foreign_key=\"hero.id\", primary_key=True\n    )\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    teams: List[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\",\n            secret_name=\"Dive Wilson\",\n            teams=[team_z_force, team_preventers],\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            teams=[team_preventers],\n        )\n        hero_spider_boy = Hero(\n            name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers]\n        )\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Deadpond:\", hero_deadpond)\n        print(\"Deadpond teams:\", hero_deadpond.teams)\n        print(\"Rusty-Man:\", hero_rusty_man)\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\n        print(\"Spider-Boy:\", hero_spider_boy)\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\n\n        team_z_force.heroes.append(hero_spider_boy)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.teams)\n        print(\"Z-Force heroes:\", team_z_force.heroes)\n\n        hero_spider_boy.teams.remove(team_z_force)\n        session.add(team_z_force)\n        session.commit()\n\n        print(\"Reverted Z-Force's heroes:\", team_z_force.heroes)\n        print(\"Reverted Spider-Boy's teams:\", hero_spider_boy.teams)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>And this time, just to show again that by using <code>back_populates</code> SQLModel (actually SQLAlchemy) takes care of connecting the models by their relationships, even though we performed the operation from the <code>hero_spider_boy</code> object (modifying <code>hero_spider_boy.teams</code>), we are adding <code>team_z_force</code> to the session. And we commit that, without even add <code>hero_spider_boy</code>.</p> <p>This still works because by updating the teams in <code>hero_spider_boy</code>, because they are synchronized with <code>back_populates</code>, the changes are also reflected in <code>team_z_force</code>, so it also has changes to be saved in the DB (that Spider-Boy was removed).</p> <p>And then we add the team, and commit the changes, which updates the <code>team_z_force</code> object, and because it changed the table that also had a connection with the <code>hero_spider_boy</code>, it is also marked internally as updated, so it all works.</p> <p>And then we just print them again to confirm that everything worked correctly.</p>"},{"location":"tutorial/many-to-many/update-remove-relationships/#run-the-program-again","title":"Run the Program Again","text":"<p>To confirm that this last part worked, you can run the program again, it will output something like:</p> <pre><code>$ python app.py\n\n// Previous output omitted \ud83d\ude48\n\n// Delete the row in the link table\nINFO Engine DELETE FROM heroteamlink WHERE heroteamlink.team_id = ? AND heroteamlink.hero_id = ?\nINFO Engine [generated in 0.00043s] (1, 3)\n// Save the changes\nINFO Engine COMMIT\n\n// Automatically start a new transaction\nINFO Engine BEGIN (implicit)\n\n// Automatically refresh the data while accessing the attribute .heroes\nINFO Engine SELECT team.id AS team_id, team.name AS team_name, team.headquarters AS team_headquarters\nFROM team\nWHERE team.id = ?\nINFO Engine [generated in 0.00029s] (1,)\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero, heroteamlink\nWHERE ? = heroteamlink.team_id AND hero.id = heroteamlink.hero_id\nINFO Engine [cached since 0.5625s ago] (1,)\n\n// Print the Z-Force heroes after reverting the changes\nReverted Z-Force's heroes: [\n    Hero(name='Deadpond', age=None, id=1, secret_name='Dive Wilson')\n]\n\n// Automatically refresh the data while accessing the attribute .teams\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age\nFROM hero\nWHERE hero.id = ?\nINFO Engine [cached since 0.4209s ago] (3,)\nINFO Engine SELECT team.id AS team_id, team.name AS team_name, team.headquarters AS team_headquarters\nFROM team, heroteamlink\nWHERE ? = heroteamlink.hero_id AND team.id = heroteamlink.team_id\nINFO Engine [cached since 0.5842s ago] (3,)\n\n// Print Spider-Boy's teams after reverting the changes\nReverted Spider-Boy's teams: [\n    Team(id=2, name='Preventers', headquarters='Sharp Tower')\n]\n\n// Automatically roll back any possible previously unsaved transaction\nINFO Engine ROLLBACK\n</code></pre>"},{"location":"tutorial/many-to-many/update-remove-relationships/#recap","title":"Recap","text":"<p>Updating and removing many-to-many relationships is quite straightforward after setting up the link model and the relationship attributes.</p> <p>You can just use common list operation. \ud83d\ude80</p>"},{"location":"tutorial/relationship-attributes/","title":"Relationship Attributes - Intro","text":"<p>In the previous chapters we discussed how to manage databases with tables that have relationships by using fields (columns) with foreign keys pointing to other columns.</p> <p>And then we read the data together with <code>select()</code> and using <code>.where()</code> or <code>.join()</code> to connect it.</p> <p>Now we will see how to use Relationship Attributes, an extra feature of SQLModel (and SQLAlchemy), to work with the data in the database in a much more familiar way, and closer to normal Python code.</p> <p>Info</p> <p>When I say \"relationship\" I mean the standard dictionary term, of data related to other data.</p> <p>I'm not using the term \"relation\" that is the technical, academical, SQL term for a single table.</p> <p>And using those relationship attributes is where a tool like SQLModel really shines. \u2728</p>"},{"location":"tutorial/relationship-attributes/back-populates/","title":"Relationship back_populates","text":"<p>Now you know how to use the relationship attributes to manipulate connected data in the database! \ud83c\udf89</p> <p>Let's now take a small step back and review how we defined those <code>Relationship()</code> attributes again, let's clarify that <code>back_populates</code> argument. \ud83e\udd13</p>"},{"location":"tutorial/relationship-attributes/back-populates/#relationship-with-back_populates","title":"Relationship with <code>back_populates</code>","text":"<p>So, what is that <code>back_populates</code> argument in each <code>Relationship()</code>?</p> <p>The value is a string with the name of the attribute in the other model class.</p> <p></p> <p>That tells SQLModel that if something changes in this model, it should change that attribute in the other model, and it will work even before committing with the session (that would force a refresh of the data).</p> <p>Let's understand that better with an example.</p>"},{"location":"tutorial/relationship-attributes/back-populates/#an-incomplete-relationship","title":"An Incomplete Relationship","text":"<p>Let's see how that works by writing an incomplete version first, without <code>back_populates</code>:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship()\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship()\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship()\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship()\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship()\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship()\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship()\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship()\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship()\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship()\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship()\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship()\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/relationship-attributes/back-populates/#read-data-objects","title":"Read Data Objects","text":"<p>Now, we will get the Spider-Boy hero and, independently, the Preventers team using two <code>select</code>s.</p> <p>As you already know how this works, I won't separate that in a select <code>statement</code>, <code>results</code>, etc. Let's use the shorter form in a single call:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship()\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship()\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship()\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship()\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship()\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship()\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Tip</p> <p>When writing your own code, this is probably the style you will use most often, as it's shorter, more convenient, and you still get all the power of autocompletion and inline errors.</p>"},{"location":"tutorial/relationship-attributes/back-populates/#print-the-data","title":"Print the Data","text":"<p>Now, let's print the current Spider-Boy, the current Preventers team, and particularly, the current Preventers list of heroes:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship()\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship()\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship()\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship()\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship()\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship()\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Up to this point, it's all good. \ud83d\ude0a</p> <p>In particular, the result of printing <code>preventers_team.heroes</code> is:</p> <pre><code>Preventers Team Heroes: [\n        Hero(name='Rusty-Man', age=48, id=2, secret_name='Tommy Sharp', team_id=2),\n        Hero(name='Spider-Boy', age=None, id=3, secret_name='Pedro Parqueador', team_id=2),\n        Hero(name='Tarantula', age=32, id=6, secret_name='Natalia Roman-on', team_id=2),\n        Hero(name='Dr. Weird', age=36, id=7, secret_name='Steve Weird', team_id=2),\n        Hero(name='Captain North America', age=93, id=8, secret_name='Esteban Rogelios', team_id=2)\n]\n</code></pre> <p>Notice that we have Spider-Boy there.</p>"},{"location":"tutorial/relationship-attributes/back-populates/#update-objects-before-committing","title":"Update Objects Before Committing","text":"<p>Now let's update Spider-Boy, removing him from the team by setting <code>hero_spider_boy.team = None</code> and then let's print this object again:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n\n        # Code here omitted \ud83d\udc48\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n\n        # Code here omitted \ud83d\udc48\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n\n        # Code here omitted \ud83d\udc48\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship()\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship()\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship()\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship()\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship()\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship()\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>The first important thing is, we haven't committed the hero yet, so accessing the list of heroes would not trigger an automatic refresh.</p> <p>But in our code, in this exact point in time, we already said that Spider-Boy is no longer part of the Preventers. \ud83d\udd25</p> <p>Tip</p> <p>We could revert that later by not committing the session, but that's not what we are interested in here.</p> <p>Here, at this point in the code, in memory, the code expects Preventers to not include Spider-Boy.</p> <p>The output of printing <code>hero_spider_boy</code> without team is:</p> <pre><code>Spider-Boy without team: name='Spider-Boy' age=None id=3 secret_name='Pedro Parqueador' team_id=2 team=None\n</code></pre> <p>Cool, the team is set to <code>None</code>, the <code>team_id</code> attribute still has the team ID until we save it. But that's okay as we are now working mainly with the relationship attributes and the objects. \u2705</p> <p>But now, what happens when we print the <code>preventers_team.heroes</code>?</p> <pre><code>Preventers Team Heroes again: [\n        Hero(name='Rusty-Man', age=48, id=2, secret_name='Tommy Sharp', team_id=2),\n        Hero(name='Spider-Boy', age=None, id=3, secret_name='Pedro Parqueador', team_id=2, team=None),\n        Hero(name='Tarantula', age=32, id=6, secret_name='Natalia Roman-on', team_id=2),\n        Hero(name='Dr. Weird', age=36, id=7, secret_name='Steve Weird', team_id=2),\n        Hero(name='Captain North America', age=93, id=8, secret_name='Esteban Rogelios', team_id=2)\n]\n</code></pre> <p>Oh, no! \ud83d\ude31 Spider-Boy is still listed there!</p>"},{"location":"tutorial/relationship-attributes/back-populates/#commit-and-print","title":"Commit and Print","text":"<p>Now, if we commit it and print again:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n\n        # Code here omitted \ud83d\udc48\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n\n        # Code here omitted \ud83d\udc48\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n\n        # Code here omitted \ud83d\udc48\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship()\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship()\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship()\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship()\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship()\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship()\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>When we access <code>preventers_team.heroes</code> after the <code>commit</code>, that triggers a refresh, so we get the latest list, without Spider-Boy, so that's fine again:</p> <pre><code>INFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age, hero.team_id AS hero_team_id\nFROM hero\nWHERE ? = hero.team_id\n2021-08-13 11:15:24,658 INFO sqlalchemy.engine.Engine [cached since 0.1924s ago] (2,)\n\nPreventers Team Heroes after commit: [\n        Hero(name='Rusty-Man', age=48, id=2, secret_name='Tommy Sharp', team_id=2),\n        Hero(name='Tarantula', age=32, id=6, secret_name='Natalia Roman-on', team_id=2),\n        Hero(name='Dr. Weird', age=36, id=7, secret_name='Steve Weird', team_id=2),\n        Hero(name='Captain North America', age=93, id=8, secret_name='Esteban Rogelios', team_id=2)\n]\n</code></pre> <p>There's no Spider-Boy after committing, so that's good. \ud83d\ude0a</p> <p>But we still have that inconsistency in that previous point above.</p> <p>If we use the objects before committing, we could end up having errors. \ud83d\ude14</p> <p>Let's fix that. \ud83e\udd13</p>"},{"location":"tutorial/relationship-attributes/back-populates/#fix-it-using-back_populates","title":"Fix It Using <code>back_populates</code>","text":"<p>That's what <code>back_populates</code> is for. \u2728</p> <p>Let's add it back:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>And we can keep the rest of the code the same:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n\n        # Code here omitted \ud83d\udc48\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n\n        # Code here omitted \ud83d\udc48\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n\n        # Code here omitted \ud83d\udc48\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Tip</p> <p>This is the same section where we updated <code>hero_spider_boy.team</code> to <code>None</code> but we haven't committed that change yet.</p> <p>The same section that caused a problem before.</p>"},{"location":"tutorial/relationship-attributes/back-populates/#review-the-result","title":"Review the Result","text":"<p>This time, SQLModel (actually SQLAlchemy) will be able to notice the change, and automatically update the list of heroes in the team, even before we commit.</p> <p>That second print would output:</p> <pre><code>Preventers Team Heroes again: [\n        Hero(name='Rusty-Man', age=48, id=2, secret_name='Tommy Sharp', team_id=2),\n        Hero(name='Tarantula', age=32, id=6, secret_name='Natalia Roman-on', team_id=2),\n        Hero(name='Dr. Weird', age=36, id=7, secret_name='Steve Weird', team_id=2),\n        Hero(name='Captain North America', age=93, id=8, secret_name='Esteban Rogelios', team_id=2)\n]\n</code></pre> <p>Notice that now Spider-Boy is not there, we fixed it with <code>back_populates</code>! \ud83c\udf89</p>"},{"location":"tutorial/relationship-attributes/back-populates/#the-value-of-back_populates","title":"The Value of <code>back_populates</code>","text":"<p>Now that you know why <code>back_populates</code> is there, let's review the exact value again.</p> <p>It's quite simple code, it's just a string, but it might be confusing to think exactly what string should go there:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>The string in <code>back_populates</code> is the name of the attribute in the other model, that will reference the current model.</p> <p></p> <p>So, in the class <code>Team</code>, we have an attribute <code>heroes</code> and we declare it with <code>Relationship(back_populates=\"team\")</code>.</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>The string in <code>back_populates=\"team\"</code> refers to the attribute <code>team</code> in the class <code>Hero</code> (the other class).</p> <p>And, in the class <code>Hero</code>, we declare an attribute <code>team</code>, and we declare it with <code>Relationship(back_populates=\"heroes\")</code>.</p> <p>So, the string <code>\"heroes\"</code> refers to the attribute <code>heroes</code> in the class <code>Team</code>.</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        hero_spider_boy = session.exec(\n            select(Hero).where(Hero.name == \"Spider-Boy\")\n        ).one()\n\n        preventers_team = session.exec(\n            select(Team).where(Team.name == \"Preventers\")\n        ).one()\n\n        print(\"Hero Spider-Boy:\", hero_spider_boy)\n        print(\"Preventers Team:\", preventers_team)\n        print(\"Preventers Team Heroes:\", preventers_team.heroes)\n\n        hero_spider_boy.team = None\n\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes again:\", preventers_team.heroes)\n\n        session.add(hero_spider_boy)\n        session.commit()\n        print(\"After committing\")\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy after commit:\", hero_spider_boy)\n\n        print(\"Preventers Team Heroes after commit:\", preventers_team.heroes)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Tip</p> <p>Each relationship attribute points to the other one, in the other model, using <code>back_populates</code>.</p> <p>Although it's simple code, it can be confusing to think about \ud83d\ude35, because the same line has concepts related to both models in multiple places:</p> <ul> <li>Just by being in the current model, the line has something to do with the current model.</li> <li>The name of the attribute is about the other model.</li> <li>The type annotation is about the other model.</li> <li>And the <code>back_populates</code> refers to an attribute in the other model, that points to the current model.</li> </ul>"},{"location":"tutorial/relationship-attributes/back-populates/#a-mental-trick-to-remember-back_populates","title":"A Mental Trick to Remember <code>back_populates</code>","text":"<p>A mental trick you can use to remember is that the string in <code>back_populates</code> is always about the current model class you are editing. \ud83e\udd13</p> <p>So, if you are in the class <code>Hero</code>, the value of <code>back_populates</code> for any relationship attribute connecting to any other table (to any other model, it could be <code>Team</code>, <code>Weapon</code>, <code>Powers</code>, etc) will still always refer to this same class.</p> <p>So, <code>back_populates</code> would most probably be something like <code>\"hero\"</code> or <code>\"heroes\"</code>.</p> <p></p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n    weapon_id: int | None = Field(default=None, foreign_key=\"weapon.id\")\n    weapon: Weapon | None = Relationship(back_populates=\"hero\")\n\n    powers: list[Power] = Relationship(back_populates=\"hero\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n    weapon_id: Optional[int] = Field(default=None, foreign_key=\"weapon.id\")\n    weapon: Optional[Weapon] = Relationship(back_populates=\"hero\")\n\n    powers: list[Power] = Relationship(back_populates=\"hero\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n    weapon_id: Optional[int] = Field(default=None, foreign_key=\"weapon.id\")\n    weapon: Optional[Weapon] = Relationship(back_populates=\"hero\")\n\n    powers: List[Power] = Relationship(back_populates=\"hero\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, SQLModel, create_engine\n\n\nclass Weapon(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n\n    hero: \"Hero\" = Relationship(back_populates=\"weapon\")\n\n\nclass Power(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n\n    hero_id: int = Field(foreign_key=\"hero.id\")\n    hero: \"Hero\" = Relationship(back_populates=\"powers\")\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n    weapon_id: int | None = Field(default=None, foreign_key=\"weapon.id\")\n    weapon: Weapon | None = Relationship(back_populates=\"hero\")\n\n    powers: list[Power] = Relationship(back_populates=\"hero\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef main():\n    create_db_and_tables()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, SQLModel, create_engine\n\n\nclass Weapon(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n\n    hero: \"Hero\" = Relationship(back_populates=\"weapon\")\n\n\nclass Power(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n\n    hero_id: int = Field(foreign_key=\"hero.id\")\n    hero: \"Hero\" = Relationship(back_populates=\"powers\")\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n    weapon_id: Optional[int] = Field(default=None, foreign_key=\"weapon.id\")\n    weapon: Optional[Weapon] = Relationship(back_populates=\"hero\")\n\n    powers: list[Power] = Relationship(back_populates=\"hero\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef main():\n    create_db_and_tables()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, SQLModel, create_engine\n\n\nclass Weapon(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n\n    hero: \"Hero\" = Relationship(back_populates=\"weapon\")\n\n\nclass Power(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n\n    hero_id: int = Field(foreign_key=\"hero.id\")\n    hero: \"Hero\" = Relationship(back_populates=\"powers\")\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n    weapon_id: Optional[int] = Field(default=None, foreign_key=\"weapon.id\")\n    weapon: Optional[Weapon] = Relationship(back_populates=\"hero\")\n\n    powers: List[Power] = Relationship(back_populates=\"hero\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef main():\n    create_db_and_tables()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/","title":"Cascade Delete Relationships","text":"<p>What happens if we delete a team that has a relationship with heroes?</p> <p>Should those heroes be automatically deleted too? That's called a \"cascade\", because the initial deletion causes a cascade of other deletions.</p> <p>Should their <code>team_id</code> instead be set to <code>NULL</code> in the database?</p> <p>Let's see how to configure that with SQLModel.</p> <p>Info</p> <p>This feature, including <code>cascade_delete</code>, <code>ondelete</code>, and <code>passive_deletes</code>, is available since SQLModel version <code>0.0.21</code>.</p>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#initial-heroes-and-teams","title":"Initial Heroes and Teams","text":"<p>Let's say that we have these teams and heroes.</p>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#team-table","title":"Team Table","text":"id name headquarters 1 Z-Force Sister Margaret's Bar 2 Preventers Sharp Tower 3 Wakaland Wakaland Capital City"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#hero-table","title":"Hero Table","text":"id name secret_name age team_id 1 Deadpond Dive WIlson 1 2 Rusty-Man Tommy Sharp 48 2 3 Spider-Boy Pedro Parqueador 2 4 Black Lion Trevor Challa 35 3 5 Princess Sure-E Sure-E 3"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#visual-teams-and-heroes","title":"Visual Teams and Heroes","text":"<p>We could visualize them like this:</p> <pre><code>flowchart TB\n    subgraph \"Z-Force\"\n        d(\"Deadpond\")\n    end\n    subgraph \"Preventers\"\n        r(\"Rusty-Man\")\n        s(\"Spider-Boy\")\n    end\n    subgraph \"Wakaland\"\n        b(\"Black Lion\")\n        p(\"Princess Sure-E\")\n    end</code></pre>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#delete-a-team-with-heroes","title":"Delete a Team with Heroes","text":"<p>When we delete a team, we have to do something with the associated heroes.</p> <p>By default, their foreign key pointing to the team will be set to <code>NULL</code> in the database.</p> <p>But let's say we want the associated heroes to be automatically deleted.</p> <p>For example, we could delete the team <code>Wakaland</code>:</p> <pre><code>flowchart TB\n    subgraph zforce[\"Z-Force\"]\n        d(\"Deadpond\")\n    end\n    subgraph preventers[\"Preventers\"]\n        r(\"Rusty-Man\")\n        s(\"Spider-Boy\")\n    end\n    subgraph wakaland[\"Wakaland\"]\n        b(\"Black Lion\")\n        p(\"Princess Sure-E\")\n    end\n      style wakaland fill:#fee,stroke:#900</code></pre> <p>And we would want the heroes <code>Black Lion</code> and <code>Princess Sure-E</code> to be automatically deleted too.</p> <p>So we would end up with these teams and heroes:</p> <pre><code>flowchart TB\n    subgraph zforce[\"Team Z-Force\"]\n        d(\"Deadpond\")\n    end\n    subgraph preventers[\"Team Preventers\"]\n        r(\"Rusty-Man\")\n        s(\"Spider-Boy\")\n    end</code></pre>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#configure-automatic-deletion","title":"Configure Automatic Deletion","text":"<p>There are two places where this automatic deletion is configured:</p> <ul> <li>in Python code</li> <li>in the database</li> </ul>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#delete-in-python-with-cascade_delete","title":"Delete in Python with <code>cascade_delete</code>","text":"<p>When creating a <code>Relationship()</code>, we can set <code>cascade_delete=True</code>.</p> <p>This configures SQLModel to automatically delete the related records (heroes) when the initial one is deleted (a team).</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", cascade_delete=True)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", cascade_delete=True)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\", cascade_delete=True)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", cascade_delete=True)\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", ondelete=\"CASCADE\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion not found:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E not found:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", cascade_delete=True)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"CASCADE\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion not found:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E not found:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\", cascade_delete=True)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"CASCADE\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion not found:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E not found:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>With this configuration, when we delete a team, SQLModel (actually SQLAlchemy) will:</p> <ul> <li>Make sure the objects for the related records are loaded, in this case, the <code>heroes</code>. If they are not loaded, it will send a <code>SELECT</code> query to the database to get them.</li> <li>Send a <code>DELETE</code> query to the database including each related record (each hero).</li> <li>Finally, delete the initial record (the team) with another <code>DELETE</code> query.</li> </ul> <p>This way, the internal Python code will take care of deleting the related records, by emitting the necessary SQL queries for each of them.</p> <p>Tip</p> <p>The <code>cascade_delete</code> parameter is set in the <code>Relationship()</code>, on the model that doesn't have a foreign key.</p> <p>Technical Details</p> <p>Setting <code>cascade_delete=True</code> in the <code>Relationship()</code> will configure SQLAlchemy to use <code>cascade=\"all, delete-orphan\"</code>, which is the most common and useful configuration when wanting to cascade deletes.</p> <p>You can read more about it in the SQLAlchemy docs.</p>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#delete-in-the-database-with-ondelete","title":"Delete in the Database with <code>ondelete</code>","text":"<p>In the previous section we saw that using <code>cascade_delete</code> handles automatic deletions from the Python code.</p> <p>But what happens if someone interacts with the database directly, not using our code, and deletes a team with SQL?</p> <p>For those cases, we can configure the database to automatically delete the related records with the <code>ondelete</code> parameter in <code>Field()</code>.</p>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#ondelete-options","title":"<code>ondelete</code> Options","text":"<p>The <code>ondelete</code> parameter will set a SQL <code>ON DELETE</code> in the foreign key column in the database.</p> <p><code>ondelete</code> can have these values:</p> <ul> <li><code>CASCADE</code>: Automatically delete this record (hero) when the related one (team) is deleted.</li> <li><code>SET NULL</code>: Set this foreign key (<code>hero.team_id</code>) field to <code>NULL</code> when the related record is deleted.</li> <li><code>RESTRICT</code>: Prevent the deletion of this record (hero) if there is a foreign key value by raising an error.</li> </ul>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#set-ondelete-to-cascade","title":"Set <code>ondelete</code> to <code>CASCADE</code>","text":"<p>If we want to configure the database to automatically delete the related records when the parent is deleted, we can set <code>ondelete=\"CASCADE\"</code>.</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", cascade_delete=True)\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", ondelete=\"CASCADE\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", cascade_delete=True)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"CASCADE\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\", cascade_delete=True)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"CASCADE\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", cascade_delete=True)\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", ondelete=\"CASCADE\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion not found:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E not found:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", cascade_delete=True)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"CASCADE\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion not found:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E not found:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\", cascade_delete=True)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"CASCADE\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion not found:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E not found:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Now, when we create the tables in the database, the <code>team_id</code> column in the <code>Hero</code> table will have an <code>ON DELETE CASCADE</code> in its definition at the database level.</p> <p>This will configure the database to automatically delete the records (heroes) when the related record (team) is deleted.</p> <p>Tip</p> <p>The <code>ondelete</code> parameter is set in the <code>Field()</code>, on the model that has a foreign key.</p>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#using-cascade_delete-or-ondelete","title":"Using <code>cascade_delete</code> or <code>ondelete</code>","text":"<p>At this point, you might be wondering if you should use <code>cascade_delete</code> or <code>ondelete</code>. The answer is: both! \ud83e\udd13</p> <p>The <code>ondelete</code> will configure the database, in case someone interacts with it directly.</p> <p>But <code>cascade_delete</code> is still needed to tell SQLAlchemy that it should delete the Python objects in memory.</p>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#foreign-key-constraint-support","title":"Foreign Key Constraint Support","text":"<p>Some databases don't support foreign key constraints.</p> <p>For example, SQLite doesn't support them by default. They have to be manually enabled with a custom SQL command:</p> <pre><code>PRAGMA foreign_keys = ON;\n</code></pre> <p>So, in general is a good idea to have both <code>cascade_delete</code> and <code>ondelete</code> configured.</p> <p>Tip</p> <p>You will learn more about how to disable the default automatic SQLModel (SQLAlchemy) behavior and only rely on the database down below, in the section about <code>passive_deletes</code>.</p>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#cascade_delete-on-relationship-and-ondelete-on-field","title":"<code>cascade_delete</code> on <code>Relationship()</code> and <code>ondelete</code> on <code>Field()</code>","text":"<p>Just a note to remember... \ud83e\udd13</p> <ul> <li><code>ondelete</code> is put on the <code>Field()</code> with a foreign key. On the \"many\" side in \"one-to-many\" relationships.</li> </ul> <pre><code>class Hero(SQLModel, table=True):\n    ...\n\n    team_id: int Field(foreign_key=\"team.id\", ondelete=\"CASCADE\")\n</code></pre> <ul> <li><code>cascade_delete</code> is put on the <code>Relationship()</code>. Normally on the \"one\" side in \"one-to-many\" relationships, the side without a foreign key.</li> </ul> <pre><code>class Team(SQLModel, table=True):\n    ...\n\n    heroes: list[Hero] = Relationship(cascade_delete=True)\n</code></pre>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#remove-a-team-and-its-heroes","title":"Remove a Team and its Heroes","text":"<p>Now, when we delete a team, we don't need to do anything else, it's automatically going to delete its heroes.</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", cascade_delete=True)\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", ondelete=\"CASCADE\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion not found:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E not found:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", cascade_delete=True)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"CASCADE\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion not found:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E not found:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\", cascade_delete=True)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"CASCADE\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion not found:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E not found:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#confirm-heroes-are-deleted","title":"Confirm Heroes are Deleted","text":"<p>We can confirm that after deleting the team <code>Wakaland</code>, the heroes <code>Black Lion</code> and <code>Princess Sure-E</code> are also deleted.</p> <p>If we try to select them from the database, we will no longer find them.</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion not found:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E not found:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion not found:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E not found:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion not found:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E not found:\", hero)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", cascade_delete=True)\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", ondelete=\"CASCADE\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion not found:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E not found:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", cascade_delete=True)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"CASCADE\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion not found:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E not found:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\", cascade_delete=True)\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"CASCADE\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion not found:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E not found:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#run-the-program-with-cascade_deletetrue-and-ondeletecascade","title":"Run the Program with <code>cascade_delete=True</code> and <code>ondelete=\"CASCADE\"</code>","text":"<p>We can confirm everything is working by running the program.</p> <pre><code>$ python app.py\n\n// Some boilerplate and previous output omitted \ud83d\ude09\n\n// The team table is created as before\nCREATE TABLE team (\n        id INTEGER NOT NULL,\n        name VARCHAR NOT NULL,\n        headquarters VARCHAR NOT NULL,\n        PRIMARY KEY (id)\n)\n\n// The hero table is created with the ON DELETE CASCADE \ud83c\udf89\n// In SQLite, it also includes REFERENCES team (id), this is needed by SQLite to work with the ON DELETE CASCADE properly.\n// SQLAlchemy takes care of setting it up for us to make sure it works \ud83e\udd13\nCREATE TABLE hero (\n        id INTEGER NOT NULL,\n        name VARCHAR NOT NULL,\n        secret_name VARCHAR NOT NULL,\n        age INTEGER,\n        team_id INTEGER,\n        PRIMARY KEY (id),\n        FOREIGN KEY(team_id) REFERENCES team (id) ON DELETE CASCADE\n)\n\n// We select the team Wakaland\nINFO Engine SELECT team.id, team.name, team.headquarters\nFROM team\nWHERE team.name = ?\nINFO Engine [generated in 0.00014s] ('Wakaland',)\n\n// Then, because of cascade_delete, right before deleting Wakaland, SQLAlchemy loads the heroes\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age, hero.team_id AS hero_team_id\nFROM hero\nWHERE ? = hero.team_id\nINFO Engine [generated in 0.00020s] (3,)\n\n// Next, before deleting the Wakaland team, it sends a DELETE statement including each related hero: Black Lion and Princess Sure-E, with IDs 4 and 5\nINFO Engine DELETE FROM hero WHERE hero.id = ?\nINFO Engine [generated in 0.00022s] [(4,), (5,)]\n\n// After that, it will send the delete for the team Wakaland with ID 3\nINFO Engine DELETE FROM team WHERE team.id = ?\nINFO Engine [generated in 0.00017s] (3,)\n\n// Print the deleted team\nDeleted team: name='Wakaland' id=3 headquarters='Wakaland Capital City'\n\n// Finally, we try to select the heroes from Wakaland, Black Lion and Princess Sure-E and print them, but they are now deleted\nBlack Lion not found: None\nPrincess Sure-E not found: None\n</code></pre>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#ondelete-with-set-null","title":"<code>ondelete</code> with <code>SET NULL</code>","text":"<p>We can configure the database to set the foreign key (the <code>team_id</code> in the <code>hero</code> table) to <code>NULL</code> when the related record (in the <code>team</code> table) is deleted.</p> <p>In this case, the side with <code>Relationship()</code> won't have <code>cascade_delete</code>, but the side with <code>Field()</code> and a <code>foreign_key</code> will have <code>ondelete=\"SET NULL\"</code>.</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"SET NULL\"\n    )\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"SET NULL\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"SET NULL\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"SET NULL\"\n    )\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion has no team:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E has no team:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"SET NULL\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion has no team:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E has no team:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"SET NULL\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion has no team:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E has no team:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>The configuration above is setting the <code>team_id</code> column from the <code>Hero</code> table to have an <code>ON DELETE SET NULL</code>.</p> <p>This way, when someone deletes a team from the database using SQL directly, the database will go to the heroes for that team and set <code>team_id</code> to <code>NULL</code> (if the database supports it).</p> <p>Tip</p> <p>The foreign key should allow <code>None</code> values (<code>NULL</code> in the database), otherwise you would end up having an Integrity Error by violating the <code>NOT NULL</code> constraint.</p> <p>So <code>team_id</code> needs to have a type with <code>None</code>, like:</p> <pre><code>team_id: int | None\n</code></pre>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#not-using-ondeleteset-null","title":"Not Using <code>ondelete=\"SET NULL\"</code>","text":"<p>What happens if you don't use <code>ondelete=\"SET NULL\"</code>, don't set anything on <code>cascade_delete</code>, and delete a team?</p> <p>The default behavior is that SQLModel (actually SQLAlchemy) will go to the heroes and set their <code>team_id</code> to <code>NULL</code> from the Python code.</p> <p>So, by default, those <code>team_id</code> fields will be set to <code>NULL</code>.</p> <p>But if someone goes to the database and manually deletes a team, the heroes could end up with a <code>team_id</code> pointing to a non-existing team.</p> <p>Adding the <code>ondelete=\"SET NULL\"</code> configures the database itself to also set those fields to <code>NULL</code>.</p> <p>But if you delete a team from code, by default, SQLModel (actually SQLAlchemy) will update those <code>team_id</code> fields to <code>NULL</code> even before the database <code>SET NULL</code> takes effect.</p>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#removing-a-team-with-set-null","title":"Removing a Team with <code>SET NULL</code>","text":"<p>Removing a team has the same code as before, the only thing that changes is the configuration underneath in the database.</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"SET NULL\"\n    )\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion has no team:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E has no team:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"SET NULL\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion has no team:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E has no team:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"SET NULL\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion has no team:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E has no team:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>The result would be these tables.</p>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#team-table-after-set-null","title":"Team Table after <code>SET NULL</code>","text":"id name headquarters 1 Z-Force Sister Margaret's Bar 2 Preventers Sharp Tower"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#hero-table-after-set-null","title":"Hero Table after <code>SET NULL</code>","text":"id name secret_name age team_id 1 Deadpond Dive WIlson 1 2 Rusty-Man Tommy Sharp 48 2 3 Spider-Boy Pedro Parqueador 2 4 Black Lion Trevor Challa 35 NULL 5 Princess Sure-E Sure-E NULL"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#visual-teams-and-heroes-after-set-null","title":"Visual Teams and Heroes after <code>SET NULL</code>","text":"<p>We could visualize them like this:</p> <pre><code>flowchart TB\n    subgraph \"Z-Force\"\n        d(\"Deadpond\")\n    end\n    subgraph \"Preventers\"\n        r(\"Rusty-Man\")\n        s(\"Spider-Boy\")\n    end\n    b(\"Black Lion\")\n    p(\"Princess Sure-E\")</code></pre>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#run-the-program-with-set-null","title":"Run the program with <code>SET NULL</code>","text":"<p>Let's confirm it all works by running the program now:</p> <pre><code>$ python app.py\n\n// Some boilerplate and previous output omitted \ud83d\ude09\n\n// The hero table is created with the ON DELETE SET NULL \ud83c\udf89\n// In SQLite, it also includes: REFERENCES team (id). This REFERENCES is needed by SQLite to work with the ON DELETE CASCADE properly.\n// SQLModel with SQLAlchemy takes care of setting it up for us to make sure it works \ud83e\udd13\nCREATE TABLE hero (\n        id INTEGER NOT NULL,\n        name VARCHAR NOT NULL,\n        secret_name VARCHAR NOT NULL,\n        age INTEGER,\n        team_id INTEGER,\n        PRIMARY KEY (id),\n        FOREIGN KEY(team_id) REFERENCES team (id) ON DELETE SET NULL\n)\n\n// We select the team Wakaland\nINFO Engine SELECT team.id, team.name, team.headquarters\nFROM team\nWHERE team.id = ?\nINFO Engine [generated in 0.00010s] (3,)\nTeam Wakaland: id=3 name='Wakaland' headquarters='Wakaland Capital City'\n\n// Then, right before deleting Wakaland, the heroes are loaded automatically\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age, hero.team_id AS hero_team_id\nFROM hero\nWHERE ? = hero.team_id\nINFO Engine [generated in 0.00020s] (3,)\n\n// Next, before deleting the Wakaland team, it sends an UPDATE statement including each related hero: Black Lion and Princess Sure-E, with IDs 4 and 5, to set their team_id to NULL. This is not the SET NULL we added, this is just the default SQLModel (SQLAlchemy) behavior.\nINFO Engine UPDATE hero SET team_id=? WHERE hero.id = ?\nINFO Engine [generated in 0.00009s] [(None, 4), (None, 5)]\n\n// After that, it will send the delete for the team Wakaland with ID 3\nINFO Engine DELETE FROM team WHERE team.id = ?\nINFO Engine [generated in 0.00017s] (3,)\n\n// Print the deleted team\nDeleted team: name='Wakaland' id=3 headquarters='Wakaland Capital City'\n\n// Finally, we select the heroes Black Lion and Princess Sure-E and print them, they no longer have a team\nBlack Lion has no team: age=35 id=4 name='Black Lion' secret_name='Trevor Challa' team_id=None\nPrincess Sure-E has no team: age=None id=5 name='Princess Sure-E' secret_name='Sure-E' team_id=None\n</code></pre> <p>The team <code>Wakaland</code> was deleted and all of its heroes were left without a team, or in other words, with their <code>team_id</code> set to <code>NULL</code>, but still kept in the database! \ud83e\udd13</p>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#let-the-database-handle-it-with-passive_deletes","title":"Let the Database Handle it with <code>passive_deletes</code>","text":"<p>In the previous examples we configured <code>ondelete</code> with <code>CASCADE</code> and <code>SET NULL</code> to configure the database to handle the deletion of related records automatically. But we actually never used that functionality ourselves, because SQLModel (SQLAlchemy) by default loads the related records and deletes them or updates them with NULL before sending the <code>DELETE</code> for the team.</p> <p>If you know your database would be able to correctly handle the deletes or updates on its own, just with <code>ondelete=\"CASCADE\"</code> or <code>ondelete=\"SET NULL\"</code>, you can use <code>passive_deletes=\"all\"</code> in the <code>Relationship()</code> to tell SQLModel (actually SQLAlchemy) to not delete or update those records (for heroes) before sending the <code>DELETE</code> for the team.</p>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#enable-foreign-key-support-in-sqlite","title":"Enable Foreign Key Support in SQLite","text":"<p>To be able to test this out with SQLite, we first need to enable foreign key support.</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n    with engine.connect() as connection:\n        connection.execute(text(\"PRAGMA foreign_keys=ON\"))  # for SQLite only\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n    with engine.connect() as connection:\n        connection.execute(text(\"PRAGMA foreign_keys=ON\"))  # for SQLite only\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n    with engine.connect() as connection:\n        connection.execute(text(\"PRAGMA foreign_keys=ON\"))  # for SQLite only\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select, text\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", passive_deletes=\"all\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"SET NULL\"\n    )\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n    with engine.connect() as connection:\n        connection.execute(text(\"PRAGMA foreign_keys=ON\"))  # for SQLite only\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion has no team:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E has no team:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select, text\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", passive_deletes=\"all\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"SET NULL\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n    with engine.connect() as connection:\n        connection.execute(text(\"PRAGMA foreign_keys=ON\"))  # for SQLite only\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion has no team:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E has no team:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select, text\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\", passive_deletes=\"all\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"SET NULL\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n    with engine.connect() as connection:\n        connection.execute(text(\"PRAGMA foreign_keys=ON\"))  # for SQLite only\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion has no team:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E has no team:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Info</p> <p>You can learn more about SQLite, foreign keys, and this SQL command on the SQLAlchemy docs.</p>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#use-passive_deletesall","title":"Use <code>passive_deletes=\"all\"</code>","text":"<p>Now let's update the table model for <code>Team</code> to use <code>passive_deletes=\"all\"</code> in the <code>Relationship()</code> for heroes.</p> <p>We will also use <code>ondelete=\"SET NULL\"</code> in the <code>Hero</code> model table, in the foreign key <code>Field()</code> for the <code>team_id</code> to make the database set those fields to <code>NULL</code> automatically.</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select, text\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", passive_deletes=\"all\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"SET NULL\"\n    )\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select, text\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", passive_deletes=\"all\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"SET NULL\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select, text\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\", passive_deletes=\"all\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"SET NULL\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select, text\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", passive_deletes=\"all\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"SET NULL\"\n    )\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n    with engine.connect() as connection:\n        connection.execute(text(\"PRAGMA foreign_keys=ON\"))  # for SQLite only\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion has no team:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E has no team:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select, text\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", passive_deletes=\"all\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"SET NULL\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n    with engine.connect() as connection:\n        connection.execute(text(\"PRAGMA foreign_keys=ON\"))  # for SQLite only\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion has no team:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E has no team:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select, text\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\", passive_deletes=\"all\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"SET NULL\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n    with engine.connect() as connection:\n        connection.execute(text(\"PRAGMA foreign_keys=ON\"))  # for SQLite only\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion has no team:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E has no team:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#run-the-program-with-passive_deletes","title":"Run the Program with <code>passive_deletes</code>","text":"<p>Now, if we run the program, we will see that SQLModel (SQLAlchemy) is no longer loading and updating the heroes, it just sends the <code>DELETE</code> for the team.</p> <pre><code>$ python app.py\n\n// Some boilerplate and previous output omitted \ud83d\ude09\n\n// The hero table is created with the ON DELETE SET NULL as before\nCREATE TABLE hero (\n        id INTEGER NOT NULL,\n        name VARCHAR NOT NULL,\n        secret_name VARCHAR NOT NULL,\n        age INTEGER,\n        team_id INTEGER,\n        PRIMARY KEY (id),\n        FOREIGN KEY(team_id) REFERENCES team (id) ON DELETE SET NULL\n)\n\n// For SQLite, we also send the custom command to enable foreign key support\nINFO Engine PRAGMA foreign_keys=ON\n\n// We select and print the team Wakaland\nTeam Wakaland: id=3 name='Wakaland' headquarters='Wakaland Capital City'\n\n// We won't see another SELECT for the heroes, nor an UPDATE or DELETE. SQLModel (with SQLAlchemy) won't try to load and update (or delete) the related records for heroes, it will just send the DELETE for the team right away.\nINFO Engine DELETE FROM team WHERE team.id = ?\nINFO Engine [generated in 0.00013s] (3,)\n\n// At this point, because we enabled foreign key support for SQLite, the database will take care of updating the records for heroes automatically, setting their team_id to NULL\n\n// Print the deleted team\nDeleted team: name='Wakaland' id=3 headquarters='Wakaland Capital City'\n\n// Finally, we select the heroes Black Lion and Princess Sure-E and print them, they no longer have a team\nBlack Lion has no team: age=35 id=4 name='Black Lion' secret_name='Trevor Challa' team_id=None\nPrincess Sure-E has no team: age=None id=5 name='Princess Sure-E' secret_name='Sure-E' team_id=None\n</code></pre>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#ondelete-with-restrict","title":"<code>ondelete</code> with <code>RESTRICT</code>","text":"<p>We can also configure the database to prevent the deletion of a record (a team) if there are related records (heroes).</p> <p>In this case, when someone attempts to delete a team with heroes in it, the database will raise an error.</p> <p>And because this is configured in the database, it will happen even if someone interacts with the database directly using SQL (if the database supports it).</p> <p>Tip</p> <p>For SQLite, this also needs enabling foreign key support.</p>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#enable-foreign-key-support-in-sqlite-for-restrict","title":"Enable Foreign Key Support in SQLite for <code>RESTRICT</code>","text":"<p>As <code>ondelete=\"RESTRICT\"</code> is mainly a database-level constraint, let's enable foreign key support in SQLite first to be able to test it.</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n    with engine.connect() as connection:\n        connection.execute(text(\"PRAGMA foreign_keys=ON\"))  # for SQLite only\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n    with engine.connect() as connection:\n        connection.execute(text(\"PRAGMA foreign_keys=ON\"))  # for SQLite only\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n    with engine.connect() as connection:\n        connection.execute(text(\"PRAGMA foreign_keys=ON\"))  # for SQLite only\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select, text\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", passive_deletes=\"all\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"RESTRICT\"\n    )\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n    with engine.connect() as connection:\n        connection.execute(text(\"PRAGMA foreign_keys=ON\"))  # for SQLite only\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion has no team:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E has no team:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select, text\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", passive_deletes=\"all\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"RESTRICT\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n    with engine.connect() as connection:\n        connection.execute(text(\"PRAGMA foreign_keys=ON\"))  # for SQLite only\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion has no team:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E has no team:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select, text\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\", passive_deletes=\"all\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"RESTRICT\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n    with engine.connect() as connection:\n        connection.execute(text(\"PRAGMA foreign_keys=ON\"))  # for SQLite only\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion has no team:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E has no team:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#use-ondeleterestrict","title":"Use <code>ondelete=\"RESTRICT\"</code>","text":"<p>Let's set <code>ondelete=\"RESTRICT\"</code> in the foreign key <code>Field()</code> for the <code>team_id</code> in the <code>Hero</code> model table.</p> <p>And in the <code>Team</code> model table, we will use <code>passive_deletes=\"all\"</code> in the <code>Relationship()</code> for heroes, this way the default behavior of setting foreign keys from deleted models to <code>NULL</code> will be disabled, and when we try to delete a team with heroes, the database will raise an error.</p> <p>Tip</p> <p>Notice that we don't set <code>cascade_delete</code> in the <code>Team</code> model table.</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select, text\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", passive_deletes=\"all\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"RESTRICT\"\n    )\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select, text\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", passive_deletes=\"all\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"RESTRICT\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select, text\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\", passive_deletes=\"all\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"RESTRICT\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select, text\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", passive_deletes=\"all\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"RESTRICT\"\n    )\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n    with engine.connect() as connection:\n        connection.execute(text(\"PRAGMA foreign_keys=ON\"))  # for SQLite only\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion has no team:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E has no team:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select, text\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", passive_deletes=\"all\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"RESTRICT\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n    with engine.connect() as connection:\n        connection.execute(text(\"PRAGMA foreign_keys=ON\"))  # for SQLite only\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion has no team:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E has no team:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select, text\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\", passive_deletes=\"all\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"RESTRICT\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n    with engine.connect() as connection:\n        connection.execute(text(\"PRAGMA foreign_keys=ON\"))  # for SQLite only\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion has no team:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E has no team:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    delete_team()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#run-the-program-with-restrict-see-the-error","title":"Run the Program with <code>RESTRICT</code>, See the Error","text":"<p>Now, if we run the program and try to delete a team with heroes, we will see an error.</p> <pre><code>$ python app.py\n\n// Some boilerplate and previous output omitted \ud83d\ude09\n\n// The hero table is created with the ON DELETE RESTRICT\nCREATE TABLE hero (\n        id INTEGER NOT NULL,\n        name VARCHAR NOT NULL,\n        secret_name VARCHAR NOT NULL,\n        age INTEGER,\n        team_id INTEGER,\n        PRIMARY KEY (id),\n        FOREIGN KEY(team_id) REFERENCES team (id) ON DELETE RESTRICT\n)\n\n// Now, when we reach the point of deleting a team with heroes, we will see an error\nTraceback (most recent call last):\n     File \"/home/user/code...\n\nsqlite3.IntegrityError: FOREIGN KEY constraint failed\n\n// More error output here...\n\nsqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) FOREIGN KEY constraint failed\n[SQL: DELETE FROM team WHERE team.id = ?]\n[parameters: (3,)]\n</code></pre> <p>Great! The database didn't let us commit the mistake of deleting a team with heroes. \ud83e\udd13</p> <p>Tip</p> <p>If you want to test if the <code>PRAGMA foreign_keys=ON</code> is necessary, comment that line and run it again, you will not see an error. \ud83d\ude31</p> <p>The same with <code>passive_deletes=\"all\"</code>, if you comment that line, SQLModel (SQLAlchemy) will load and update the heroes before deleting the team, set their foreign key <code>team_id</code> to <code>NULL</code> and the constraint won't work as expected, you will not see an error. \ud83d\ude05</p>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#update-heroes-before-deleting-the-team","title":"Update Heroes Before Deleting the Team","text":"<p>After having the <code>ondelete=\"RESTRICT\"</code> in place, SQLite configured to support foreign keys, and <code>passive_deletes=\"all\"</code> in the <code>Relationship()</code>, if we try to delete a team with heroes, we will see an error.</p> <p>If we want to delete the team, we need to update the heroes first and set their <code>team_id</code> to <code>None</code> (or <code>NULL</code> in the database).</p> <p>By calling the method <code>.clear()</code> from a list, we remove all its items. So, by calling <code>team.heroes.clear()</code> and saving that to the database, we disassociate the heroes from the team, that will set their <code>team_id</code> to <code>None</code>.</p> <p>Tip</p> <p>Calling <code>team.heroes.clear()</code> is very similar to what SQLModel (actually SQLAlchemy) would have done if we didn't have <code>passive_deletes=\"all\"</code> configured.</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef remove_team_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        team.heroes.clear()\n        session.add(team)\n        session.commit()\n        session.refresh(team)\n        print(\"Team with removed heroes:\", team)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef remove_team_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        team.heroes.clear()\n        session.add(team)\n        session.commit()\n        session.refresh(team)\n        print(\"Team with removed heroes:\", team)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef remove_team_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        team.heroes.clear()\n        session.add(team)\n        session.commit()\n        session.refresh(team)\n        print(\"Team with removed heroes:\", team)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select, text\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", passive_deletes=\"all\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"RESTRICT\"\n    )\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n    with engine.connect() as connection:\n        connection.execute(text(\"PRAGMA foreign_keys=ON\"))  # for SQLite only\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef remove_team_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        team.heroes.clear()\n        session.add(team)\n        session.commit()\n        session.refresh(team)\n        print(\"Team with removed heroes:\", team)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion has no team:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E has no team:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    remove_team_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select, text\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\", passive_deletes=\"all\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"RESTRICT\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n    with engine.connect() as connection:\n        connection.execute(text(\"PRAGMA foreign_keys=ON\"))  # for SQLite only\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef remove_team_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        team.heroes.clear()\n        session.add(team)\n        session.commit()\n        session.refresh(team)\n        print(\"Team with removed heroes:\", team)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion has no team:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E has no team:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    remove_team_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select, text\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\", passive_deletes=\"all\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", ondelete=\"RESTRICT\"\n    )\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n    with engine.connect() as connection:\n        connection.execute(text(\"PRAGMA foreign_keys=ON\"))  # for SQLite only\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n\ndef remove_team_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        team.heroes.clear()\n        session.add(team)\n        session.commit()\n        session.refresh(team)\n        print(\"Team with removed heroes:\", team)\n\n\ndef delete_team():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Wakaland\")\n        team = session.exec(statement).one()\n        session.delete(team)\n        session.commit()\n        print(\"Deleted team:\", team)\n\n\ndef select_deleted_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Black Lion\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Black Lion has no team:\", hero)\n\n        statement = select(Hero).where(Hero.name == \"Princess Sure-E\")\n        result = session.exec(statement)\n        hero = result.first()\n        print(\"Princess Sure-E has no team:\", hero)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    remove_team_heroes()\n    delete_team()\n    select_deleted_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#run-the-program-deleting-heroes-first","title":"Run the Program Deleting Heroes First","text":"<p>Now, if we run the program and delete the heroes first, we will be able to delete the team without any issues.</p> <pre><code>$ python app.py\n\n// Some boilerplate and previous output omitted \ud83d\ude09\n\n// The hero table is created with the ON DELETE RESTRICT\nCREATE TABLE hero (\n        id INTEGER NOT NULL,\n        name VARCHAR NOT NULL,\n        secret_name VARCHAR NOT NULL,\n        age INTEGER,\n        team_id INTEGER,\n        PRIMARY KEY (id),\n        FOREIGN KEY(team_id) REFERENCES team (id) ON DELETE RESTRICT\n)\n\n// We manually disassociate the heroes from the team\nINFO Engine UPDATE hero SET team_id=? WHERE hero.id = ?\nINFO Engine [generated in 0.00008s] [(None, 4), (None, 5)]\n\n// We print the team from which we removed heroes\nTeam with removed heroes: name='Wakaland' id=3 headquarters='Wakaland Capital City'\n\n// Now we can delete the team\nINFO Engine DELETE FROM team WHERE team.id = ?\nINFO Engine [generated in 0.00008s] (3,)\nINFO Engine COMMIT\nDeleted team: name='Wakaland' id=3 headquarters='Wakaland Capital City'\n\n// The heroes Black Lion and Princess Sure-E are no longer associated with the team\nBlack Lion has no team: secret_name='Trevor Challa' name='Black Lion' team_id=None age=35 id=4\nPrincess Sure-E has no team: secret_name='Sure-E' name='Princess Sure-E' team_id=None age=None id=5\n</code></pre>"},{"location":"tutorial/relationship-attributes/cascade-delete-relationships/#conclusion","title":"Conclusion","text":"<p>In many cases, you don't really need to configure anything. \ud83d\ude0e</p> <p>In some cases, when you want to cascade the delete of a record to its related records automatically (delete a team with its heroes), you can:</p> <ul> <li>Use <code>cascade_delete=True</code> in the <code>Relationship()</code> on the side without a foreign key</li> <li>And use <code>ondelete=\"CASCADE\"</code> in the <code>Field()</code> with the foreign key</li> </ul> <p>That will cover most of the use cases. \ud83d\ude80</p> <p>And if you need something else, you can refer the additional options described above. \ud83e\udd13</p>"},{"location":"tutorial/relationship-attributes/create-and-update-relationships/","title":"Create and Update Relationships","text":"<p>Let's see now how to create data with relationships using these new relationship attributes. \u2728</p>"},{"location":"tutorial/relationship-attributes/create-and-update-relationships/#create-instances-with-fields","title":"Create Instances with Fields","text":"<p>Let's check the old code we used to create some heroes and teams:</p> Python 3.10+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>There are several things to notice here.</p> <p>First, we create some <code>Team</code> instance objects. We want to use the IDs of these teams when creating the <code>Hero</code> instances, in the <code>team_id</code> field.</p> <p>But model instances don't have an ID generated by the database until we <code>add</code> and <code>commit</code> them to the session. Before that, they are just <code>None</code>, and we want to use the actual IDs.</p> <p>So, we have to <code>add</code> them and <code>commit</code> the session first, before we start creating the <code>Hero</code> instances, to be able to use their IDs.</p> <p>Then, we use those IDs when creating the <code>Hero</code> instances. We <code>add</code> the new heroes to the session, and then we <code>commit</code> them.</p> <p>So, we are committing twice. And we have to remember to <code>add</code> some things first, and then <code>commit</code>, and do all that in the right order, otherwise we could end up using a <code>team.id</code> that is currently <code>None</code> because it hasn't been saved.</p> <p>This is the first area where these relationship attributes can help. \ud83e\udd13</p>"},{"location":"tutorial/relationship-attributes/create-and-update-relationships/#create-instances-with-relationship-attributes","title":"Create Instances with Relationship Attributes","text":"<p>Now let's do all that, but this time using the new, shiny <code>Relationship</code> attributes:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Now we can create the <code>Team</code> instances and pass them directly to the new <code>team</code> argument when creating the <code>Hero</code> instances, as <code>team=team_preventers</code> instead of <code>team_id=team_preventers.id</code>.</p> <p>And thanks to SQLAlchemy and how it works underneath, these teams don't even need to have an ID yet, but because we are assigning the whole object to each hero, those teams will be automatically created in the database, the automatic ID will be generated, and will be set in the <code>team_id</code> column for each of the corresponding hero rows.</p> <p>In fact, now we don't even have to put the teams explicitly in the session with <code>session.add(team)</code>, because these <code>Team</code> instances are already associated with heroes that we do <code>add</code> to the session.</p> <p>SQLAlchemy knows that it also has to include those teams in the next commit to be able to save the heroes correctly.</p> <p>And then, as you can see, we only have to do one <code>commit()</code>.</p>"},{"location":"tutorial/relationship-attributes/create-and-update-relationships/#assign-a-relationship","title":"Assign a Relationship","text":"<p>The same way we could assign an integer with a <code>team.id</code> to a <code>hero.team_id</code>, we can also assign the <code>Team</code> instance to the <code>hero.team</code>:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n\n        # Previous code here omitted \ud83d\udc48\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n\n        # Previous code here omitted \ud83d\udc48\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n\n        # Previous code here omitted \ud83d\udc48\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/relationship-attributes/create-and-update-relationships/#create-a-team-with-heroes","title":"Create a Team with Heroes","text":"<p>Before, we created some <code>Team</code> instances and passed them in the <code>team=</code> argument when creating <code>Hero</code> instances.</p> <p>We could also create the <code>Hero</code> instances first, and then pass them in the <code>heroes=</code> argument that takes a list, when creating a <code>Team</code> instance:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n\n        # Previous code here omitted \ud83d\udc48\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n\n        # Previous code here omitted \ud83d\udc48\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n\n        # Previous code here omitted \ud83d\udc48\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Here we create two heroes first, Black Lion and Princess Sure-E, and then we pass them in the <code>heroes</code> argument.</p> <p>Notice that, the same as before, we only have to <code>add</code> the <code>Team</code> instance to the session, and because the heroes are connected to it, they will be automatically saved too when we <code>commit</code>.</p>"},{"location":"tutorial/relationship-attributes/create-and-update-relationships/#include-relationship-objects-in-the-many-side","title":"Include Relationship Objects in the Many Side","text":"<p>We said before that this is a many-to-one relationship, because there can be many heroes that belong to one team.</p> <p>We can also connect data with these relationship attributes on the many side.</p> <p>As the attribute <code>team.heroes</code> behaves like a list, we can simply append to it.</p> <p>Let's create some more heroes and add them to the <code>team_preventers.heroes</code> list attribute:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n\n        # Previous code here omitted \ud83d\udc48\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n\n        # Previous code here omitted \ud83d\udc48\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef create_heroes():\n    with Session(engine) as session:\n\n        # Previous code here omitted \ud83d\udc48\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>The attribute <code>team_preventers.heroes</code> behaves like a list. But it's a special type of list, because when we modify it adding heroes to it, SQLModel (actually SQLAlchemy) keeps track of the necessary changes to be done in the database.</p> <p>Then we <code>add()</code> the team to the session and <code>commit()</code> it.</p> <p>And in the same way as before, we don't even have to <code>add()</code> the independent heroes to the session, because they are connected to the team.</p>"},{"location":"tutorial/relationship-attributes/create-and-update-relationships/#recap","title":"Recap","text":"<p>We can use common Python objects and attributes to create and update data connections with these relationship attributes. \ud83d\ude0e</p> <p>Next we'll see how to use these relationship attributes to read connected data. \ud83e\udd1d</p>"},{"location":"tutorial/relationship-attributes/define-relationships-attributes/","title":"Define Relationships Attributes","text":"<p>Now we are finally in one of the most exciting parts of SQLModel.</p> <p>Relationship Attributes. \u2728</p> <p>We currently have a <code>team</code> table:</p> idnameheadquarters 1PreventersSharp Tower 2Z-ForceSister Margaret's Bar <p>And a <code>hero</code> table:</p> idnamesecret_nameageteam_id 1DeadpondDive Wilsonnull2 2Rusty-ManTommy Sharp481 3Spider-BoyPedro Parqueadornull1 <p>Now that you know how these tables work underneath and how the model classes represent them, it's time to add a little convenience that will make many operations in code simpler.</p>"},{"location":"tutorial/relationship-attributes/define-relationships-attributes/#declare-relationship-attributes","title":"Declare Relationship Attributes","text":"<p>Up to now, we have only used the <code>team_id</code> column to connect the tables when querying with <code>select()</code>:</p> Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.7+ <pre><code>from sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n        session.add(team_preventers)\n        session.add(team_z_force)\n        session.commit()\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\",\n            secret_name=\"Tommy Sharp\",\n            age=48,\n            team_id=team_preventers.id,\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>This is a plain field like all the others, all representing a column in the table.</p> <p>But now let's add a couple of new special attributes to these model classes, let's add <code>Relationship</code> attributes.</p> <p>First, import <code>Relationship</code> from <code>sqlmodel</code>:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Next, use that <code>Relationship</code> to declare a new attribute in the model classes:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/relationship-attributes/define-relationships-attributes/#what-are-these-relationship-attributes","title":"What Are These Relationship Attributes","text":"<p>These new attributes are not the same as fields, they don't represent a column directly in the database, and their value is not a singular value like an integer. Their value is the actual entire object that is related.</p> <p>So, in the case of a <code>Hero</code> instance, if you call <code>hero.team</code>, you will get the entire <code>Team</code> instance object that this hero belongs to. \u2728</p> <p>For example, you could check if a <code>hero</code> belongs to any <code>team</code> (if <code>.team</code> is not <code>None</code>) and then print the team's <code>name</code>:</p> <pre><code>if hero.team:\n    print(hero.team.name)\n</code></pre>"},{"location":"tutorial/relationship-attributes/define-relationships-attributes/#optional-relationship-attributes","title":"Optional Relationship Attributes","text":"<p>Notice that in the <code>Hero</code> class, the type annotation for <code>team</code> is <code>Optional[Team]</code>.</p> <p>This means that this attribute could be <code>None</code>, or it could be a full <code>Team</code> object.</p> <p>This is because the related <code>team_id</code> could also be <code>None</code> (or <code>NULL</code> in the database).</p> <p>If it was required for a <code>Hero</code> instance to belong to a <code>Team</code>, then the <code>team_id</code> would be <code>int</code> instead of <code>Optional[int]</code>, its <code>Field</code> would be <code>Field(foreign_key=\"team.id\")</code> instead of <code>Field(default=None, foreign_key=\"team.id\")</code> and the <code>team</code> attribute would be a <code>Team</code> instead of <code>Optional[Team]</code>.</p>"},{"location":"tutorial/relationship-attributes/define-relationships-attributes/#relationship-attributes-with-lists","title":"Relationship Attributes With Lists","text":"<p>And in the <code>Team</code> class, the <code>heroes</code> attribute is annotated as a list of <code>Hero</code> objects, because that's what it will have.</p> <p>SQLModel (actually SQLAlchemy) is smart enough to know that the relationship is established by the <code>team_id</code>, as that's the foreign key that points from the <code>hero</code> table to the <code>team</code> table, so we don't have to specify that explicitly here.</p> <p>Tip</p> <p>There's a couple of things we'll check again in some of the next chapters, about the <code>List[\"Hero\"]</code> and the <code>back_populates</code>.</p> <p>But for now, let's first see how to use these relationship attributes.</p>"},{"location":"tutorial/relationship-attributes/define-relationships-attributes/#next-steps","title":"Next Steps","text":"<p>Now let's see some real examples of how to use these new relationship attributes in the next chapters. \u2728</p>"},{"location":"tutorial/relationship-attributes/read-relationships/","title":"Read Relationships","text":"<p>Now that we know how to connect data using relationship Attributes, let's see how to get and read the objects from a relationship.</p>"},{"location":"tutorial/relationship-attributes/read-relationships/#select-a-hero","title":"Select a Hero","text":"<p>First, add a function <code>select_heroes()</code> where we get a hero to start working with, and add that function to the <code>main()</code> function:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n# Previous code here omitted \ud83d\udc48\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n# Previous code here omitted \ud83d\udc48\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n# Previous code here omitted \ud83d\udc48\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        statement = select(Team).where(Team.id == hero_spider_boy.team_id)\n        result = session.exec(statement)\n        team = result.first()\n        print(\"Spider-Boy's team:\", team)\n\n        print(\"Spider-Boy's team again:\", hero_spider_boy.team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        statement = select(Team).where(Team.id == hero_spider_boy.team_id)\n        result = session.exec(statement)\n        team = result.first()\n        print(\"Spider-Boy's team:\", team)\n\n        print(\"Spider-Boy's team again:\", hero_spider_boy.team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        statement = select(Team).where(Team.id == hero_spider_boy.team_id)\n        result = session.exec(statement)\n        team = result.first()\n        print(\"Spider-Boy's team:\", team)\n\n        print(\"Spider-Boy's team again:\", hero_spider_boy.team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/relationship-attributes/read-relationships/#select-the-related-team-old-way","title":"Select the Related Team - Old Way","text":"<p>Now that we have a hero, we can get the team this hero belongs to.</p> <p>With what we have learned up to now, we could use a <code>select()</code> statement, then execute it with <code>session.exec()</code>, and then get the <code>.first()</code> result, for example:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        statement = select(Team).where(Team.id == hero_spider_boy.team_id)\n        result = session.exec(statement)\n        team = result.first()\n        print(\"Spider-Boy's team:\", team)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        statement = select(Team).where(Team.id == hero_spider_boy.team_id)\n        result = session.exec(statement)\n        team = result.first()\n        print(\"Spider-Boy's team:\", team)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        statement = select(Team).where(Team.id == hero_spider_boy.team_id)\n        result = session.exec(statement)\n        team = result.first()\n        print(\"Spider-Boy's team:\", team)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        statement = select(Team).where(Team.id == hero_spider_boy.team_id)\n        result = session.exec(statement)\n        team = result.first()\n        print(\"Spider-Boy's team:\", team)\n\n        print(\"Spider-Boy's team again:\", hero_spider_boy.team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        statement = select(Team).where(Team.id == hero_spider_boy.team_id)\n        result = session.exec(statement)\n        team = result.first()\n        print(\"Spider-Boy's team:\", team)\n\n        print(\"Spider-Boy's team again:\", hero_spider_boy.team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        statement = select(Team).where(Team.id == hero_spider_boy.team_id)\n        result = session.exec(statement)\n        team = result.first()\n        print(\"Spider-Boy's team:\", team)\n\n        print(\"Spider-Boy's team again:\", hero_spider_boy.team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/relationship-attributes/read-relationships/#get-relationship-team-new-way","title":"Get Relationship Team - New Way","text":"<p>But now that we have the relationship attributes, we can just access them, and SQLModel (actually SQLAlchemy) will go and fetch the corresponding data from the database, and make it available in the attribute. \u2728</p> <p>So, the highlighted block above, has the same results as the block below:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        # Code from the previous example omitted \ud83d\udc48\n\n        print(\"Spider-Boy's team again:\", hero_spider_boy.team)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        # Code from the previous example omitted \ud83d\udc48\n\n        print(\"Spider-Boy's team again:\", hero_spider_boy.team)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        # Code from the previous example omitted \ud83d\udc48\n\n        print(\"Spider-Boy's team again:\", hero_spider_boy.team)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        statement = select(Team).where(Team.id == hero_spider_boy.team_id)\n        result = session.exec(statement)\n        team = result.first()\n        print(\"Spider-Boy's team:\", team)\n\n        print(\"Spider-Boy's team again:\", hero_spider_boy.team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        statement = select(Team).where(Team.id == hero_spider_boy.team_id)\n        result = session.exec(statement)\n        team = result.first()\n        print(\"Spider-Boy's team:\", team)\n\n        print(\"Spider-Boy's team again:\", hero_spider_boy.team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        statement = select(Team).where(Team.id == hero_spider_boy.team_id)\n        result = session.exec(statement)\n        team = result.first()\n        print(\"Spider-Boy's team:\", team)\n\n        print(\"Spider-Boy's team again:\", hero_spider_boy.team)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Tip</p> <p>The automatic data fetching will work as long as the starting object (in this case the <code>Hero</code>) is associated with an open session.</p> <p>For example, here, inside a <code>with</code> block with a <code>Session</code> object.</p>"},{"location":"tutorial/relationship-attributes/read-relationships/#get-a-list-of-relationship-objects","title":"Get a List of Relationship Objects","text":"<p>And the same way, when we are working on the many side of the one-to-many relationship, we can get a list of of the related objects just by accessing the relationship attribute:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        hero_spider_boy.team = None\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        hero_spider_boy.team = None\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        hero_spider_boy.team = None\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>That would print a list with all the heroes in the Preventers team:</p> <pre><code>$ python app.py\n\n// Automatically fetch the heroes\nINFO Engine SELECT hero.id AS hero_id, hero.name AS hero_name, hero.secret_name AS hero_secret_name, hero.age AS hero_age, hero.team_id AS hero_team_id\nFROM hero\nWHERE ? = hero.team_id\nINFO Engine [cached since 0.8774s ago] (2,)\n\n// Print the list of Preventers\nPreventers heroes: [\n    Hero(name='Rusty-Man', age=48, id=2, secret_name='Tommy Sharp', team_id=2),\n    Hero(name='Spider-Boy', age=None, id=3, secret_name='Pedro Parqueador', team_id=2),\n    Hero(name='Tarantula', age=32, id=6, secret_name='Natalia Roman-on', team_id=2),\n    Hero(name='Dr. Weird', age=36, id=7, secret_name='Steve Weird', team_id=2),\n    Hero(name='Captain North America', age=93, id=8, secret_name='Esteban Rogelios', team_id=2)\n]\n</code></pre>"},{"location":"tutorial/relationship-attributes/read-relationships/#recap","title":"Recap","text":"<p>With relationship attributes you can use the power of common Python objects to easily access related data from the database. \ud83d\ude0e</p>"},{"location":"tutorial/relationship-attributes/remove-relationships/","title":"Remove Relationships","text":"<p>Now let's say that Spider-Boy tells Rusty-Man something like:</p> <p>I don't feel so good Mr. Sharp</p> <p>And then for some reason needs to leave the Preventers for some years. \ud83d\ude2d</p> <p>We can remove the relationship by setting it to <code>None</code>, the same as with the <code>team_id</code>, it also works with the new relationship attribute <code>.team</code>:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        hero_spider_boy.team = None\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        hero_spider_boy.team = None\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        hero_spider_boy.team = None\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        hero_spider_boy.team = None\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        hero_spider_boy.team = None\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        hero_spider_boy.team = None\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>And of course, we should remember to add this <code>update_heroes()</code> function to <code>main()</code> so that it runs when we call this program from the command line:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code># Code above omitted \ud83d\udc46\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code># Code above omitted \ud83d\udc46\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        hero_spider_boy.team = None\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        hero_spider_boy.team = None\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n        session.refresh(hero_spider_boy)\n        print(\"Updated hero:\", hero_spider_boy)\n\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\n        team_wakaland = Team(\n            name=\"Wakaland\",\n            headquarters=\"Wakaland Capital City\",\n            heroes=[hero_black_lion, hero_sure_e],\n        )\n        session.add(team_wakaland)\n        session.commit()\n        session.refresh(team_wakaland)\n        print(\"Team Wakaland:\", team_wakaland)\n\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\n        hero_cap = Hero(\n            name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93\n        )\n\n        team_preventers.heroes.append(hero_tarantula)\n        team_preventers.heroes.append(hero_dr_weird)\n        team_preventers.heroes.append(hero_cap)\n        session.add(team_preventers)\n        session.commit()\n        session.refresh(hero_tarantula)\n        session.refresh(hero_dr_weird)\n        session.refresh(hero_cap)\n        print(\"Preventers new hero:\", hero_tarantula)\n        print(\"Preventers new hero:\", hero_dr_weird)\n        print(\"Preventers new hero:\", hero_cap)\n\n\ndef select_heroes():\n    with Session(engine) as session:\n        statement = select(Team).where(Team.name == \"Preventers\")\n        result = session.exec(statement)\n        team_preventers = result.one()\n\n        print(\"Preventers heroes:\", team_preventers.heroes)\n\n\ndef update_heroes():\n    with Session(engine) as session:\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n        result = session.exec(statement)\n        hero_spider_boy = result.one()\n\n        hero_spider_boy.team = None\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_spider_boy)\n        print(\"Spider-Boy without team:\", hero_spider_boy)\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n    select_heroes()\n    update_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorial/relationship-attributes/remove-relationships/#recap","title":"Recap","text":"<p>This chapter was too short for a recap, wasn't it? \ud83e\udd14</p> <p>Anyway, relationship attributes make it easy and intuitive to work with relationships stored in the database. \ud83c\udf89</p>"},{"location":"tutorial/relationship-attributes/type-annotation-strings/","title":"Type annotation strings","text":""},{"location":"tutorial/relationship-attributes/type-annotation-strings/#about-the-string-in-listhero","title":"About the String in <code>List[\"Hero\"]</code>","text":"<p>In the first Relationship attribute, we declare it with <code>List[\"Hero\"]</code>, putting the <code>Hero</code> in quotes instead of just normally there:</p> Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+Python 3.9+Python 3.7+ <pre><code>from sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\n    team: Team | None = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>from typing import List, Optional\n\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine\n\n\nclass Team(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    headquarters: str\n\n    heroes: List[\"Hero\"] = Relationship(back_populates=\"team\")\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n    team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\")\n    team: Optional[Team] = Relationship(back_populates=\"heroes\")\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef create_heroes():\n    with Session(engine) as session:\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\n\n        hero_deadpond = Hero(\n            name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force\n        )\n        hero_rusty_man = Hero(\n            name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers\n        )\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\n        session.add(hero_deadpond)\n        session.add(hero_rusty_man)\n        session.add(hero_spider_boy)\n        session.commit()\n\n        session.refresh(hero_deadpond)\n        session.refresh(hero_rusty_man)\n        session.refresh(hero_spider_boy)\n\n        print(\"Created hero:\", hero_deadpond)\n        print(\"Created hero:\", hero_rusty_man)\n        print(\"Created hero:\", hero_spider_boy)\n\n        hero_spider_boy.team = team_preventers\n        session.add(hero_spider_boy)\n        session.commit()\n\n\ndef main():\n    create_db_and_tables()\n    create_heroes()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>What's that about? Can't we just write it normally as <code>List[Hero]</code>?</p> <p>By that point, in that line in the code, the Python interpreter doesn't know of any class <code>Hero</code>, and if we put it just there, it would try to find it unsuccessfully, and then fail. \ud83d\ude2d</p> <p>But by putting it in quotes, in a string, the interpreter sees it as just a string with the text <code>\"Hero\"</code> inside.</p> <p>But the editor and other tools can see that the string is actually a type annotation inside, and provide all the autocompletion, type checks, etc. \ud83c\udf89</p> <p>And of course, SQLModel can also understand it in the string correctly. \u2728</p> <p>That is actually part of Python, it's the current official solution to handle it.</p> <p>Info</p> <p>There's a lot of work going on in Python itself to make that simpler and more intuitive, and find ways to make it possible to not wrap the class in a string.</p>"}]}